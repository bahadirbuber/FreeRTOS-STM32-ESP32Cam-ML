
RTOS_ML_SPI_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010594  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006e1c0  08110840  08110840  00020840  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0817ea00  0817ea00  0008ea00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0817ea08  0817ea08  0008ea08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0817ea0c  0817ea0c  0008ea0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000073dc  10000000  0817ea10  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00038c48  100073dc  08185dec  000973dc  2**2
                  ALLOC
  8 ._user_heap_stack 00001004  10040024  08185dec  000a0024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000973dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0009740c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001796d  00000000  00000000  0009744f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b68  00000000  00000000  000aedbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d78  00000000  00000000  000b1928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a36  00000000  00000000  000b26a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c0d2  00000000  00000000  000b30d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014f59  00000000  00000000  000ef1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018cd6f  00000000  00000000  00104101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003fd4  00000000  00000000  00290e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  00294e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100073dc 	.word	0x100073dc
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811081c 	.word	0x0811081c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100073e0 	.word	0x100073e0
 81002dc:	0811081c 	.word	0x0811081c

081002e0 <__aeabi_drsub>:
 81002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002e4:	e002      	b.n	81002ec <__adddf3>
 81002e6:	bf00      	nop

081002e8 <__aeabi_dsub>:
 81002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002ec <__adddf3>:
 81002ec:	b530      	push	{r4, r5, lr}
 81002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002f6:	ea94 0f05 	teq	r4, r5
 81002fa:	bf08      	it	eq
 81002fc:	ea90 0f02 	teqeq	r0, r2
 8100300:	bf1f      	itttt	ne
 8100302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100306:	ea55 0c02 	orrsne.w	ip, r5, r2
 810030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100312:	f000 80e2 	beq.w	81004da <__adddf3+0x1ee>
 8100316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810031e:	bfb8      	it	lt
 8100320:	426d      	neglt	r5, r5
 8100322:	dd0c      	ble.n	810033e <__adddf3+0x52>
 8100324:	442c      	add	r4, r5
 8100326:	ea80 0202 	eor.w	r2, r0, r2
 810032a:	ea81 0303 	eor.w	r3, r1, r3
 810032e:	ea82 0000 	eor.w	r0, r2, r0
 8100332:	ea83 0101 	eor.w	r1, r3, r1
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	2d36      	cmp	r5, #54	; 0x36
 8100340:	bf88      	it	hi
 8100342:	bd30      	pophi	{r4, r5, pc}
 8100344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100354:	d002      	beq.n	810035c <__adddf3+0x70>
 8100356:	4240      	negs	r0, r0
 8100358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100368:	d002      	beq.n	8100370 <__adddf3+0x84>
 810036a:	4252      	negs	r2, r2
 810036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100370:	ea94 0f05 	teq	r4, r5
 8100374:	f000 80a7 	beq.w	81004c6 <__adddf3+0x1da>
 8100378:	f1a4 0401 	sub.w	r4, r4, #1
 810037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100380:	db0d      	blt.n	810039e <__adddf3+0xb2>
 8100382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100386:	fa22 f205 	lsr.w	r2, r2, r5
 810038a:	1880      	adds	r0, r0, r2
 810038c:	f141 0100 	adc.w	r1, r1, #0
 8100390:	fa03 f20e 	lsl.w	r2, r3, lr
 8100394:	1880      	adds	r0, r0, r2
 8100396:	fa43 f305 	asr.w	r3, r3, r5
 810039a:	4159      	adcs	r1, r3
 810039c:	e00e      	b.n	81003bc <__adddf3+0xd0>
 810039e:	f1a5 0520 	sub.w	r5, r5, #32
 81003a2:	f10e 0e20 	add.w	lr, lr, #32
 81003a6:	2a01      	cmp	r2, #1
 81003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003ac:	bf28      	it	cs
 81003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003b2:	fa43 f305 	asr.w	r3, r3, r5
 81003b6:	18c0      	adds	r0, r0, r3
 81003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003c0:	d507      	bpl.n	81003d2 <__adddf3+0xe6>
 81003c2:	f04f 0e00 	mov.w	lr, #0
 81003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 81003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003d6:	d31b      	bcc.n	8100410 <__adddf3+0x124>
 81003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003dc:	d30c      	bcc.n	81003f8 <__adddf3+0x10c>
 81003de:	0849      	lsrs	r1, r1, #1
 81003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e8:	f104 0401 	add.w	r4, r4, #1
 81003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003f4:	f080 809a 	bcs.w	810052c <__adddf3+0x240>
 81003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003fc:	bf08      	it	eq
 81003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100402:	f150 0000 	adcs.w	r0, r0, #0
 8100406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810040a:	ea41 0105 	orr.w	r1, r1, r5
 810040e:	bd30      	pop	{r4, r5, pc}
 8100410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100414:	4140      	adcs	r0, r0
 8100416:	eb41 0101 	adc.w	r1, r1, r1
 810041a:	3c01      	subs	r4, #1
 810041c:	bf28      	it	cs
 810041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8100422:	d2e9      	bcs.n	81003f8 <__adddf3+0x10c>
 8100424:	f091 0f00 	teq	r1, #0
 8100428:	bf04      	itt	eq
 810042a:	4601      	moveq	r1, r0
 810042c:	2000      	moveq	r0, #0
 810042e:	fab1 f381 	clz	r3, r1
 8100432:	bf08      	it	eq
 8100434:	3320      	addeq	r3, #32
 8100436:	f1a3 030b 	sub.w	r3, r3, #11
 810043a:	f1b3 0220 	subs.w	r2, r3, #32
 810043e:	da0c      	bge.n	810045a <__adddf3+0x16e>
 8100440:	320c      	adds	r2, #12
 8100442:	dd08      	ble.n	8100456 <__adddf3+0x16a>
 8100444:	f102 0c14 	add.w	ip, r2, #20
 8100448:	f1c2 020c 	rsb	r2, r2, #12
 810044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100450:	fa21 f102 	lsr.w	r1, r1, r2
 8100454:	e00c      	b.n	8100470 <__adddf3+0x184>
 8100456:	f102 0214 	add.w	r2, r2, #20
 810045a:	bfd8      	it	le
 810045c:	f1c2 0c20 	rsble	ip, r2, #32
 8100460:	fa01 f102 	lsl.w	r1, r1, r2
 8100464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100468:	bfdc      	itt	le
 810046a:	ea41 010c 	orrle.w	r1, r1, ip
 810046e:	4090      	lslle	r0, r2
 8100470:	1ae4      	subs	r4, r4, r3
 8100472:	bfa2      	ittt	ge
 8100474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100478:	4329      	orrge	r1, r5
 810047a:	bd30      	popge	{r4, r5, pc}
 810047c:	ea6f 0404 	mvn.w	r4, r4
 8100480:	3c1f      	subs	r4, #31
 8100482:	da1c      	bge.n	81004be <__adddf3+0x1d2>
 8100484:	340c      	adds	r4, #12
 8100486:	dc0e      	bgt.n	81004a6 <__adddf3+0x1ba>
 8100488:	f104 0414 	add.w	r4, r4, #20
 810048c:	f1c4 0220 	rsb	r2, r4, #32
 8100490:	fa20 f004 	lsr.w	r0, r0, r4
 8100494:	fa01 f302 	lsl.w	r3, r1, r2
 8100498:	ea40 0003 	orr.w	r0, r0, r3
 810049c:	fa21 f304 	lsr.w	r3, r1, r4
 81004a0:	ea45 0103 	orr.w	r1, r5, r3
 81004a4:	bd30      	pop	{r4, r5, pc}
 81004a6:	f1c4 040c 	rsb	r4, r4, #12
 81004aa:	f1c4 0220 	rsb	r2, r4, #32
 81004ae:	fa20 f002 	lsr.w	r0, r0, r2
 81004b2:	fa01 f304 	lsl.w	r3, r1, r4
 81004b6:	ea40 0003 	orr.w	r0, r0, r3
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	fa21 f004 	lsr.w	r0, r1, r4
 81004c2:	4629      	mov	r1, r5
 81004c4:	bd30      	pop	{r4, r5, pc}
 81004c6:	f094 0f00 	teq	r4, #0
 81004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004ce:	bf06      	itte	eq
 81004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004d4:	3401      	addeq	r4, #1
 81004d6:	3d01      	subne	r5, #1
 81004d8:	e74e      	b.n	8100378 <__adddf3+0x8c>
 81004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004de:	bf18      	it	ne
 81004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004e4:	d029      	beq.n	810053a <__adddf3+0x24e>
 81004e6:	ea94 0f05 	teq	r4, r5
 81004ea:	bf08      	it	eq
 81004ec:	ea90 0f02 	teqeq	r0, r2
 81004f0:	d005      	beq.n	81004fe <__adddf3+0x212>
 81004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 81004f6:	bf04      	itt	eq
 81004f8:	4619      	moveq	r1, r3
 81004fa:	4610      	moveq	r0, r2
 81004fc:	bd30      	pop	{r4, r5, pc}
 81004fe:	ea91 0f03 	teq	r1, r3
 8100502:	bf1e      	ittt	ne
 8100504:	2100      	movne	r1, #0
 8100506:	2000      	movne	r0, #0
 8100508:	bd30      	popne	{r4, r5, pc}
 810050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810050e:	d105      	bne.n	810051c <__adddf3+0x230>
 8100510:	0040      	lsls	r0, r0, #1
 8100512:	4149      	adcs	r1, r1
 8100514:	bf28      	it	cs
 8100516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810051a:	bd30      	pop	{r4, r5, pc}
 810051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100520:	bf3c      	itt	cc
 8100522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100526:	bd30      	popcc	{r4, r5, pc}
 8100528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100534:	f04f 0000 	mov.w	r0, #0
 8100538:	bd30      	pop	{r4, r5, pc}
 810053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810053e:	bf1a      	itte	ne
 8100540:	4619      	movne	r1, r3
 8100542:	4610      	movne	r0, r2
 8100544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100548:	bf1c      	itt	ne
 810054a:	460b      	movne	r3, r1
 810054c:	4602      	movne	r2, r0
 810054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100552:	bf06      	itte	eq
 8100554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100558:	ea91 0f03 	teqeq	r1, r3
 810055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100560:	bd30      	pop	{r4, r5, pc}
 8100562:	bf00      	nop

08100564 <__aeabi_ui2d>:
 8100564:	f090 0f00 	teq	r0, #0
 8100568:	bf04      	itt	eq
 810056a:	2100      	moveq	r1, #0
 810056c:	4770      	bxeq	lr
 810056e:	b530      	push	{r4, r5, lr}
 8100570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100578:	f04f 0500 	mov.w	r5, #0
 810057c:	f04f 0100 	mov.w	r1, #0
 8100580:	e750      	b.n	8100424 <__adddf3+0x138>
 8100582:	bf00      	nop

08100584 <__aeabi_i2d>:
 8100584:	f090 0f00 	teq	r0, #0
 8100588:	bf04      	itt	eq
 810058a:	2100      	moveq	r1, #0
 810058c:	4770      	bxeq	lr
 810058e:	b530      	push	{r4, r5, lr}
 8100590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810059c:	bf48      	it	mi
 810059e:	4240      	negmi	r0, r0
 81005a0:	f04f 0100 	mov.w	r1, #0
 81005a4:	e73e      	b.n	8100424 <__adddf3+0x138>
 81005a6:	bf00      	nop

081005a8 <__aeabi_f2d>:
 81005a8:	0042      	lsls	r2, r0, #1
 81005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 81005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005b6:	bf1f      	itttt	ne
 81005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005c4:	4770      	bxne	lr
 81005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005ca:	bf08      	it	eq
 81005cc:	4770      	bxeq	lr
 81005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005d2:	bf04      	itt	eq
 81005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d8:	4770      	bxeq	lr
 81005da:	b530      	push	{r4, r5, lr}
 81005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e8:	e71c      	b.n	8100424 <__adddf3+0x138>
 81005ea:	bf00      	nop

081005ec <__aeabi_ul2d>:
 81005ec:	ea50 0201 	orrs.w	r2, r0, r1
 81005f0:	bf08      	it	eq
 81005f2:	4770      	bxeq	lr
 81005f4:	b530      	push	{r4, r5, lr}
 81005f6:	f04f 0500 	mov.w	r5, #0
 81005fa:	e00a      	b.n	8100612 <__aeabi_l2d+0x16>

081005fc <__aeabi_l2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810060a:	d502      	bpl.n	8100612 <__aeabi_l2d+0x16>
 810060c:	4240      	negs	r0, r0
 810060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810061e:	f43f aed8 	beq.w	81003d2 <__adddf3+0xe6>
 8100622:	f04f 0203 	mov.w	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100632:	bf18      	it	ne
 8100634:	3203      	addne	r2, #3
 8100636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810063a:	f1c2 0320 	rsb	r3, r2, #32
 810063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100642:	fa20 f002 	lsr.w	r0, r0, r2
 8100646:	fa01 fe03 	lsl.w	lr, r1, r3
 810064a:	ea40 000e 	orr.w	r0, r0, lr
 810064e:	fa21 f102 	lsr.w	r1, r1, r2
 8100652:	4414      	add	r4, r2
 8100654:	e6bd      	b.n	81003d2 <__adddf3+0xe6>
 8100656:	bf00      	nop

08100658 <__aeabi_dmul>:
 8100658:	b570      	push	{r4, r5, r6, lr}
 810065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100666:	bf1d      	ittte	ne
 8100668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810066c:	ea94 0f0c 	teqne	r4, ip
 8100670:	ea95 0f0c 	teqne	r5, ip
 8100674:	f000 f8de 	bleq	8100834 <__aeabi_dmul+0x1dc>
 8100678:	442c      	add	r4, r5
 810067a:	ea81 0603 	eor.w	r6, r1, r3
 810067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810068a:	bf18      	it	ne
 810068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100698:	d038      	beq.n	810070c <__aeabi_dmul+0xb4>
 810069a:	fba0 ce02 	umull	ip, lr, r0, r2
 810069e:	f04f 0500 	mov.w	r5, #0
 81006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006ae:	f04f 0600 	mov.w	r6, #0
 81006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006b6:	f09c 0f00 	teq	ip, #0
 81006ba:	bf18      	it	ne
 81006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006cc:	d204      	bcs.n	81006d8 <__aeabi_dmul+0x80>
 81006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006d2:	416d      	adcs	r5, r5
 81006d4:	eb46 0606 	adc.w	r6, r6, r6
 81006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006f0:	bf88      	it	hi
 81006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006f6:	d81e      	bhi.n	8100736 <__aeabi_dmul+0xde>
 81006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006fc:	bf08      	it	eq
 81006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100702:	f150 0000 	adcs.w	r0, r0, #0
 8100706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810070a:	bd70      	pop	{r4, r5, r6, pc}
 810070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100710:	ea46 0101 	orr.w	r1, r6, r1
 8100714:	ea40 0002 	orr.w	r0, r0, r2
 8100718:	ea81 0103 	eor.w	r1, r1, r3
 810071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100720:	bfc2      	ittt	gt
 8100722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810072a:	bd70      	popgt	{r4, r5, r6, pc}
 810072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100730:	f04f 0e00 	mov.w	lr, #0
 8100734:	3c01      	subs	r4, #1
 8100736:	f300 80ab 	bgt.w	8100890 <__aeabi_dmul+0x238>
 810073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810073e:	bfde      	ittt	le
 8100740:	2000      	movle	r0, #0
 8100742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100746:	bd70      	pople	{r4, r5, r6, pc}
 8100748:	f1c4 0400 	rsb	r4, r4, #0
 810074c:	3c20      	subs	r4, #32
 810074e:	da35      	bge.n	81007bc <__aeabi_dmul+0x164>
 8100750:	340c      	adds	r4, #12
 8100752:	dc1b      	bgt.n	810078c <__aeabi_dmul+0x134>
 8100754:	f104 0414 	add.w	r4, r4, #20
 8100758:	f1c4 0520 	rsb	r5, r4, #32
 810075c:	fa00 f305 	lsl.w	r3, r0, r5
 8100760:	fa20 f004 	lsr.w	r0, r0, r4
 8100764:	fa01 f205 	lsl.w	r2, r1, r5
 8100768:	ea40 0002 	orr.w	r0, r0, r2
 810076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100778:	fa21 f604 	lsr.w	r6, r1, r4
 810077c:	eb42 0106 	adc.w	r1, r2, r6
 8100780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100784:	bf08      	it	eq
 8100786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810078a:	bd70      	pop	{r4, r5, r6, pc}
 810078c:	f1c4 040c 	rsb	r4, r4, #12
 8100790:	f1c4 0520 	rsb	r5, r4, #32
 8100794:	fa00 f304 	lsl.w	r3, r0, r4
 8100798:	fa20 f005 	lsr.w	r0, r0, r5
 810079c:	fa01 f204 	lsl.w	r2, r1, r4
 81007a0:	ea40 0002 	orr.w	r0, r0, r2
 81007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007ac:	f141 0100 	adc.w	r1, r1, #0
 81007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007b4:	bf08      	it	eq
 81007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f1c4 0520 	rsb	r5, r4, #32
 81007c0:	fa00 f205 	lsl.w	r2, r0, r5
 81007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c8:	fa20 f304 	lsr.w	r3, r0, r4
 81007cc:	fa01 f205 	lsl.w	r2, r1, r5
 81007d0:	ea43 0302 	orr.w	r3, r3, r2
 81007d4:	fa21 f004 	lsr.w	r0, r1, r4
 81007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007dc:	fa21 f204 	lsr.w	r2, r1, r4
 81007e0:	ea20 0002 	bic.w	r0, r0, r2
 81007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ec:	bf08      	it	eq
 81007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007f2:	bd70      	pop	{r4, r5, r6, pc}
 81007f4:	f094 0f00 	teq	r4, #0
 81007f8:	d10f      	bne.n	810081a <__aeabi_dmul+0x1c2>
 81007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007fe:	0040      	lsls	r0, r0, #1
 8100800:	eb41 0101 	adc.w	r1, r1, r1
 8100804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100808:	bf08      	it	eq
 810080a:	3c01      	subeq	r4, #1
 810080c:	d0f7      	beq.n	81007fe <__aeabi_dmul+0x1a6>
 810080e:	ea41 0106 	orr.w	r1, r1, r6
 8100812:	f095 0f00 	teq	r5, #0
 8100816:	bf18      	it	ne
 8100818:	4770      	bxne	lr
 810081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810081e:	0052      	lsls	r2, r2, #1
 8100820:	eb43 0303 	adc.w	r3, r3, r3
 8100824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100828:	bf08      	it	eq
 810082a:	3d01      	subeq	r5, #1
 810082c:	d0f7      	beq.n	810081e <__aeabi_dmul+0x1c6>
 810082e:	ea43 0306 	orr.w	r3, r3, r6
 8100832:	4770      	bx	lr
 8100834:	ea94 0f0c 	teq	r4, ip
 8100838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810083c:	bf18      	it	ne
 810083e:	ea95 0f0c 	teqne	r5, ip
 8100842:	d00c      	beq.n	810085e <__aeabi_dmul+0x206>
 8100844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100848:	bf18      	it	ne
 810084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810084e:	d1d1      	bne.n	81007f4 <__aeabi_dmul+0x19c>
 8100850:	ea81 0103 	eor.w	r1, r1, r3
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	f04f 0000 	mov.w	r0, #0
 810085c:	bd70      	pop	{r4, r5, r6, pc}
 810085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100862:	bf06      	itte	eq
 8100864:	4610      	moveq	r0, r2
 8100866:	4619      	moveq	r1, r3
 8100868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810086c:	d019      	beq.n	81008a2 <__aeabi_dmul+0x24a>
 810086e:	ea94 0f0c 	teq	r4, ip
 8100872:	d102      	bne.n	810087a <__aeabi_dmul+0x222>
 8100874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100878:	d113      	bne.n	81008a2 <__aeabi_dmul+0x24a>
 810087a:	ea95 0f0c 	teq	r5, ip
 810087e:	d105      	bne.n	810088c <__aeabi_dmul+0x234>
 8100880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100884:	bf1c      	itt	ne
 8100886:	4610      	movne	r0, r2
 8100888:	4619      	movne	r1, r3
 810088a:	d10a      	bne.n	81008a2 <__aeabi_dmul+0x24a>
 810088c:	ea81 0103 	eor.w	r1, r1, r3
 8100890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810089c:	f04f 0000 	mov.w	r0, #0
 81008a0:	bd70      	pop	{r4, r5, r6, pc}
 81008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008aa:	bd70      	pop	{r4, r5, r6, pc}

081008ac <__aeabi_ddiv>:
 81008ac:	b570      	push	{r4, r5, r6, lr}
 81008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ba:	bf1d      	ittte	ne
 81008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008c0:	ea94 0f0c 	teqne	r4, ip
 81008c4:	ea95 0f0c 	teqne	r5, ip
 81008c8:	f000 f8a7 	bleq	8100a1a <__aeabi_ddiv+0x16e>
 81008cc:	eba4 0405 	sub.w	r4, r4, r5
 81008d0:	ea81 0e03 	eor.w	lr, r1, r3
 81008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008dc:	f000 8088 	beq.w	81009f0 <__aeabi_ddiv+0x144>
 81008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100904:	429d      	cmp	r5, r3
 8100906:	bf08      	it	eq
 8100908:	4296      	cmpeq	r6, r2
 810090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100912:	d202      	bcs.n	810091a <__aeabi_ddiv+0x6e>
 8100914:	085b      	lsrs	r3, r3, #1
 8100916:	ea4f 0232 	mov.w	r2, r2, rrx
 810091a:	1ab6      	subs	r6, r6, r2
 810091c:	eb65 0503 	sbc.w	r5, r5, r3
 8100920:	085b      	lsrs	r3, r3, #1
 8100922:	ea4f 0232 	mov.w	r2, r2, rrx
 8100926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100936:	bf22      	ittt	cs
 8100938:	1ab6      	subcs	r6, r6, r2
 810093a:	4675      	movcs	r5, lr
 810093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100940:	085b      	lsrs	r3, r3, #1
 8100942:	ea4f 0232 	mov.w	r2, r2, rrx
 8100946:	ebb6 0e02 	subs.w	lr, r6, r2
 810094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810094e:	bf22      	ittt	cs
 8100950:	1ab6      	subcs	r6, r6, r2
 8100952:	4675      	movcs	r5, lr
 8100954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100958:	085b      	lsrs	r3, r3, #1
 810095a:	ea4f 0232 	mov.w	r2, r2, rrx
 810095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100966:	bf22      	ittt	cs
 8100968:	1ab6      	subcs	r6, r6, r2
 810096a:	4675      	movcs	r5, lr
 810096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100970:	085b      	lsrs	r3, r3, #1
 8100972:	ea4f 0232 	mov.w	r2, r2, rrx
 8100976:	ebb6 0e02 	subs.w	lr, r6, r2
 810097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810097e:	bf22      	ittt	cs
 8100980:	1ab6      	subcs	r6, r6, r2
 8100982:	4675      	movcs	r5, lr
 8100984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100988:	ea55 0e06 	orrs.w	lr, r5, r6
 810098c:	d018      	beq.n	81009c0 <__aeabi_ddiv+0x114>
 810098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 810099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 810099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009aa:	d1c0      	bne.n	810092e <__aeabi_ddiv+0x82>
 81009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009b0:	d10b      	bne.n	81009ca <__aeabi_ddiv+0x11e>
 81009b2:	ea41 0100 	orr.w	r1, r1, r0
 81009b6:	f04f 0000 	mov.w	r0, #0
 81009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009be:	e7b6      	b.n	810092e <__aeabi_ddiv+0x82>
 81009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c4:	bf04      	itt	eq
 81009c6:	4301      	orreq	r1, r0
 81009c8:	2000      	moveq	r0, #0
 81009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009ce:	bf88      	it	hi
 81009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009d4:	f63f aeaf 	bhi.w	8100736 <__aeabi_dmul+0xde>
 81009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009dc:	bf04      	itt	eq
 81009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009e6:	f150 0000 	adcs.w	r0, r0, #0
 81009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009ee:	bd70      	pop	{r4, r5, r6, pc}
 81009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009fc:	bfc2      	ittt	gt
 81009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a06:	bd70      	popgt	{r4, r5, r6, pc}
 8100a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a0c:	f04f 0e00 	mov.w	lr, #0
 8100a10:	3c01      	subs	r4, #1
 8100a12:	e690      	b.n	8100736 <__aeabi_dmul+0xde>
 8100a14:	ea45 0e06 	orr.w	lr, r5, r6
 8100a18:	e68d      	b.n	8100736 <__aeabi_dmul+0xde>
 8100a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a1e:	ea94 0f0c 	teq	r4, ip
 8100a22:	bf08      	it	eq
 8100a24:	ea95 0f0c 	teqeq	r5, ip
 8100a28:	f43f af3b 	beq.w	81008a2 <__aeabi_dmul+0x24a>
 8100a2c:	ea94 0f0c 	teq	r4, ip
 8100a30:	d10a      	bne.n	8100a48 <__aeabi_ddiv+0x19c>
 8100a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a36:	f47f af34 	bne.w	81008a2 <__aeabi_dmul+0x24a>
 8100a3a:	ea95 0f0c 	teq	r5, ip
 8100a3e:	f47f af25 	bne.w	810088c <__aeabi_dmul+0x234>
 8100a42:	4610      	mov	r0, r2
 8100a44:	4619      	mov	r1, r3
 8100a46:	e72c      	b.n	81008a2 <__aeabi_dmul+0x24a>
 8100a48:	ea95 0f0c 	teq	r5, ip
 8100a4c:	d106      	bne.n	8100a5c <__aeabi_ddiv+0x1b0>
 8100a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a52:	f43f aefd 	beq.w	8100850 <__aeabi_dmul+0x1f8>
 8100a56:	4610      	mov	r0, r2
 8100a58:	4619      	mov	r1, r3
 8100a5a:	e722      	b.n	81008a2 <__aeabi_dmul+0x24a>
 8100a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a60:	bf18      	it	ne
 8100a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a66:	f47f aec5 	bne.w	81007f4 <__aeabi_dmul+0x19c>
 8100a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a6e:	f47f af0d 	bne.w	810088c <__aeabi_dmul+0x234>
 8100a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a76:	f47f aeeb 	bne.w	8100850 <__aeabi_dmul+0x1f8>
 8100a7a:	e712      	b.n	81008a2 <__aeabi_dmul+0x24a>

08100a7c <__aeabi_uldivmod>:
 8100a7c:	b953      	cbnz	r3, 8100a94 <__aeabi_uldivmod+0x18>
 8100a7e:	b94a      	cbnz	r2, 8100a94 <__aeabi_uldivmod+0x18>
 8100a80:	2900      	cmp	r1, #0
 8100a82:	bf08      	it	eq
 8100a84:	2800      	cmpeq	r0, #0
 8100a86:	bf1c      	itt	ne
 8100a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100a90:	f000 b9a4 	b.w	8100ddc <__aeabi_idiv0>
 8100a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8100a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100a9c:	f000 f83a 	bl	8100b14 <__udivmoddi4>
 8100aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100aa8:	b004      	add	sp, #16
 8100aaa:	4770      	bx	lr

08100aac <__aeabi_f2lz>:
 8100aac:	ee07 0a90 	vmov	s15, r0
 8100ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8100ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100ab8:	d401      	bmi.n	8100abe <__aeabi_f2lz+0x12>
 8100aba:	f000 b80b 	b.w	8100ad4 <__aeabi_f2ulz>
 8100abe:	eef1 7a67 	vneg.f32	s15, s15
 8100ac2:	b508      	push	{r3, lr}
 8100ac4:	ee17 0a90 	vmov	r0, s15
 8100ac8:	f000 f804 	bl	8100ad4 <__aeabi_f2ulz>
 8100acc:	4240      	negs	r0, r0
 8100ace:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ad2:	bd08      	pop	{r3, pc}

08100ad4 <__aeabi_f2ulz>:
 8100ad4:	b5d0      	push	{r4, r6, r7, lr}
 8100ad6:	f7ff fd67 	bl	81005a8 <__aeabi_f2d>
 8100ada:	4b0c      	ldr	r3, [pc, #48]	; (8100b0c <__aeabi_f2ulz+0x38>)
 8100adc:	2200      	movs	r2, #0
 8100ade:	4606      	mov	r6, r0
 8100ae0:	460f      	mov	r7, r1
 8100ae2:	f7ff fdb9 	bl	8100658 <__aeabi_dmul>
 8100ae6:	f000 f97b 	bl	8100de0 <__aeabi_d2uiz>
 8100aea:	4604      	mov	r4, r0
 8100aec:	f7ff fd3a 	bl	8100564 <__aeabi_ui2d>
 8100af0:	4b07      	ldr	r3, [pc, #28]	; (8100b10 <__aeabi_f2ulz+0x3c>)
 8100af2:	2200      	movs	r2, #0
 8100af4:	f7ff fdb0 	bl	8100658 <__aeabi_dmul>
 8100af8:	4602      	mov	r2, r0
 8100afa:	460b      	mov	r3, r1
 8100afc:	4630      	mov	r0, r6
 8100afe:	4639      	mov	r1, r7
 8100b00:	f7ff fbf2 	bl	81002e8 <__aeabi_dsub>
 8100b04:	f000 f96c 	bl	8100de0 <__aeabi_d2uiz>
 8100b08:	4621      	mov	r1, r4
 8100b0a:	bdd0      	pop	{r4, r6, r7, pc}
 8100b0c:	3df00000 	.word	0x3df00000
 8100b10:	41f00000 	.word	0x41f00000

08100b14 <__udivmoddi4>:
 8100b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100b18:	9e08      	ldr	r6, [sp, #32]
 8100b1a:	460d      	mov	r5, r1
 8100b1c:	4604      	mov	r4, r0
 8100b1e:	460f      	mov	r7, r1
 8100b20:	2b00      	cmp	r3, #0
 8100b22:	d14a      	bne.n	8100bba <__udivmoddi4+0xa6>
 8100b24:	428a      	cmp	r2, r1
 8100b26:	4694      	mov	ip, r2
 8100b28:	d965      	bls.n	8100bf6 <__udivmoddi4+0xe2>
 8100b2a:	fab2 f382 	clz	r3, r2
 8100b2e:	b143      	cbz	r3, 8100b42 <__udivmoddi4+0x2e>
 8100b30:	fa02 fc03 	lsl.w	ip, r2, r3
 8100b34:	f1c3 0220 	rsb	r2, r3, #32
 8100b38:	409f      	lsls	r7, r3
 8100b3a:	fa20 f202 	lsr.w	r2, r0, r2
 8100b3e:	4317      	orrs	r7, r2
 8100b40:	409c      	lsls	r4, r3
 8100b42:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100b46:	fa1f f58c 	uxth.w	r5, ip
 8100b4a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100b4e:	0c22      	lsrs	r2, r4, #16
 8100b50:	fb0e 7711 	mls	r7, lr, r1, r7
 8100b54:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100b58:	fb01 f005 	mul.w	r0, r1, r5
 8100b5c:	4290      	cmp	r0, r2
 8100b5e:	d90a      	bls.n	8100b76 <__udivmoddi4+0x62>
 8100b60:	eb1c 0202 	adds.w	r2, ip, r2
 8100b64:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8100b68:	f080 811c 	bcs.w	8100da4 <__udivmoddi4+0x290>
 8100b6c:	4290      	cmp	r0, r2
 8100b6e:	f240 8119 	bls.w	8100da4 <__udivmoddi4+0x290>
 8100b72:	3902      	subs	r1, #2
 8100b74:	4462      	add	r2, ip
 8100b76:	1a12      	subs	r2, r2, r0
 8100b78:	b2a4      	uxth	r4, r4
 8100b7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100b7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100b82:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100b86:	fb00 f505 	mul.w	r5, r0, r5
 8100b8a:	42a5      	cmp	r5, r4
 8100b8c:	d90a      	bls.n	8100ba4 <__udivmoddi4+0x90>
 8100b8e:	eb1c 0404 	adds.w	r4, ip, r4
 8100b92:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100b96:	f080 8107 	bcs.w	8100da8 <__udivmoddi4+0x294>
 8100b9a:	42a5      	cmp	r5, r4
 8100b9c:	f240 8104 	bls.w	8100da8 <__udivmoddi4+0x294>
 8100ba0:	4464      	add	r4, ip
 8100ba2:	3802      	subs	r0, #2
 8100ba4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ba8:	1b64      	subs	r4, r4, r5
 8100baa:	2100      	movs	r1, #0
 8100bac:	b11e      	cbz	r6, 8100bb6 <__udivmoddi4+0xa2>
 8100bae:	40dc      	lsrs	r4, r3
 8100bb0:	2300      	movs	r3, #0
 8100bb2:	e9c6 4300 	strd	r4, r3, [r6]
 8100bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100bba:	428b      	cmp	r3, r1
 8100bbc:	d908      	bls.n	8100bd0 <__udivmoddi4+0xbc>
 8100bbe:	2e00      	cmp	r6, #0
 8100bc0:	f000 80ed 	beq.w	8100d9e <__udivmoddi4+0x28a>
 8100bc4:	2100      	movs	r1, #0
 8100bc6:	e9c6 0500 	strd	r0, r5, [r6]
 8100bca:	4608      	mov	r0, r1
 8100bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100bd0:	fab3 f183 	clz	r1, r3
 8100bd4:	2900      	cmp	r1, #0
 8100bd6:	d149      	bne.n	8100c6c <__udivmoddi4+0x158>
 8100bd8:	42ab      	cmp	r3, r5
 8100bda:	d302      	bcc.n	8100be2 <__udivmoddi4+0xce>
 8100bdc:	4282      	cmp	r2, r0
 8100bde:	f200 80f8 	bhi.w	8100dd2 <__udivmoddi4+0x2be>
 8100be2:	1a84      	subs	r4, r0, r2
 8100be4:	eb65 0203 	sbc.w	r2, r5, r3
 8100be8:	2001      	movs	r0, #1
 8100bea:	4617      	mov	r7, r2
 8100bec:	2e00      	cmp	r6, #0
 8100bee:	d0e2      	beq.n	8100bb6 <__udivmoddi4+0xa2>
 8100bf0:	e9c6 4700 	strd	r4, r7, [r6]
 8100bf4:	e7df      	b.n	8100bb6 <__udivmoddi4+0xa2>
 8100bf6:	b902      	cbnz	r2, 8100bfa <__udivmoddi4+0xe6>
 8100bf8:	deff      	udf	#255	; 0xff
 8100bfa:	fab2 f382 	clz	r3, r2
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	f040 8090 	bne.w	8100d24 <__udivmoddi4+0x210>
 8100c04:	1a8a      	subs	r2, r1, r2
 8100c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100c0a:	fa1f fe8c 	uxth.w	lr, ip
 8100c0e:	2101      	movs	r1, #1
 8100c10:	fbb2 f5f7 	udiv	r5, r2, r7
 8100c14:	fb07 2015 	mls	r0, r7, r5, r2
 8100c18:	0c22      	lsrs	r2, r4, #16
 8100c1a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100c1e:	fb0e f005 	mul.w	r0, lr, r5
 8100c22:	4290      	cmp	r0, r2
 8100c24:	d908      	bls.n	8100c38 <__udivmoddi4+0x124>
 8100c26:	eb1c 0202 	adds.w	r2, ip, r2
 8100c2a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8100c2e:	d202      	bcs.n	8100c36 <__udivmoddi4+0x122>
 8100c30:	4290      	cmp	r0, r2
 8100c32:	f200 80cb 	bhi.w	8100dcc <__udivmoddi4+0x2b8>
 8100c36:	4645      	mov	r5, r8
 8100c38:	1a12      	subs	r2, r2, r0
 8100c3a:	b2a4      	uxth	r4, r4
 8100c3c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100c40:	fb07 2210 	mls	r2, r7, r0, r2
 8100c44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100c48:	fb0e fe00 	mul.w	lr, lr, r0
 8100c4c:	45a6      	cmp	lr, r4
 8100c4e:	d908      	bls.n	8100c62 <__udivmoddi4+0x14e>
 8100c50:	eb1c 0404 	adds.w	r4, ip, r4
 8100c54:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8100c58:	d202      	bcs.n	8100c60 <__udivmoddi4+0x14c>
 8100c5a:	45a6      	cmp	lr, r4
 8100c5c:	f200 80bb 	bhi.w	8100dd6 <__udivmoddi4+0x2c2>
 8100c60:	4610      	mov	r0, r2
 8100c62:	eba4 040e 	sub.w	r4, r4, lr
 8100c66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100c6a:	e79f      	b.n	8100bac <__udivmoddi4+0x98>
 8100c6c:	f1c1 0720 	rsb	r7, r1, #32
 8100c70:	408b      	lsls	r3, r1
 8100c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8100c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8100c7a:	fa05 f401 	lsl.w	r4, r5, r1
 8100c7e:	fa20 f307 	lsr.w	r3, r0, r7
 8100c82:	40fd      	lsrs	r5, r7
 8100c84:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100c88:	4323      	orrs	r3, r4
 8100c8a:	fbb5 f8f9 	udiv	r8, r5, r9
 8100c8e:	fa1f fe8c 	uxth.w	lr, ip
 8100c92:	fb09 5518 	mls	r5, r9, r8, r5
 8100c96:	0c1c      	lsrs	r4, r3, #16
 8100c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100c9c:	fb08 f50e 	mul.w	r5, r8, lr
 8100ca0:	42a5      	cmp	r5, r4
 8100ca2:	fa02 f201 	lsl.w	r2, r2, r1
 8100ca6:	fa00 f001 	lsl.w	r0, r0, r1
 8100caa:	d90b      	bls.n	8100cc4 <__udivmoddi4+0x1b0>
 8100cac:	eb1c 0404 	adds.w	r4, ip, r4
 8100cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100cb4:	f080 8088 	bcs.w	8100dc8 <__udivmoddi4+0x2b4>
 8100cb8:	42a5      	cmp	r5, r4
 8100cba:	f240 8085 	bls.w	8100dc8 <__udivmoddi4+0x2b4>
 8100cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8100cc2:	4464      	add	r4, ip
 8100cc4:	1b64      	subs	r4, r4, r5
 8100cc6:	b29d      	uxth	r5, r3
 8100cc8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100ccc:	fb09 4413 	mls	r4, r9, r3, r4
 8100cd0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100cd4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100cd8:	45a6      	cmp	lr, r4
 8100cda:	d908      	bls.n	8100cee <__udivmoddi4+0x1da>
 8100cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8100ce0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8100ce4:	d26c      	bcs.n	8100dc0 <__udivmoddi4+0x2ac>
 8100ce6:	45a6      	cmp	lr, r4
 8100ce8:	d96a      	bls.n	8100dc0 <__udivmoddi4+0x2ac>
 8100cea:	3b02      	subs	r3, #2
 8100cec:	4464      	add	r4, ip
 8100cee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100cf2:	fba3 9502 	umull	r9, r5, r3, r2
 8100cf6:	eba4 040e 	sub.w	r4, r4, lr
 8100cfa:	42ac      	cmp	r4, r5
 8100cfc:	46c8      	mov	r8, r9
 8100cfe:	46ae      	mov	lr, r5
 8100d00:	d356      	bcc.n	8100db0 <__udivmoddi4+0x29c>
 8100d02:	d053      	beq.n	8100dac <__udivmoddi4+0x298>
 8100d04:	b156      	cbz	r6, 8100d1c <__udivmoddi4+0x208>
 8100d06:	ebb0 0208 	subs.w	r2, r0, r8
 8100d0a:	eb64 040e 	sbc.w	r4, r4, lr
 8100d0e:	fa04 f707 	lsl.w	r7, r4, r7
 8100d12:	40ca      	lsrs	r2, r1
 8100d14:	40cc      	lsrs	r4, r1
 8100d16:	4317      	orrs	r7, r2
 8100d18:	e9c6 7400 	strd	r7, r4, [r6]
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	2100      	movs	r1, #0
 8100d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d24:	f1c3 0120 	rsb	r1, r3, #32
 8100d28:	fa02 fc03 	lsl.w	ip, r2, r3
 8100d2c:	fa20 f201 	lsr.w	r2, r0, r1
 8100d30:	fa25 f101 	lsr.w	r1, r5, r1
 8100d34:	409d      	lsls	r5, r3
 8100d36:	432a      	orrs	r2, r5
 8100d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100d3c:	fa1f fe8c 	uxth.w	lr, ip
 8100d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d44:	fb07 1510 	mls	r5, r7, r0, r1
 8100d48:	0c11      	lsrs	r1, r2, #16
 8100d4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8100d4e:	fb00 f50e 	mul.w	r5, r0, lr
 8100d52:	428d      	cmp	r5, r1
 8100d54:	fa04 f403 	lsl.w	r4, r4, r3
 8100d58:	d908      	bls.n	8100d6c <__udivmoddi4+0x258>
 8100d5a:	eb1c 0101 	adds.w	r1, ip, r1
 8100d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8100d62:	d22f      	bcs.n	8100dc4 <__udivmoddi4+0x2b0>
 8100d64:	428d      	cmp	r5, r1
 8100d66:	d92d      	bls.n	8100dc4 <__udivmoddi4+0x2b0>
 8100d68:	3802      	subs	r0, #2
 8100d6a:	4461      	add	r1, ip
 8100d6c:	1b49      	subs	r1, r1, r5
 8100d6e:	b292      	uxth	r2, r2
 8100d70:	fbb1 f5f7 	udiv	r5, r1, r7
 8100d74:	fb07 1115 	mls	r1, r7, r5, r1
 8100d78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100d7c:	fb05 f10e 	mul.w	r1, r5, lr
 8100d80:	4291      	cmp	r1, r2
 8100d82:	d908      	bls.n	8100d96 <__udivmoddi4+0x282>
 8100d84:	eb1c 0202 	adds.w	r2, ip, r2
 8100d88:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8100d8c:	d216      	bcs.n	8100dbc <__udivmoddi4+0x2a8>
 8100d8e:	4291      	cmp	r1, r2
 8100d90:	d914      	bls.n	8100dbc <__udivmoddi4+0x2a8>
 8100d92:	3d02      	subs	r5, #2
 8100d94:	4462      	add	r2, ip
 8100d96:	1a52      	subs	r2, r2, r1
 8100d98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8100d9c:	e738      	b.n	8100c10 <__udivmoddi4+0xfc>
 8100d9e:	4631      	mov	r1, r6
 8100da0:	4630      	mov	r0, r6
 8100da2:	e708      	b.n	8100bb6 <__udivmoddi4+0xa2>
 8100da4:	4639      	mov	r1, r7
 8100da6:	e6e6      	b.n	8100b76 <__udivmoddi4+0x62>
 8100da8:	4610      	mov	r0, r2
 8100daa:	e6fb      	b.n	8100ba4 <__udivmoddi4+0x90>
 8100dac:	4548      	cmp	r0, r9
 8100dae:	d2a9      	bcs.n	8100d04 <__udivmoddi4+0x1f0>
 8100db0:	ebb9 0802 	subs.w	r8, r9, r2
 8100db4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8100db8:	3b01      	subs	r3, #1
 8100dba:	e7a3      	b.n	8100d04 <__udivmoddi4+0x1f0>
 8100dbc:	4645      	mov	r5, r8
 8100dbe:	e7ea      	b.n	8100d96 <__udivmoddi4+0x282>
 8100dc0:	462b      	mov	r3, r5
 8100dc2:	e794      	b.n	8100cee <__udivmoddi4+0x1da>
 8100dc4:	4640      	mov	r0, r8
 8100dc6:	e7d1      	b.n	8100d6c <__udivmoddi4+0x258>
 8100dc8:	46d0      	mov	r8, sl
 8100dca:	e77b      	b.n	8100cc4 <__udivmoddi4+0x1b0>
 8100dcc:	3d02      	subs	r5, #2
 8100dce:	4462      	add	r2, ip
 8100dd0:	e732      	b.n	8100c38 <__udivmoddi4+0x124>
 8100dd2:	4608      	mov	r0, r1
 8100dd4:	e70a      	b.n	8100bec <__udivmoddi4+0xd8>
 8100dd6:	4464      	add	r4, ip
 8100dd8:	3802      	subs	r0, #2
 8100dda:	e742      	b.n	8100c62 <__udivmoddi4+0x14e>

08100ddc <__aeabi_idiv0>:
 8100ddc:	4770      	bx	lr
 8100dde:	bf00      	nop

08100de0 <__aeabi_d2uiz>:
 8100de0:	004a      	lsls	r2, r1, #1
 8100de2:	d211      	bcs.n	8100e08 <__aeabi_d2uiz+0x28>
 8100de4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100de8:	d211      	bcs.n	8100e0e <__aeabi_d2uiz+0x2e>
 8100dea:	d50d      	bpl.n	8100e08 <__aeabi_d2uiz+0x28>
 8100dec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100df0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100df4:	d40e      	bmi.n	8100e14 <__aeabi_d2uiz+0x34>
 8100df6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100dfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100e02:	fa23 f002 	lsr.w	r0, r3, r2
 8100e06:	4770      	bx	lr
 8100e08:	f04f 0000 	mov.w	r0, #0
 8100e0c:	4770      	bx	lr
 8100e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100e12:	d102      	bne.n	8100e1a <__aeabi_d2uiz+0x3a>
 8100e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100e18:	4770      	bx	lr
 8100e1a:	f04f 0000 	mov.w	r0, #0
 8100e1e:	4770      	bx	lr

08100e20 <__io_putchar>:
static void MX_DMA_Init(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 8100e20:	b580      	push	{r7, lr}
 8100e22:	b082      	sub	sp, #8
 8100e24:	af00      	add	r7, sp, #0
 8100e26:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8100e28:	1d39      	adds	r1, r7, #4
 8100e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8100e2e:	2201      	movs	r2, #1
 8100e30:	4803      	ldr	r0, [pc, #12]	; (8100e40 <__io_putchar+0x20>)
 8100e32:	f006 fff9 	bl	8107e28 <HAL_UART_Transmit>
  return ch;
 8100e36:	687b      	ldr	r3, [r7, #4]
}
 8100e38:	4618      	mov	r0, r3
 8100e3a:	3708      	adds	r7, #8
 8100e3c:	46bd      	mov	sp, r7
 8100e3e:	bd80      	pop	{r7, pc}
 8100e40:	100073f8 	.word	0x100073f8

08100e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e44:	b580      	push	{r7, lr}
 8100e46:	b0a6      	sub	sp, #152	; 0x98
 8100e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8100e4a:	f000 f96f 	bl	810112c <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e4e:	4b30      	ldr	r3, [pc, #192]	; (8100f10 <main+0xcc>)
 8100e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e54:	4a2e      	ldr	r2, [pc, #184]	; (8100f10 <main+0xcc>)
 8100e56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e5e:	4b2c      	ldr	r3, [pc, #176]	; (8100f10 <main+0xcc>)
 8100e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100e68:	603b      	str	r3, [r7, #0]
 8100e6a:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e6c:	2001      	movs	r0, #1
 8100e6e:	f004 feed 	bl	8105c4c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e72:	f004 ff77 	bl	8105d64 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e76:	2201      	movs	r2, #1
 8100e78:	2102      	movs	r1, #2
 8100e7a:	2000      	movs	r0, #0
 8100e7c:	f004 fef8 	bl	8105c70 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e80:	4b24      	ldr	r3, [pc, #144]	; (8100f14 <main+0xd0>)
 8100e82:	681b      	ldr	r3, [r3, #0]
 8100e84:	091b      	lsrs	r3, r3, #4
 8100e86:	f003 030f 	and.w	r3, r3, #15
 8100e8a:	2b07      	cmp	r3, #7
 8100e8c:	d108      	bne.n	8100ea0 <main+0x5c>
 8100e8e:	4b22      	ldr	r3, [pc, #136]	; (8100f18 <main+0xd4>)
 8100e90:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100e94:	4a20      	ldr	r2, [pc, #128]	; (8100f18 <main+0xd4>)
 8100e96:	f043 0301 	orr.w	r3, r3, #1
 8100e9a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100e9e:	e007      	b.n	8100eb0 <main+0x6c>
 8100ea0:	4b1d      	ldr	r3, [pc, #116]	; (8100f18 <main+0xd4>)
 8100ea2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100ea6:	4a1c      	ldr	r2, [pc, #112]	; (8100f18 <main+0xd4>)
 8100ea8:	f043 0301 	orr.w	r3, r3, #1
 8100eac:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100eb0:	f002 fdb0 	bl	8103a14 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100eb4:	f000 f8dc 	bl	8101070 <MX_MDMA_Init>
  MX_DMA_Init();
 8100eb8:	f000 f884 	bl	8100fc4 <MX_DMA_Init>
  MX_GPIO_Init();
 8100ebc:	f000 f8f2 	bl	81010a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100ec0:	f000 f834 	bl	8100f2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100ec4:	2001      	movs	r0, #1
 8100ec6:	f004 fec1 	bl	8105c4c <HAL_HSEM_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ai_handle network = AI_HANDLE_NULL;
 8100eca:	2300      	movs	r3, #0
 8100ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ai_error err;
  ai_network_report report;

  /** @brief Initialize network */
  const ai_handle acts[] = { activations };
 8100ed0:	4b12      	ldr	r3, [pc, #72]	; (8100f1c <main+0xd8>)
 8100ed2:	607b      	str	r3, [r7, #4]
  err = ai_face_recognition_create_and_init(&network, acts, NULL);
 8100ed4:	1d39      	adds	r1, r7, #4
 8100ed6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8100eda:	2200      	movs	r2, #0
 8100edc:	4618      	mov	r0, r3
 8100ede:	f002 fc9b 	bl	8103818 <ai_face_recognition_create_and_init>
 8100ee2:	4603      	mov	r3, r0
 8100ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (err.type != AI_ERROR_NONE) {
 8100ee8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d006      	beq.n	8100efe <main+0xba>
	  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8100ef0:	2104      	movs	r1, #4
 8100ef2:	480b      	ldr	r0, [pc, #44]	; (8100f20 <main+0xdc>)
 8100ef4:	f004 fe8f 	bl	8105c16 <HAL_GPIO_TogglePin>
	  printf("ERRORR\r\n");
 8100ef8:	480a      	ldr	r0, [pc, #40]	; (8100f24 <main+0xe0>)
 8100efa:	f00f f9a5 	bl	8110248 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  if(notifyReceived == 1){
//		  HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
	  	  printf("WHILE LOOP\r\n");
 8100efe:	480a      	ldr	r0, [pc, #40]	; (8100f28 <main+0xe4>)
 8100f00:	f00f f9a2 	bl	8110248 <puts>
		  HAL_Delay(1000);
 8100f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100f08:	f002 fe38 	bl	8103b7c <HAL_Delay>
	  	  printf("WHILE LOOP\r\n");
 8100f0c:	e7f7      	b.n	8100efe <main+0xba>
 8100f0e:	bf00      	nop
 8100f10:	58024400 	.word	0x58024400
 8100f14:	e000ed00 	.word	0xe000ed00
 8100f18:	58026400 	.word	0x58026400
 8100f1c:	1000757c 	.word	0x1000757c
 8100f20:	58022400 	.word	0x58022400
 8100f24:	08110840 	.word	0x08110840
 8100f28:	08110848 	.word	0x08110848

08100f2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100f2c:	b580      	push	{r7, lr}
 8100f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100f30:	4b22      	ldr	r3, [pc, #136]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f32:	4a23      	ldr	r2, [pc, #140]	; (8100fc0 <MX_USART3_UART_Init+0x94>)
 8100f34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100f36:	4b21      	ldr	r3, [pc, #132]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100f3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100f3e:	4b1f      	ldr	r3, [pc, #124]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f40:	2200      	movs	r2, #0
 8100f42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100f44:	4b1d      	ldr	r3, [pc, #116]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f46:	2200      	movs	r2, #0
 8100f48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100f4a:	4b1c      	ldr	r3, [pc, #112]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f4c:	2200      	movs	r2, #0
 8100f4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100f50:	4b1a      	ldr	r3, [pc, #104]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f52:	220c      	movs	r2, #12
 8100f54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100f56:	4b19      	ldr	r3, [pc, #100]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f58:	2200      	movs	r2, #0
 8100f5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100f5c:	4b17      	ldr	r3, [pc, #92]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f5e:	2200      	movs	r2, #0
 8100f60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100f62:	4b16      	ldr	r3, [pc, #88]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f64:	2200      	movs	r2, #0
 8100f66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100f68:	4b14      	ldr	r3, [pc, #80]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f6a:	2200      	movs	r2, #0
 8100f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100f6e:	4b13      	ldr	r3, [pc, #76]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f70:	2200      	movs	r2, #0
 8100f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100f74:	4811      	ldr	r0, [pc, #68]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f76:	f006 ff07 	bl	8107d88 <HAL_UART_Init>
 8100f7a:	4603      	mov	r3, r0
 8100f7c:	2b00      	cmp	r3, #0
 8100f7e:	d001      	beq.n	8100f84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100f80:	f000 f901 	bl	8101186 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100f84:	2100      	movs	r1, #0
 8100f86:	480d      	ldr	r0, [pc, #52]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f88:	f007 ff96 	bl	8108eb8 <HAL_UARTEx_SetTxFifoThreshold>
 8100f8c:	4603      	mov	r3, r0
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	d001      	beq.n	8100f96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100f92:	f000 f8f8 	bl	8101186 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100f96:	2100      	movs	r1, #0
 8100f98:	4808      	ldr	r0, [pc, #32]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100f9a:	f007 ffcb 	bl	8108f34 <HAL_UARTEx_SetRxFifoThreshold>
 8100f9e:	4603      	mov	r3, r0
 8100fa0:	2b00      	cmp	r3, #0
 8100fa2:	d001      	beq.n	8100fa8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100fa4:	f000 f8ef 	bl	8101186 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100fa8:	4804      	ldr	r0, [pc, #16]	; (8100fbc <MX_USART3_UART_Init+0x90>)
 8100faa:	f007 ff4c 	bl	8108e46 <HAL_UARTEx_DisableFifoMode>
 8100fae:	4603      	mov	r3, r0
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	d001      	beq.n	8100fb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100fb4:	f000 f8e7 	bl	8101186 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100fb8:	bf00      	nop
 8100fba:	bd80      	pop	{r7, pc}
 8100fbc:	100073f8 	.word	0x100073f8
 8100fc0:	40004800 	.word	0x40004800

08100fc4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream2
  */
static void MX_DMA_Init(void)
{
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b082      	sub	sp, #8
 8100fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100fca:	4b26      	ldr	r3, [pc, #152]	; (8101064 <MX_DMA_Init+0xa0>)
 8100fcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100fd0:	4a24      	ldr	r2, [pc, #144]	; (8101064 <MX_DMA_Init+0xa0>)
 8100fd2:	f043 0301 	orr.w	r3, r3, #1
 8100fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100fda:	4b22      	ldr	r3, [pc, #136]	; (8101064 <MX_DMA_Init+0xa0>)
 8100fdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100fe0:	f003 0301 	and.w	r3, r3, #1
 8100fe4:	607b      	str	r3, [r7, #4]
 8100fe6:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_stream2 on DMA1_Stream2 */
  hdma_memtomem_dma1_stream2.Instance = DMA1_Stream2;
 8100fe8:	4b1f      	ldr	r3, [pc, #124]	; (8101068 <MX_DMA_Init+0xa4>)
 8100fea:	4a20      	ldr	r2, [pc, #128]	; (810106c <MX_DMA_Init+0xa8>)
 8100fec:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 8100fee:	4b1e      	ldr	r3, [pc, #120]	; (8101068 <MX_DMA_Init+0xa4>)
 8100ff0:	2200      	movs	r2, #0
 8100ff2:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8100ff4:	4b1c      	ldr	r3, [pc, #112]	; (8101068 <MX_DMA_Init+0xa4>)
 8100ff6:	2280      	movs	r2, #128	; 0x80
 8100ff8:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8100ffa:	4b1b      	ldr	r3, [pc, #108]	; (8101068 <MX_DMA_Init+0xa4>)
 8100ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101000:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8101002:	4b19      	ldr	r3, [pc, #100]	; (8101068 <MX_DMA_Init+0xa4>)
 8101004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101008:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810100a:	4b17      	ldr	r3, [pc, #92]	; (8101068 <MX_DMA_Init+0xa4>)
 810100c:	2200      	movs	r2, #0
 810100e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101010:	4b15      	ldr	r3, [pc, #84]	; (8101068 <MX_DMA_Init+0xa4>)
 8101012:	2200      	movs	r2, #0
 8101014:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream2.Init.Mode = DMA_NORMAL;
 8101016:	4b14      	ldr	r3, [pc, #80]	; (8101068 <MX_DMA_Init+0xa4>)
 8101018:	2200      	movs	r2, #0
 810101a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 810101c:	4b12      	ldr	r3, [pc, #72]	; (8101068 <MX_DMA_Init+0xa4>)
 810101e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8101022:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8101024:	4b10      	ldr	r3, [pc, #64]	; (8101068 <MX_DMA_Init+0xa4>)
 8101026:	2204      	movs	r2, #4
 8101028:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 810102a:	4b0f      	ldr	r3, [pc, #60]	; (8101068 <MX_DMA_Init+0xa4>)
 810102c:	2203      	movs	r2, #3
 810102e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8101030:	4b0d      	ldr	r3, [pc, #52]	; (8101068 <MX_DMA_Init+0xa4>)
 8101032:	2200      	movs	r2, #0
 8101034:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8101036:	4b0c      	ldr	r3, [pc, #48]	; (8101068 <MX_DMA_Init+0xa4>)
 8101038:	2200      	movs	r2, #0
 810103a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream2) != HAL_OK)
 810103c:	480a      	ldr	r0, [pc, #40]	; (8101068 <MX_DMA_Init+0xa4>)
 810103e:	f002 ff61 	bl	8103f04 <HAL_DMA_Init>
 8101042:	4603      	mov	r3, r0
 8101044:	2b00      	cmp	r3, #0
 8101046:	d001      	beq.n	810104c <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8101048:	f000 f89d 	bl	8101186 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810104c:	2200      	movs	r2, #0
 810104e:	2100      	movs	r1, #0
 8101050:	200b      	movs	r0, #11
 8101052:	f002 fe92 	bl	8103d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101056:	200b      	movs	r0, #11
 8101058:	f002 fea9 	bl	8103dae <HAL_NVIC_EnableIRQ>

}
 810105c:	bf00      	nop
 810105e:	3708      	adds	r7, #8
 8101060:	46bd      	mov	sp, r7
 8101062:	bd80      	pop	{r7, pc}
 8101064:	58024400 	.word	0x58024400
 8101068:	10007504 	.word	0x10007504
 810106c:	40020040 	.word	0x40020040

08101070 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8101070:	b480      	push	{r7}
 8101072:	b083      	sub	sp, #12
 8101074:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8101076:	4b0a      	ldr	r3, [pc, #40]	; (81010a0 <MX_MDMA_Init+0x30>)
 8101078:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810107c:	4a08      	ldr	r2, [pc, #32]	; (81010a0 <MX_MDMA_Init+0x30>)
 810107e:	f043 0301 	orr.w	r3, r3, #1
 8101082:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101086:	4b06      	ldr	r3, [pc, #24]	; (81010a0 <MX_MDMA_Init+0x30>)
 8101088:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810108c:	f003 0301 	and.w	r3, r3, #1
 8101090:	607b      	str	r3, [r7, #4]
 8101092:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8101094:	bf00      	nop
 8101096:	370c      	adds	r7, #12
 8101098:	46bd      	mov	sp, r7
 810109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810109e:	4770      	bx	lr
 81010a0:	58024400 	.word	0x58024400

081010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81010a4:	b580      	push	{r7, lr}
 81010a6:	b088      	sub	sp, #32
 81010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010aa:	f107 030c 	add.w	r3, r7, #12
 81010ae:	2200      	movs	r2, #0
 81010b0:	601a      	str	r2, [r3, #0]
 81010b2:	605a      	str	r2, [r3, #4]
 81010b4:	609a      	str	r2, [r3, #8]
 81010b6:	60da      	str	r2, [r3, #12]
 81010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81010ba:	4b1a      	ldr	r3, [pc, #104]	; (8101124 <MX_GPIO_Init+0x80>)
 81010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010c0:	4a18      	ldr	r2, [pc, #96]	; (8101124 <MX_GPIO_Init+0x80>)
 81010c2:	f043 0302 	orr.w	r3, r3, #2
 81010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010ca:	4b16      	ldr	r3, [pc, #88]	; (8101124 <MX_GPIO_Init+0x80>)
 81010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010d0:	f003 0302 	and.w	r3, r3, #2
 81010d4:	60bb      	str	r3, [r7, #8]
 81010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81010d8:	4b12      	ldr	r3, [pc, #72]	; (8101124 <MX_GPIO_Init+0x80>)
 81010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010de:	4a11      	ldr	r2, [pc, #68]	; (8101124 <MX_GPIO_Init+0x80>)
 81010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010e8:	4b0e      	ldr	r3, [pc, #56]	; (8101124 <MX_GPIO_Init+0x80>)
 81010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81010f2:	607b      	str	r3, [r7, #4]
 81010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 81010f6:	2200      	movs	r2, #0
 81010f8:	2104      	movs	r1, #4
 81010fa:	480b      	ldr	r0, [pc, #44]	; (8101128 <MX_GPIO_Init+0x84>)
 81010fc:	f004 fd72 	bl	8105be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101100:	2304      	movs	r3, #4
 8101102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101104:	2301      	movs	r3, #1
 8101106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101108:	2300      	movs	r3, #0
 810110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810110c:	2300      	movs	r3, #0
 810110e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101110:	f107 030c 	add.w	r3, r7, #12
 8101114:	4619      	mov	r1, r3
 8101116:	4804      	ldr	r0, [pc, #16]	; (8101128 <MX_GPIO_Init+0x84>)
 8101118:	f004 fbb4 	bl	8105884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810111c:	bf00      	nop
 810111e:	3720      	adds	r7, #32
 8101120:	46bd      	mov	sp, r7
 8101122:	bd80      	pop	{r7, pc}
 8101124:	58024400 	.word	0x58024400
 8101128:	58022400 	.word	0x58022400

0810112c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 810112c:	b580      	push	{r7, lr}
 810112e:	b084      	sub	sp, #16
 8101130:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8101132:	463b      	mov	r3, r7
 8101134:	2200      	movs	r2, #0
 8101136:	601a      	str	r2, [r3, #0]
 8101138:	605a      	str	r2, [r3, #4]
 810113a:	609a      	str	r2, [r3, #8]
 810113c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 810113e:	f002 fe51 	bl	8103de4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8101142:	2301      	movs	r3, #1
 8101144:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8101146:	2300      	movs	r3, #0
 8101148:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 810114a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 810114e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8101150:	2319      	movs	r3, #25
 8101152:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8101154:	2300      	movs	r3, #0
 8101156:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8101158:	2300      	movs	r3, #0
 810115a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 810115c:	2303      	movs	r3, #3
 810115e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8101160:	2300      	movs	r3, #0
 8101162:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8101164:	2301      	movs	r3, #1
 8101166:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8101168:	2301      	movs	r3, #1
 810116a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810116c:	2301      	movs	r3, #1
 810116e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8101170:	463b      	mov	r3, r7
 8101172:	4618      	mov	r0, r3
 8101174:	f002 fe6e 	bl	8103e54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8101178:	2004      	movs	r0, #4
 810117a:	f002 fe4b 	bl	8103e14 <HAL_MPU_Enable>

}
 810117e:	bf00      	nop
 8101180:	3710      	adds	r7, #16
 8101182:	46bd      	mov	sp, r7
 8101184:	bd80      	pop	{r7, pc}

08101186 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101186:	b480      	push	{r7}
 8101188:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810118a:	b672      	cpsid	i
}
 810118c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810118e:	e7fe      	b.n	810118e <Error_Handler+0x8>

08101190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101190:	b480      	push	{r7}
 8101192:	b083      	sub	sp, #12
 8101194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101196:	4b0a      	ldr	r3, [pc, #40]	; (81011c0 <HAL_MspInit+0x30>)
 8101198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810119c:	4a08      	ldr	r2, [pc, #32]	; (81011c0 <HAL_MspInit+0x30>)
 810119e:	f043 0302 	orr.w	r3, r3, #2
 81011a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81011a6:	4b06      	ldr	r3, [pc, #24]	; (81011c0 <HAL_MspInit+0x30>)
 81011a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011ac:	f003 0302 	and.w	r3, r3, #2
 81011b0:	607b      	str	r3, [r7, #4]
 81011b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81011b4:	bf00      	nop
 81011b6:	370c      	adds	r7, #12
 81011b8:	46bd      	mov	sp, r7
 81011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011be:	4770      	bx	lr
 81011c0:	58024400 	.word	0x58024400

081011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b0ba      	sub	sp, #232	; 0xe8
 81011c8:	af00      	add	r7, sp, #0
 81011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81011d0:	2200      	movs	r2, #0
 81011d2:	601a      	str	r2, [r3, #0]
 81011d4:	605a      	str	r2, [r3, #4]
 81011d6:	609a      	str	r2, [r3, #8]
 81011d8:	60da      	str	r2, [r3, #12]
 81011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81011dc:	f107 0310 	add.w	r3, r7, #16
 81011e0:	22c0      	movs	r2, #192	; 0xc0
 81011e2:	2100      	movs	r1, #0
 81011e4:	4618      	mov	r0, r3
 81011e6:	f00f f837 	bl	8110258 <memset>
  if(huart->Instance==USART3)
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	681b      	ldr	r3, [r3, #0]
 81011ee:	4a3e      	ldr	r2, [pc, #248]	; (81012e8 <HAL_UART_MspInit+0x124>)
 81011f0:	4293      	cmp	r3, r2
 81011f2:	d174      	bne.n	81012de <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81011f4:	f04f 0202 	mov.w	r2, #2
 81011f8:	f04f 0300 	mov.w	r3, #0
 81011fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101200:	2300      	movs	r3, #0
 8101202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101206:	f107 0310 	add.w	r3, r7, #16
 810120a:	4618      	mov	r0, r3
 810120c:	f004 ff90 	bl	8106130 <HAL_RCCEx_PeriphCLKConfig>
 8101210:	4603      	mov	r3, r0
 8101212:	2b00      	cmp	r3, #0
 8101214:	d001      	beq.n	810121a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101216:	f7ff ffb6 	bl	8101186 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810121a:	4b34      	ldr	r3, [pc, #208]	; (81012ec <HAL_UART_MspInit+0x128>)
 810121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101220:	4a32      	ldr	r2, [pc, #200]	; (81012ec <HAL_UART_MspInit+0x128>)
 8101222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810122a:	4b30      	ldr	r3, [pc, #192]	; (81012ec <HAL_UART_MspInit+0x128>)
 810122c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101234:	60fb      	str	r3, [r7, #12]
 8101236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101238:	4b2c      	ldr	r3, [pc, #176]	; (81012ec <HAL_UART_MspInit+0x128>)
 810123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810123e:	4a2b      	ldr	r2, [pc, #172]	; (81012ec <HAL_UART_MspInit+0x128>)
 8101240:	f043 0302 	orr.w	r3, r3, #2
 8101244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101248:	4b28      	ldr	r3, [pc, #160]	; (81012ec <HAL_UART_MspInit+0x128>)
 810124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810124e:	f003 0302 	and.w	r3, r3, #2
 8101252:	60bb      	str	r3, [r7, #8]
 8101254:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810125a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810125e:	2302      	movs	r3, #2
 8101260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101264:	2300      	movs	r3, #0
 8101266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810126a:	2300      	movs	r3, #0
 810126c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101270:	2307      	movs	r3, #7
 8101272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101276:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810127a:	4619      	mov	r1, r3
 810127c:	481c      	ldr	r0, [pc, #112]	; (81012f0 <HAL_UART_MspInit+0x12c>)
 810127e:	f004 fb01 	bl	8105884 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8101282:	4b1c      	ldr	r3, [pc, #112]	; (81012f4 <HAL_UART_MspInit+0x130>)
 8101284:	4a1c      	ldr	r2, [pc, #112]	; (81012f8 <HAL_UART_MspInit+0x134>)
 8101286:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101288:	4b1a      	ldr	r3, [pc, #104]	; (81012f4 <HAL_UART_MspInit+0x130>)
 810128a:	222d      	movs	r2, #45	; 0x2d
 810128c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810128e:	4b19      	ldr	r3, [pc, #100]	; (81012f4 <HAL_UART_MspInit+0x130>)
 8101290:	2200      	movs	r2, #0
 8101292:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101294:	4b17      	ldr	r3, [pc, #92]	; (81012f4 <HAL_UART_MspInit+0x130>)
 8101296:	2200      	movs	r2, #0
 8101298:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810129a:	4b16      	ldr	r3, [pc, #88]	; (81012f4 <HAL_UART_MspInit+0x130>)
 810129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81012a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81012a2:	4b14      	ldr	r3, [pc, #80]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012a4:	2200      	movs	r2, #0
 81012a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81012a8:	4b12      	ldr	r3, [pc, #72]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012aa:	2200      	movs	r2, #0
 81012ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 81012ae:	4b11      	ldr	r3, [pc, #68]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012b0:	2200      	movs	r2, #0
 81012b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 81012b4:	4b0f      	ldr	r3, [pc, #60]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012b6:	2200      	movs	r2, #0
 81012b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81012ba:	4b0e      	ldr	r3, [pc, #56]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012bc:	2200      	movs	r2, #0
 81012be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81012c0:	480c      	ldr	r0, [pc, #48]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012c2:	f002 fe1f 	bl	8103f04 <HAL_DMA_Init>
 81012c6:	4603      	mov	r3, r0
 81012c8:	2b00      	cmp	r3, #0
 81012ca:	d001      	beq.n	81012d0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 81012cc:	f7ff ff5b 	bl	8101186 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 81012d0:	687b      	ldr	r3, [r7, #4]
 81012d2:	4a08      	ldr	r2, [pc, #32]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 81012d8:	4a06      	ldr	r2, [pc, #24]	; (81012f4 <HAL_UART_MspInit+0x130>)
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81012de:	bf00      	nop
 81012e0:	37e8      	adds	r7, #232	; 0xe8
 81012e2:	46bd      	mov	sp, r7
 81012e4:	bd80      	pop	{r7, pc}
 81012e6:	bf00      	nop
 81012e8:	40004800 	.word	0x40004800
 81012ec:	58024400 	.word	0x58024400
 81012f0:	58020400 	.word	0x58020400
 81012f4:	1000748c 	.word	0x1000748c
 81012f8:	40020010 	.word	0x40020010

081012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81012fc:	b480      	push	{r7}
 81012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101300:	e7fe      	b.n	8101300 <NMI_Handler+0x4>

08101302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101302:	b480      	push	{r7}
 8101304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101306:	e7fe      	b.n	8101306 <HardFault_Handler+0x4>

08101308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101308:	b480      	push	{r7}
 810130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810130c:	e7fe      	b.n	810130c <MemManage_Handler+0x4>

0810130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810130e:	b480      	push	{r7}
 8101310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101312:	e7fe      	b.n	8101312 <BusFault_Handler+0x4>

08101314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101314:	b480      	push	{r7}
 8101316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101318:	e7fe      	b.n	8101318 <UsageFault_Handler+0x4>

0810131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810131a:	b480      	push	{r7}
 810131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810131e:	bf00      	nop
 8101320:	46bd      	mov	sp, r7
 8101322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101326:	4770      	bx	lr

08101328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101328:	b480      	push	{r7}
 810132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810132c:	bf00      	nop
 810132e:	46bd      	mov	sp, r7
 8101330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101334:	4770      	bx	lr

08101336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101336:	b480      	push	{r7}
 8101338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810133a:	bf00      	nop
 810133c:	46bd      	mov	sp, r7
 810133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101342:	4770      	bx	lr

08101344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101348:	f002 fbf8 	bl	8103b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810134c:	bf00      	nop
 810134e:	bd80      	pop	{r7, pc}

08101350 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101350:	b580      	push	{r7, lr}
 8101352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101354:	4802      	ldr	r0, [pc, #8]	; (8101360 <DMA1_Stream0_IRQHandler+0x10>)
 8101356:	f003 f92f 	bl	81045b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810135a:	bf00      	nop
 810135c:	bd80      	pop	{r7, pc}
 810135e:	bf00      	nop
 8101360:	1000748c 	.word	0x1000748c

08101364 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b086      	sub	sp, #24
 8101368:	af00      	add	r7, sp, #0
 810136a:	60f8      	str	r0, [r7, #12]
 810136c:	60b9      	str	r1, [r7, #8]
 810136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101370:	2300      	movs	r3, #0
 8101372:	617b      	str	r3, [r7, #20]
 8101374:	e00a      	b.n	810138c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101376:	f3af 8000 	nop.w
 810137a:	4601      	mov	r1, r0
 810137c:	68bb      	ldr	r3, [r7, #8]
 810137e:	1c5a      	adds	r2, r3, #1
 8101380:	60ba      	str	r2, [r7, #8]
 8101382:	b2ca      	uxtb	r2, r1
 8101384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101386:	697b      	ldr	r3, [r7, #20]
 8101388:	3301      	adds	r3, #1
 810138a:	617b      	str	r3, [r7, #20]
 810138c:	697a      	ldr	r2, [r7, #20]
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	429a      	cmp	r2, r3
 8101392:	dbf0      	blt.n	8101376 <_read+0x12>
  }

  return len;
 8101394:	687b      	ldr	r3, [r7, #4]
}
 8101396:	4618      	mov	r0, r3
 8101398:	3718      	adds	r7, #24
 810139a:	46bd      	mov	sp, r7
 810139c:	bd80      	pop	{r7, pc}

0810139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810139e:	b580      	push	{r7, lr}
 81013a0:	b086      	sub	sp, #24
 81013a2:	af00      	add	r7, sp, #0
 81013a4:	60f8      	str	r0, [r7, #12]
 81013a6:	60b9      	str	r1, [r7, #8]
 81013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013aa:	2300      	movs	r3, #0
 81013ac:	617b      	str	r3, [r7, #20]
 81013ae:	e009      	b.n	81013c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81013b0:	68bb      	ldr	r3, [r7, #8]
 81013b2:	1c5a      	adds	r2, r3, #1
 81013b4:	60ba      	str	r2, [r7, #8]
 81013b6:	781b      	ldrb	r3, [r3, #0]
 81013b8:	4618      	mov	r0, r3
 81013ba:	f7ff fd31 	bl	8100e20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013be:	697b      	ldr	r3, [r7, #20]
 81013c0:	3301      	adds	r3, #1
 81013c2:	617b      	str	r3, [r7, #20]
 81013c4:	697a      	ldr	r2, [r7, #20]
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	429a      	cmp	r2, r3
 81013ca:	dbf1      	blt.n	81013b0 <_write+0x12>
  }
  return len;
 81013cc:	687b      	ldr	r3, [r7, #4]
}
 81013ce:	4618      	mov	r0, r3
 81013d0:	3718      	adds	r7, #24
 81013d2:	46bd      	mov	sp, r7
 81013d4:	bd80      	pop	{r7, pc}

081013d6 <_close>:

int _close(int file)
{
 81013d6:	b480      	push	{r7}
 81013d8:	b083      	sub	sp, #12
 81013da:	af00      	add	r7, sp, #0
 81013dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81013e2:	4618      	mov	r0, r3
 81013e4:	370c      	adds	r7, #12
 81013e6:	46bd      	mov	sp, r7
 81013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ec:	4770      	bx	lr

081013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 81013ee:	b480      	push	{r7}
 81013f0:	b083      	sub	sp, #12
 81013f2:	af00      	add	r7, sp, #0
 81013f4:	6078      	str	r0, [r7, #4]
 81013f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81013f8:	683b      	ldr	r3, [r7, #0]
 81013fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81013fe:	605a      	str	r2, [r3, #4]
  return 0;
 8101400:	2300      	movs	r3, #0
}
 8101402:	4618      	mov	r0, r3
 8101404:	370c      	adds	r7, #12
 8101406:	46bd      	mov	sp, r7
 8101408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140c:	4770      	bx	lr

0810140e <_isatty>:

int _isatty(int file)
{
 810140e:	b480      	push	{r7}
 8101410:	b083      	sub	sp, #12
 8101412:	af00      	add	r7, sp, #0
 8101414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101416:	2301      	movs	r3, #1
}
 8101418:	4618      	mov	r0, r3
 810141a:	370c      	adds	r7, #12
 810141c:	46bd      	mov	sp, r7
 810141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101422:	4770      	bx	lr

08101424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101424:	b480      	push	{r7}
 8101426:	b085      	sub	sp, #20
 8101428:	af00      	add	r7, sp, #0
 810142a:	60f8      	str	r0, [r7, #12]
 810142c:	60b9      	str	r1, [r7, #8]
 810142e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101430:	2300      	movs	r3, #0
}
 8101432:	4618      	mov	r0, r3
 8101434:	3714      	adds	r7, #20
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr
	...

08101440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101440:	b580      	push	{r7, lr}
 8101442:	b086      	sub	sp, #24
 8101444:	af00      	add	r7, sp, #0
 8101446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101448:	4a14      	ldr	r2, [pc, #80]	; (810149c <_sbrk+0x5c>)
 810144a:	4b15      	ldr	r3, [pc, #84]	; (81014a0 <_sbrk+0x60>)
 810144c:	1ad3      	subs	r3, r2, r3
 810144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101450:	697b      	ldr	r3, [r7, #20]
 8101452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101454:	4b13      	ldr	r3, [pc, #76]	; (81014a4 <_sbrk+0x64>)
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	2b00      	cmp	r3, #0
 810145a:	d102      	bne.n	8101462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810145c:	4b11      	ldr	r3, [pc, #68]	; (81014a4 <_sbrk+0x64>)
 810145e:	4a12      	ldr	r2, [pc, #72]	; (81014a8 <_sbrk+0x68>)
 8101460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101462:	4b10      	ldr	r3, [pc, #64]	; (81014a4 <_sbrk+0x64>)
 8101464:	681a      	ldr	r2, [r3, #0]
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	4413      	add	r3, r2
 810146a:	693a      	ldr	r2, [r7, #16]
 810146c:	429a      	cmp	r2, r3
 810146e:	d207      	bcs.n	8101480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101470:	f00e ff0a 	bl	8110288 <__errno>
 8101474:	4603      	mov	r3, r0
 8101476:	220c      	movs	r2, #12
 8101478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810147a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810147e:	e009      	b.n	8101494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101480:	4b08      	ldr	r3, [pc, #32]	; (81014a4 <_sbrk+0x64>)
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101486:	4b07      	ldr	r3, [pc, #28]	; (81014a4 <_sbrk+0x64>)
 8101488:	681a      	ldr	r2, [r3, #0]
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	4413      	add	r3, r2
 810148e:	4a05      	ldr	r2, [pc, #20]	; (81014a4 <_sbrk+0x64>)
 8101490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101492:	68fb      	ldr	r3, [r7, #12]
}
 8101494:	4618      	mov	r0, r3
 8101496:	3718      	adds	r7, #24
 8101498:	46bd      	mov	sp, r7
 810149a:	bd80      	pop	{r7, pc}
 810149c:	10048000 	.word	0x10048000
 81014a0:	00000800 	.word	0x00000800
 81014a4:	1003fa28 	.word	0x1003fa28
 81014a8:	10040028 	.word	0x10040028

081014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 81014e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81014b0:	f002 fa94 	bl	81039dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81014b4:	480c      	ldr	r0, [pc, #48]	; (81014e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81014b6:	490d      	ldr	r1, [pc, #52]	; (81014ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81014b8:	4a0d      	ldr	r2, [pc, #52]	; (81014f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81014bc:	e002      	b.n	81014c4 <LoopCopyDataInit>

081014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81014c2:	3304      	adds	r3, #4

081014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81014c8:	d3f9      	bcc.n	81014be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81014ca:	4a0a      	ldr	r2, [pc, #40]	; (81014f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81014cc:	4c0a      	ldr	r4, [pc, #40]	; (81014f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 81014d0:	e001      	b.n	81014d6 <LoopFillZerobss>

081014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81014d4:	3204      	adds	r2, #4

081014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81014d8:	d3fb      	bcc.n	81014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81014da:	f00e fedb 	bl	8110294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81014de:	f7ff fcb1 	bl	8100e44 <main>
  bx  lr
 81014e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81014e4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81014e8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81014ec:	100073dc 	.word	0x100073dc
  ldr r2, =_sidata
 81014f0:	0817ea10 	.word	0x0817ea10
  ldr r2, =_sbss
 81014f4:	100073dc 	.word	0x100073dc
  ldr r4, =_ebss
 81014f8:	10040024 	.word	0x10040024

081014fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81014fc:	e7fe      	b.n	81014fc <ADC3_IRQHandler>
	...

08101500 <face_recognition_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_recognition_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8101500:	b580      	push	{r7, lr}
 8101502:	b082      	sub	sp, #8
 8101504:	af00      	add	r7, sp, #0
 8101506:	6078      	str	r0, [r7, #4]
 8101508:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_face_recognition_activations_map, 1, params)) {
 810150a:	683a      	ldr	r2, [r7, #0]
 810150c:	2101      	movs	r1, #1
 810150e:	48a0      	ldr	r0, [pc, #640]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101510:	f007 fe3e 	bl	8109190 <ai_platform_get_activations_map>
 8101514:	4603      	mov	r3, r0
 8101516:	2b00      	cmp	r3, #0
 8101518:	f000 87e0 	beq.w	81024dc <face_recognition_configure_activations+0xfdc>
    /* Updating activations (byte) offsets */
    
    serving_default_input_10_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 23124);
 810151c:	4b9c      	ldr	r3, [pc, #624]	; (8101790 <face_recognition_configure_activations+0x290>)
 810151e:	681b      	ldr	r3, [r3, #0]
 8101520:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8101524:	3354      	adds	r3, #84	; 0x54
 8101526:	4a9b      	ldr	r2, [pc, #620]	; (8101794 <face_recognition_configure_activations+0x294>)
 8101528:	6093      	str	r3, [r2, #8]
    serving_default_input_10_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 23124);
 810152a:	4b99      	ldr	r3, [pc, #612]	; (8101790 <face_recognition_configure_activations+0x290>)
 810152c:	681b      	ldr	r3, [r3, #0]
 810152e:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8101532:	3354      	adds	r3, #84	; 0x54
 8101534:	4a97      	ldr	r2, [pc, #604]	; (8101794 <face_recognition_configure_activations+0x294>)
 8101536:	60d3      	str	r3, [r2, #12]
    conversion_0_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 23120);
 8101538:	4b95      	ldr	r3, [pc, #596]	; (8101790 <face_recognition_configure_activations+0x290>)
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8101540:	3350      	adds	r3, #80	; 0x50
 8101542:	4a95      	ldr	r2, [pc, #596]	; (8101798 <face_recognition_configure_activations+0x298>)
 8101544:	6093      	str	r3, [r2, #8]
    conversion_0_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 23120);
 8101546:	4b92      	ldr	r3, [pc, #584]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 810154e:	3350      	adds	r3, #80	; 0x50
 8101550:	4a91      	ldr	r2, [pc, #580]	; (8101798 <face_recognition_configure_activations+0x298>)
 8101552:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 5696);
 8101554:	4b8e      	ldr	r3, [pc, #568]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101556:	681b      	ldr	r3, [r3, #0]
 8101558:	f503 53b2 	add.w	r3, r3, #5696	; 0x1640
 810155c:	4a8f      	ldr	r2, [pc, #572]	; (810179c <face_recognition_configure_activations+0x29c>)
 810155e:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 5696);
 8101560:	4b8b      	ldr	r3, [pc, #556]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101562:	681b      	ldr	r3, [r3, #0]
 8101564:	f503 53b2 	add.w	r3, r3, #5696	; 0x1640
 8101568:	4a8c      	ldr	r2, [pc, #560]	; (810179c <face_recognition_configure_activations+0x29c>)
 810156a:	60d3      	str	r3, [r2, #12]
    conv2d_2_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 1536);
 810156c:	4b88      	ldr	r3, [pc, #544]	; (8101790 <face_recognition_configure_activations+0x290>)
 810156e:	681b      	ldr	r3, [r3, #0]
 8101570:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8101574:	4a8a      	ldr	r2, [pc, #552]	; (81017a0 <face_recognition_configure_activations+0x2a0>)
 8101576:	6093      	str	r3, [r2, #8]
    conv2d_2_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 1536);
 8101578:	4b85      	ldr	r3, [pc, #532]	; (8101790 <face_recognition_configure_activations+0x290>)
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8101580:	4a87      	ldr	r2, [pc, #540]	; (81017a0 <face_recognition_configure_activations+0x2a0>)
 8101582:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 71680);
 8101584:	4b82      	ldr	r3, [pc, #520]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101586:	681b      	ldr	r3, [r3, #0]
 8101588:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 810158c:	4a85      	ldr	r2, [pc, #532]	; (81017a4 <face_recognition_configure_activations+0x2a4>)
 810158e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 71680);
 8101590:	4b7f      	ldr	r3, [pc, #508]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101592:	681b      	ldr	r3, [r3, #0]
 8101594:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8101598:	4a82      	ldr	r2, [pc, #520]	; (81017a4 <face_recognition_configure_activations+0x2a4>)
 810159a:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 512);
 810159c:	4b7c      	ldr	r3, [pc, #496]	; (8101790 <face_recognition_configure_activations+0x290>)
 810159e:	681b      	ldr	r3, [r3, #0]
 81015a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 81015a4:	4a80      	ldr	r2, [pc, #512]	; (81017a8 <face_recognition_configure_activations+0x2a8>)
 81015a6:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 512);
 81015a8:	4b79      	ldr	r3, [pc, #484]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 81015b0:	4a7d      	ldr	r2, [pc, #500]	; (81017a8 <face_recognition_configure_activations+0x2a8>)
 81015b2:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 72132);
 81015b4:	4b76      	ldr	r3, [pc, #472]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015b6:	681b      	ldr	r3, [r3, #0]
 81015b8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 81015bc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 81015c0:	4a7a      	ldr	r2, [pc, #488]	; (81017ac <face_recognition_configure_activations+0x2ac>)
 81015c2:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 72132);
 81015c4:	4b72      	ldr	r3, [pc, #456]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 81015cc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 81015d0:	4a76      	ldr	r2, [pc, #472]	; (81017ac <face_recognition_configure_activations+0x2ac>)
 81015d2:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81015d4:	4b6e      	ldr	r3, [pc, #440]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015d6:	681b      	ldr	r3, [r3, #0]
 81015d8:	4a75      	ldr	r2, [pc, #468]	; (81017b0 <face_recognition_configure_activations+0x2b0>)
 81015da:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81015dc:	4b6c      	ldr	r3, [pc, #432]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015de:	681b      	ldr	r3, [r3, #0]
 81015e0:	4a73      	ldr	r2, [pc, #460]	; (81017b0 <face_recognition_configure_activations+0x2b0>)
 81015e2:	60d3      	str	r3, [r2, #12]
    conv2d_4_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 32768);
 81015e4:	4b6a      	ldr	r3, [pc, #424]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015e6:	681b      	ldr	r3, [r3, #0]
 81015e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 81015ec:	4a71      	ldr	r2, [pc, #452]	; (81017b4 <face_recognition_configure_activations+0x2b4>)
 81015ee:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 32768);
 81015f0:	4b67      	ldr	r3, [pc, #412]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 81015f8:	4a6e      	ldr	r2, [pc, #440]	; (81017b4 <face_recognition_configure_activations+0x2b4>)
 81015fa:	60d3      	str	r3, [r2, #12]
    conv2d_6_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 26576);
 81015fc:	4b64      	ldr	r3, [pc, #400]	; (8101790 <face_recognition_configure_activations+0x290>)
 81015fe:	681b      	ldr	r3, [r3, #0]
 8101600:	f503 43cf 	add.w	r3, r3, #26496	; 0x6780
 8101604:	3350      	adds	r3, #80	; 0x50
 8101606:	4a6c      	ldr	r2, [pc, #432]	; (81017b8 <face_recognition_configure_activations+0x2b8>)
 8101608:	6093      	str	r3, [r2, #8]
    conv2d_6_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 26576);
 810160a:	4b61      	ldr	r3, [pc, #388]	; (8101790 <face_recognition_configure_activations+0x290>)
 810160c:	681b      	ldr	r3, [r3, #0]
 810160e:	f503 43cf 	add.w	r3, r3, #26496	; 0x6780
 8101612:	3350      	adds	r3, #80	; 0x50
 8101614:	4a68      	ldr	r2, [pc, #416]	; (81017b8 <face_recognition_configure_activations+0x2b8>)
 8101616:	60d3      	str	r3, [r2, #12]
    conv2d_6_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101618:	4b5d      	ldr	r3, [pc, #372]	; (8101790 <face_recognition_configure_activations+0x290>)
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	4a67      	ldr	r2, [pc, #412]	; (81017bc <face_recognition_configure_activations+0x2bc>)
 810161e:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101620:	4b5b      	ldr	r3, [pc, #364]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101622:	681b      	ldr	r3, [r3, #0]
 8101624:	4a65      	ldr	r2, [pc, #404]	; (81017bc <face_recognition_configure_activations+0x2bc>)
 8101626:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 25040);
 8101628:	4b59      	ldr	r3, [pc, #356]	; (8101790 <face_recognition_configure_activations+0x290>)
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8101630:	3350      	adds	r3, #80	; 0x50
 8101632:	4a63      	ldr	r2, [pc, #396]	; (81017c0 <face_recognition_configure_activations+0x2c0>)
 8101634:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 25040);
 8101636:	4b56      	ldr	r3, [pc, #344]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 810163e:	3350      	adds	r3, #80	; 0x50
 8101640:	4a5f      	ldr	r2, [pc, #380]	; (81017c0 <face_recognition_configure_activations+0x2c0>)
 8101642:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229104);
 8101644:	4b52      	ldr	r3, [pc, #328]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	f503 335f 	add.w	r3, r3, #228352	; 0x37c00
 810164c:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8101650:	4a5c      	ldr	r2, [pc, #368]	; (81017c4 <face_recognition_configure_activations+0x2c4>)
 8101652:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229104);
 8101654:	4b4e      	ldr	r3, [pc, #312]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101656:	681b      	ldr	r3, [r3, #0]
 8101658:	f503 335f 	add.w	r3, r3, #228352	; 0x37c00
 810165c:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8101660:	4a58      	ldr	r2, [pc, #352]	; (81017c4 <face_recognition_configure_activations+0x2c4>)
 8101662:	60d3      	str	r3, [r2, #12]
    conv2d_7_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 24784);
 8101664:	4b4a      	ldr	r3, [pc, #296]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101666:	681b      	ldr	r3, [r3, #0]
 8101668:	f503 43c1 	add.w	r3, r3, #24704	; 0x6080
 810166c:	3350      	adds	r3, #80	; 0x50
 810166e:	4a56      	ldr	r2, [pc, #344]	; (81017c8 <face_recognition_configure_activations+0x2c8>)
 8101670:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 24784);
 8101672:	4b47      	ldr	r3, [pc, #284]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101674:	681b      	ldr	r3, [r3, #0]
 8101676:	f503 43c1 	add.w	r3, r3, #24704	; 0x6080
 810167a:	3350      	adds	r3, #80	; 0x50
 810167c:	4a52      	ldr	r2, [pc, #328]	; (81017c8 <face_recognition_configure_activations+0x2c8>)
 810167e:	60d3      	str	r3, [r2, #12]
    conv2d_8_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 32976);
 8101680:	4b43      	ldr	r3, [pc, #268]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8101688:	33d0      	adds	r3, #208	; 0xd0
 810168a:	4a50      	ldr	r2, [pc, #320]	; (81017cc <face_recognition_configure_activations+0x2cc>)
 810168c:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 32976);
 810168e:	4b40      	ldr	r3, [pc, #256]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101690:	681b      	ldr	r3, [r3, #0]
 8101692:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8101696:	33d0      	adds	r3, #208	; 0xd0
 8101698:	4a4c      	ldr	r2, [pc, #304]	; (81017cc <face_recognition_configure_activations+0x2cc>)
 810169a:	60d3      	str	r3, [r2, #12]
    conv2d_9_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 82128);
 810169c:	4b3c      	ldr	r3, [pc, #240]	; (8101790 <face_recognition_configure_activations+0x290>)
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 81016a4:	33d0      	adds	r3, #208	; 0xd0
 81016a6:	4a4a      	ldr	r2, [pc, #296]	; (81017d0 <face_recognition_configure_activations+0x2d0>)
 81016a8:	6093      	str	r3, [r2, #8]
    conv2d_9_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 82128);
 81016aa:	4b39      	ldr	r3, [pc, #228]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016ac:	681b      	ldr	r3, [r3, #0]
 81016ae:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 81016b2:	33d0      	adds	r3, #208	; 0xd0
 81016b4:	4a46      	ldr	r2, [pc, #280]	; (81017d0 <face_recognition_configure_activations+0x2d0>)
 81016b6:	60d3      	str	r3, [r2, #12]
    conv2d_9_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 23004);
 81016b8:	4b35      	ldr	r3, [pc, #212]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 81016c0:	335c      	adds	r3, #92	; 0x5c
 81016c2:	4a44      	ldr	r2, [pc, #272]	; (81017d4 <face_recognition_configure_activations+0x2d4>)
 81016c4:	6093      	str	r3, [r2, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 23004);
 81016c6:	4b32      	ldr	r3, [pc, #200]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	f503 43b3 	add.w	r3, r3, #22912	; 0x5980
 81016ce:	335c      	adds	r3, #92	; 0x5c
 81016d0:	4a40      	ldr	r2, [pc, #256]	; (81017d4 <face_recognition_configure_activations+0x2d4>)
 81016d2:	60d3      	str	r3, [r2, #12]
    conv2d_9_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 80592);
 81016d4:	4b2e      	ldr	r3, [pc, #184]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 81016dc:	33d0      	adds	r3, #208	; 0xd0
 81016de:	4a3e      	ldr	r2, [pc, #248]	; (81017d8 <face_recognition_configure_activations+0x2d8>)
 81016e0:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 80592);
 81016e2:	4b2b      	ldr	r3, [pc, #172]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016e4:	681b      	ldr	r3, [r3, #0]
 81016e6:	f503 339d 	add.w	r3, r3, #80384	; 0x13a00
 81016ea:	33d0      	adds	r3, #208	; 0xd0
 81016ec:	4a3a      	ldr	r2, [pc, #232]	; (81017d8 <face_recognition_configure_activations+0x2d8>)
 81016ee:	60d3      	str	r3, [r2, #12]
    conv2d_10_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 80336);
 81016f0:	4b27      	ldr	r3, [pc, #156]	; (8101790 <face_recognition_configure_activations+0x290>)
 81016f2:	681b      	ldr	r3, [r3, #0]
 81016f4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 81016f8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 81016fc:	4a37      	ldr	r2, [pc, #220]	; (81017dc <face_recognition_configure_activations+0x2dc>)
 81016fe:	6093      	str	r3, [r2, #8]
    conv2d_10_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 80336);
 8101700:	4b23      	ldr	r3, [pc, #140]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8101708:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810170c:	4a33      	ldr	r2, [pc, #204]	; (81017dc <face_recognition_configure_activations+0x2dc>)
 810170e:	60d3      	str	r3, [r2, #12]
    eltwise_11_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 80336);
 8101710:	4b1f      	ldr	r3, [pc, #124]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8101718:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810171c:	4a30      	ldr	r2, [pc, #192]	; (81017e0 <face_recognition_configure_activations+0x2e0>)
 810171e:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 80336);
 8101720:	4b1b      	ldr	r3, [pc, #108]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8101728:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810172c:	4a2c      	ldr	r2, [pc, #176]	; (81017e0 <face_recognition_configure_activations+0x2e0>)
 810172e:	60d3      	str	r3, [r2, #12]
    conv2d_12_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 88528);
 8101730:	4b17      	ldr	r3, [pc, #92]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101732:	681b      	ldr	r3, [r3, #0]
 8101734:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8101738:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810173c:	4a29      	ldr	r2, [pc, #164]	; (81017e4 <face_recognition_configure_activations+0x2e4>)
 810173e:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 88528);
 8101740:	4b13      	ldr	r3, [pc, #76]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101742:	681b      	ldr	r3, [r3, #0]
 8101744:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8101748:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810174c:	4a25      	ldr	r2, [pc, #148]	; (81017e4 <face_recognition_configure_activations+0x2e4>)
 810174e:	60d3      	str	r3, [r2, #12]
    conv2d_14_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 85408);
 8101750:	4b0f      	ldr	r3, [pc, #60]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f503 33a6 	add.w	r3, r3, #84992	; 0x14c00
 8101758:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 810175c:	4a22      	ldr	r2, [pc, #136]	; (81017e8 <face_recognition_configure_activations+0x2e8>)
 810175e:	6093      	str	r3, [r2, #8]
    conv2d_14_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 85408);
 8101760:	4b0b      	ldr	r3, [pc, #44]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	f503 33a6 	add.w	r3, r3, #84992	; 0x14c00
 8101768:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 810176c:	4a1e      	ldr	r2, [pc, #120]	; (81017e8 <face_recognition_configure_activations+0x2e8>)
 810176e:	60d3      	str	r3, [r2, #12]
    conv2d_14_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101770:	4b07      	ldr	r3, [pc, #28]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	4a1d      	ldr	r2, [pc, #116]	; (81017ec <face_recognition_configure_activations+0x2ec>)
 8101776:	6093      	str	r3, [r2, #8]
    conv2d_14_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101778:	4b05      	ldr	r3, [pc, #20]	; (8101790 <face_recognition_configure_activations+0x290>)
 810177a:	681b      	ldr	r3, [r3, #0]
 810177c:	4a1b      	ldr	r2, [pc, #108]	; (81017ec <face_recognition_configure_activations+0x2ec>)
 810177e:	60d3      	str	r3, [r2, #12]
    conv2d_14_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 73120);
 8101780:	4b03      	ldr	r3, [pc, #12]	; (8101790 <face_recognition_configure_activations+0x290>)
 8101782:	681b      	ldr	r3, [r3, #0]
 8101784:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 8101788:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 810178c:	e030      	b.n	81017f0 <face_recognition_configure_activations+0x2f0>
 810178e:	bf00      	nop
 8101790:	1003fa2c 	.word	0x1003fa2c
 8101794:	10000000 	.word	0x10000000
 8101798:	10000010 	.word	0x10000010
 810179c:	10000020 	.word	0x10000020
 81017a0:	10000030 	.word	0x10000030
 81017a4:	10000c00 	.word	0x10000c00
 81017a8:	10000040 	.word	0x10000040
 81017ac:	10000c10 	.word	0x10000c10
 81017b0:	10000050 	.word	0x10000050
 81017b4:	10000060 	.word	0x10000060
 81017b8:	10000070 	.word	0x10000070
 81017bc:	10000c30 	.word	0x10000c30
 81017c0:	10000080 	.word	0x10000080
 81017c4:	10000c40 	.word	0x10000c40
 81017c8:	10000090 	.word	0x10000090
 81017cc:	100000a0 	.word	0x100000a0
 81017d0:	100000b0 	.word	0x100000b0
 81017d4:	10000c60 	.word	0x10000c60
 81017d8:	100000c0 	.word	0x100000c0
 81017dc:	100000d0 	.word	0x100000d0
 81017e0:	100000e0 	.word	0x100000e0
 81017e4:	100000f0 	.word	0x100000f0
 81017e8:	10000100 	.word	0x10000100
 81017ec:	10000c90 	.word	0x10000c90
 81017f0:	4a9a      	ldr	r2, [pc, #616]	; (8101a5c <face_recognition_configure_activations+0x55c>)
 81017f2:	6093      	str	r3, [r2, #8]
    conv2d_14_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 73120);
 81017f4:	4b9a      	ldr	r3, [pc, #616]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 81017fc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8101800:	4a96      	ldr	r2, [pc, #600]	; (8101a5c <face_recognition_configure_activations+0x55c>)
 8101802:	60d3      	str	r3, [r2, #12]
    conv2d_15_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 72768);
 8101804:	4b96      	ldr	r3, [pc, #600]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 810180c:	3340      	adds	r3, #64	; 0x40
 810180e:	4a95      	ldr	r2, [pc, #596]	; (8101a64 <face_recognition_configure_activations+0x564>)
 8101810:	6093      	str	r3, [r2, #8]
    conv2d_15_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 72768);
 8101812:	4b93      	ldr	r3, [pc, #588]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101814:	681b      	ldr	r3, [r3, #0]
 8101816:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 810181a:	3340      	adds	r3, #64	; 0x40
 810181c:	4a91      	ldr	r2, [pc, #580]	; (8101a64 <face_recognition_configure_activations+0x564>)
 810181e:	60d3      	str	r3, [r2, #12]
    conv2d_15_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 225280);
 8101820:	4b8f      	ldr	r3, [pc, #572]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	f503 335c 	add.w	r3, r3, #225280	; 0x37000
 8101828:	4a8f      	ldr	r2, [pc, #572]	; (8101a68 <face_recognition_configure_activations+0x568>)
 810182a:	6093      	str	r3, [r2, #8]
    conv2d_15_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 225280);
 810182c:	4b8c      	ldr	r3, [pc, #560]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	f503 335c 	add.w	r3, r3, #225280	; 0x37000
 8101834:	4a8c      	ldr	r2, [pc, #560]	; (8101a68 <face_recognition_configure_activations+0x568>)
 8101836:	60d3      	str	r3, [r2, #12]
    conv2d_16_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101838:	4b89      	ldr	r3, [pc, #548]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810183a:	681b      	ldr	r3, [r3, #0]
 810183c:	4a8b      	ldr	r2, [pc, #556]	; (8101a6c <face_recognition_configure_activations+0x56c>)
 810183e:	6093      	str	r3, [r2, #8]
    conv2d_16_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101840:	4b87      	ldr	r3, [pc, #540]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	4a89      	ldr	r2, [pc, #548]	; (8101a6c <face_recognition_configure_activations+0x56c>)
 8101846:	60d3      	str	r3, [r2, #12]
    conv2d_17_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 24576);
 8101848:	4b85      	ldr	r3, [pc, #532]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8101850:	4a87      	ldr	r2, [pc, #540]	; (8101a70 <face_recognition_configure_activations+0x570>)
 8101852:	6093      	str	r3, [r2, #8]
    conv2d_17_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 24576);
 8101854:	4b82      	ldr	r3, [pc, #520]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101856:	681b      	ldr	r3, [r3, #0]
 8101858:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 810185c:	4a84      	ldr	r2, [pc, #528]	; (8101a70 <face_recognition_configure_activations+0x570>)
 810185e:	60d3      	str	r3, [r2, #12]
    conv2d_17_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 221724);
 8101860:	4b7f      	ldr	r3, [pc, #508]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
 8101868:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 810186c:	4a81      	ldr	r2, [pc, #516]	; (8101a74 <face_recognition_configure_activations+0x574>)
 810186e:	6093      	str	r3, [r2, #8]
    conv2d_17_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 221724);
 8101870:	4b7b      	ldr	r3, [pc, #492]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101872:	681b      	ldr	r3, [r3, #0]
 8101874:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
 8101878:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 810187c:	4a7d      	ldr	r2, [pc, #500]	; (8101a74 <face_recognition_configure_activations+0x574>)
 810187e:	60d3      	str	r3, [r2, #12]
    conv2d_17_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 23040);
 8101880:	4b77      	ldr	r3, [pc, #476]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8101888:	4a7b      	ldr	r2, [pc, #492]	; (8101a78 <face_recognition_configure_activations+0x578>)
 810188a:	6093      	str	r3, [r2, #8]
    conv2d_17_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 23040);
 810188c:	4b74      	ldr	r3, [pc, #464]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	f503 43b4 	add.w	r3, r3, #23040	; 0x5a00
 8101894:	4a78      	ldr	r2, [pc, #480]	; (8101a78 <face_recognition_configure_activations+0x578>)
 8101896:	60d3      	str	r3, [r2, #12]
    conv2d_18_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 22784);
 8101898:	4b71      	ldr	r3, [pc, #452]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810189a:	681b      	ldr	r3, [r3, #0]
 810189c:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 81018a0:	4a76      	ldr	r2, [pc, #472]	; (8101a7c <face_recognition_configure_activations+0x57c>)
 81018a2:	6093      	str	r3, [r2, #8]
    conv2d_18_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 22784);
 81018a4:	4b6e      	ldr	r3, [pc, #440]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018a6:	681b      	ldr	r3, [r3, #0]
 81018a8:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 81018ac:	4a73      	ldr	r2, [pc, #460]	; (8101a7c <face_recognition_configure_activations+0x57c>)
 81018ae:	60d3      	str	r3, [r2, #12]
    eltwise_19_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 22784);
 81018b0:	4b6b      	ldr	r3, [pc, #428]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 81018b8:	4a71      	ldr	r2, [pc, #452]	; (8101a80 <face_recognition_configure_activations+0x580>)
 81018ba:	6093      	str	r3, [r2, #8]
    eltwise_19_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 22784);
 81018bc:	4b68      	ldr	r3, [pc, #416]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	f503 43b2 	add.w	r3, r3, #22784	; 0x5900
 81018c4:	4a6e      	ldr	r2, [pc, #440]	; (8101a80 <face_recognition_configure_activations+0x580>)
 81018c6:	60d3      	str	r3, [r2, #12]
    conv2d_20_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 26880);
 81018c8:	4b65      	ldr	r3, [pc, #404]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018ca:	681b      	ldr	r3, [r3, #0]
 81018cc:	f503 43d2 	add.w	r3, r3, #26880	; 0x6900
 81018d0:	4a6c      	ldr	r2, [pc, #432]	; (8101a84 <face_recognition_configure_activations+0x584>)
 81018d2:	6093      	str	r3, [r2, #8]
    conv2d_20_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 26880);
 81018d4:	4b62      	ldr	r3, [pc, #392]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018d6:	681b      	ldr	r3, [r3, #0]
 81018d8:	f503 43d2 	add.w	r3, r3, #26880	; 0x6900
 81018dc:	4a69      	ldr	r2, [pc, #420]	; (8101a84 <face_recognition_configure_activations+0x584>)
 81018de:	60d3      	str	r3, [r2, #12]
    conv2d_21_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 51456);
 81018e0:	4b5f      	ldr	r3, [pc, #380]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	f503 4349 	add.w	r3, r3, #51456	; 0xc900
 81018e8:	4a67      	ldr	r2, [pc, #412]	; (8101a88 <face_recognition_configure_activations+0x588>)
 81018ea:	6093      	str	r3, [r2, #8]
    conv2d_21_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 51456);
 81018ec:	4b5c      	ldr	r3, [pc, #368]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	f503 4349 	add.w	r3, r3, #51456	; 0xc900
 81018f4:	4a64      	ldr	r2, [pc, #400]	; (8101a88 <face_recognition_configure_activations+0x588>)
 81018f6:	60d3      	str	r3, [r2, #12]
    conv2d_21_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 19228);
 81018f8:	4b59      	ldr	r3, [pc, #356]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 8101900:	331c      	adds	r3, #28
 8101902:	4a62      	ldr	r2, [pc, #392]	; (8101a8c <face_recognition_configure_activations+0x58c>)
 8101904:	6093      	str	r3, [r2, #8]
    conv2d_21_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 19228);
 8101906:	4b56      	ldr	r3, [pc, #344]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101908:	681b      	ldr	r3, [r3, #0]
 810190a:	f503 4396 	add.w	r3, r3, #19200	; 0x4b00
 810190e:	331c      	adds	r3, #28
 8101910:	4a5e      	ldr	r2, [pc, #376]	; (8101a8c <face_recognition_configure_activations+0x58c>)
 8101912:	60d3      	str	r3, [r2, #12]
    conv2d_21_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 49920);
 8101914:	4b52      	ldr	r3, [pc, #328]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 810191c:	4a5c      	ldr	r2, [pc, #368]	; (8101a90 <face_recognition_configure_activations+0x590>)
 810191e:	6093      	str	r3, [r2, #8]
    conv2d_21_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 49920);
 8101920:	4b4f      	ldr	r3, [pc, #316]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101922:	681b      	ldr	r3, [r3, #0]
 8101924:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8101928:	4a59      	ldr	r2, [pc, #356]	; (8101a90 <face_recognition_configure_activations+0x590>)
 810192a:	60d3      	str	r3, [r2, #12]
    conv2d_22_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 49664);
 810192c:	4b4c      	ldr	r3, [pc, #304]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8101934:	4a57      	ldr	r2, [pc, #348]	; (8101a94 <face_recognition_configure_activations+0x594>)
 8101936:	6093      	str	r3, [r2, #8]
    conv2d_22_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 49664);
 8101938:	4b49      	ldr	r3, [pc, #292]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810193a:	681b      	ldr	r3, [r3, #0]
 810193c:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8101940:	4a54      	ldr	r2, [pc, #336]	; (8101a94 <face_recognition_configure_activations+0x594>)
 8101942:	60d3      	str	r3, [r2, #12]
    eltwise_23_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 49664);
 8101944:	4b46      	ldr	r3, [pc, #280]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101946:	681b      	ldr	r3, [r3, #0]
 8101948:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 810194c:	4a52      	ldr	r2, [pc, #328]	; (8101a98 <face_recognition_configure_activations+0x598>)
 810194e:	6093      	str	r3, [r2, #8]
    eltwise_23_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 49664);
 8101950:	4b43      	ldr	r3, [pc, #268]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8101958:	4a4f      	ldr	r2, [pc, #316]	; (8101a98 <face_recognition_configure_activations+0x598>)
 810195a:	60d3      	str	r3, [r2, #12]
    conv2d_24_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 53760);
 810195c:	4b40      	ldr	r3, [pc, #256]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 8101964:	4a4d      	ldr	r2, [pc, #308]	; (8101a9c <face_recognition_configure_activations+0x59c>)
 8101966:	6093      	str	r3, [r2, #8]
    conv2d_24_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 53760);
 8101968:	4b3d      	ldr	r3, [pc, #244]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 8101970:	4a4a      	ldr	r2, [pc, #296]	; (8101a9c <face_recognition_configure_activations+0x59c>)
 8101972:	60d3      	str	r3, [r2, #12]
    conv2d_26_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 50592);
 8101974:	4b3a      	ldr	r3, [pc, #232]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101976:	681b      	ldr	r3, [r3, #0]
 8101978:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 810197c:	33a0      	adds	r3, #160	; 0xa0
 810197e:	4a48      	ldr	r2, [pc, #288]	; (8101aa0 <face_recognition_configure_activations+0x5a0>)
 8101980:	6093      	str	r3, [r2, #8]
    conv2d_26_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 50592);
 8101982:	4b37      	ldr	r3, [pc, #220]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101984:	681b      	ldr	r3, [r3, #0]
 8101986:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 810198a:	33a0      	adds	r3, #160	; 0xa0
 810198c:	4a44      	ldr	r2, [pc, #272]	; (8101aa0 <face_recognition_configure_activations+0x5a0>)
 810198e:	60d3      	str	r3, [r2, #12]
    conv2d_26_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101990:	4b33      	ldr	r3, [pc, #204]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101992:	681b      	ldr	r3, [r3, #0]
 8101994:	4a43      	ldr	r2, [pc, #268]	; (8101aa4 <face_recognition_configure_activations+0x5a4>)
 8101996:	6093      	str	r3, [r2, #8]
    conv2d_26_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101998:	4b31      	ldr	r3, [pc, #196]	; (8101a60 <face_recognition_configure_activations+0x560>)
 810199a:	681b      	ldr	r3, [r3, #0]
 810199c:	4a41      	ldr	r2, [pc, #260]	; (8101aa4 <face_recognition_configure_activations+0x5a4>)
 810199e:	60d3      	str	r3, [r2, #12]
    conv2d_26_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 44448);
 81019a0:	4b2f      	ldr	r3, [pc, #188]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019a2:	681b      	ldr	r3, [r3, #0]
 81019a4:	f503 432d 	add.w	r3, r3, #44288	; 0xad00
 81019a8:	33a0      	adds	r3, #160	; 0xa0
 81019aa:	4a3f      	ldr	r2, [pc, #252]	; (8101aa8 <face_recognition_configure_activations+0x5a8>)
 81019ac:	6093      	str	r3, [r2, #8]
    conv2d_26_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 44448);
 81019ae:	4b2c      	ldr	r3, [pc, #176]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	f503 432d 	add.w	r3, r3, #44288	; 0xad00
 81019b6:	33a0      	adds	r3, #160	; 0xa0
 81019b8:	4a3b      	ldr	r2, [pc, #236]	; (8101aa8 <face_recognition_configure_activations+0x5a8>)
 81019ba:	60d3      	str	r3, [r2, #12]
    conv2d_27_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 43824);
 81019bc:	4b28      	ldr	r3, [pc, #160]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	f503 432b 	add.w	r3, r3, #43776	; 0xab00
 81019c4:	3330      	adds	r3, #48	; 0x30
 81019c6:	4a39      	ldr	r2, [pc, #228]	; (8101aac <face_recognition_configure_activations+0x5ac>)
 81019c8:	6093      	str	r3, [r2, #8]
    conv2d_27_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 43824);
 81019ca:	4b25      	ldr	r3, [pc, #148]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019cc:	681b      	ldr	r3, [r3, #0]
 81019ce:	f503 432b 	add.w	r3, r3, #43776	; 0xab00
 81019d2:	3330      	adds	r3, #48	; 0x30
 81019d4:	4a35      	ldr	r2, [pc, #212]	; (8101aac <face_recognition_configure_activations+0x5ac>)
 81019d6:	60d3      	str	r3, [r2, #12]
    conv2d_27_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 227840);
 81019d8:	4b21      	ldr	r3, [pc, #132]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019da:	681b      	ldr	r3, [r3, #0]
 81019dc:	f503 335e 	add.w	r3, r3, #227328	; 0x37800
 81019e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 81019e4:	4a32      	ldr	r2, [pc, #200]	; (8101ab0 <face_recognition_configure_activations+0x5b0>)
 81019e6:	6093      	str	r3, [r2, #8]
    conv2d_27_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 227840);
 81019e8:	4b1d      	ldr	r3, [pc, #116]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	f503 335e 	add.w	r3, r3, #227328	; 0x37800
 81019f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 81019f4:	4a2e      	ldr	r2, [pc, #184]	; (8101ab0 <face_recognition_configure_activations+0x5b0>)
 81019f6:	60d3      	str	r3, [r2, #12]
    conv2d_28_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81019f8:	4b19      	ldr	r3, [pc, #100]	; (8101a60 <face_recognition_configure_activations+0x560>)
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	4a2d      	ldr	r2, [pc, #180]	; (8101ab4 <face_recognition_configure_activations+0x5b4>)
 81019fe:	6093      	str	r3, [r2, #8]
    conv2d_28_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101a00:	4b17      	ldr	r3, [pc, #92]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a02:	681b      	ldr	r3, [r3, #0]
 8101a04:	4a2b      	ldr	r2, [pc, #172]	; (8101ab4 <face_recognition_configure_activations+0x5b4>)
 8101a06:	60d3      	str	r3, [r2, #12]
    conv2d_28_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 1536);
 8101a08:	4b15      	ldr	r3, [pc, #84]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8101a10:	4a29      	ldr	r2, [pc, #164]	; (8101ab8 <face_recognition_configure_activations+0x5b8>)
 8101a12:	6093      	str	r3, [r2, #8]
    conv2d_28_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 1536);
 8101a14:	4b12      	ldr	r3, [pc, #72]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8101a1c:	4a26      	ldr	r2, [pc, #152]	; (8101ab8 <face_recognition_configure_activations+0x5b8>)
 8101a1e:	60d3      	str	r3, [r2, #12]
    conv2d_29_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 10752);
 8101a20:	4b0f      	ldr	r3, [pc, #60]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8101a28:	4a24      	ldr	r2, [pc, #144]	; (8101abc <face_recognition_configure_activations+0x5bc>)
 8101a2a:	6093      	str	r3, [r2, #8]
    conv2d_29_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 10752);
 8101a2c:	4b0c      	ldr	r3, [pc, #48]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8101a34:	4a21      	ldr	r2, [pc, #132]	; (8101abc <face_recognition_configure_activations+0x5bc>)
 8101a36:	60d3      	str	r3, [r2, #12]
    conv2d_29_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 222508);
 8101a38:	4b09      	ldr	r3, [pc, #36]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a3a:	681b      	ldr	r3, [r3, #0]
 8101a3c:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8101a40:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8101a44:	4a1e      	ldr	r2, [pc, #120]	; (8101ac0 <face_recognition_configure_activations+0x5c0>)
 8101a46:	6093      	str	r3, [r2, #8]
    conv2d_29_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 222508);
 8101a48:	4b05      	ldr	r3, [pc, #20]	; (8101a60 <face_recognition_configure_activations+0x560>)
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8101a50:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8101a54:	4a1a      	ldr	r2, [pc, #104]	; (8101ac0 <face_recognition_configure_activations+0x5c0>)
 8101a56:	60d3      	str	r3, [r2, #12]
 8101a58:	e034      	b.n	8101ac4 <face_recognition_configure_activations+0x5c4>
 8101a5a:	bf00      	nop
 8101a5c:	10000110 	.word	0x10000110
 8101a60:	1003fa2c 	.word	0x1003fa2c
 8101a64:	10000ca0 	.word	0x10000ca0
 8101a68:	10000120 	.word	0x10000120
 8101a6c:	10000130 	.word	0x10000130
 8101a70:	10000140 	.word	0x10000140
 8101a74:	10000cc0 	.word	0x10000cc0
 8101a78:	10000150 	.word	0x10000150
 8101a7c:	10000160 	.word	0x10000160
 8101a80:	10000170 	.word	0x10000170
 8101a84:	10000180 	.word	0x10000180
 8101a88:	10000190 	.word	0x10000190
 8101a8c:	10000cf0 	.word	0x10000cf0
 8101a90:	100001a0 	.word	0x100001a0
 8101a94:	100001b0 	.word	0x100001b0
 8101a98:	100001c0 	.word	0x100001c0
 8101a9c:	100001d0 	.word	0x100001d0
 8101aa0:	100001e0 	.word	0x100001e0
 8101aa4:	10000d20 	.word	0x10000d20
 8101aa8:	100001f0 	.word	0x100001f0
 8101aac:	10000d30 	.word	0x10000d30
 8101ab0:	10000200 	.word	0x10000200
 8101ab4:	10000d40 	.word	0x10000d40
 8101ab8:	10000210 	.word	0x10000210
 8101abc:	10000220 	.word	0x10000220
 8101ac0:	10000d50 	.word	0x10000d50
    conv2d_29_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 9600);
 8101ac4:	4b9b      	ldr	r3, [pc, #620]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8101acc:	4a9a      	ldr	r2, [pc, #616]	; (8101d38 <face_recognition_configure_activations+0x838>)
 8101ace:	6093      	str	r3, [r2, #8]
    conv2d_29_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 9600);
 8101ad0:	4b98      	ldr	r3, [pc, #608]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101ad2:	681b      	ldr	r3, [r3, #0]
 8101ad4:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8101ad8:	4a97      	ldr	r2, [pc, #604]	; (8101d38 <face_recognition_configure_activations+0x838>)
 8101ada:	60d3      	str	r3, [r2, #12]
    conv2d_30_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 9408);
 8101adc:	4b95      	ldr	r3, [pc, #596]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8101ae4:	4a95      	ldr	r2, [pc, #596]	; (8101d3c <face_recognition_configure_activations+0x83c>)
 8101ae6:	6093      	str	r3, [r2, #8]
    conv2d_30_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 9408);
 8101ae8:	4b92      	ldr	r3, [pc, #584]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8101af0:	4a92      	ldr	r2, [pc, #584]	; (8101d3c <face_recognition_configure_activations+0x83c>)
 8101af2:	60d3      	str	r3, [r2, #12]
    eltwise_31_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 9408);
 8101af4:	4b8f      	ldr	r3, [pc, #572]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8101afc:	4a90      	ldr	r2, [pc, #576]	; (8101d40 <face_recognition_configure_activations+0x840>)
 8101afe:	6093      	str	r3, [r2, #8]
    eltwise_31_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 9408);
 8101b00:	4b8c      	ldr	r3, [pc, #560]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b02:	681b      	ldr	r3, [r3, #0]
 8101b04:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8101b08:	4a8d      	ldr	r2, [pc, #564]	; (8101d40 <face_recognition_configure_activations+0x840>)
 8101b0a:	60d3      	str	r3, [r2, #12]
    conv2d_32_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101b0c:	4b89      	ldr	r3, [pc, #548]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	4a8c      	ldr	r2, [pc, #560]	; (8101d44 <face_recognition_configure_activations+0x844>)
 8101b12:	6093      	str	r3, [r2, #8]
    conv2d_32_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101b14:	4b87      	ldr	r3, [pc, #540]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	4a8a      	ldr	r2, [pc, #552]	; (8101d44 <face_recognition_configure_activations+0x844>)
 8101b1a:	60d3      	str	r3, [r2, #12]
    conv2d_32_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 10944);
 8101b1c:	4b85      	ldr	r3, [pc, #532]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8101b24:	4a88      	ldr	r2, [pc, #544]	; (8101d48 <face_recognition_configure_activations+0x848>)
 8101b26:	6093      	str	r3, [r2, #8]
    conv2d_32_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 10944);
 8101b28:	4b82      	ldr	r3, [pc, #520]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b2a:	681b      	ldr	r3, [r3, #0]
 8101b2c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8101b30:	4a85      	ldr	r2, [pc, #532]	; (8101d48 <face_recognition_configure_activations+0x848>)
 8101b32:	60d3      	str	r3, [r2, #12]
    conv2d_33_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 20160);
 8101b34:	4b7f      	ldr	r3, [pc, #508]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b36:	681b      	ldr	r3, [r3, #0]
 8101b38:	f503 439d 	add.w	r3, r3, #20096	; 0x4e80
 8101b3c:	3340      	adds	r3, #64	; 0x40
 8101b3e:	4a83      	ldr	r2, [pc, #524]	; (8101d4c <face_recognition_configure_activations+0x84c>)
 8101b40:	6093      	str	r3, [r2, #8]
    conv2d_33_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 20160);
 8101b42:	4b7c      	ldr	r3, [pc, #496]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	f503 439d 	add.w	r3, r3, #20096	; 0x4e80
 8101b4a:	3340      	adds	r3, #64	; 0x40
 8101b4c:	4a7f      	ldr	r2, [pc, #508]	; (8101d4c <face_recognition_configure_activations+0x84c>)
 8101b4e:	60d3      	str	r3, [r2, #12]
    conv2d_33_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 4076);
 8101b50:	4b78      	ldr	r3, [pc, #480]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b52:	681b      	ldr	r3, [r3, #0]
 8101b54:	f603 73ec 	addw	r3, r3, #4076	; 0xfec
 8101b58:	4a7d      	ldr	r2, [pc, #500]	; (8101d50 <face_recognition_configure_activations+0x850>)
 8101b5a:	6093      	str	r3, [r2, #8]
    conv2d_33_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 4076);
 8101b5c:	4b75      	ldr	r3, [pc, #468]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	f603 73ec 	addw	r3, r3, #4076	; 0xfec
 8101b64:	4a7a      	ldr	r2, [pc, #488]	; (8101d50 <face_recognition_configure_activations+0x850>)
 8101b66:	60d3      	str	r3, [r2, #12]
    conv2d_33_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 19008);
 8101b68:	4b72      	ldr	r3, [pc, #456]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b6a:	681b      	ldr	r3, [r3, #0]
 8101b6c:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
 8101b70:	3340      	adds	r3, #64	; 0x40
 8101b72:	4a78      	ldr	r2, [pc, #480]	; (8101d54 <face_recognition_configure_activations+0x854>)
 8101b74:	6093      	str	r3, [r2, #8]
    conv2d_33_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 19008);
 8101b76:	4b6f      	ldr	r3, [pc, #444]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b78:	681b      	ldr	r3, [r3, #0]
 8101b7a:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
 8101b7e:	3340      	adds	r3, #64	; 0x40
 8101b80:	4a74      	ldr	r2, [pc, #464]	; (8101d54 <face_recognition_configure_activations+0x854>)
 8101b82:	60d3      	str	r3, [r2, #12]
    conv2d_34_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 18816);
 8101b84:	4b6b      	ldr	r3, [pc, #428]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8101b8c:	4a72      	ldr	r2, [pc, #456]	; (8101d58 <face_recognition_configure_activations+0x858>)
 8101b8e:	6093      	str	r3, [r2, #8]
    conv2d_34_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 18816);
 8101b90:	4b68      	ldr	r3, [pc, #416]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8101b98:	4a6f      	ldr	r2, [pc, #444]	; (8101d58 <face_recognition_configure_activations+0x858>)
 8101b9a:	60d3      	str	r3, [r2, #12]
    eltwise_35_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 18816);
 8101b9c:	4b65      	ldr	r3, [pc, #404]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101b9e:	681b      	ldr	r3, [r3, #0]
 8101ba0:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8101ba4:	4a6d      	ldr	r2, [pc, #436]	; (8101d5c <face_recognition_configure_activations+0x85c>)
 8101ba6:	6093      	str	r3, [r2, #8]
    eltwise_35_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 18816);
 8101ba8:	4b62      	ldr	r3, [pc, #392]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8101bb0:	4a6a      	ldr	r2, [pc, #424]	; (8101d5c <face_recognition_configure_activations+0x85c>)
 8101bb2:	60d3      	str	r3, [r2, #12]
    conv2d_36_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101bb4:	4b5f      	ldr	r3, [pc, #380]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	4a69      	ldr	r2, [pc, #420]	; (8101d60 <face_recognition_configure_activations+0x860>)
 8101bba:	6093      	str	r3, [r2, #8]
    conv2d_36_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101bbc:	4b5d      	ldr	r3, [pc, #372]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bbe:	681b      	ldr	r3, [r3, #0]
 8101bc0:	4a67      	ldr	r2, [pc, #412]	; (8101d60 <face_recognition_configure_activations+0x860>)
 8101bc2:	60d3      	str	r3, [r2, #12]
    conv2d_36_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 220160);
 8101bc4:	4b5b      	ldr	r3, [pc, #364]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	f503 3357 	add.w	r3, r3, #220160	; 0x35c00
 8101bcc:	4a65      	ldr	r2, [pc, #404]	; (8101d64 <face_recognition_configure_activations+0x864>)
 8101bce:	6093      	str	r3, [r2, #8]
    conv2d_36_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 220160);
 8101bd0:	4b58      	ldr	r3, [pc, #352]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bd2:	681b      	ldr	r3, [r3, #0]
 8101bd4:	f503 3357 	add.w	r3, r3, #220160	; 0x35c00
 8101bd8:	4a62      	ldr	r2, [pc, #392]	; (8101d64 <face_recognition_configure_activations+0x864>)
 8101bda:	60d3      	str	r3, [r2, #12]
    conv2d_37_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101bdc:	4b55      	ldr	r3, [pc, #340]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	4a61      	ldr	r2, [pc, #388]	; (8101d68 <face_recognition_configure_activations+0x868>)
 8101be2:	6093      	str	r3, [r2, #8]
    conv2d_37_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101be4:	4b53      	ldr	r3, [pc, #332]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	4a5f      	ldr	r2, [pc, #380]	; (8101d68 <face_recognition_configure_activations+0x868>)
 8101bea:	60d3      	str	r3, [r2, #12]
    conv2d_37_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 224044);
 8101bec:	4b51      	ldr	r3, [pc, #324]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 8101bf4:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101bf8:	4a5c      	ldr	r2, [pc, #368]	; (8101d6c <face_recognition_configure_activations+0x86c>)
 8101bfa:	6093      	str	r3, [r2, #8]
    conv2d_37_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 224044);
 8101bfc:	4b4d      	ldr	r3, [pc, #308]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101bfe:	681b      	ldr	r3, [r3, #0]
 8101c00:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 8101c04:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101c08:	4a58      	ldr	r2, [pc, #352]	; (8101d6c <face_recognition_configure_activations+0x86c>)
 8101c0a:	60d3      	str	r3, [r2, #12]
    conv2d_37_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 214828);
 8101c0c:	4b49      	ldr	r3, [pc, #292]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c0e:	681b      	ldr	r3, [r3, #0]
 8101c10:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c14:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101c18:	4a55      	ldr	r2, [pc, #340]	; (8101d70 <face_recognition_configure_activations+0x870>)
 8101c1a:	6093      	str	r3, [r2, #8]
    conv2d_37_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 214828);
 8101c1c:	4b45      	ldr	r3, [pc, #276]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c24:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101c28:	4a51      	ldr	r2, [pc, #324]	; (8101d70 <face_recognition_configure_activations+0x870>)
 8101c2a:	60d3      	str	r3, [r2, #12]
    conv2d_38_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 214636);
 8101c2c:	4b41      	ldr	r3, [pc, #260]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c34:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101c38:	4a4e      	ldr	r2, [pc, #312]	; (8101d74 <face_recognition_configure_activations+0x874>)
 8101c3a:	6093      	str	r3, [r2, #8]
    conv2d_38_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 214636);
 8101c3c:	4b3d      	ldr	r3, [pc, #244]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c44:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101c48:	4a4a      	ldr	r2, [pc, #296]	; (8101d74 <face_recognition_configure_activations+0x874>)
 8101c4a:	60d3      	str	r3, [r2, #12]
    eltwise_39_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 214636);
 8101c4c:	4b39      	ldr	r3, [pc, #228]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c54:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101c58:	4a47      	ldr	r2, [pc, #284]	; (8101d78 <face_recognition_configure_activations+0x878>)
 8101c5a:	6093      	str	r3, [r2, #8]
    eltwise_39_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 214636);
 8101c5c:	4b35      	ldr	r3, [pc, #212]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101c64:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8101c68:	4a43      	ldr	r2, [pc, #268]	; (8101d78 <face_recognition_configure_activations+0x878>)
 8101c6a:	60d3      	str	r3, [r2, #12]
    conv2d_40_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101c6c:	4b31      	ldr	r3, [pc, #196]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	4a42      	ldr	r2, [pc, #264]	; (8101d7c <face_recognition_configure_activations+0x87c>)
 8101c72:	6093      	str	r3, [r2, #8]
    conv2d_40_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101c74:	4b2f      	ldr	r3, [pc, #188]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	4a40      	ldr	r2, [pc, #256]	; (8101d7c <face_recognition_configure_activations+0x87c>)
 8101c7a:	60d3      	str	r3, [r2, #12]
    conv2d_40_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 220160);
 8101c7c:	4b2d      	ldr	r3, [pc, #180]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	f503 3357 	add.w	r3, r3, #220160	; 0x35c00
 8101c84:	4a3e      	ldr	r2, [pc, #248]	; (8101d80 <face_recognition_configure_activations+0x880>)
 8101c86:	6093      	str	r3, [r2, #8]
    conv2d_40_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 220160);
 8101c88:	4b2a      	ldr	r3, [pc, #168]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	f503 3357 	add.w	r3, r3, #220160	; 0x35c00
 8101c90:	4a3b      	ldr	r2, [pc, #236]	; (8101d80 <face_recognition_configure_activations+0x880>)
 8101c92:	60d3      	str	r3, [r2, #12]
    conv2d_41_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101c94:	4b27      	ldr	r3, [pc, #156]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	4a3a      	ldr	r2, [pc, #232]	; (8101d84 <face_recognition_configure_activations+0x884>)
 8101c9a:	6093      	str	r3, [r2, #8]
    conv2d_41_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101c9c:	4b25      	ldr	r3, [pc, #148]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	4a38      	ldr	r2, [pc, #224]	; (8101d84 <face_recognition_configure_activations+0x884>)
 8101ca2:	60d3      	str	r3, [r2, #12]
    conv2d_41_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 224044);
 8101ca4:	4b23      	ldr	r3, [pc, #140]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 8101cac:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101cb0:	4a35      	ldr	r2, [pc, #212]	; (8101d88 <face_recognition_configure_activations+0x888>)
 8101cb2:	6093      	str	r3, [r2, #8]
    conv2d_41_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 224044);
 8101cb4:	4b1f      	ldr	r3, [pc, #124]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 8101cbc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101cc0:	4a31      	ldr	r2, [pc, #196]	; (8101d88 <face_recognition_configure_activations+0x888>)
 8101cc2:	60d3      	str	r3, [r2, #12]
    conv2d_41_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 214828);
 8101cc4:	4b1b      	ldr	r3, [pc, #108]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101ccc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101cd0:	4a2e      	ldr	r2, [pc, #184]	; (8101d8c <face_recognition_configure_activations+0x88c>)
 8101cd2:	6093      	str	r3, [r2, #8]
    conv2d_41_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 214828);
 8101cd4:	4b17      	ldr	r3, [pc, #92]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101cdc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101ce0:	4a2a      	ldr	r2, [pc, #168]	; (8101d8c <face_recognition_configure_activations+0x88c>)
 8101ce2:	60d3      	str	r3, [r2, #12]
    conv2d_42_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 214572);
 8101ce4:	4b13      	ldr	r3, [pc, #76]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101cec:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101cf0:	4a27      	ldr	r2, [pc, #156]	; (8101d90 <face_recognition_configure_activations+0x890>)
 8101cf2:	6093      	str	r3, [r2, #8]
    conv2d_42_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 214572);
 8101cf4:	4b0f      	ldr	r3, [pc, #60]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	f503 3351 	add.w	r3, r3, #214016	; 0x34400
 8101cfc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101d00:	4a23      	ldr	r2, [pc, #140]	; (8101d90 <face_recognition_configure_activations+0x890>)
 8101d02:	60d3      	str	r3, [r2, #12]
    conv2d_43_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101d04:	4b0b      	ldr	r3, [pc, #44]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a22      	ldr	r2, [pc, #136]	; (8101d94 <face_recognition_configure_activations+0x894>)
 8101d0a:	6093      	str	r3, [r2, #8]
    conv2d_43_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101d0c:	4b09      	ldr	r3, [pc, #36]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	4a20      	ldr	r2, [pc, #128]	; (8101d94 <face_recognition_configure_activations+0x894>)
 8101d12:	60d3      	str	r3, [r2, #12]
    conv2d_43_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 202284);
 8101d14:	4b07      	ldr	r3, [pc, #28]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101d16:	681b      	ldr	r3, [r3, #0]
 8101d18:	f503 3345 	add.w	r3, r3, #201728	; 0x31400
 8101d1c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101d20:	4a1d      	ldr	r2, [pc, #116]	; (8101d98 <face_recognition_configure_activations+0x898>)
 8101d22:	6093      	str	r3, [r2, #8]
    conv2d_43_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 202284);
 8101d24:	4b03      	ldr	r3, [pc, #12]	; (8101d34 <face_recognition_configure_activations+0x834>)
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	f503 3345 	add.w	r3, r3, #201728	; 0x31400
 8101d2c:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101d30:	e034      	b.n	8101d9c <face_recognition_configure_activations+0x89c>
 8101d32:	bf00      	nop
 8101d34:	1003fa2c 	.word	0x1003fa2c
 8101d38:	10000230 	.word	0x10000230
 8101d3c:	10000240 	.word	0x10000240
 8101d40:	10000250 	.word	0x10000250
 8101d44:	10000d70 	.word	0x10000d70
 8101d48:	10000260 	.word	0x10000260
 8101d4c:	10000270 	.word	0x10000270
 8101d50:	10000d80 	.word	0x10000d80
 8101d54:	10000280 	.word	0x10000280
 8101d58:	10000290 	.word	0x10000290
 8101d5c:	100002a0 	.word	0x100002a0
 8101d60:	10000da0 	.word	0x10000da0
 8101d64:	100002b0 	.word	0x100002b0
 8101d68:	100002c0 	.word	0x100002c0
 8101d6c:	10000db0 	.word	0x10000db0
 8101d70:	100002d0 	.word	0x100002d0
 8101d74:	100002e0 	.word	0x100002e0
 8101d78:	100002f0 	.word	0x100002f0
 8101d7c:	10000dd0 	.word	0x10000dd0
 8101d80:	10000300 	.word	0x10000300
 8101d84:	10000310 	.word	0x10000310
 8101d88:	10000de0 	.word	0x10000de0
 8101d8c:	10000320 	.word	0x10000320
 8101d90:	10000330 	.word	0x10000330
 8101d94:	10000e00 	.word	0x10000e00
 8101d98:	10000340 	.word	0x10000340
 8101d9c:	4a9f      	ldr	r2, [pc, #636]	; (810201c <face_recognition_configure_activations+0xb1c>)
 8101d9e:	60d3      	str	r3, [r2, #12]
    conv2d_44_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 195372);
 8101da0:	4b9f      	ldr	r3, [pc, #636]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	f503 333e 	add.w	r3, r3, #194560	; 0x2f800
 8101da8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101dac:	4a9d      	ldr	r2, [pc, #628]	; (8102024 <face_recognition_configure_activations+0xb24>)
 8101dae:	6093      	str	r3, [r2, #8]
    conv2d_44_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 195372);
 8101db0:	4b9b      	ldr	r3, [pc, #620]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101db2:	681b      	ldr	r3, [r3, #0]
 8101db4:	f503 333e 	add.w	r3, r3, #194560	; 0x2f800
 8101db8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8101dbc:	4a99      	ldr	r2, [pc, #612]	; (8102024 <face_recognition_configure_activations+0xb24>)
 8101dbe:	60d3      	str	r3, [r2, #12]
    conv2d_44_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216620);
 8101dc0:	4b97      	ldr	r3, [pc, #604]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101dc2:	681b      	ldr	r3, [r3, #0]
 8101dc4:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101dc8:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101dcc:	4a96      	ldr	r2, [pc, #600]	; (8102028 <face_recognition_configure_activations+0xb28>)
 8101dce:	6093      	str	r3, [r2, #8]
    conv2d_44_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216620);
 8101dd0:	4b93      	ldr	r3, [pc, #588]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101dd2:	681b      	ldr	r3, [r3, #0]
 8101dd4:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101dd8:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8101ddc:	4a92      	ldr	r2, [pc, #584]	; (8102028 <face_recognition_configure_activations+0xb28>)
 8101dde:	60d3      	str	r3, [r2, #12]
    conv2d_44_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 193836);
 8101de0:	4b8f      	ldr	r3, [pc, #572]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101de2:	681b      	ldr	r3, [r3, #0]
 8101de4:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101de8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8101dec:	4a8f      	ldr	r2, [pc, #572]	; (810202c <face_recognition_configure_activations+0xb2c>)
 8101dee:	6093      	str	r3, [r2, #8]
    conv2d_44_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 193836);
 8101df0:	4b8b      	ldr	r3, [pc, #556]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101df8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8101dfc:	4a8b      	ldr	r2, [pc, #556]	; (810202c <face_recognition_configure_activations+0xb2c>)
 8101dfe:	60d3      	str	r3, [r2, #12]
    conv2d_45_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 193580);
 8101e00:	4b87      	ldr	r3, [pc, #540]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e02:	681b      	ldr	r3, [r3, #0]
 8101e04:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101e08:	332c      	adds	r3, #44	; 0x2c
 8101e0a:	4a89      	ldr	r2, [pc, #548]	; (8102030 <face_recognition_configure_activations+0xb30>)
 8101e0c:	6093      	str	r3, [r2, #8]
    conv2d_45_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 193580);
 8101e0e:	4b84      	ldr	r3, [pc, #528]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e10:	681b      	ldr	r3, [r3, #0]
 8101e12:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101e16:	332c      	adds	r3, #44	; 0x2c
 8101e18:	4a85      	ldr	r2, [pc, #532]	; (8102030 <face_recognition_configure_activations+0xb30>)
 8101e1a:	60d3      	str	r3, [r2, #12]
    eltwise_46_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 193580);
 8101e1c:	4b80      	ldr	r3, [pc, #512]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101e24:	332c      	adds	r3, #44	; 0x2c
 8101e26:	4a83      	ldr	r2, [pc, #524]	; (8102034 <face_recognition_configure_activations+0xb34>)
 8101e28:	6093      	str	r3, [r2, #8]
    eltwise_46_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 193580);
 8101e2a:	4b7d      	ldr	r3, [pc, #500]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	f503 333d 	add.w	r3, r3, #193536	; 0x2f400
 8101e32:	332c      	adds	r3, #44	; 0x2c
 8101e34:	4a7f      	ldr	r2, [pc, #508]	; (8102034 <face_recognition_configure_activations+0xb34>)
 8101e36:	60d3      	str	r3, [r2, #12]
    conv2d_47_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101e38:	4b79      	ldr	r3, [pc, #484]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	4a7e      	ldr	r2, [pc, #504]	; (8102038 <face_recognition_configure_activations+0xb38>)
 8101e3e:	6093      	str	r3, [r2, #8]
    conv2d_47_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101e40:	4b77      	ldr	r3, [pc, #476]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	4a7c      	ldr	r2, [pc, #496]	; (8102038 <face_recognition_configure_activations+0xb38>)
 8101e46:	60d3      	str	r3, [r2, #12]
    conv2d_47_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 217088);
 8101e48:	4b75      	ldr	r3, [pc, #468]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8101e50:	4a7a      	ldr	r2, [pc, #488]	; (810203c <face_recognition_configure_activations+0xb3c>)
 8101e52:	6093      	str	r3, [r2, #8]
    conv2d_47_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 217088);
 8101e54:	4b72      	ldr	r3, [pc, #456]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8101e5c:	4a77      	ldr	r2, [pc, #476]	; (810203c <face_recognition_configure_activations+0xb3c>)
 8101e5e:	60d3      	str	r3, [r2, #12]
    conv2d_48_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101e60:	4b6f      	ldr	r3, [pc, #444]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e62:	681b      	ldr	r3, [r3, #0]
 8101e64:	4a76      	ldr	r2, [pc, #472]	; (8102040 <face_recognition_configure_activations+0xb40>)
 8101e66:	6093      	str	r3, [r2, #8]
    conv2d_48_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101e68:	4b6d      	ldr	r3, [pc, #436]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e6a:	681b      	ldr	r3, [r3, #0]
 8101e6c:	4a74      	ldr	r2, [pc, #464]	; (8102040 <face_recognition_configure_activations+0xb40>)
 8101e6e:	60d3      	str	r3, [r2, #12]
    conv2d_48_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 186472);
 8101e70:	4b6b      	ldr	r3, [pc, #428]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 8101e78:	3368      	adds	r3, #104	; 0x68
 8101e7a:	4a72      	ldr	r2, [pc, #456]	; (8102044 <face_recognition_configure_activations+0xb44>)
 8101e7c:	6093      	str	r3, [r2, #8]
    conv2d_48_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 186472);
 8101e7e:	4b68      	ldr	r3, [pc, #416]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e80:	681b      	ldr	r3, [r3, #0]
 8101e82:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 8101e86:	3368      	adds	r3, #104	; 0x68
 8101e88:	4a6e      	ldr	r2, [pc, #440]	; (8102044 <face_recognition_configure_activations+0xb44>)
 8101e8a:	60d3      	str	r3, [r2, #12]
    conv2d_48_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 217088);
 8101e8c:	4b64      	ldr	r3, [pc, #400]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8101e94:	4a6c      	ldr	r2, [pc, #432]	; (8102048 <face_recognition_configure_activations+0xb48>)
 8101e96:	6093      	str	r3, [r2, #8]
    conv2d_48_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 217088);
 8101e98:	4b61      	ldr	r3, [pc, #388]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8101ea0:	4a69      	ldr	r2, [pc, #420]	; (8102048 <face_recognition_configure_activations+0xb48>)
 8101ea2:	60d3      	str	r3, [r2, #12]
    conv2d_49_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216832);
 8101ea4:	4b5e      	ldr	r3, [pc, #376]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101eac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101eb0:	4a66      	ldr	r2, [pc, #408]	; (810204c <face_recognition_configure_activations+0xb4c>)
 8101eb2:	6093      	str	r3, [r2, #8]
    conv2d_49_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216832);
 8101eb4:	4b5a      	ldr	r3, [pc, #360]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101ebc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101ec0:	4a62      	ldr	r2, [pc, #392]	; (810204c <face_recognition_configure_activations+0xb4c>)
 8101ec2:	60d3      	str	r3, [r2, #12]
    eltwise_50_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216832);
 8101ec4:	4b56      	ldr	r3, [pc, #344]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101ecc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101ed0:	4a5f      	ldr	r2, [pc, #380]	; (8102050 <face_recognition_configure_activations+0xb50>)
 8101ed2:	6093      	str	r3, [r2, #8]
    eltwise_50_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216832);
 8101ed4:	4b52      	ldr	r3, [pc, #328]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8101edc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101ee0:	4a5b      	ldr	r2, [pc, #364]	; (8102050 <face_recognition_configure_activations+0xb50>)
 8101ee2:	60d3      	str	r3, [r2, #12]
    conv2d_51_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101ee4:	4b4e      	ldr	r3, [pc, #312]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	4a5a      	ldr	r2, [pc, #360]	; (8102054 <face_recognition_configure_activations+0xb54>)
 8101eea:	6093      	str	r3, [r2, #8]
    conv2d_51_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101eec:	4b4c      	ldr	r3, [pc, #304]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	4a58      	ldr	r2, [pc, #352]	; (8102054 <face_recognition_configure_activations+0xb54>)
 8101ef2:	60d3      	str	r3, [r2, #12]
    conv2d_51_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 204544);
 8101ef4:	4b4a      	ldr	r3, [pc, #296]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	f503 3347 	add.w	r3, r3, #203776	; 0x31c00
 8101efc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101f00:	4a55      	ldr	r2, [pc, #340]	; (8102058 <face_recognition_configure_activations+0xb58>)
 8101f02:	6093      	str	r3, [r2, #8]
    conv2d_51_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 204544);
 8101f04:	4b46      	ldr	r3, [pc, #280]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	f503 3347 	add.w	r3, r3, #203776	; 0x31c00
 8101f0c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8101f10:	4a51      	ldr	r2, [pc, #324]	; (8102058 <face_recognition_configure_activations+0xb58>)
 8101f12:	60d3      	str	r3, [r2, #12]
    conv2d_53_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 188992);
 8101f14:	4b42      	ldr	r3, [pc, #264]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	f503 3338 	add.w	r3, r3, #188416	; 0x2e000
 8101f1c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8101f20:	4a4e      	ldr	r2, [pc, #312]	; (810205c <face_recognition_configure_activations+0xb5c>)
 8101f22:	6093      	str	r3, [r2, #8]
    conv2d_53_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 188992);
 8101f24:	4b3e      	ldr	r3, [pc, #248]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	f503 3338 	add.w	r3, r3, #188416	; 0x2e000
 8101f2c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8101f30:	4a4a      	ldr	r2, [pc, #296]	; (810205c <face_recognition_configure_activations+0xb5c>)
 8101f32:	60d3      	str	r3, [r2, #12]
    conv2d_53_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 222268);
 8101f34:	4b3a      	ldr	r3, [pc, #232]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8101f3c:	333c      	adds	r3, #60	; 0x3c
 8101f3e:	4a48      	ldr	r2, [pc, #288]	; (8102060 <face_recognition_configure_activations+0xb60>)
 8101f40:	6093      	str	r3, [r2, #8]
    conv2d_53_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 222268);
 8101f42:	4b37      	ldr	r3, [pc, #220]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8101f4a:	333c      	adds	r3, #60	; 0x3c
 8101f4c:	4a44      	ldr	r2, [pc, #272]	; (8102060 <face_recognition_configure_activations+0xb60>)
 8101f4e:	60d3      	str	r3, [r2, #12]
    conv2d_53_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 185920);
 8101f50:	4b33      	ldr	r3, [pc, #204]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	f503 3335 	add.w	r3, r3, #185344	; 0x2d400
 8101f58:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8101f5c:	4a41      	ldr	r2, [pc, #260]	; (8102064 <face_recognition_configure_activations+0xb64>)
 8101f5e:	6093      	str	r3, [r2, #8]
    conv2d_53_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 185920);
 8101f60:	4b2f      	ldr	r3, [pc, #188]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	f503 3335 	add.w	r3, r3, #185344	; 0x2d400
 8101f68:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8101f6c:	4a3d      	ldr	r2, [pc, #244]	; (8102064 <face_recognition_configure_activations+0xb64>)
 8101f6e:	60d3      	str	r3, [r2, #12]
    conv2d_54_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 184592);
 8101f70:	4b2b      	ldr	r3, [pc, #172]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f72:	681b      	ldr	r3, [r3, #0]
 8101f74:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 8101f78:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8101f7c:	4a3a      	ldr	r2, [pc, #232]	; (8102068 <face_recognition_configure_activations+0xb68>)
 8101f7e:	6093      	str	r3, [r2, #8]
    conv2d_54_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 184592);
 8101f80:	4b27      	ldr	r3, [pc, #156]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	f503 3334 	add.w	r3, r3, #184320	; 0x2d000
 8101f88:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8101f8c:	4a36      	ldr	r2, [pc, #216]	; (8102068 <face_recognition_configure_activations+0xb68>)
 8101f8e:	60d3      	str	r3, [r2, #12]
    conv2d_54_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 228480);
 8101f90:	4b23      	ldr	r3, [pc, #140]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	f503 335f 	add.w	r3, r3, #228352	; 0x37c00
 8101f98:	3380      	adds	r3, #128	; 0x80
 8101f9a:	4a34      	ldr	r2, [pc, #208]	; (810206c <face_recognition_configure_activations+0xb6c>)
 8101f9c:	6093      	str	r3, [r2, #8]
    conv2d_54_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 228480);
 8101f9e:	4b20      	ldr	r3, [pc, #128]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	f503 335f 	add.w	r3, r3, #228352	; 0x37c00
 8101fa6:	3380      	adds	r3, #128	; 0x80
 8101fa8:	4a30      	ldr	r2, [pc, #192]	; (810206c <face_recognition_configure_activations+0xb6c>)
 8101faa:	60d3      	str	r3, [r2, #12]
    conv2d_55_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101fac:	4b1c      	ldr	r3, [pc, #112]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	4a2f      	ldr	r2, [pc, #188]	; (8102070 <face_recognition_configure_activations+0xb70>)
 8101fb2:	6093      	str	r3, [r2, #8]
    conv2d_55_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8101fb4:	4b1a      	ldr	r3, [pc, #104]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	4a2d      	ldr	r2, [pc, #180]	; (8102070 <face_recognition_configure_activations+0xb70>)
 8101fba:	60d3      	str	r3, [r2, #12]
    conv2d_55_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 3584);
 8101fbc:	4b18      	ldr	r3, [pc, #96]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8101fc4:	4a2b      	ldr	r2, [pc, #172]	; (8102074 <face_recognition_configure_activations+0xb74>)
 8101fc6:	6093      	str	r3, [r2, #8]
    conv2d_55_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 3584);
 8101fc8:	4b15      	ldr	r3, [pc, #84]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8101fd0:	4a28      	ldr	r2, [pc, #160]	; (8102074 <face_recognition_configure_activations+0xb74>)
 8101fd2:	60d3      	str	r3, [r2, #12]
    conv2d_56_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 8960);
 8101fd4:	4b12      	ldr	r3, [pc, #72]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8101fdc:	4a26      	ldr	r2, [pc, #152]	; (8102078 <face_recognition_configure_activations+0xb78>)
 8101fde:	6093      	str	r3, [r2, #8]
    conv2d_56_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 8960);
 8101fe0:	4b0f      	ldr	r3, [pc, #60]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8101fe8:	4a23      	ldr	r2, [pc, #140]	; (8102078 <face_recognition_configure_activations+0xb78>)
 8101fea:	60d3      	str	r3, [r2, #12]
    conv2d_56_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216044);
 8101fec:	4b0c      	ldr	r3, [pc, #48]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	f503 3352 	add.w	r3, r3, #215040	; 0x34800
 8101ff4:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8101ff8:	4a20      	ldr	r2, [pc, #128]	; (810207c <face_recognition_configure_activations+0xb7c>)
 8101ffa:	6093      	str	r3, [r2, #8]
    conv2d_56_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216044);
 8101ffc:	4b08      	ldr	r3, [pc, #32]	; (8102020 <face_recognition_configure_activations+0xb20>)
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f503 3352 	add.w	r3, r3, #215040	; 0x34800
 8102004:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8102008:	4a1c      	ldr	r2, [pc, #112]	; (810207c <face_recognition_configure_activations+0xb7c>)
 810200a:	60d3      	str	r3, [r2, #12]
    conv2d_56_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 7616);
 810200c:	4b04      	ldr	r3, [pc, #16]	; (8102020 <face_recognition_configure_activations+0xb20>)
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 8102014:	4a1a      	ldr	r2, [pc, #104]	; (8102080 <face_recognition_configure_activations+0xb80>)
 8102016:	6093      	str	r3, [r2, #8]
 8102018:	e034      	b.n	8102084 <face_recognition_configure_activations+0xb84>
 810201a:	bf00      	nop
 810201c:	10000340 	.word	0x10000340
 8102020:	1003fa2c 	.word	0x1003fa2c
 8102024:	10000350 	.word	0x10000350
 8102028:	10000e10 	.word	0x10000e10
 810202c:	10000360 	.word	0x10000360
 8102030:	10000370 	.word	0x10000370
 8102034:	10000380 	.word	0x10000380
 8102038:	10000e30 	.word	0x10000e30
 810203c:	10000390 	.word	0x10000390
 8102040:	100003a0 	.word	0x100003a0
 8102044:	10000e40 	.word	0x10000e40
 8102048:	100003b0 	.word	0x100003b0
 810204c:	100003c0 	.word	0x100003c0
 8102050:	100003d0 	.word	0x100003d0
 8102054:	10000e60 	.word	0x10000e60
 8102058:	100003e0 	.word	0x100003e0
 810205c:	100003f0 	.word	0x100003f0
 8102060:	10000e70 	.word	0x10000e70
 8102064:	10000400 	.word	0x10000400
 8102068:	10000e80 	.word	0x10000e80
 810206c:	10000410 	.word	0x10000410
 8102070:	10000e90 	.word	0x10000e90
 8102074:	10000420 	.word	0x10000420
 8102078:	10000430 	.word	0x10000430
 810207c:	10000ea0 	.word	0x10000ea0
 8102080:	10000440 	.word	0x10000440
    conv2d_56_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 7616);
 8102084:	4b97      	ldr	r3, [pc, #604]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 810208c:	4a96      	ldr	r2, [pc, #600]	; (81022e8 <face_recognition_configure_activations+0xde8>)
 810208e:	60d3      	str	r3, [r2, #12]
    conv2d_57_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102090:	4b94      	ldr	r3, [pc, #592]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	4a95      	ldr	r2, [pc, #596]	; (81022ec <face_recognition_configure_activations+0xdec>)
 8102096:	6093      	str	r3, [r2, #8]
    conv2d_57_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102098:	4b92      	ldr	r3, [pc, #584]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	4a93      	ldr	r2, [pc, #588]	; (81022ec <face_recognition_configure_activations+0xdec>)
 810209e:	60d3      	str	r3, [r2, #12]
    conv2d_57_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 7392);
 81020a0:	4b90      	ldr	r3, [pc, #576]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 81020a8:	4a91      	ldr	r2, [pc, #580]	; (81022f0 <face_recognition_configure_activations+0xdf0>)
 81020aa:	6093      	str	r3, [r2, #8]
    conv2d_57_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 7392);
 81020ac:	4b8d      	ldr	r3, [pc, #564]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020ae:	681b      	ldr	r3, [r3, #0]
 81020b0:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 81020b4:	4a8e      	ldr	r2, [pc, #568]	; (81022f0 <face_recognition_configure_activations+0xdf0>)
 81020b6:	60d3      	str	r3, [r2, #12]
    eltwise_58_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 7392);
 81020b8:	4b8a      	ldr	r3, [pc, #552]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020ba:	681b      	ldr	r3, [r3, #0]
 81020bc:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 81020c0:	4a8c      	ldr	r2, [pc, #560]	; (81022f4 <face_recognition_configure_activations+0xdf4>)
 81020c2:	6093      	str	r3, [r2, #8]
    eltwise_58_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 7392);
 81020c4:	4b87      	ldr	r3, [pc, #540]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020c6:	681b      	ldr	r3, [r3, #0]
 81020c8:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 81020cc:	4a89      	ldr	r2, [pc, #548]	; (81022f4 <face_recognition_configure_activations+0xdf4>)
 81020ce:	60d3      	str	r3, [r2, #12]
    conv2d_59_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81020d0:	4b84      	ldr	r3, [pc, #528]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	4a88      	ldr	r2, [pc, #544]	; (81022f8 <face_recognition_configure_activations+0xdf8>)
 81020d6:	6093      	str	r3, [r2, #8]
    conv2d_59_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81020d8:	4b82      	ldr	r3, [pc, #520]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	4a86      	ldr	r2, [pc, #536]	; (81022f8 <face_recognition_configure_activations+0xdf8>)
 81020de:	60d3      	str	r3, [r2, #12]
    conv2d_59_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 8288);
 81020e0:	4b80      	ldr	r3, [pc, #512]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 81020e8:	3320      	adds	r3, #32
 81020ea:	4a84      	ldr	r2, [pc, #528]	; (81022fc <face_recognition_configure_activations+0xdfc>)
 81020ec:	6093      	str	r3, [r2, #8]
    conv2d_59_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 8288);
 81020ee:	4b7d      	ldr	r3, [pc, #500]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 81020f6:	3320      	adds	r3, #32
 81020f8:	4a80      	ldr	r2, [pc, #512]	; (81022fc <face_recognition_configure_activations+0xdfc>)
 81020fa:	60d3      	str	r3, [r2, #12]
    conv2d_60_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 13664);
 81020fc:	4b79      	ldr	r3, [pc, #484]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8102104:	3320      	adds	r3, #32
 8102106:	4a7e      	ldr	r2, [pc, #504]	; (8102300 <face_recognition_configure_activations+0xe00>)
 8102108:	6093      	str	r3, [r2, #8]
    conv2d_60_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 13664);
 810210a:	4b76      	ldr	r3, [pc, #472]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810210c:	681b      	ldr	r3, [r3, #0]
 810210e:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8102112:	3320      	adds	r3, #32
 8102114:	4a7a      	ldr	r2, [pc, #488]	; (8102300 <face_recognition_configure_activations+0xe00>)
 8102116:	60d3      	str	r3, [r2, #12]
    conv2d_60_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216940);
 8102118:	4b72      	ldr	r3, [pc, #456]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8102120:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8102124:	4a77      	ldr	r2, [pc, #476]	; (8102304 <face_recognition_configure_activations+0xe04>)
 8102126:	6093      	str	r3, [r2, #8]
    conv2d_60_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216940);
 8102128:	4b6e      	ldr	r3, [pc, #440]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810212a:	681b      	ldr	r3, [r3, #0]
 810212c:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 8102130:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8102134:	4a73      	ldr	r2, [pc, #460]	; (8102304 <face_recognition_configure_activations+0xe04>)
 8102136:	60d3      	str	r3, [r2, #12]
    conv2d_60_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 12320);
 8102138:	4b6a      	ldr	r3, [pc, #424]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8102140:	3320      	adds	r3, #32
 8102142:	4a71      	ldr	r2, [pc, #452]	; (8102308 <face_recognition_configure_activations+0xe08>)
 8102144:	6093      	str	r3, [r2, #8]
    conv2d_60_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 12320);
 8102146:	4b67      	ldr	r3, [pc, #412]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102148:	681b      	ldr	r3, [r3, #0]
 810214a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 810214e:	3320      	adds	r3, #32
 8102150:	4a6d      	ldr	r2, [pc, #436]	; (8102308 <face_recognition_configure_activations+0xe08>)
 8102152:	60d3      	str	r3, [r2, #12]
    conv2d_61_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102154:	4b63      	ldr	r3, [pc, #396]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102156:	681b      	ldr	r3, [r3, #0]
 8102158:	4a6c      	ldr	r2, [pc, #432]	; (810230c <face_recognition_configure_activations+0xe0c>)
 810215a:	6093      	str	r3, [r2, #8]
    conv2d_61_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 810215c:	4b61      	ldr	r3, [pc, #388]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810215e:	681b      	ldr	r3, [r3, #0]
 8102160:	4a6a      	ldr	r2, [pc, #424]	; (810230c <face_recognition_configure_activations+0xe0c>)
 8102162:	60d3      	str	r3, [r2, #12]
    conv2d_61_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 12096);
 8102164:	4b5f      	ldr	r3, [pc, #380]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 810216c:	4a68      	ldr	r2, [pc, #416]	; (8102310 <face_recognition_configure_activations+0xe10>)
 810216e:	6093      	str	r3, [r2, #8]
    conv2d_61_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 12096);
 8102170:	4b5c      	ldr	r3, [pc, #368]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8102178:	4a65      	ldr	r2, [pc, #404]	; (8102310 <face_recognition_configure_activations+0xe10>)
 810217a:	60d3      	str	r3, [r2, #12]
    eltwise_62_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 12096);
 810217c:	4b59      	ldr	r3, [pc, #356]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8102184:	4a63      	ldr	r2, [pc, #396]	; (8102314 <face_recognition_configure_activations+0xe14>)
 8102186:	6093      	str	r3, [r2, #8]
    eltwise_62_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 12096);
 8102188:	4b56      	ldr	r3, [pc, #344]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8102190:	4a60      	ldr	r2, [pc, #384]	; (8102314 <face_recognition_configure_activations+0xe14>)
 8102192:	60d3      	str	r3, [r2, #12]
    conv2d_63_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102194:	4b53      	ldr	r3, [pc, #332]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	4a5f      	ldr	r2, [pc, #380]	; (8102318 <face_recognition_configure_activations+0xe18>)
 810219a:	6093      	str	r3, [r2, #8]
    conv2d_63_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 810219c:	4b51      	ldr	r3, [pc, #324]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810219e:	681b      	ldr	r3, [r3, #0]
 81021a0:	4a5d      	ldr	r2, [pc, #372]	; (8102318 <face_recognition_configure_activations+0xe18>)
 81021a2:	60d3      	str	r3, [r2, #12]
    conv2d_63_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 12992);
 81021a4:	4b4f      	ldr	r3, [pc, #316]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 81021ac:	4a5b      	ldr	r2, [pc, #364]	; (810231c <face_recognition_configure_activations+0xe1c>)
 81021ae:	6093      	str	r3, [r2, #8]
    conv2d_63_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 12992);
 81021b0:	4b4c      	ldr	r3, [pc, #304]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021b2:	681b      	ldr	r3, [r3, #0]
 81021b4:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 81021b8:	4a58      	ldr	r2, [pc, #352]	; (810231c <face_recognition_configure_activations+0xe1c>)
 81021ba:	60d3      	str	r3, [r2, #12]
    conv2d_64_pad_before_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 18368);
 81021bc:	4b49      	ldr	r3, [pc, #292]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	f503 438f 	add.w	r3, r3, #18304	; 0x4780
 81021c4:	3340      	adds	r3, #64	; 0x40
 81021c6:	4a56      	ldr	r2, [pc, #344]	; (8102320 <face_recognition_configure_activations+0xe20>)
 81021c8:	6093      	str	r3, [r2, #8]
    conv2d_64_pad_before_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 18368);
 81021ca:	4b46      	ldr	r3, [pc, #280]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021cc:	681b      	ldr	r3, [r3, #0]
 81021ce:	f503 438f 	add.w	r3, r3, #18304	; 0x4780
 81021d2:	3340      	adds	r3, #64	; 0x40
 81021d4:	4a52      	ldr	r2, [pc, #328]	; (8102320 <face_recognition_configure_activations+0xe20>)
 81021d6:	60d3      	str	r3, [r2, #12]
    conv2d_64_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 216940);
 81021d8:	4b42      	ldr	r3, [pc, #264]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 81021e0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 81021e4:	4a4f      	ldr	r2, [pc, #316]	; (8102324 <face_recognition_configure_activations+0xe24>)
 81021e6:	6093      	str	r3, [r2, #8]
    conv2d_64_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 216940);
 81021e8:	4b3e      	ldr	r3, [pc, #248]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
 81021f0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 81021f4:	4a4b      	ldr	r2, [pc, #300]	; (8102324 <face_recognition_configure_activations+0xe24>)
 81021f6:	60d3      	str	r3, [r2, #12]
    conv2d_64_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 211564);
 81021f8:	4b3a      	ldr	r3, [pc, #232]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	f503 334e 	add.w	r3, r3, #210944	; 0x33800
 8102200:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8102204:	4a48      	ldr	r2, [pc, #288]	; (8102328 <face_recognition_configure_activations+0xe28>)
 8102206:	6093      	str	r3, [r2, #8]
    conv2d_64_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 211564);
 8102208:	4b36      	ldr	r3, [pc, #216]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	f503 334e 	add.w	r3, r3, #210944	; 0x33800
 8102210:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8102214:	4a44      	ldr	r2, [pc, #272]	; (8102328 <face_recognition_configure_activations+0xe28>)
 8102216:	60d3      	str	r3, [r2, #12]
    conv2d_65_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102218:	4b32      	ldr	r3, [pc, #200]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	4a43      	ldr	r2, [pc, #268]	; (810232c <face_recognition_configure_activations+0xe2c>)
 810221e:	6093      	str	r3, [r2, #8]
    conv2d_65_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102220:	4b30      	ldr	r3, [pc, #192]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	4a41      	ldr	r2, [pc, #260]	; (810232c <face_recognition_configure_activations+0xe2c>)
 8102226:	60d3      	str	r3, [r2, #12]
    conv2d_65_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 211116);
 8102228:	4b2e      	ldr	r3, [pc, #184]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	f503 334e 	add.w	r3, r3, #210944	; 0x33800
 8102230:	33ac      	adds	r3, #172	; 0xac
 8102232:	4a3f      	ldr	r2, [pc, #252]	; (8102330 <face_recognition_configure_activations+0xe30>)
 8102234:	6093      	str	r3, [r2, #8]
    conv2d_65_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 211116);
 8102236:	4b2b      	ldr	r3, [pc, #172]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	f503 334e 	add.w	r3, r3, #210944	; 0x33800
 810223e:	33ac      	adds	r3, #172	; 0xac
 8102240:	4a3b      	ldr	r2, [pc, #236]	; (8102330 <face_recognition_configure_activations+0xe30>)
 8102242:	60d3      	str	r3, [r2, #12]
    conv2d_66_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102244:	4b27      	ldr	r3, [pc, #156]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	4a3a      	ldr	r2, [pc, #232]	; (8102334 <face_recognition_configure_activations+0xe34>)
 810224a:	6093      	str	r3, [r2, #8]
    conv2d_66_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 810224c:	4b25      	ldr	r3, [pc, #148]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	4a38      	ldr	r2, [pc, #224]	; (8102334 <face_recognition_configure_activations+0xe34>)
 8102252:	60d3      	str	r3, [r2, #12]
    conv2d_66_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 187308);
 8102254:	4b23      	ldr	r3, [pc, #140]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 810225c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8102260:	4a35      	ldr	r2, [pc, #212]	; (8102338 <face_recognition_configure_activations+0xe38>)
 8102262:	6093      	str	r3, [r2, #8]
    conv2d_66_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 187308);
 8102264:	4b1f      	ldr	r3, [pc, #124]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 810226c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8102270:	4a31      	ldr	r2, [pc, #196]	; (8102338 <face_recognition_configure_activations+0xe38>)
 8102272:	60d3      	str	r3, [r2, #12]
    pool_67_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 187308);
 8102274:	4b1b      	ldr	r3, [pc, #108]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 810227c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8102280:	4a2e      	ldr	r2, [pc, #184]	; (810233c <face_recognition_configure_activations+0xe3c>)
 8102282:	6093      	str	r3, [r2, #8]
    pool_67_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 187308);
 8102284:	4b17      	ldr	r3, [pc, #92]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	f503 3336 	add.w	r3, r3, #186368	; 0x2d800
 810228c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8102290:	4a2a      	ldr	r2, [pc, #168]	; (810233c <face_recognition_configure_activations+0xe3c>)
 8102292:	60d3      	str	r3, [r2, #12]
    gemm_68_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 8102294:	4b13      	ldr	r3, [pc, #76]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	4a29      	ldr	r2, [pc, #164]	; (8102340 <face_recognition_configure_activations+0xe40>)
 810229a:	6093      	str	r3, [r2, #8]
    gemm_68_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 810229c:	4b11      	ldr	r3, [pc, #68]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	4a27      	ldr	r2, [pc, #156]	; (8102340 <face_recognition_configure_activations+0xe40>)
 81022a2:	60d3      	str	r3, [r2, #12]
    gemm_68_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 2560);
 81022a4:	4b0f      	ldr	r3, [pc, #60]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 81022ac:	4a25      	ldr	r2, [pc, #148]	; (8102344 <face_recognition_configure_activations+0xe44>)
 81022ae:	6093      	str	r3, [r2, #8]
    gemm_68_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 2560);
 81022b0:	4b0c      	ldr	r3, [pc, #48]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 81022b8:	4a22      	ldr	r2, [pc, #136]	; (8102344 <face_recognition_configure_activations+0xe44>)
 81022ba:	60d3      	str	r3, [r2, #12]
    nl_69_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81022bc:	4b09      	ldr	r3, [pc, #36]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	4a21      	ldr	r2, [pc, #132]	; (8102348 <face_recognition_configure_activations+0xe48>)
 81022c2:	6093      	str	r3, [r2, #8]
    nl_69_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 0);
 81022c4:	4b07      	ldr	r3, [pc, #28]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	4a1f      	ldr	r2, [pc, #124]	; (8102348 <face_recognition_configure_activations+0xe48>)
 81022ca:	60d3      	str	r3, [r2, #12]
    conversion_70_output_array.data = AI_PTR(g_face_recognition_activations_map[0] + 4);
 81022cc:	4b05      	ldr	r3, [pc, #20]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022ce:	681b      	ldr	r3, [r3, #0]
 81022d0:	3304      	adds	r3, #4
 81022d2:	4a1e      	ldr	r2, [pc, #120]	; (810234c <face_recognition_configure_activations+0xe4c>)
 81022d4:	6093      	str	r3, [r2, #8]
    conversion_70_output_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 4);
 81022d6:	4b03      	ldr	r3, [pc, #12]	; (81022e4 <face_recognition_configure_activations+0xde4>)
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	3304      	adds	r3, #4
 81022dc:	4a1b      	ldr	r2, [pc, #108]	; (810234c <face_recognition_configure_activations+0xe4c>)
 81022de:	60d3      	str	r3, [r2, #12]
 81022e0:	e036      	b.n	8102350 <face_recognition_configure_activations+0xe50>
 81022e2:	bf00      	nop
 81022e4:	1003fa2c 	.word	0x1003fa2c
 81022e8:	10000440 	.word	0x10000440
 81022ec:	10000eb0 	.word	0x10000eb0
 81022f0:	10000450 	.word	0x10000450
 81022f4:	10000460 	.word	0x10000460
 81022f8:	10000ec0 	.word	0x10000ec0
 81022fc:	10000470 	.word	0x10000470
 8102300:	10000480 	.word	0x10000480
 8102304:	10000ed0 	.word	0x10000ed0
 8102308:	10000490 	.word	0x10000490
 810230c:	10000ee0 	.word	0x10000ee0
 8102310:	100004a0 	.word	0x100004a0
 8102314:	100004b0 	.word	0x100004b0
 8102318:	10000ef0 	.word	0x10000ef0
 810231c:	100004c0 	.word	0x100004c0
 8102320:	100004d0 	.word	0x100004d0
 8102324:	10000f00 	.word	0x10000f00
 8102328:	100004e0 	.word	0x100004e0
 810232c:	10000f10 	.word	0x10000f10
 8102330:	100004f0 	.word	0x100004f0
 8102334:	10000f20 	.word	0x10000f20
 8102338:	10000500 	.word	0x10000500
 810233c:	10000510 	.word	0x10000510
 8102340:	10000f30 	.word	0x10000f30
 8102344:	10000520 	.word	0x10000520
 8102348:	10000530 	.word	0x10000530
 810234c:	10000540 	.word	0x10000540
    conv2d_1_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102350:	4b67      	ldr	r3, [pc, #412]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102358:	4a66      	ldr	r2, [pc, #408]	; (81024f4 <face_recognition_configure_activations+0xff4>)
 810235a:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 810235c:	4b64      	ldr	r3, [pc, #400]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102364:	4a63      	ldr	r2, [pc, #396]	; (81024f4 <face_recognition_configure_activations+0xff4>)
 8102366:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102368:	4b61      	ldr	r3, [pc, #388]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810236a:	681b      	ldr	r3, [r3, #0]
 810236c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102370:	4a61      	ldr	r2, [pc, #388]	; (81024f8 <face_recognition_configure_activations+0xff8>)
 8102372:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102374:	4b5e      	ldr	r3, [pc, #376]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 810237c:	4a5e      	ldr	r2, [pc, #376]	; (81024f8 <face_recognition_configure_activations+0xff8>)
 810237e:	60d3      	str	r3, [r2, #12]
    conv2d_8_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102380:	4b5b      	ldr	r3, [pc, #364]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102388:	4a5c      	ldr	r2, [pc, #368]	; (81024fc <face_recognition_configure_activations+0xffc>)
 810238a:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 810238c:	4b58      	ldr	r3, [pc, #352]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102394:	4a59      	ldr	r2, [pc, #356]	; (81024fc <face_recognition_configure_activations+0xffc>)
 8102396:	60d3      	str	r3, [r2, #12]
    conv2d_10_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102398:	4b55      	ldr	r3, [pc, #340]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023a0:	4a57      	ldr	r2, [pc, #348]	; (8102500 <face_recognition_configure_activations+0x1000>)
 81023a2:	6093      	str	r3, [r2, #8]
    conv2d_10_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023a4:	4b52      	ldr	r3, [pc, #328]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023ac:	4a54      	ldr	r2, [pc, #336]	; (8102500 <face_recognition_configure_activations+0x1000>)
 81023ae:	60d3      	str	r3, [r2, #12]
    conv2d_12_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023b0:	4b4f      	ldr	r3, [pc, #316]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023b8:	4a52      	ldr	r2, [pc, #328]	; (8102504 <face_recognition_configure_activations+0x1004>)
 81023ba:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023bc:	4b4c      	ldr	r3, [pc, #304]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023c4:	4a4f      	ldr	r2, [pc, #316]	; (8102504 <face_recognition_configure_activations+0x1004>)
 81023c6:	60d3      	str	r3, [r2, #12]
    conv2d_16_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023c8:	4b49      	ldr	r3, [pc, #292]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023ca:	681b      	ldr	r3, [r3, #0]
 81023cc:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023d0:	4a4d      	ldr	r2, [pc, #308]	; (8102508 <face_recognition_configure_activations+0x1008>)
 81023d2:	6093      	str	r3, [r2, #8]
    conv2d_16_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023d4:	4b46      	ldr	r3, [pc, #280]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023dc:	4a4a      	ldr	r2, [pc, #296]	; (8102508 <face_recognition_configure_activations+0x1008>)
 81023de:	60d3      	str	r3, [r2, #12]
    conv2d_18_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023e0:	4b43      	ldr	r3, [pc, #268]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023e8:	4a48      	ldr	r2, [pc, #288]	; (810250c <face_recognition_configure_activations+0x100c>)
 81023ea:	6093      	str	r3, [r2, #8]
    conv2d_18_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023ec:	4b40      	ldr	r3, [pc, #256]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81023f4:	4a45      	ldr	r2, [pc, #276]	; (810250c <face_recognition_configure_activations+0x100c>)
 81023f6:	60d3      	str	r3, [r2, #12]
    conv2d_20_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81023f8:	4b3d      	ldr	r3, [pc, #244]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102400:	4a43      	ldr	r2, [pc, #268]	; (8102510 <face_recognition_configure_activations+0x1010>)
 8102402:	6093      	str	r3, [r2, #8]
    conv2d_20_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102404:	4b3a      	ldr	r3, [pc, #232]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 810240c:	4a40      	ldr	r2, [pc, #256]	; (8102510 <face_recognition_configure_activations+0x1010>)
 810240e:	60d3      	str	r3, [r2, #12]
    conv2d_22_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102410:	4b37      	ldr	r3, [pc, #220]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102418:	4a3e      	ldr	r2, [pc, #248]	; (8102514 <face_recognition_configure_activations+0x1014>)
 810241a:	6093      	str	r3, [r2, #8]
    conv2d_22_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 810241c:	4b34      	ldr	r3, [pc, #208]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102424:	4a3b      	ldr	r2, [pc, #236]	; (8102514 <face_recognition_configure_activations+0x1014>)
 8102426:	60d3      	str	r3, [r2, #12]
    conv2d_24_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102428:	4b31      	ldr	r3, [pc, #196]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102430:	4a39      	ldr	r2, [pc, #228]	; (8102518 <face_recognition_configure_activations+0x1018>)
 8102432:	6093      	str	r3, [r2, #8]
    conv2d_24_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102434:	4b2e      	ldr	r3, [pc, #184]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 810243c:	4a36      	ldr	r2, [pc, #216]	; (8102518 <face_recognition_configure_activations+0x1018>)
 810243e:	60d3      	str	r3, [r2, #12]
    conv2d_30_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102440:	4b2b      	ldr	r3, [pc, #172]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102448:	4a34      	ldr	r2, [pc, #208]	; (810251c <face_recognition_configure_activations+0x101c>)
 810244a:	6093      	str	r3, [r2, #8]
    conv2d_30_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 810244c:	4b28      	ldr	r3, [pc, #160]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810244e:	681b      	ldr	r3, [r3, #0]
 8102450:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102454:	4a31      	ldr	r2, [pc, #196]	; (810251c <face_recognition_configure_activations+0x101c>)
 8102456:	60d3      	str	r3, [r2, #12]
    conv2d_34_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102458:	4b25      	ldr	r3, [pc, #148]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102460:	4a2f      	ldr	r2, [pc, #188]	; (8102520 <face_recognition_configure_activations+0x1020>)
 8102462:	6093      	str	r3, [r2, #8]
    conv2d_34_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102464:	4b22      	ldr	r3, [pc, #136]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 810246c:	4a2c      	ldr	r2, [pc, #176]	; (8102520 <face_recognition_configure_activations+0x1020>)
 810246e:	60d3      	str	r3, [r2, #12]
    conv2d_38_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 8102470:	4b1f      	ldr	r3, [pc, #124]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102478:	4a2a      	ldr	r2, [pc, #168]	; (8102524 <face_recognition_configure_activations+0x1024>)
 810247a:	6093      	str	r3, [r2, #8]
    conv2d_38_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 810247c:	4b1c      	ldr	r3, [pc, #112]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102484:	4a27      	ldr	r2, [pc, #156]	; (8102524 <face_recognition_configure_activations+0x1024>)
 8102486:	60d3      	str	r3, [r2, #12]
    conv2d_42_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229676);
 8102488:	4b19      	ldr	r3, [pc, #100]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8102490:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8102494:	4a24      	ldr	r2, [pc, #144]	; (8102528 <face_recognition_configure_activations+0x1028>)
 8102496:	6093      	str	r3, [r2, #8]
    conv2d_42_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229676);
 8102498:	4b15      	ldr	r3, [pc, #84]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81024a0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 81024a4:	4a20      	ldr	r2, [pc, #128]	; (8102528 <face_recognition_configure_activations+0x1028>)
 81024a6:	60d3      	str	r3, [r2, #12]
    conv2d_45_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81024a8:	4b11      	ldr	r3, [pc, #68]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81024b0:	4a1e      	ldr	r2, [pc, #120]	; (810252c <face_recognition_configure_activations+0x102c>)
 81024b2:	6093      	str	r3, [r2, #8]
    conv2d_45_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81024b4:	4b0e      	ldr	r3, [pc, #56]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81024bc:	4a1b      	ldr	r2, [pc, #108]	; (810252c <face_recognition_configure_activations+0x102c>)
 81024be:	60d3      	str	r3, [r2, #12]
    conv2d_49_scratch0_array.data = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81024c0:	4b0b      	ldr	r3, [pc, #44]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81024c8:	4a19      	ldr	r2, [pc, #100]	; (8102530 <face_recognition_configure_activations+0x1030>)
 81024ca:	6093      	str	r3, [r2, #8]
    conv2d_49_scratch0_array.data_start = AI_PTR(g_face_recognition_activations_map[0] + 229376);
 81024cc:	4b08      	ldr	r3, [pc, #32]	; (81024f0 <face_recognition_configure_activations+0xff0>)
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 81024d4:	4a16      	ldr	r2, [pc, #88]	; (8102530 <face_recognition_configure_activations+0x1030>)
 81024d6:	60d3      	str	r3, [r2, #12]
    return true;
 81024d8:	2301      	movs	r3, #1
 81024da:	e005      	b.n	81024e8 <face_recognition_configure_activations+0xfe8>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 81024dc:	2213      	movs	r2, #19
 81024de:	2130      	movs	r1, #48	; 0x30
 81024e0:	6878      	ldr	r0, [r7, #4]
 81024e2:	f006 fed7 	bl	8109294 <ai_platform_network_set_error>
  return false;
 81024e6:	2300      	movs	r3, #0
}
 81024e8:	4618      	mov	r0, r3
 81024ea:	3708      	adds	r7, #8
 81024ec:	46bd      	mov	sp, r7
 81024ee:	bd80      	pop	{r7, pc}
 81024f0:	1003fa2c 	.word	0x1003fa2c
 81024f4:	10000bf0 	.word	0x10000bf0
 81024f8:	10000c20 	.word	0x10000c20
 81024fc:	10000c50 	.word	0x10000c50
 8102500:	10000c70 	.word	0x10000c70
 8102504:	10000c80 	.word	0x10000c80
 8102508:	10000cb0 	.word	0x10000cb0
 810250c:	10000cd0 	.word	0x10000cd0
 8102510:	10000ce0 	.word	0x10000ce0
 8102514:	10000d00 	.word	0x10000d00
 8102518:	10000d10 	.word	0x10000d10
 810251c:	10000d60 	.word	0x10000d60
 8102520:	10000d90 	.word	0x10000d90
 8102524:	10000dc0 	.word	0x10000dc0
 8102528:	10000df0 	.word	0x10000df0
 810252c:	10000e20 	.word	0x10000e20
 8102530:	10000e50 	.word	0x10000e50

08102534 <face_recognition_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool face_recognition_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8102534:	b580      	push	{r7, lr}
 8102536:	b082      	sub	sp, #8
 8102538:	af00      	add	r7, sp, #0
 810253a:	6078      	str	r0, [r7, #4]
 810253c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_face_recognition_weights_map, 1, params)) {
 810253e:	683a      	ldr	r2, [r7, #0]
 8102540:	2101      	movs	r1, #1
 8102542:	4898      	ldr	r0, [pc, #608]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102544:	f006 fdd0 	bl	81090e8 <ai_platform_get_weights_map>
 8102548:	4603      	mov	r3, r0
 810254a:	2b00      	cmp	r3, #0
 810254c:	f001 8120 	beq.w	8103790 <face_recognition_configure_weights+0x125c>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8102550:	4b95      	ldr	r3, [pc, #596]	; (81027a8 <face_recognition_configure_weights+0x274>)
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102558:	4a93      	ldr	r2, [pc, #588]	; (81027a8 <face_recognition_configure_weights+0x274>)
 810255a:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 0);
 810255c:	4b91      	ldr	r3, [pc, #580]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a91      	ldr	r2, [pc, #580]	; (81027a8 <face_recognition_configure_weights+0x274>)
 8102562:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 0);
 8102564:	4b8f      	ldr	r3, [pc, #572]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	4a8f      	ldr	r2, [pc, #572]	; (81027a8 <face_recognition_configure_weights+0x274>)
 810256a:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 810256c:	4b8f      	ldr	r3, [pc, #572]	; (81027ac <face_recognition_configure_weights+0x278>)
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102574:	4a8d      	ldr	r2, [pc, #564]	; (81027ac <face_recognition_configure_weights+0x278>)
 8102576:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 432);
 8102578:	4b8a      	ldr	r3, [pc, #552]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8102580:	4a8a      	ldr	r2, [pc, #552]	; (81027ac <face_recognition_configure_weights+0x278>)
 8102582:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 432);
 8102584:	4b87      	ldr	r3, [pc, #540]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 810258c:	4a87      	ldr	r2, [pc, #540]	; (81027ac <face_recognition_configure_weights+0x278>)
 810258e:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8102590:	4b87      	ldr	r3, [pc, #540]	; (81027b0 <face_recognition_configure_weights+0x27c>)
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102598:	4a85      	ldr	r2, [pc, #532]	; (81027b0 <face_recognition_configure_weights+0x27c>)
 810259a:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 496);
 810259c:	4b81      	ldr	r3, [pc, #516]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 81025a4:	4a82      	ldr	r2, [pc, #520]	; (81027b0 <face_recognition_configure_weights+0x27c>)
 81025a6:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 496);
 81025a8:	4b7e      	ldr	r3, [pc, #504]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 81025b0:	4a7f      	ldr	r2, [pc, #508]	; (81027b0 <face_recognition_configure_weights+0x27c>)
 81025b2:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 81025b4:	4b7f      	ldr	r3, [pc, #508]	; (81027b4 <face_recognition_configure_weights+0x280>)
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81025bc:	4a7d      	ldr	r2, [pc, #500]	; (81027b4 <face_recognition_configure_weights+0x280>)
 81025be:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 640);
 81025c0:	4b78      	ldr	r3, [pc, #480]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81025c8:	4a7a      	ldr	r2, [pc, #488]	; (81027b4 <face_recognition_configure_weights+0x280>)
 81025ca:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 640);
 81025cc:	4b75      	ldr	r3, [pc, #468]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81025d4:	4a77      	ldr	r2, [pc, #476]	; (81027b4 <face_recognition_configure_weights+0x280>)
 81025d6:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 81025d8:	4b77      	ldr	r3, [pc, #476]	; (81027b8 <face_recognition_configure_weights+0x284>)
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81025e0:	4a75      	ldr	r2, [pc, #468]	; (81027b8 <face_recognition_configure_weights+0x284>)
 81025e2:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 704);
 81025e4:	4b6f      	ldr	r3, [pc, #444]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81025e6:	681b      	ldr	r3, [r3, #0]
 81025e8:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 81025ec:	4a72      	ldr	r2, [pc, #456]	; (81027b8 <face_recognition_configure_weights+0x284>)
 81025ee:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 704);
 81025f0:	4b6c      	ldr	r3, [pc, #432]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 81025f8:	4a6f      	ldr	r2, [pc, #444]	; (81027b8 <face_recognition_configure_weights+0x284>)
 81025fa:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 81025fc:	4b6f      	ldr	r3, [pc, #444]	; (81027bc <face_recognition_configure_weights+0x288>)
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102604:	4a6d      	ldr	r2, [pc, #436]	; (81027bc <face_recognition_configure_weights+0x288>)
 8102606:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 832);
 8102608:	4b66      	ldr	r3, [pc, #408]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810260a:	681b      	ldr	r3, [r3, #0]
 810260c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8102610:	4a6a      	ldr	r2, [pc, #424]	; (81027bc <face_recognition_configure_weights+0x288>)
 8102612:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 832);
 8102614:	4b63      	ldr	r3, [pc, #396]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	f503 7350 	add.w	r3, r3, #832	; 0x340
 810261c:	4a67      	ldr	r2, [pc, #412]	; (81027bc <face_recognition_configure_weights+0x288>)
 810261e:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8102620:	4b67      	ldr	r3, [pc, #412]	; (81027c0 <face_recognition_configure_weights+0x28c>)
 8102622:	681b      	ldr	r3, [r3, #0]
 8102624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102628:	4a65      	ldr	r2, [pc, #404]	; (81027c0 <face_recognition_configure_weights+0x28c>)
 810262a:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 864);
 810262c:	4b5d      	ldr	r3, [pc, #372]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8102634:	4a62      	ldr	r2, [pc, #392]	; (81027c0 <face_recognition_configure_weights+0x28c>)
 8102636:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 864);
 8102638:	4b5a      	ldr	r3, [pc, #360]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8102640:	4a5f      	ldr	r2, [pc, #380]	; (81027c0 <face_recognition_configure_weights+0x28c>)
 8102642:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8102644:	4b5f      	ldr	r3, [pc, #380]	; (81027c4 <face_recognition_configure_weights+0x290>)
 8102646:	681b      	ldr	r3, [r3, #0]
 8102648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810264c:	4a5d      	ldr	r2, [pc, #372]	; (81027c4 <face_recognition_configure_weights+0x290>)
 810264e:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 1248);
 8102650:	4b54      	ldr	r3, [pc, #336]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8102658:	4a5a      	ldr	r2, [pc, #360]	; (81027c4 <face_recognition_configure_weights+0x290>)
 810265a:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 1248);
 810265c:	4b51      	ldr	r3, [pc, #324]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8102664:	4a57      	ldr	r2, [pc, #348]	; (81027c4 <face_recognition_configure_weights+0x290>)
 8102666:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8102668:	4b57      	ldr	r3, [pc, #348]	; (81027c8 <face_recognition_configure_weights+0x294>)
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102670:	4a55      	ldr	r2, [pc, #340]	; (81027c8 <face_recognition_configure_weights+0x294>)
 8102672:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 1440);
 8102674:	4b4b      	ldr	r3, [pc, #300]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 810267c:	4a52      	ldr	r2, [pc, #328]	; (81027c8 <face_recognition_configure_weights+0x294>)
 810267e:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 1440);
 8102680:	4b48      	ldr	r3, [pc, #288]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8102688:	4a4f      	ldr	r2, [pc, #316]	; (81027c8 <face_recognition_configure_weights+0x294>)
 810268a:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 810268c:	4b4f      	ldr	r3, [pc, #316]	; (81027cc <face_recognition_configure_weights+0x298>)
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102694:	4a4d      	ldr	r2, [pc, #308]	; (81027cc <face_recognition_configure_weights+0x298>)
 8102696:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 1872);
 8102698:	4b42      	ldr	r3, [pc, #264]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 81026a0:	4a4a      	ldr	r2, [pc, #296]	; (81027cc <face_recognition_configure_weights+0x298>)
 81026a2:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 1872);
 81026a4:	4b3f      	ldr	r3, [pc, #252]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 81026ac:	4a47      	ldr	r2, [pc, #284]	; (81027cc <face_recognition_configure_weights+0x298>)
 81026ae:	60d3      	str	r3, [r2, #12]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 81026b0:	4b47      	ldr	r3, [pc, #284]	; (81027d0 <face_recognition_configure_weights+0x29c>)
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81026b8:	4a45      	ldr	r2, [pc, #276]	; (81027d0 <face_recognition_configure_weights+0x29c>)
 81026ba:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 2064);
 81026bc:	4b39      	ldr	r3, [pc, #228]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 81026c4:	4a42      	ldr	r2, [pc, #264]	; (81027d0 <face_recognition_configure_weights+0x29c>)
 81026c6:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 2064);
 81026c8:	4b36      	ldr	r3, [pc, #216]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 81026d0:	4a3f      	ldr	r2, [pc, #252]	; (81027d0 <face_recognition_configure_weights+0x29c>)
 81026d2:	60d3      	str	r3, [r2, #12]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 81026d4:	4b3f      	ldr	r3, [pc, #252]	; (81027d4 <face_recognition_configure_weights+0x2a0>)
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81026dc:	4a3d      	ldr	r2, [pc, #244]	; (81027d4 <face_recognition_configure_weights+0x2a0>)
 81026de:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 2448);
 81026e0:	4b30      	ldr	r3, [pc, #192]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 81026e8:	4a3a      	ldr	r2, [pc, #232]	; (81027d4 <face_recognition_configure_weights+0x2a0>)
 81026ea:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 2448);
 81026ec:	4b2d      	ldr	r3, [pc, #180]	; (81027a4 <face_recognition_configure_weights+0x270>)
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 81026f4:	4a37      	ldr	r2, [pc, #220]	; (81027d4 <face_recognition_configure_weights+0x2a0>)
 81026f6:	60d3      	str	r3, [r2, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 81026f8:	4b37      	ldr	r3, [pc, #220]	; (81027d8 <face_recognition_configure_weights+0x2a4>)
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102700:	4a35      	ldr	r2, [pc, #212]	; (81027d8 <face_recognition_configure_weights+0x2a4>)
 8102702:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 2480);
 8102704:	4b27      	ldr	r3, [pc, #156]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 810270c:	4a32      	ldr	r2, [pc, #200]	; (81027d8 <face_recognition_configure_weights+0x2a4>)
 810270e:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 2480);
 8102710:	4b24      	ldr	r3, [pc, #144]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102712:	681b      	ldr	r3, [r3, #0]
 8102714:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8102718:	4a2f      	ldr	r2, [pc, #188]	; (81027d8 <face_recognition_configure_weights+0x2a4>)
 810271a:	60d3      	str	r3, [r2, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 810271c:	4b2f      	ldr	r3, [pc, #188]	; (81027dc <face_recognition_configure_weights+0x2a8>)
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102724:	4a2d      	ldr	r2, [pc, #180]	; (81027dc <face_recognition_configure_weights+0x2a8>)
 8102726:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 2864);
 8102728:	4b1e      	ldr	r3, [pc, #120]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8102730:	4a2a      	ldr	r2, [pc, #168]	; (81027dc <face_recognition_configure_weights+0x2a8>)
 8102732:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 2864);
 8102734:	4b1b      	ldr	r3, [pc, #108]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102736:	681b      	ldr	r3, [r3, #0]
 8102738:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 810273c:	4a27      	ldr	r2, [pc, #156]	; (81027dc <face_recognition_configure_weights+0x2a8>)
 810273e:	60d3      	str	r3, [r2, #12]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8102740:	4b27      	ldr	r3, [pc, #156]	; (81027e0 <face_recognition_configure_weights+0x2ac>)
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102748:	4a25      	ldr	r2, [pc, #148]	; (81027e0 <face_recognition_configure_weights+0x2ac>)
 810274a:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 3056);
 810274c:	4b15      	ldr	r3, [pc, #84]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8102754:	4a22      	ldr	r2, [pc, #136]	; (81027e0 <face_recognition_configure_weights+0x2ac>)
 8102756:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 3056);
 8102758:	4b12      	ldr	r3, [pc, #72]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 8102760:	4a1f      	ldr	r2, [pc, #124]	; (81027e0 <face_recognition_configure_weights+0x2ac>)
 8102762:	60d3      	str	r3, [r2, #12]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8102764:	4b1f      	ldr	r3, [pc, #124]	; (81027e4 <face_recognition_configure_weights+0x2b0>)
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810276c:	4a1d      	ldr	r2, [pc, #116]	; (81027e4 <face_recognition_configure_weights+0x2b0>)
 810276e:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 3488);
 8102770:	4b0c      	ldr	r3, [pc, #48]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102772:	681b      	ldr	r3, [r3, #0]
 8102774:	f503 635a 	add.w	r3, r3, #3488	; 0xda0
 8102778:	4a1a      	ldr	r2, [pc, #104]	; (81027e4 <face_recognition_configure_weights+0x2b0>)
 810277a:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 3488);
 810277c:	4b09      	ldr	r3, [pc, #36]	; (81027a4 <face_recognition_configure_weights+0x270>)
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	f503 635a 	add.w	r3, r3, #3488	; 0xda0
 8102784:	4a17      	ldr	r2, [pc, #92]	; (81027e4 <face_recognition_configure_weights+0x2b0>)
 8102786:	60d3      	str	r3, [r2, #12]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8102788:	4b17      	ldr	r3, [pc, #92]	; (81027e8 <face_recognition_configure_weights+0x2b4>)
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102790:	4a15      	ldr	r2, [pc, #84]	; (81027e8 <face_recognition_configure_weights+0x2b4>)
 8102792:	6013      	str	r3, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 3680);
 8102794:	4b03      	ldr	r3, [pc, #12]	; (81027a4 <face_recognition_configure_weights+0x270>)
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 810279c:	4a12      	ldr	r2, [pc, #72]	; (81027e8 <face_recognition_configure_weights+0x2b4>)
 810279e:	6093      	str	r3, [r2, #8]
 81027a0:	e024      	b.n	81027ec <face_recognition_configure_weights+0x2b8>
 81027a2:	bf00      	nop
 81027a4:	1003fa30 	.word	0x1003fa30
 81027a8:	10000550 	.word	0x10000550
 81027ac:	10000560 	.word	0x10000560
 81027b0:	10000570 	.word	0x10000570
 81027b4:	10000580 	.word	0x10000580
 81027b8:	10000590 	.word	0x10000590
 81027bc:	100005a0 	.word	0x100005a0
 81027c0:	100005b0 	.word	0x100005b0
 81027c4:	100005c0 	.word	0x100005c0
 81027c8:	100005d0 	.word	0x100005d0
 81027cc:	100005e0 	.word	0x100005e0
 81027d0:	100005f0 	.word	0x100005f0
 81027d4:	10000600 	.word	0x10000600
 81027d8:	10000610 	.word	0x10000610
 81027dc:	10000620 	.word	0x10000620
 81027e0:	10000630 	.word	0x10000630
 81027e4:	10000640 	.word	0x10000640
 81027e8:	10000650 	.word	0x10000650
    conv2d_10_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 3680);
 81027ec:	4b9c      	ldr	r3, [pc, #624]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	f503 6366 	add.w	r3, r3, #3680	; 0xe60
 81027f4:	4a9b      	ldr	r2, [pc, #620]	; (8102a64 <face_recognition_configure_weights+0x530>)
 81027f6:	60d3      	str	r3, [r2, #12]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 81027f8:	4b9b      	ldr	r3, [pc, #620]	; (8102a68 <face_recognition_configure_weights+0x534>)
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102800:	4a99      	ldr	r2, [pc, #612]	; (8102a68 <face_recognition_configure_weights+0x534>)
 8102802:	6013      	str	r3, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 4064);
 8102804:	4b96      	ldr	r3, [pc, #600]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 810280c:	4a96      	ldr	r2, [pc, #600]	; (8102a68 <face_recognition_configure_weights+0x534>)
 810280e:	6093      	str	r3, [r2, #8]
    conv2d_10_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 4064);
 8102810:	4b93      	ldr	r3, [pc, #588]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 8102818:	4a93      	ldr	r2, [pc, #588]	; (8102a68 <face_recognition_configure_weights+0x534>)
 810281a:	60d3      	str	r3, [r2, #12]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 810281c:	4b93      	ldr	r3, [pc, #588]	; (8102a6c <face_recognition_configure_weights+0x538>)
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102824:	4a91      	ldr	r2, [pc, #580]	; (8102a6c <face_recognition_configure_weights+0x538>)
 8102826:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 4096);
 8102828:	4b8d      	ldr	r3, [pc, #564]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102830:	4a8e      	ldr	r2, [pc, #568]	; (8102a6c <face_recognition_configure_weights+0x538>)
 8102832:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 4096);
 8102834:	4b8a      	ldr	r3, [pc, #552]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810283c:	4a8b      	ldr	r2, [pc, #556]	; (8102a6c <face_recognition_configure_weights+0x538>)
 810283e:	60d3      	str	r3, [r2, #12]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8102840:	4b8b      	ldr	r3, [pc, #556]	; (8102a70 <face_recognition_configure_weights+0x53c>)
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102848:	4a89      	ldr	r2, [pc, #548]	; (8102a70 <face_recognition_configure_weights+0x53c>)
 810284a:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 4480);
 810284c:	4b84      	ldr	r3, [pc, #528]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8102854:	4a86      	ldr	r2, [pc, #536]	; (8102a70 <face_recognition_configure_weights+0x53c>)
 8102856:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 4480);
 8102858:	4b81      	ldr	r3, [pc, #516]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8102860:	4a83      	ldr	r2, [pc, #524]	; (8102a70 <face_recognition_configure_weights+0x53c>)
 8102862:	60d3      	str	r3, [r2, #12]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8102864:	4b83      	ldr	r3, [pc, #524]	; (8102a74 <face_recognition_configure_weights+0x540>)
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810286c:	4a81      	ldr	r2, [pc, #516]	; (8102a74 <face_recognition_configure_weights+0x540>)
 810286e:	6013      	str	r3, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 4672);
 8102870:	4b7b      	ldr	r3, [pc, #492]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8102878:	4a7e      	ldr	r2, [pc, #504]	; (8102a74 <face_recognition_configure_weights+0x540>)
 810287a:	6093      	str	r3, [r2, #8]
    conv2d_14_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 4672);
 810287c:	4b78      	ldr	r3, [pc, #480]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8102884:	4a7b      	ldr	r2, [pc, #492]	; (8102a74 <face_recognition_configure_weights+0x540>)
 8102886:	60d3      	str	r3, [r2, #12]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8102888:	4b7b      	ldr	r3, [pc, #492]	; (8102a78 <face_recognition_configure_weights+0x544>)
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102890:	4a79      	ldr	r2, [pc, #484]	; (8102a78 <face_recognition_configure_weights+0x544>)
 8102892:	6013      	str	r3, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 5104);
 8102894:	4b72      	ldr	r3, [pc, #456]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 810289c:	3310      	adds	r3, #16
 810289e:	4a76      	ldr	r2, [pc, #472]	; (8102a78 <face_recognition_configure_weights+0x544>)
 81028a0:	6093      	str	r3, [r2, #8]
    conv2d_14_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 5104);
 81028a2:	4b6f      	ldr	r3, [pc, #444]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 81028aa:	3310      	adds	r3, #16
 81028ac:	4a72      	ldr	r2, [pc, #456]	; (8102a78 <face_recognition_configure_weights+0x544>)
 81028ae:	60d3      	str	r3, [r2, #12]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 81028b0:	4b72      	ldr	r3, [pc, #456]	; (8102a7c <face_recognition_configure_weights+0x548>)
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81028b8:	4a70      	ldr	r2, [pc, #448]	; (8102a7c <face_recognition_configure_weights+0x548>)
 81028ba:	6013      	str	r3, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 5296);
 81028bc:	4b68      	ldr	r3, [pc, #416]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 81028c4:	3310      	adds	r3, #16
 81028c6:	4a6d      	ldr	r2, [pc, #436]	; (8102a7c <face_recognition_configure_weights+0x548>)
 81028c8:	6093      	str	r3, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 5296);
 81028ca:	4b65      	ldr	r3, [pc, #404]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 81028d2:	3310      	adds	r3, #16
 81028d4:	4a69      	ldr	r2, [pc, #420]	; (8102a7c <face_recognition_configure_weights+0x548>)
 81028d6:	60d3      	str	r3, [r2, #12]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 81028d8:	4b69      	ldr	r3, [pc, #420]	; (8102a80 <face_recognition_configure_weights+0x54c>)
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81028e0:	4a67      	ldr	r2, [pc, #412]	; (8102a80 <face_recognition_configure_weights+0x54c>)
 81028e2:	6013      	str	r3, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 6064);
 81028e4:	4b5e      	ldr	r3, [pc, #376]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 81028ec:	3310      	adds	r3, #16
 81028ee:	4a64      	ldr	r2, [pc, #400]	; (8102a80 <face_recognition_configure_weights+0x54c>)
 81028f0:	6093      	str	r3, [r2, #8]
    conv2d_15_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 6064);
 81028f2:	4b5b      	ldr	r3, [pc, #364]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 81028fa:	3310      	adds	r3, #16
 81028fc:	4a60      	ldr	r2, [pc, #384]	; (8102a80 <face_recognition_configure_weights+0x54c>)
 81028fe:	60d3      	str	r3, [r2, #12]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8102900:	4b60      	ldr	r3, [pc, #384]	; (8102a84 <face_recognition_configure_weights+0x550>)
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102908:	4a5e      	ldr	r2, [pc, #376]	; (8102a84 <face_recognition_configure_weights+0x550>)
 810290a:	6013      	str	r3, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 6128);
 810290c:	4b54      	ldr	r3, [pc, #336]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810290e:	681b      	ldr	r3, [r3, #0]
 8102910:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8102914:	3310      	adds	r3, #16
 8102916:	4a5b      	ldr	r2, [pc, #364]	; (8102a84 <face_recognition_configure_weights+0x550>)
 8102918:	6093      	str	r3, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 6128);
 810291a:	4b51      	ldr	r3, [pc, #324]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8102922:	3310      	adds	r3, #16
 8102924:	4a57      	ldr	r2, [pc, #348]	; (8102a84 <face_recognition_configure_weights+0x550>)
 8102926:	60d3      	str	r3, [r2, #12]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8102928:	4b57      	ldr	r3, [pc, #348]	; (8102a88 <face_recognition_configure_weights+0x554>)
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102930:	4a55      	ldr	r2, [pc, #340]	; (8102a88 <face_recognition_configure_weights+0x554>)
 8102932:	6013      	str	r3, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 7664);
 8102934:	4b4a      	ldr	r3, [pc, #296]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	f503 53ef 	add.w	r3, r3, #7648	; 0x1de0
 810293c:	3310      	adds	r3, #16
 810293e:	4a52      	ldr	r2, [pc, #328]	; (8102a88 <face_recognition_configure_weights+0x554>)
 8102940:	6093      	str	r3, [r2, #8]
    conv2d_16_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 7664);
 8102942:	4b47      	ldr	r3, [pc, #284]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	f503 53ef 	add.w	r3, r3, #7648	; 0x1de0
 810294a:	3310      	adds	r3, #16
 810294c:	4a4e      	ldr	r2, [pc, #312]	; (8102a88 <face_recognition_configure_weights+0x554>)
 810294e:	60d3      	str	r3, [r2, #12]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8102950:	4b4e      	ldr	r3, [pc, #312]	; (8102a8c <face_recognition_configure_weights+0x558>)
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102958:	4a4c      	ldr	r2, [pc, #304]	; (8102a8c <face_recognition_configure_weights+0x558>)
 810295a:	6013      	str	r3, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 8048);
 810295c:	4b40      	ldr	r3, [pc, #256]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8102964:	3310      	adds	r3, #16
 8102966:	4a49      	ldr	r2, [pc, #292]	; (8102a8c <face_recognition_configure_weights+0x558>)
 8102968:	6093      	str	r3, [r2, #8]
    conv2d_17_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 8048);
 810296a:	4b3d      	ldr	r3, [pc, #244]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 8102972:	3310      	adds	r3, #16
 8102974:	4a45      	ldr	r2, [pc, #276]	; (8102a8c <face_recognition_configure_weights+0x558>)
 8102976:	60d3      	str	r3, [r2, #12]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8102978:	4b45      	ldr	r3, [pc, #276]	; (8102a90 <face_recognition_configure_weights+0x55c>)
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102980:	4a43      	ldr	r2, [pc, #268]	; (8102a90 <face_recognition_configure_weights+0x55c>)
 8102982:	6013      	str	r3, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 8912);
 8102984:	4b36      	ldr	r3, [pc, #216]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 810298c:	3310      	adds	r3, #16
 810298e:	4a40      	ldr	r2, [pc, #256]	; (8102a90 <face_recognition_configure_weights+0x55c>)
 8102990:	6093      	str	r3, [r2, #8]
    conv2d_17_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 8912);
 8102992:	4b33      	ldr	r3, [pc, #204]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
 810299a:	3310      	adds	r3, #16
 810299c:	4a3c      	ldr	r2, [pc, #240]	; (8102a90 <face_recognition_configure_weights+0x55c>)
 810299e:	60d3      	str	r3, [r2, #12]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 81029a0:	4b3c      	ldr	r3, [pc, #240]	; (8102a94 <face_recognition_configure_weights+0x560>)
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81029a8:	4a3a      	ldr	r2, [pc, #232]	; (8102a94 <face_recognition_configure_weights+0x560>)
 81029aa:	6013      	str	r3, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 9296);
 81029ac:	4b2c      	ldr	r3, [pc, #176]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 81029b4:	3310      	adds	r3, #16
 81029b6:	4a37      	ldr	r2, [pc, #220]	; (8102a94 <face_recognition_configure_weights+0x560>)
 81029b8:	6093      	str	r3, [r2, #8]
    conv2d_18_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 9296);
 81029ba:	4b29      	ldr	r3, [pc, #164]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 81029c2:	3310      	adds	r3, #16
 81029c4:	4a33      	ldr	r2, [pc, #204]	; (8102a94 <face_recognition_configure_weights+0x560>)
 81029c6:	60d3      	str	r3, [r2, #12]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 81029c8:	4b33      	ldr	r3, [pc, #204]	; (8102a98 <face_recognition_configure_weights+0x564>)
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81029d0:	4a31      	ldr	r2, [pc, #196]	; (8102a98 <face_recognition_configure_weights+0x564>)
 81029d2:	6013      	str	r3, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 10832);
 81029d4:	4b22      	ldr	r3, [pc, #136]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 81029dc:	3310      	adds	r3, #16
 81029de:	4a2e      	ldr	r2, [pc, #184]	; (8102a98 <face_recognition_configure_weights+0x564>)
 81029e0:	6093      	str	r3, [r2, #8]
    conv2d_18_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 10832);
 81029e2:	4b1f      	ldr	r3, [pc, #124]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 81029ea:	3310      	adds	r3, #16
 81029ec:	4a2a      	ldr	r2, [pc, #168]	; (8102a98 <face_recognition_configure_weights+0x564>)
 81029ee:	60d3      	str	r3, [r2, #12]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 81029f0:	4b2a      	ldr	r3, [pc, #168]	; (8102a9c <face_recognition_configure_weights+0x568>)
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81029f8:	4a28      	ldr	r2, [pc, #160]	; (8102a9c <face_recognition_configure_weights+0x568>)
 81029fa:	6013      	str	r3, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 10896);
 81029fc:	4b18      	ldr	r3, [pc, #96]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8102a04:	3310      	adds	r3, #16
 8102a06:	4a25      	ldr	r2, [pc, #148]	; (8102a9c <face_recognition_configure_weights+0x568>)
 8102a08:	6093      	str	r3, [r2, #8]
    conv2d_20_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 10896);
 8102a0a:	4b15      	ldr	r3, [pc, #84]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 8102a12:	3310      	adds	r3, #16
 8102a14:	4a21      	ldr	r2, [pc, #132]	; (8102a9c <face_recognition_configure_weights+0x568>)
 8102a16:	60d3      	str	r3, [r2, #12]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8102a18:	4b21      	ldr	r3, [pc, #132]	; (8102aa0 <face_recognition_configure_weights+0x56c>)
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102a20:	4a1f      	ldr	r2, [pc, #124]	; (8102aa0 <face_recognition_configure_weights+0x56c>)
 8102a22:	6013      	str	r3, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 12432);
 8102a24:	4b0e      	ldr	r3, [pc, #56]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8102a2c:	3310      	adds	r3, #16
 8102a2e:	4a1c      	ldr	r2, [pc, #112]	; (8102aa0 <face_recognition_configure_weights+0x56c>)
 8102a30:	6093      	str	r3, [r2, #8]
    conv2d_20_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 12432);
 8102a32:	4b0b      	ldr	r3, [pc, #44]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	f503 5342 	add.w	r3, r3, #12416	; 0x3080
 8102a3a:	3310      	adds	r3, #16
 8102a3c:	4a18      	ldr	r2, [pc, #96]	; (8102aa0 <face_recognition_configure_weights+0x56c>)
 8102a3e:	60d3      	str	r3, [r2, #12]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8102a40:	4b18      	ldr	r3, [pc, #96]	; (8102aa4 <face_recognition_configure_weights+0x570>)
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102a48:	4a16      	ldr	r2, [pc, #88]	; (8102aa4 <face_recognition_configure_weights+0x570>)
 8102a4a:	6013      	str	r3, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 12816);
 8102a4c:	4b04      	ldr	r3, [pc, #16]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8102a54:	3310      	adds	r3, #16
 8102a56:	4a13      	ldr	r2, [pc, #76]	; (8102aa4 <face_recognition_configure_weights+0x570>)
 8102a58:	6093      	str	r3, [r2, #8]
    conv2d_21_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 12816);
 8102a5a:	4b01      	ldr	r3, [pc, #4]	; (8102a60 <face_recognition_configure_weights+0x52c>)
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	e023      	b.n	8102aa8 <face_recognition_configure_weights+0x574>
 8102a60:	1003fa30 	.word	0x1003fa30
 8102a64:	10000650 	.word	0x10000650
 8102a68:	10000660 	.word	0x10000660
 8102a6c:	10000670 	.word	0x10000670
 8102a70:	10000680 	.word	0x10000680
 8102a74:	10000690 	.word	0x10000690
 8102a78:	100006a0 	.word	0x100006a0
 8102a7c:	100006b0 	.word	0x100006b0
 8102a80:	100006c0 	.word	0x100006c0
 8102a84:	100006d0 	.word	0x100006d0
 8102a88:	100006e0 	.word	0x100006e0
 8102a8c:	100006f0 	.word	0x100006f0
 8102a90:	10000700 	.word	0x10000700
 8102a94:	10000710 	.word	0x10000710
 8102a98:	10000720 	.word	0x10000720
 8102a9c:	10000730 	.word	0x10000730
 8102aa0:	10000740 	.word	0x10000740
 8102aa4:	10000750 	.word	0x10000750
 8102aa8:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8102aac:	3310      	adds	r3, #16
 8102aae:	4a9e      	ldr	r2, [pc, #632]	; (8102d28 <face_recognition_configure_weights+0x7f4>)
 8102ab0:	60d3      	str	r3, [r2, #12]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8102ab2:	4b9e      	ldr	r3, [pc, #632]	; (8102d2c <face_recognition_configure_weights+0x7f8>)
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102aba:	4a9c      	ldr	r2, [pc, #624]	; (8102d2c <face_recognition_configure_weights+0x7f8>)
 8102abc:	6013      	str	r3, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 13680);
 8102abe:	4b9c      	ldr	r3, [pc, #624]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8102ac6:	3330      	adds	r3, #48	; 0x30
 8102ac8:	4a98      	ldr	r2, [pc, #608]	; (8102d2c <face_recognition_configure_weights+0x7f8>)
 8102aca:	6093      	str	r3, [r2, #8]
    conv2d_21_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 13680);
 8102acc:	4b98      	ldr	r3, [pc, #608]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8102ad4:	3330      	adds	r3, #48	; 0x30
 8102ad6:	4a95      	ldr	r2, [pc, #596]	; (8102d2c <face_recognition_configure_weights+0x7f8>)
 8102ad8:	60d3      	str	r3, [r2, #12]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8102ada:	4b96      	ldr	r3, [pc, #600]	; (8102d34 <face_recognition_configure_weights+0x800>)
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102ae2:	4a94      	ldr	r2, [pc, #592]	; (8102d34 <face_recognition_configure_weights+0x800>)
 8102ae4:	6013      	str	r3, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 14064);
 8102ae6:	4b92      	ldr	r3, [pc, #584]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	f503 535b 	add.w	r3, r3, #14016	; 0x36c0
 8102aee:	3330      	adds	r3, #48	; 0x30
 8102af0:	4a90      	ldr	r2, [pc, #576]	; (8102d34 <face_recognition_configure_weights+0x800>)
 8102af2:	6093      	str	r3, [r2, #8]
    conv2d_22_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 14064);
 8102af4:	4b8e      	ldr	r3, [pc, #568]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	f503 535b 	add.w	r3, r3, #14016	; 0x36c0
 8102afc:	3330      	adds	r3, #48	; 0x30
 8102afe:	4a8d      	ldr	r2, [pc, #564]	; (8102d34 <face_recognition_configure_weights+0x800>)
 8102b00:	60d3      	str	r3, [r2, #12]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8102b02:	4b8d      	ldr	r3, [pc, #564]	; (8102d38 <face_recognition_configure_weights+0x804>)
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102b0a:	4a8b      	ldr	r2, [pc, #556]	; (8102d38 <face_recognition_configure_weights+0x804>)
 8102b0c:	6013      	str	r3, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 15600);
 8102b0e:	4b88      	ldr	r3, [pc, #544]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	f503 5373 	add.w	r3, r3, #15552	; 0x3cc0
 8102b16:	3330      	adds	r3, #48	; 0x30
 8102b18:	4a87      	ldr	r2, [pc, #540]	; (8102d38 <face_recognition_configure_weights+0x804>)
 8102b1a:	6093      	str	r3, [r2, #8]
    conv2d_22_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 15600);
 8102b1c:	4b84      	ldr	r3, [pc, #528]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	f503 5373 	add.w	r3, r3, #15552	; 0x3cc0
 8102b24:	3330      	adds	r3, #48	; 0x30
 8102b26:	4a84      	ldr	r2, [pc, #528]	; (8102d38 <face_recognition_configure_weights+0x804>)
 8102b28:	60d3      	str	r3, [r2, #12]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8102b2a:	4b84      	ldr	r3, [pc, #528]	; (8102d3c <face_recognition_configure_weights+0x808>)
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102b32:	4a82      	ldr	r2, [pc, #520]	; (8102d3c <face_recognition_configure_weights+0x808>)
 8102b34:	6013      	str	r3, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 15664);
 8102b36:	4b7e      	ldr	r3, [pc, #504]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8102b3e:	3330      	adds	r3, #48	; 0x30
 8102b40:	4a7e      	ldr	r2, [pc, #504]	; (8102d3c <face_recognition_configure_weights+0x808>)
 8102b42:	6093      	str	r3, [r2, #8]
    conv2d_24_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 15664);
 8102b44:	4b7a      	ldr	r3, [pc, #488]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8102b4c:	3330      	adds	r3, #48	; 0x30
 8102b4e:	4a7b      	ldr	r2, [pc, #492]	; (8102d3c <face_recognition_configure_weights+0x808>)
 8102b50:	60d3      	str	r3, [r2, #12]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8102b52:	4b7b      	ldr	r3, [pc, #492]	; (8102d40 <face_recognition_configure_weights+0x80c>)
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102b5a:	4a79      	ldr	r2, [pc, #484]	; (8102d40 <face_recognition_configure_weights+0x80c>)
 8102b5c:	6013      	str	r3, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 17200);
 8102b5e:	4b74      	ldr	r3, [pc, #464]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8102b66:	3330      	adds	r3, #48	; 0x30
 8102b68:	4a75      	ldr	r2, [pc, #468]	; (8102d40 <face_recognition_configure_weights+0x80c>)
 8102b6a:	6093      	str	r3, [r2, #8]
    conv2d_24_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 17200);
 8102b6c:	4b70      	ldr	r3, [pc, #448]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8102b74:	3330      	adds	r3, #48	; 0x30
 8102b76:	4a72      	ldr	r2, [pc, #456]	; (8102d40 <face_recognition_configure_weights+0x80c>)
 8102b78:	60d3      	str	r3, [r2, #12]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8102b7a:	4b72      	ldr	r3, [pc, #456]	; (8102d44 <face_recognition_configure_weights+0x810>)
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102b82:	4a70      	ldr	r2, [pc, #448]	; (8102d44 <face_recognition_configure_weights+0x810>)
 8102b84:	6013      	str	r3, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 17584);
 8102b86:	4b6a      	ldr	r3, [pc, #424]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 8102b8e:	3330      	adds	r3, #48	; 0x30
 8102b90:	4a6c      	ldr	r2, [pc, #432]	; (8102d44 <face_recognition_configure_weights+0x810>)
 8102b92:	6093      	str	r3, [r2, #8]
    conv2d_26_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 17584);
 8102b94:	4b66      	ldr	r3, [pc, #408]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 8102b9c:	3330      	adds	r3, #48	; 0x30
 8102b9e:	4a69      	ldr	r2, [pc, #420]	; (8102d44 <face_recognition_configure_weights+0x810>)
 8102ba0:	60d3      	str	r3, [r2, #12]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8102ba2:	4b69      	ldr	r3, [pc, #420]	; (8102d48 <face_recognition_configure_weights+0x814>)
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102baa:	4a67      	ldr	r2, [pc, #412]	; (8102d48 <face_recognition_configure_weights+0x814>)
 8102bac:	6013      	str	r3, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 18448);
 8102bae:	4b60      	ldr	r3, [pc, #384]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8102bb6:	3310      	adds	r3, #16
 8102bb8:	4a63      	ldr	r2, [pc, #396]	; (8102d48 <face_recognition_configure_weights+0x814>)
 8102bba:	6093      	str	r3, [r2, #8]
    conv2d_26_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 18448);
 8102bbc:	4b5c      	ldr	r3, [pc, #368]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8102bc4:	3310      	adds	r3, #16
 8102bc6:	4a60      	ldr	r2, [pc, #384]	; (8102d48 <face_recognition_configure_weights+0x814>)
 8102bc8:	60d3      	str	r3, [r2, #12]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8102bca:	4b60      	ldr	r3, [pc, #384]	; (8102d4c <face_recognition_configure_weights+0x818>)
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102bd2:	4a5e      	ldr	r2, [pc, #376]	; (8102d4c <face_recognition_configure_weights+0x818>)
 8102bd4:	6013      	str	r3, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 18832);
 8102bd6:	4b56      	ldr	r3, [pc, #344]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8102bde:	3310      	adds	r3, #16
 8102be0:	4a5a      	ldr	r2, [pc, #360]	; (8102d4c <face_recognition_configure_weights+0x818>)
 8102be2:	6093      	str	r3, [r2, #8]
    conv2d_27_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 18832);
 8102be4:	4b52      	ldr	r3, [pc, #328]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	f503 4393 	add.w	r3, r3, #18816	; 0x4980
 8102bec:	3310      	adds	r3, #16
 8102bee:	4a57      	ldr	r2, [pc, #348]	; (8102d4c <face_recognition_configure_weights+0x818>)
 8102bf0:	60d3      	str	r3, [r2, #12]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8102bf2:	4b57      	ldr	r3, [pc, #348]	; (8102d50 <face_recognition_configure_weights+0x81c>)
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102bfa:	4a55      	ldr	r2, [pc, #340]	; (8102d50 <face_recognition_configure_weights+0x81c>)
 8102bfc:	6013      	str	r3, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 21136);
 8102bfe:	4b4c      	ldr	r3, [pc, #304]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f503 43a5 	add.w	r3, r3, #21120	; 0x5280
 8102c06:	3310      	adds	r3, #16
 8102c08:	4a51      	ldr	r2, [pc, #324]	; (8102d50 <face_recognition_configure_weights+0x81c>)
 8102c0a:	6093      	str	r3, [r2, #8]
    conv2d_27_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 21136);
 8102c0c:	4b48      	ldr	r3, [pc, #288]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	f503 43a5 	add.w	r3, r3, #21120	; 0x5280
 8102c14:	3310      	adds	r3, #16
 8102c16:	4a4e      	ldr	r2, [pc, #312]	; (8102d50 <face_recognition_configure_weights+0x81c>)
 8102c18:	60d3      	str	r3, [r2, #12]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8102c1a:	4b4e      	ldr	r3, [pc, #312]	; (8102d54 <face_recognition_configure_weights+0x820>)
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102c22:	4a4c      	ldr	r2, [pc, #304]	; (8102d54 <face_recognition_configure_weights+0x820>)
 8102c24:	6013      	str	r3, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 21232);
 8102c26:	4b42      	ldr	r3, [pc, #264]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	f503 43a5 	add.w	r3, r3, #21120	; 0x5280
 8102c2e:	3370      	adds	r3, #112	; 0x70
 8102c30:	4a48      	ldr	r2, [pc, #288]	; (8102d54 <face_recognition_configure_weights+0x820>)
 8102c32:	6093      	str	r3, [r2, #8]
    conv2d_28_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 21232);
 8102c34:	4b3e      	ldr	r3, [pc, #248]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	f503 43a5 	add.w	r3, r3, #21120	; 0x5280
 8102c3c:	3370      	adds	r3, #112	; 0x70
 8102c3e:	4a45      	ldr	r2, [pc, #276]	; (8102d54 <face_recognition_configure_weights+0x820>)
 8102c40:	60d3      	str	r3, [r2, #12]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8102c42:	4b45      	ldr	r3, [pc, #276]	; (8102d58 <face_recognition_configure_weights+0x824>)
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102c4a:	4a43      	ldr	r2, [pc, #268]	; (8102d58 <face_recognition_configure_weights+0x824>)
 8102c4c:	6013      	str	r3, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 24688);
 8102c4e:	4b38      	ldr	r3, [pc, #224]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8102c56:	3370      	adds	r3, #112	; 0x70
 8102c58:	4a3f      	ldr	r2, [pc, #252]	; (8102d58 <face_recognition_configure_weights+0x824>)
 8102c5a:	6093      	str	r3, [r2, #8]
    conv2d_28_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 24688);
 8102c5c:	4b34      	ldr	r3, [pc, #208]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8102c64:	3370      	adds	r3, #112	; 0x70
 8102c66:	4a3c      	ldr	r2, [pc, #240]	; (8102d58 <face_recognition_configure_weights+0x824>)
 8102c68:	60d3      	str	r3, [r2, #12]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8102c6a:	4b3c      	ldr	r3, [pc, #240]	; (8102d5c <face_recognition_configure_weights+0x828>)
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102c72:	4a3a      	ldr	r2, [pc, #232]	; (8102d5c <face_recognition_configure_weights+0x828>)
 8102c74:	6013      	str	r3, [r2, #0]
    conv2d_29_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 25264);
 8102c76:	4b2e      	ldr	r3, [pc, #184]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8102c7e:	3330      	adds	r3, #48	; 0x30
 8102c80:	4a36      	ldr	r2, [pc, #216]	; (8102d5c <face_recognition_configure_weights+0x828>)
 8102c82:	6093      	str	r3, [r2, #8]
    conv2d_29_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 25264);
 8102c84:	4b2a      	ldr	r3, [pc, #168]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	f503 43c5 	add.w	r3, r3, #25216	; 0x6280
 8102c8c:	3330      	adds	r3, #48	; 0x30
 8102c8e:	4a33      	ldr	r2, [pc, #204]	; (8102d5c <face_recognition_configure_weights+0x828>)
 8102c90:	60d3      	str	r3, [r2, #12]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8102c92:	4b33      	ldr	r3, [pc, #204]	; (8102d60 <face_recognition_configure_weights+0x82c>)
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102c9a:	4a31      	ldr	r2, [pc, #196]	; (8102d60 <face_recognition_configure_weights+0x82c>)
 8102c9c:	6013      	str	r3, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 26560);
 8102c9e:	4b24      	ldr	r3, [pc, #144]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	f503 43cf 	add.w	r3, r3, #26496	; 0x6780
 8102ca6:	3340      	adds	r3, #64	; 0x40
 8102ca8:	4a2d      	ldr	r2, [pc, #180]	; (8102d60 <face_recognition_configure_weights+0x82c>)
 8102caa:	6093      	str	r3, [r2, #8]
    conv2d_29_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 26560);
 8102cac:	4b20      	ldr	r3, [pc, #128]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	f503 43cf 	add.w	r3, r3, #26496	; 0x6780
 8102cb4:	3340      	adds	r3, #64	; 0x40
 8102cb6:	4a2a      	ldr	r2, [pc, #168]	; (8102d60 <face_recognition_configure_weights+0x82c>)
 8102cb8:	60d3      	str	r3, [r2, #12]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8102cba:	4b2a      	ldr	r3, [pc, #168]	; (8102d64 <face_recognition_configure_weights+0x830>)
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102cc2:	4a28      	ldr	r2, [pc, #160]	; (8102d64 <face_recognition_configure_weights+0x830>)
 8102cc4:	6013      	str	r3, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 27136);
 8102cc6:	4b1a      	ldr	r3, [pc, #104]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	f503 43d4 	add.w	r3, r3, #27136	; 0x6a00
 8102cce:	4a25      	ldr	r2, [pc, #148]	; (8102d64 <face_recognition_configure_weights+0x830>)
 8102cd0:	6093      	str	r3, [r2, #8]
    conv2d_30_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 27136);
 8102cd2:	4b17      	ldr	r3, [pc, #92]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	f503 43d4 	add.w	r3, r3, #27136	; 0x6a00
 8102cda:	4a22      	ldr	r2, [pc, #136]	; (8102d64 <face_recognition_configure_weights+0x830>)
 8102cdc:	60d3      	str	r3, [r2, #12]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8102cde:	4b22      	ldr	r3, [pc, #136]	; (8102d68 <face_recognition_configure_weights+0x834>)
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102ce6:	4a20      	ldr	r2, [pc, #128]	; (8102d68 <face_recognition_configure_weights+0x834>)
 8102ce8:	6013      	str	r3, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 30592);
 8102cea:	4b11      	ldr	r3, [pc, #68]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	f503 43ef 	add.w	r3, r3, #30592	; 0x7780
 8102cf2:	4a1d      	ldr	r2, [pc, #116]	; (8102d68 <face_recognition_configure_weights+0x834>)
 8102cf4:	6093      	str	r3, [r2, #8]
    conv2d_30_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 30592);
 8102cf6:	4b0e      	ldr	r3, [pc, #56]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	f503 43ef 	add.w	r3, r3, #30592	; 0x7780
 8102cfe:	4a1a      	ldr	r2, [pc, #104]	; (8102d68 <face_recognition_configure_weights+0x834>)
 8102d00:	60d3      	str	r3, [r2, #12]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8102d02:	4b1a      	ldr	r3, [pc, #104]	; (8102d6c <face_recognition_configure_weights+0x838>)
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102d0a:	4a18      	ldr	r2, [pc, #96]	; (8102d6c <face_recognition_configure_weights+0x838>)
 8102d0c:	6013      	str	r3, [r2, #0]
    conv2d_32_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 30688);
 8102d0e:	4b08      	ldr	r3, [pc, #32]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	f503 43ef 	add.w	r3, r3, #30592	; 0x7780
 8102d16:	3360      	adds	r3, #96	; 0x60
 8102d18:	4a14      	ldr	r2, [pc, #80]	; (8102d6c <face_recognition_configure_weights+0x838>)
 8102d1a:	6093      	str	r3, [r2, #8]
    conv2d_32_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 30688);
 8102d1c:	4b04      	ldr	r3, [pc, #16]	; (8102d30 <face_recognition_configure_weights+0x7fc>)
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	f503 43ef 	add.w	r3, r3, #30592	; 0x7780
 8102d24:	3360      	adds	r3, #96	; 0x60
 8102d26:	e023      	b.n	8102d70 <face_recognition_configure_weights+0x83c>
 8102d28:	10000750 	.word	0x10000750
 8102d2c:	10000760 	.word	0x10000760
 8102d30:	1003fa30 	.word	0x1003fa30
 8102d34:	10000770 	.word	0x10000770
 8102d38:	10000780 	.word	0x10000780
 8102d3c:	10000790 	.word	0x10000790
 8102d40:	100007a0 	.word	0x100007a0
 8102d44:	100007b0 	.word	0x100007b0
 8102d48:	100007c0 	.word	0x100007c0
 8102d4c:	100007d0 	.word	0x100007d0
 8102d50:	100007e0 	.word	0x100007e0
 8102d54:	100007f0 	.word	0x100007f0
 8102d58:	10000800 	.word	0x10000800
 8102d5c:	10000810 	.word	0x10000810
 8102d60:	10000820 	.word	0x10000820
 8102d64:	10000830 	.word	0x10000830
 8102d68:	10000840 	.word	0x10000840
 8102d6c:	10000850 	.word	0x10000850
 8102d70:	4a9d      	ldr	r2, [pc, #628]	; (8102fe8 <face_recognition_configure_weights+0xab4>)
 8102d72:	60d3      	str	r3, [r2, #12]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8102d74:	4b9d      	ldr	r3, [pc, #628]	; (8102fec <face_recognition_configure_weights+0xab8>)
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102d7c:	4a9b      	ldr	r2, [pc, #620]	; (8102fec <face_recognition_configure_weights+0xab8>)
 8102d7e:	6013      	str	r3, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 34144);
 8102d80:	4b9b      	ldr	r3, [pc, #620]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8102d88:	3360      	adds	r3, #96	; 0x60
 8102d8a:	4a98      	ldr	r2, [pc, #608]	; (8102fec <face_recognition_configure_weights+0xab8>)
 8102d8c:	6093      	str	r3, [r2, #8]
    conv2d_32_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 34144);
 8102d8e:	4b98      	ldr	r3, [pc, #608]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 8102d96:	3360      	adds	r3, #96	; 0x60
 8102d98:	4a94      	ldr	r2, [pc, #592]	; (8102fec <face_recognition_configure_weights+0xab8>)
 8102d9a:	60d3      	str	r3, [r2, #12]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8102d9c:	4b95      	ldr	r3, [pc, #596]	; (8102ff4 <face_recognition_configure_weights+0xac0>)
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102da4:	4a93      	ldr	r2, [pc, #588]	; (8102ff4 <face_recognition_configure_weights+0xac0>)
 8102da6:	6013      	str	r3, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 34720);
 8102da8:	4b91      	ldr	r3, [pc, #580]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 8102db0:	33a0      	adds	r3, #160	; 0xa0
 8102db2:	4a90      	ldr	r2, [pc, #576]	; (8102ff4 <face_recognition_configure_weights+0xac0>)
 8102db4:	6093      	str	r3, [r2, #8]
    conv2d_33_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 34720);
 8102db6:	4b8e      	ldr	r3, [pc, #568]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 8102dbe:	33a0      	adds	r3, #160	; 0xa0
 8102dc0:	4a8c      	ldr	r2, [pc, #560]	; (8102ff4 <face_recognition_configure_weights+0xac0>)
 8102dc2:	60d3      	str	r3, [r2, #12]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8102dc4:	4b8c      	ldr	r3, [pc, #560]	; (8102ff8 <face_recognition_configure_weights+0xac4>)
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102dcc:	4a8a      	ldr	r2, [pc, #552]	; (8102ff8 <face_recognition_configure_weights+0xac4>)
 8102dce:	6013      	str	r3, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 36016);
 8102dd0:	4b87      	ldr	r3, [pc, #540]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8102dd8:	33b0      	adds	r3, #176	; 0xb0
 8102dda:	4a87      	ldr	r2, [pc, #540]	; (8102ff8 <face_recognition_configure_weights+0xac4>)
 8102ddc:	6093      	str	r3, [r2, #8]
    conv2d_33_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 36016);
 8102dde:	4b84      	ldr	r3, [pc, #528]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8102de6:	33b0      	adds	r3, #176	; 0xb0
 8102de8:	4a83      	ldr	r2, [pc, #524]	; (8102ff8 <face_recognition_configure_weights+0xac4>)
 8102dea:	60d3      	str	r3, [r2, #12]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8102dec:	4b83      	ldr	r3, [pc, #524]	; (8102ffc <face_recognition_configure_weights+0xac8>)
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102df4:	4a81      	ldr	r2, [pc, #516]	; (8102ffc <face_recognition_configure_weights+0xac8>)
 8102df6:	6013      	str	r3, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 36592);
 8102df8:	4b7d      	ldr	r3, [pc, #500]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8102e00:	33f0      	adds	r3, #240	; 0xf0
 8102e02:	4a7e      	ldr	r2, [pc, #504]	; (8102ffc <face_recognition_configure_weights+0xac8>)
 8102e04:	6093      	str	r3, [r2, #8]
    conv2d_34_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 36592);
 8102e06:	4b7a      	ldr	r3, [pc, #488]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8102e0e:	33f0      	adds	r3, #240	; 0xf0
 8102e10:	4a7a      	ldr	r2, [pc, #488]	; (8102ffc <face_recognition_configure_weights+0xac8>)
 8102e12:	60d3      	str	r3, [r2, #12]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8102e14:	4b7a      	ldr	r3, [pc, #488]	; (8103000 <face_recognition_configure_weights+0xacc>)
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102e1c:	4a78      	ldr	r2, [pc, #480]	; (8103000 <face_recognition_configure_weights+0xacc>)
 8102e1e:	6013      	str	r3, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 40048);
 8102e20:	4b73      	ldr	r3, [pc, #460]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8102e28:	3370      	adds	r3, #112	; 0x70
 8102e2a:	4a75      	ldr	r2, [pc, #468]	; (8103000 <face_recognition_configure_weights+0xacc>)
 8102e2c:	6093      	str	r3, [r2, #8]
    conv2d_34_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 40048);
 8102e2e:	4b70      	ldr	r3, [pc, #448]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8102e36:	3370      	adds	r3, #112	; 0x70
 8102e38:	4a71      	ldr	r2, [pc, #452]	; (8103000 <face_recognition_configure_weights+0xacc>)
 8102e3a:	60d3      	str	r3, [r2, #12]
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8102e3c:	4b71      	ldr	r3, [pc, #452]	; (8103004 <face_recognition_configure_weights+0xad0>)
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102e44:	4a6f      	ldr	r2, [pc, #444]	; (8103004 <face_recognition_configure_weights+0xad0>)
 8102e46:	6013      	str	r3, [r2, #0]
    conv2d_36_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 40144);
 8102e48:	4b69      	ldr	r3, [pc, #420]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8102e50:	33d0      	adds	r3, #208	; 0xd0
 8102e52:	4a6c      	ldr	r2, [pc, #432]	; (8103004 <face_recognition_configure_weights+0xad0>)
 8102e54:	6093      	str	r3, [r2, #8]
    conv2d_36_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 40144);
 8102e56:	4b66      	ldr	r3, [pc, #408]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8102e5e:	33d0      	adds	r3, #208	; 0xd0
 8102e60:	4a68      	ldr	r2, [pc, #416]	; (8103004 <face_recognition_configure_weights+0xad0>)
 8102e62:	60d3      	str	r3, [r2, #12]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8102e64:	4b68      	ldr	r3, [pc, #416]	; (8103008 <face_recognition_configure_weights+0xad4>)
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102e6c:	4a66      	ldr	r2, [pc, #408]	; (8103008 <face_recognition_configure_weights+0xad4>)
 8102e6e:	6013      	str	r3, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 43600);
 8102e70:	4b5f      	ldr	r3, [pc, #380]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8102e78:	3350      	adds	r3, #80	; 0x50
 8102e7a:	4a63      	ldr	r2, [pc, #396]	; (8103008 <face_recognition_configure_weights+0xad4>)
 8102e7c:	6093      	str	r3, [r2, #8]
    conv2d_36_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 43600);
 8102e7e:	4b5c      	ldr	r3, [pc, #368]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	f503 432a 	add.w	r3, r3, #43520	; 0xaa00
 8102e86:	3350      	adds	r3, #80	; 0x50
 8102e88:	4a5f      	ldr	r2, [pc, #380]	; (8103008 <face_recognition_configure_weights+0xad4>)
 8102e8a:	60d3      	str	r3, [r2, #12]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8102e8c:	4b5f      	ldr	r3, [pc, #380]	; (810300c <face_recognition_configure_weights+0xad8>)
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102e94:	4a5d      	ldr	r2, [pc, #372]	; (810300c <face_recognition_configure_weights+0xad8>)
 8102e96:	6013      	str	r3, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 44176);
 8102e98:	4b55      	ldr	r3, [pc, #340]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	f503 432c 	add.w	r3, r3, #44032	; 0xac00
 8102ea0:	3390      	adds	r3, #144	; 0x90
 8102ea2:	4a5a      	ldr	r2, [pc, #360]	; (810300c <face_recognition_configure_weights+0xad8>)
 8102ea4:	6093      	str	r3, [r2, #8]
    conv2d_37_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 44176);
 8102ea6:	4b52      	ldr	r3, [pc, #328]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	f503 432c 	add.w	r3, r3, #44032	; 0xac00
 8102eae:	3390      	adds	r3, #144	; 0x90
 8102eb0:	4a56      	ldr	r2, [pc, #344]	; (810300c <face_recognition_configure_weights+0xad8>)
 8102eb2:	60d3      	str	r3, [r2, #12]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8102eb4:	4b56      	ldr	r3, [pc, #344]	; (8103010 <face_recognition_configure_weights+0xadc>)
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102ebc:	4a54      	ldr	r2, [pc, #336]	; (8103010 <face_recognition_configure_weights+0xadc>)
 8102ebe:	6013      	str	r3, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 45472);
 8102ec0:	4b4b      	ldr	r3, [pc, #300]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8102ec8:	33a0      	adds	r3, #160	; 0xa0
 8102eca:	4a51      	ldr	r2, [pc, #324]	; (8103010 <face_recognition_configure_weights+0xadc>)
 8102ecc:	6093      	str	r3, [r2, #8]
    conv2d_37_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 45472);
 8102ece:	4b48      	ldr	r3, [pc, #288]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	f503 4331 	add.w	r3, r3, #45312	; 0xb100
 8102ed6:	33a0      	adds	r3, #160	; 0xa0
 8102ed8:	4a4d      	ldr	r2, [pc, #308]	; (8103010 <face_recognition_configure_weights+0xadc>)
 8102eda:	60d3      	str	r3, [r2, #12]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8102edc:	4b4d      	ldr	r3, [pc, #308]	; (8103014 <face_recognition_configure_weights+0xae0>)
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102ee4:	4a4b      	ldr	r2, [pc, #300]	; (8103014 <face_recognition_configure_weights+0xae0>)
 8102ee6:	6013      	str	r3, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 46048);
 8102ee8:	4b41      	ldr	r3, [pc, #260]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	f503 4333 	add.w	r3, r3, #45824	; 0xb300
 8102ef0:	33e0      	adds	r3, #224	; 0xe0
 8102ef2:	4a48      	ldr	r2, [pc, #288]	; (8103014 <face_recognition_configure_weights+0xae0>)
 8102ef4:	6093      	str	r3, [r2, #8]
    conv2d_38_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 46048);
 8102ef6:	4b3e      	ldr	r3, [pc, #248]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	f503 4333 	add.w	r3, r3, #45824	; 0xb300
 8102efe:	33e0      	adds	r3, #224	; 0xe0
 8102f00:	4a44      	ldr	r2, [pc, #272]	; (8103014 <face_recognition_configure_weights+0xae0>)
 8102f02:	60d3      	str	r3, [r2, #12]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8102f04:	4b44      	ldr	r3, [pc, #272]	; (8103018 <face_recognition_configure_weights+0xae4>)
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102f0c:	4a42      	ldr	r2, [pc, #264]	; (8103018 <face_recognition_configure_weights+0xae4>)
 8102f0e:	6013      	str	r3, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 49504);
 8102f10:	4b37      	ldr	r3, [pc, #220]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 8102f18:	3360      	adds	r3, #96	; 0x60
 8102f1a:	4a3f      	ldr	r2, [pc, #252]	; (8103018 <face_recognition_configure_weights+0xae4>)
 8102f1c:	6093      	str	r3, [r2, #8]
    conv2d_38_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 49504);
 8102f1e:	4b34      	ldr	r3, [pc, #208]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 8102f26:	3360      	adds	r3, #96	; 0x60
 8102f28:	4a3b      	ldr	r2, [pc, #236]	; (8103018 <face_recognition_configure_weights+0xae4>)
 8102f2a:	60d3      	str	r3, [r2, #12]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 8102f2c:	4b3b      	ldr	r3, [pc, #236]	; (810301c <face_recognition_configure_weights+0xae8>)
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102f34:	4a39      	ldr	r2, [pc, #228]	; (810301c <face_recognition_configure_weights+0xae8>)
 8102f36:	6013      	str	r3, [r2, #0]
    conv2d_40_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 49600);
 8102f38:	4b2d      	ldr	r3, [pc, #180]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 8102f40:	33c0      	adds	r3, #192	; 0xc0
 8102f42:	4a36      	ldr	r2, [pc, #216]	; (810301c <face_recognition_configure_weights+0xae8>)
 8102f44:	6093      	str	r3, [r2, #8]
    conv2d_40_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 49600);
 8102f46:	4b2a      	ldr	r3, [pc, #168]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	f503 4341 	add.w	r3, r3, #49408	; 0xc100
 8102f4e:	33c0      	adds	r3, #192	; 0xc0
 8102f50:	4a32      	ldr	r2, [pc, #200]	; (810301c <face_recognition_configure_weights+0xae8>)
 8102f52:	60d3      	str	r3, [r2, #12]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 8102f54:	4b32      	ldr	r3, [pc, #200]	; (8103020 <face_recognition_configure_weights+0xaec>)
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102f5c:	4a30      	ldr	r2, [pc, #192]	; (8103020 <face_recognition_configure_weights+0xaec>)
 8102f5e:	6013      	str	r3, [r2, #0]
    conv2d_40_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 53056);
 8102f60:	4b23      	ldr	r3, [pc, #140]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8102f68:	3340      	adds	r3, #64	; 0x40
 8102f6a:	4a2d      	ldr	r2, [pc, #180]	; (8103020 <face_recognition_configure_weights+0xaec>)
 8102f6c:	6093      	str	r3, [r2, #8]
    conv2d_40_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 53056);
 8102f6e:	4b20      	ldr	r3, [pc, #128]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8102f76:	3340      	adds	r3, #64	; 0x40
 8102f78:	4a29      	ldr	r2, [pc, #164]	; (8103020 <face_recognition_configure_weights+0xaec>)
 8102f7a:	60d3      	str	r3, [r2, #12]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8102f7c:	4b29      	ldr	r3, [pc, #164]	; (8103024 <face_recognition_configure_weights+0xaf0>)
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102f84:	4a27      	ldr	r2, [pc, #156]	; (8103024 <face_recognition_configure_weights+0xaf0>)
 8102f86:	6013      	str	r3, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 53632);
 8102f88:	4b19      	ldr	r3, [pc, #100]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	f503 4351 	add.w	r3, r3, #53504	; 0xd100
 8102f90:	3380      	adds	r3, #128	; 0x80
 8102f92:	4a24      	ldr	r2, [pc, #144]	; (8103024 <face_recognition_configure_weights+0xaf0>)
 8102f94:	6093      	str	r3, [r2, #8]
    conv2d_41_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 53632);
 8102f96:	4b16      	ldr	r3, [pc, #88]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	f503 4351 	add.w	r3, r3, #53504	; 0xd100
 8102f9e:	3380      	adds	r3, #128	; 0x80
 8102fa0:	4a20      	ldr	r2, [pc, #128]	; (8103024 <face_recognition_configure_weights+0xaf0>)
 8102fa2:	60d3      	str	r3, [r2, #12]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8102fa4:	4b20      	ldr	r3, [pc, #128]	; (8103028 <face_recognition_configure_weights+0xaf4>)
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102fac:	4a1e      	ldr	r2, [pc, #120]	; (8103028 <face_recognition_configure_weights+0xaf4>)
 8102fae:	6013      	str	r3, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 54928);
 8102fb0:	4b0f      	ldr	r3, [pc, #60]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8102fb8:	3390      	adds	r3, #144	; 0x90
 8102fba:	4a1b      	ldr	r2, [pc, #108]	; (8103028 <face_recognition_configure_weights+0xaf4>)
 8102fbc:	6093      	str	r3, [r2, #8]
    conv2d_41_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 54928);
 8102fbe:	4b0c      	ldr	r3, [pc, #48]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 8102fc6:	3390      	adds	r3, #144	; 0x90
 8102fc8:	4a17      	ldr	r2, [pc, #92]	; (8103028 <face_recognition_configure_weights+0xaf4>)
 8102fca:	60d3      	str	r3, [r2, #12]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8102fcc:	4b17      	ldr	r3, [pc, #92]	; (810302c <face_recognition_configure_weights+0xaf8>)
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8102fd4:	4a15      	ldr	r2, [pc, #84]	; (810302c <face_recognition_configure_weights+0xaf8>)
 8102fd6:	6013      	str	r3, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 55504);
 8102fd8:	4b05      	ldr	r3, [pc, #20]	; (8102ff0 <face_recognition_configure_weights+0xabc>)
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8102fe0:	33d0      	adds	r3, #208	; 0xd0
 8102fe2:	4a12      	ldr	r2, [pc, #72]	; (810302c <face_recognition_configure_weights+0xaf8>)
 8102fe4:	6093      	str	r3, [r2, #8]
 8102fe6:	e023      	b.n	8103030 <face_recognition_configure_weights+0xafc>
 8102fe8:	10000850 	.word	0x10000850
 8102fec:	10000860 	.word	0x10000860
 8102ff0:	1003fa30 	.word	0x1003fa30
 8102ff4:	10000870 	.word	0x10000870
 8102ff8:	10000880 	.word	0x10000880
 8102ffc:	10000890 	.word	0x10000890
 8103000:	100008a0 	.word	0x100008a0
 8103004:	100008b0 	.word	0x100008b0
 8103008:	100008c0 	.word	0x100008c0
 810300c:	100008d0 	.word	0x100008d0
 8103010:	100008e0 	.word	0x100008e0
 8103014:	100008f0 	.word	0x100008f0
 8103018:	10000900 	.word	0x10000900
 810301c:	10000910 	.word	0x10000910
 8103020:	10000920 	.word	0x10000920
 8103024:	10000930 	.word	0x10000930
 8103028:	10000940 	.word	0x10000940
 810302c:	10000950 	.word	0x10000950
    conv2d_42_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 55504);
 8103030:	4ba0      	ldr	r3, [pc, #640]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103032:	681b      	ldr	r3, [r3, #0]
 8103034:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8103038:	33d0      	adds	r3, #208	; 0xd0
 810303a:	4a9f      	ldr	r2, [pc, #636]	; (81032b8 <face_recognition_configure_weights+0xd84>)
 810303c:	60d3      	str	r3, [r2, #12]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 810303e:	4b9f      	ldr	r3, [pc, #636]	; (81032bc <face_recognition_configure_weights+0xd88>)
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103046:	4a9d      	ldr	r2, [pc, #628]	; (81032bc <face_recognition_configure_weights+0xd88>)
 8103048:	6013      	str	r3, [r2, #0]
    conv2d_42_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 60112);
 810304a:	4b9a      	ldr	r3, [pc, #616]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8103052:	33d0      	adds	r3, #208	; 0xd0
 8103054:	4a99      	ldr	r2, [pc, #612]	; (81032bc <face_recognition_configure_weights+0xd88>)
 8103056:	6093      	str	r3, [r2, #8]
    conv2d_42_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 60112);
 8103058:	4b96      	ldr	r3, [pc, #600]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8103060:	33d0      	adds	r3, #208	; 0xd0
 8103062:	4a96      	ldr	r2, [pc, #600]	; (81032bc <face_recognition_configure_weights+0xd88>)
 8103064:	60d3      	str	r3, [r2, #12]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8103066:	4b96      	ldr	r3, [pc, #600]	; (81032c0 <face_recognition_configure_weights+0xd8c>)
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810306e:	4a94      	ldr	r2, [pc, #592]	; (81032c0 <face_recognition_configure_weights+0xd8c>)
 8103070:	6013      	str	r3, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 60240);
 8103072:	4b90      	ldr	r3, [pc, #576]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 810307a:	3350      	adds	r3, #80	; 0x50
 810307c:	4a90      	ldr	r2, [pc, #576]	; (81032c0 <face_recognition_configure_weights+0xd8c>)
 810307e:	6093      	str	r3, [r2, #8]
    conv2d_43_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 60240);
 8103080:	4b8c      	ldr	r3, [pc, #560]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8103088:	3350      	adds	r3, #80	; 0x50
 810308a:	4a8d      	ldr	r2, [pc, #564]	; (81032c0 <face_recognition_configure_weights+0xd8c>)
 810308c:	60d3      	str	r3, [r2, #12]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 810308e:	4b8d      	ldr	r3, [pc, #564]	; (81032c4 <face_recognition_configure_weights+0xd90>)
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103096:	4a8b      	ldr	r2, [pc, #556]	; (81032c4 <face_recognition_configure_weights+0xd90>)
 8103098:	6013      	str	r3, [r2, #0]
    conv2d_43_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 66384);
 810309a:	4b86      	ldr	r3, [pc, #536]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810309c:	681b      	ldr	r3, [r3, #0]
 810309e:	f503 3381 	add.w	r3, r3, #66048	; 0x10200
 81030a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 81030a6:	4a87      	ldr	r2, [pc, #540]	; (81032c4 <face_recognition_configure_weights+0xd90>)
 81030a8:	6093      	str	r3, [r2, #8]
    conv2d_43_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 66384);
 81030aa:	4b82      	ldr	r3, [pc, #520]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	f503 3381 	add.w	r3, r3, #66048	; 0x10200
 81030b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 81030b6:	4a83      	ldr	r2, [pc, #524]	; (81032c4 <face_recognition_configure_weights+0xd90>)
 81030b8:	60d3      	str	r3, [r2, #12]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 81030ba:	4b83      	ldr	r3, [pc, #524]	; (81032c8 <face_recognition_configure_weights+0xd94>)
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81030c2:	4a81      	ldr	r2, [pc, #516]	; (81032c8 <face_recognition_configure_weights+0xd94>)
 81030c4:	6013      	str	r3, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 67152);
 81030c6:	4b7b      	ldr	r3, [pc, #492]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 81030ce:	3350      	adds	r3, #80	; 0x50
 81030d0:	4a7d      	ldr	r2, [pc, #500]	; (81032c8 <face_recognition_configure_weights+0xd94>)
 81030d2:	6093      	str	r3, [r2, #8]
    conv2d_44_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 67152);
 81030d4:	4b77      	ldr	r3, [pc, #476]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 81030dc:	3350      	adds	r3, #80	; 0x50
 81030de:	4a7a      	ldr	r2, [pc, #488]	; (81032c8 <face_recognition_configure_weights+0xd94>)
 81030e0:	60d3      	str	r3, [r2, #12]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 81030e2:	4b7a      	ldr	r3, [pc, #488]	; (81032cc <face_recognition_configure_weights+0xd98>)
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81030ea:	4a78      	ldr	r2, [pc, #480]	; (81032cc <face_recognition_configure_weights+0xd98>)
 81030ec:	6013      	str	r3, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 68880);
 81030ee:	4b71      	ldr	r3, [pc, #452]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 81030f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 81030fa:	4a74      	ldr	r2, [pc, #464]	; (81032cc <face_recognition_configure_weights+0xd98>)
 81030fc:	6093      	str	r3, [r2, #8]
    conv2d_44_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 68880);
 81030fe:	4b6d      	ldr	r3, [pc, #436]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8103106:	f503 7388 	add.w	r3, r3, #272	; 0x110
 810310a:	4a70      	ldr	r2, [pc, #448]	; (81032cc <face_recognition_configure_weights+0xd98>)
 810310c:	60d3      	str	r3, [r2, #12]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 810310e:	4b70      	ldr	r3, [pc, #448]	; (81032d0 <face_recognition_configure_weights+0xd9c>)
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103116:	4a6e      	ldr	r2, [pc, #440]	; (81032d0 <face_recognition_configure_weights+0xd9c>)
 8103118:	6013      	str	r3, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 69648);
 810311a:	4b66      	ldr	r3, [pc, #408]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8103122:	3310      	adds	r3, #16
 8103124:	4a6a      	ldr	r2, [pc, #424]	; (81032d0 <face_recognition_configure_weights+0xd9c>)
 8103126:	6093      	str	r3, [r2, #8]
    conv2d_45_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 69648);
 8103128:	4b62      	ldr	r3, [pc, #392]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8103130:	3310      	adds	r3, #16
 8103132:	4a67      	ldr	r2, [pc, #412]	; (81032d0 <face_recognition_configure_weights+0xd9c>)
 8103134:	60d3      	str	r3, [r2, #12]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8103136:	4b67      	ldr	r3, [pc, #412]	; (81032d4 <face_recognition_configure_weights+0xda0>)
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810313e:	4a65      	ldr	r2, [pc, #404]	; (81032d4 <face_recognition_configure_weights+0xda0>)
 8103140:	6013      	str	r3, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 75792);
 8103142:	4b5c      	ldr	r3, [pc, #368]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 810314a:	3310      	adds	r3, #16
 810314c:	4a61      	ldr	r2, [pc, #388]	; (81032d4 <face_recognition_configure_weights+0xda0>)
 810314e:	6093      	str	r3, [r2, #8]
    conv2d_45_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 75792);
 8103150:	4b58      	ldr	r3, [pc, #352]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8103158:	3310      	adds	r3, #16
 810315a:	4a5e      	ldr	r2, [pc, #376]	; (81032d4 <face_recognition_configure_weights+0xda0>)
 810315c:	60d3      	str	r3, [r2, #12]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 810315e:	4b5e      	ldr	r3, [pc, #376]	; (81032d8 <face_recognition_configure_weights+0xda4>)
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103166:	4a5c      	ldr	r2, [pc, #368]	; (81032d8 <face_recognition_configure_weights+0xda4>)
 8103168:	6013      	str	r3, [r2, #0]
    conv2d_47_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 75920);
 810316a:	4b52      	ldr	r3, [pc, #328]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8103172:	3390      	adds	r3, #144	; 0x90
 8103174:	4a58      	ldr	r2, [pc, #352]	; (81032d8 <face_recognition_configure_weights+0xda4>)
 8103176:	6093      	str	r3, [r2, #8]
    conv2d_47_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 75920);
 8103178:	4b4e      	ldr	r3, [pc, #312]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810317a:	681b      	ldr	r3, [r3, #0]
 810317c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8103180:	3390      	adds	r3, #144	; 0x90
 8103182:	4a55      	ldr	r2, [pc, #340]	; (81032d8 <face_recognition_configure_weights+0xda4>)
 8103184:	60d3      	str	r3, [r2, #12]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8103186:	4b55      	ldr	r3, [pc, #340]	; (81032dc <face_recognition_configure_weights+0xda8>)
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810318e:	4a53      	ldr	r2, [pc, #332]	; (81032dc <face_recognition_configure_weights+0xda8>)
 8103190:	6013      	str	r3, [r2, #0]
    conv2d_47_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 82064);
 8103192:	4b48      	ldr	r3, [pc, #288]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 810319a:	3390      	adds	r3, #144	; 0x90
 810319c:	4a4f      	ldr	r2, [pc, #316]	; (81032dc <face_recognition_configure_weights+0xda8>)
 810319e:	6093      	str	r3, [r2, #8]
    conv2d_47_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 82064);
 81031a0:	4b44      	ldr	r3, [pc, #272]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 81031a8:	3390      	adds	r3, #144	; 0x90
 81031aa:	4a4c      	ldr	r2, [pc, #304]	; (81032dc <face_recognition_configure_weights+0xda8>)
 81031ac:	60d3      	str	r3, [r2, #12]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 81031ae:	4b4c      	ldr	r3, [pc, #304]	; (81032e0 <face_recognition_configure_weights+0xdac>)
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81031b6:	4a4a      	ldr	r2, [pc, #296]	; (81032e0 <face_recognition_configure_weights+0xdac>)
 81031b8:	6013      	str	r3, [r2, #0]
    conv2d_48_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 82832);
 81031ba:	4b3e      	ldr	r3, [pc, #248]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 81031c2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 81031c6:	4a46      	ldr	r2, [pc, #280]	; (81032e0 <face_recognition_configure_weights+0xdac>)
 81031c8:	6093      	str	r3, [r2, #8]
    conv2d_48_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 82832);
 81031ca:	4b3a      	ldr	r3, [pc, #232]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	f503 33a1 	add.w	r3, r3, #82432	; 0x14200
 81031d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 81031d6:	4a42      	ldr	r2, [pc, #264]	; (81032e0 <face_recognition_configure_weights+0xdac>)
 81031d8:	60d3      	str	r3, [r2, #12]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 81031da:	4b42      	ldr	r3, [pc, #264]	; (81032e4 <face_recognition_configure_weights+0xdb0>)
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81031e2:	4a40      	ldr	r2, [pc, #256]	; (81032e4 <face_recognition_configure_weights+0xdb0>)
 81031e4:	6013      	str	r3, [r2, #0]
    conv2d_48_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 84560);
 81031e6:	4b33      	ldr	r3, [pc, #204]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 81031ee:	3350      	adds	r3, #80	; 0x50
 81031f0:	4a3c      	ldr	r2, [pc, #240]	; (81032e4 <face_recognition_configure_weights+0xdb0>)
 81031f2:	6093      	str	r3, [r2, #8]
    conv2d_48_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 84560);
 81031f4:	4b2f      	ldr	r3, [pc, #188]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81031f6:	681b      	ldr	r3, [r3, #0]
 81031f8:	f503 33a5 	add.w	r3, r3, #84480	; 0x14a00
 81031fc:	3350      	adds	r3, #80	; 0x50
 81031fe:	4a39      	ldr	r2, [pc, #228]	; (81032e4 <face_recognition_configure_weights+0xdb0>)
 8103200:	60d3      	str	r3, [r2, #12]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8103202:	4b39      	ldr	r3, [pc, #228]	; (81032e8 <face_recognition_configure_weights+0xdb4>)
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810320a:	4a37      	ldr	r2, [pc, #220]	; (81032e8 <face_recognition_configure_weights+0xdb4>)
 810320c:	6013      	str	r3, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 85328);
 810320e:	4b29      	ldr	r3, [pc, #164]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	f503 33a6 	add.w	r3, r3, #84992	; 0x14c00
 8103216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810321a:	4a33      	ldr	r2, [pc, #204]	; (81032e8 <face_recognition_configure_weights+0xdb4>)
 810321c:	6093      	str	r3, [r2, #8]
    conv2d_49_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 85328);
 810321e:	4b25      	ldr	r3, [pc, #148]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	f503 33a6 	add.w	r3, r3, #84992	; 0x14c00
 8103226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 810322a:	4a2f      	ldr	r2, [pc, #188]	; (81032e8 <face_recognition_configure_weights+0xdb4>)
 810322c:	60d3      	str	r3, [r2, #12]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 810322e:	4b2f      	ldr	r3, [pc, #188]	; (81032ec <face_recognition_configure_weights+0xdb8>)
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103236:	4a2d      	ldr	r2, [pc, #180]	; (81032ec <face_recognition_configure_weights+0xdb8>)
 8103238:	6013      	str	r3, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 91472);
 810323a:	4b1e      	ldr	r3, [pc, #120]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8103242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8103246:	4a29      	ldr	r2, [pc, #164]	; (81032ec <face_recognition_configure_weights+0xdb8>)
 8103248:	6093      	str	r3, [r2, #8]
    conv2d_49_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 91472);
 810324a:	4b1a      	ldr	r3, [pc, #104]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8103252:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8103256:	4a25      	ldr	r2, [pc, #148]	; (81032ec <face_recognition_configure_weights+0xdb8>)
 8103258:	60d3      	str	r3, [r2, #12]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 810325a:	4b25      	ldr	r3, [pc, #148]	; (81032f0 <face_recognition_configure_weights+0xdbc>)
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103262:	4a23      	ldr	r2, [pc, #140]	; (81032f0 <face_recognition_configure_weights+0xdbc>)
 8103264:	6013      	str	r3, [r2, #0]
    conv2d_51_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 91600);
 8103266:	4b13      	ldr	r3, [pc, #76]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 810326e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8103272:	4a1f      	ldr	r2, [pc, #124]	; (81032f0 <face_recognition_configure_weights+0xdbc>)
 8103274:	6093      	str	r3, [r2, #8]
    conv2d_51_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 91600);
 8103276:	4b0f      	ldr	r3, [pc, #60]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 810327e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8103282:	4a1b      	ldr	r2, [pc, #108]	; (81032f0 <face_recognition_configure_weights+0xdbc>)
 8103284:	60d3      	str	r3, [r2, #12]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8103286:	4b1b      	ldr	r3, [pc, #108]	; (81032f4 <face_recognition_configure_weights+0xdc0>)
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810328e:	4a19      	ldr	r2, [pc, #100]	; (81032f4 <face_recognition_configure_weights+0xdc0>)
 8103290:	6013      	str	r3, [r2, #0]
    conv2d_51_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 97744);
 8103292:	4b08      	ldr	r3, [pc, #32]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	f503 33be 	add.w	r3, r3, #97280	; 0x17c00
 810329a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 810329e:	4a15      	ldr	r2, [pc, #84]	; (81032f4 <face_recognition_configure_weights+0xdc0>)
 81032a0:	6093      	str	r3, [r2, #8]
    conv2d_51_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 97744);
 81032a2:	4b04      	ldr	r3, [pc, #16]	; (81032b4 <face_recognition_configure_weights+0xd80>)
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	f503 33be 	add.w	r3, r3, #97280	; 0x17c00
 81032aa:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 81032ae:	4a11      	ldr	r2, [pc, #68]	; (81032f4 <face_recognition_configure_weights+0xdc0>)
 81032b0:	60d3      	str	r3, [r2, #12]
 81032b2:	e021      	b.n	81032f8 <face_recognition_configure_weights+0xdc4>
 81032b4:	1003fa30 	.word	0x1003fa30
 81032b8:	10000950 	.word	0x10000950
 81032bc:	10000960 	.word	0x10000960
 81032c0:	10000970 	.word	0x10000970
 81032c4:	10000980 	.word	0x10000980
 81032c8:	10000990 	.word	0x10000990
 81032cc:	100009a0 	.word	0x100009a0
 81032d0:	100009b0 	.word	0x100009b0
 81032d4:	100009c0 	.word	0x100009c0
 81032d8:	100009d0 	.word	0x100009d0
 81032dc:	100009e0 	.word	0x100009e0
 81032e0:	100009f0 	.word	0x100009f0
 81032e4:	10000a00 	.word	0x10000a00
 81032e8:	10000a10 	.word	0x10000a10
 81032ec:	10000a20 	.word	0x10000a20
 81032f0:	10000a30 	.word	0x10000a30
 81032f4:	10000a40 	.word	0x10000a40
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 81032f8:	4ba1      	ldr	r3, [pc, #644]	; (8103580 <face_recognition_configure_weights+0x104c>)
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103300:	4a9f      	ldr	r2, [pc, #636]	; (8103580 <face_recognition_configure_weights+0x104c>)
 8103302:	6013      	str	r3, [r2, #0]
    conv2d_53_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 98512);
 8103304:	4b9f      	ldr	r3, [pc, #636]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 810330c:	33d0      	adds	r3, #208	; 0xd0
 810330e:	4a9c      	ldr	r2, [pc, #624]	; (8103580 <face_recognition_configure_weights+0x104c>)
 8103310:	6093      	str	r3, [r2, #8]
    conv2d_53_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 98512);
 8103312:	4b9c      	ldr	r3, [pc, #624]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 810331a:	33d0      	adds	r3, #208	; 0xd0
 810331c:	4a98      	ldr	r2, [pc, #608]	; (8103580 <face_recognition_configure_weights+0x104c>)
 810331e:	60d3      	str	r3, [r2, #12]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8103320:	4b99      	ldr	r3, [pc, #612]	; (8103588 <face_recognition_configure_weights+0x1054>)
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103328:	4a97      	ldr	r2, [pc, #604]	; (8103588 <face_recognition_configure_weights+0x1054>)
 810332a:	6013      	str	r3, [r2, #0]
    conv2d_53_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 100240);
 810332c:	4b95      	ldr	r3, [pc, #596]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8103334:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8103338:	4a93      	ldr	r2, [pc, #588]	; (8103588 <face_recognition_configure_weights+0x1054>)
 810333a:	6093      	str	r3, [r2, #8]
    conv2d_53_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 100240);
 810333c:	4b91      	ldr	r3, [pc, #580]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8103344:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8103348:	4a8f      	ldr	r2, [pc, #572]	; (8103588 <face_recognition_configure_weights+0x1054>)
 810334a:	60d3      	str	r3, [r2, #12]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 810334c:	4b8f      	ldr	r3, [pc, #572]	; (810358c <face_recognition_configure_weights+0x1058>)
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103354:	4a8d      	ldr	r2, [pc, #564]	; (810358c <face_recognition_configure_weights+0x1058>)
 8103356:	6013      	str	r3, [r2, #0]
    conv2d_54_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 101008);
 8103358:	4b8a      	ldr	r3, [pc, #552]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	f503 33c5 	add.w	r3, r3, #100864	; 0x18a00
 8103360:	3390      	adds	r3, #144	; 0x90
 8103362:	4a8a      	ldr	r2, [pc, #552]	; (810358c <face_recognition_configure_weights+0x1058>)
 8103364:	6093      	str	r3, [r2, #8]
    conv2d_54_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 101008);
 8103366:	4b87      	ldr	r3, [pc, #540]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	f503 33c5 	add.w	r3, r3, #100864	; 0x18a00
 810336e:	3390      	adds	r3, #144	; 0x90
 8103370:	4a86      	ldr	r2, [pc, #536]	; (810358c <face_recognition_configure_weights+0x1058>)
 8103372:	60d3      	str	r3, [r2, #12]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8103374:	4b86      	ldr	r3, [pc, #536]	; (8103590 <face_recognition_configure_weights+0x105c>)
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810337c:	4a84      	ldr	r2, [pc, #528]	; (8103590 <face_recognition_configure_weights+0x105c>)
 810337e:	6013      	str	r3, [r2, #0]
    conv2d_54_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 111760);
 8103380:	4b80      	ldr	r3, [pc, #512]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8103388:	3390      	adds	r3, #144	; 0x90
 810338a:	4a81      	ldr	r2, [pc, #516]	; (8103590 <face_recognition_configure_weights+0x105c>)
 810338c:	6093      	str	r3, [r2, #8]
    conv2d_54_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 111760);
 810338e:	4b7d      	ldr	r3, [pc, #500]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8103396:	3390      	adds	r3, #144	; 0x90
 8103398:	4a7d      	ldr	r2, [pc, #500]	; (8103590 <face_recognition_configure_weights+0x105c>)
 810339a:	60d3      	str	r3, [r2, #12]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 810339c:	4b7d      	ldr	r3, [pc, #500]	; (8103594 <face_recognition_configure_weights+0x1060>)
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81033a4:	4a7b      	ldr	r2, [pc, #492]	; (8103594 <face_recognition_configure_weights+0x1060>)
 81033a6:	6013      	str	r3, [r2, #0]
    conv2d_55_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 111984);
 81033a8:	4b76      	ldr	r3, [pc, #472]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 81033b0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 81033b4:	4a77      	ldr	r2, [pc, #476]	; (8103594 <face_recognition_configure_weights+0x1060>)
 81033b6:	6093      	str	r3, [r2, #8]
    conv2d_55_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 111984);
 81033b8:	4b72      	ldr	r3, [pc, #456]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 81033c0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 81033c4:	4a73      	ldr	r2, [pc, #460]	; (8103594 <face_recognition_configure_weights+0x1060>)
 81033c6:	60d3      	str	r3, [r2, #12]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 81033c8:	4b73      	ldr	r3, [pc, #460]	; (8103598 <face_recognition_configure_weights+0x1064>)
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81033d0:	4a71      	ldr	r2, [pc, #452]	; (8103598 <face_recognition_configure_weights+0x1064>)
 81033d2:	6013      	str	r3, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 130800);
 81033d4:	4b6b      	ldr	r3, [pc, #428]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 81033dc:	33f0      	adds	r3, #240	; 0xf0
 81033de:	4a6e      	ldr	r2, [pc, #440]	; (8103598 <face_recognition_configure_weights+0x1064>)
 81033e0:	6093      	str	r3, [r2, #8]
    conv2d_55_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 130800);
 81033e2:	4b68      	ldr	r3, [pc, #416]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 81033ea:	33f0      	adds	r3, #240	; 0xf0
 81033ec:	4a6a      	ldr	r2, [pc, #424]	; (8103598 <face_recognition_configure_weights+0x1064>)
 81033ee:	60d3      	str	r3, [r2, #12]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 81033f0:	4b6a      	ldr	r3, [pc, #424]	; (810359c <face_recognition_configure_weights+0x1068>)
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81033f8:	4a68      	ldr	r2, [pc, #416]	; (810359c <face_recognition_configure_weights+0x1068>)
 81033fa:	6013      	str	r3, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 132144);
 81033fc:	4b61      	ldr	r3, [pc, #388]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8103404:	3330      	adds	r3, #48	; 0x30
 8103406:	4a65      	ldr	r2, [pc, #404]	; (810359c <face_recognition_configure_weights+0x1068>)
 8103408:	6093      	str	r3, [r2, #8]
    conv2d_56_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 132144);
 810340a:	4b5e      	ldr	r3, [pc, #376]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8103412:	3330      	adds	r3, #48	; 0x30
 8103414:	4a61      	ldr	r2, [pc, #388]	; (810359c <face_recognition_configure_weights+0x1068>)
 8103416:	60d3      	str	r3, [r2, #12]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8103418:	4b61      	ldr	r3, [pc, #388]	; (81035a0 <face_recognition_configure_weights+0x106c>)
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103420:	4a5f      	ldr	r2, [pc, #380]	; (81035a0 <face_recognition_configure_weights+0x106c>)
 8103422:	6013      	str	r3, [r2, #0]
    conv2d_56_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 135168);
 8103424:	4b57      	ldr	r3, [pc, #348]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 810342c:	4a5c      	ldr	r2, [pc, #368]	; (81035a0 <face_recognition_configure_weights+0x106c>)
 810342e:	6093      	str	r3, [r2, #8]
    conv2d_56_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 135168);
 8103430:	4b54      	ldr	r3, [pc, #336]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8103438:	4a59      	ldr	r2, [pc, #356]	; (81035a0 <face_recognition_configure_weights+0x106c>)
 810343a:	60d3      	str	r3, [r2, #12]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 810343c:	4b59      	ldr	r3, [pc, #356]	; (81035a4 <face_recognition_configure_weights+0x1070>)
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103444:	4a57      	ldr	r2, [pc, #348]	; (81035a4 <face_recognition_configure_weights+0x1070>)
 8103446:	6013      	str	r3, [r2, #0]
    conv2d_57_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 136512);
 8103448:	4b4e      	ldr	r3, [pc, #312]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f503 3305 	add.w	r3, r3, #136192	; 0x21400
 8103450:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8103454:	4a53      	ldr	r2, [pc, #332]	; (81035a4 <face_recognition_configure_weights+0x1070>)
 8103456:	6093      	str	r3, [r2, #8]
    conv2d_57_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 136512);
 8103458:	4b4a      	ldr	r3, [pc, #296]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	f503 3305 	add.w	r3, r3, #136192	; 0x21400
 8103460:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8103464:	4a4f      	ldr	r2, [pc, #316]	; (81035a4 <face_recognition_configure_weights+0x1070>)
 8103466:	60d3      	str	r3, [r2, #12]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8103468:	4b4f      	ldr	r3, [pc, #316]	; (81035a8 <face_recognition_configure_weights+0x1074>)
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103470:	4a4d      	ldr	r2, [pc, #308]	; (81035a8 <face_recognition_configure_weights+0x1074>)
 8103472:	6013      	str	r3, [r2, #0]
    conv2d_57_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 155328);
 8103474:	4b43      	ldr	r3, [pc, #268]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	f503 3317 	add.w	r3, r3, #154624	; 0x25c00
 810347c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8103480:	4a49      	ldr	r2, [pc, #292]	; (81035a8 <face_recognition_configure_weights+0x1074>)
 8103482:	6093      	str	r3, [r2, #8]
    conv2d_57_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 155328);
 8103484:	4b3f      	ldr	r3, [pc, #252]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	f503 3317 	add.w	r3, r3, #154624	; 0x25c00
 810348c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8103490:	4a45      	ldr	r2, [pc, #276]	; (81035a8 <face_recognition_configure_weights+0x1074>)
 8103492:	60d3      	str	r3, [r2, #12]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8103494:	4b45      	ldr	r3, [pc, #276]	; (81035ac <face_recognition_configure_weights+0x1078>)
 8103496:	681b      	ldr	r3, [r3, #0]
 8103498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810349c:	4a43      	ldr	r2, [pc, #268]	; (81035ac <face_recognition_configure_weights+0x1078>)
 810349e:	6013      	str	r3, [r2, #0]
    conv2d_59_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 155552);
 81034a0:	4b38      	ldr	r3, [pc, #224]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	f503 3317 	add.w	r3, r3, #154624	; 0x25c00
 81034a8:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 81034ac:	4a3f      	ldr	r2, [pc, #252]	; (81035ac <face_recognition_configure_weights+0x1078>)
 81034ae:	6093      	str	r3, [r2, #8]
    conv2d_59_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 155552);
 81034b0:	4b34      	ldr	r3, [pc, #208]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	f503 3317 	add.w	r3, r3, #154624	; 0x25c00
 81034b8:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 81034bc:	4a3b      	ldr	r2, [pc, #236]	; (81035ac <face_recognition_configure_weights+0x1078>)
 81034be:	60d3      	str	r3, [r2, #12]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 81034c0:	4b3b      	ldr	r3, [pc, #236]	; (81035b0 <face_recognition_configure_weights+0x107c>)
 81034c2:	681b      	ldr	r3, [r3, #0]
 81034c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81034c8:	4a39      	ldr	r2, [pc, #228]	; (81035b0 <face_recognition_configure_weights+0x107c>)
 81034ca:	6013      	str	r3, [r2, #0]
    conv2d_59_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 174368);
 81034cc:	4b2d      	ldr	r3, [pc, #180]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	f503 332a 	add.w	r3, r3, #174080	; 0x2a800
 81034d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 81034d8:	4a35      	ldr	r2, [pc, #212]	; (81035b0 <face_recognition_configure_weights+0x107c>)
 81034da:	6093      	str	r3, [r2, #8]
    conv2d_59_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 174368);
 81034dc:	4b29      	ldr	r3, [pc, #164]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	f503 332a 	add.w	r3, r3, #174080	; 0x2a800
 81034e4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 81034e8:	4a31      	ldr	r2, [pc, #196]	; (81035b0 <face_recognition_configure_weights+0x107c>)
 81034ea:	60d3      	str	r3, [r2, #12]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 81034ec:	4b31      	ldr	r3, [pc, #196]	; (81035b4 <face_recognition_configure_weights+0x1080>)
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81034f4:	4a2f      	ldr	r2, [pc, #188]	; (81035b4 <face_recognition_configure_weights+0x1080>)
 81034f6:	6013      	str	r3, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 175712);
 81034f8:	4b22      	ldr	r3, [pc, #136]	; (8103584 <face_recognition_configure_weights+0x1050>)
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	f503 332b 	add.w	r3, r3, #175104	; 0x2ac00
 8103500:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8103504:	4a2b      	ldr	r2, [pc, #172]	; (81035b4 <face_recognition_configure_weights+0x1080>)
 8103506:	6093      	str	r3, [r2, #8]
    conv2d_60_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 175712);
 8103508:	4b1e      	ldr	r3, [pc, #120]	; (8103584 <face_recognition_configure_weights+0x1050>)
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	f503 332b 	add.w	r3, r3, #175104	; 0x2ac00
 8103510:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8103514:	4a27      	ldr	r2, [pc, #156]	; (81035b4 <face_recognition_configure_weights+0x1080>)
 8103516:	60d3      	str	r3, [r2, #12]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8103518:	4b27      	ldr	r3, [pc, #156]	; (81035b8 <face_recognition_configure_weights+0x1084>)
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103520:	4a25      	ldr	r2, [pc, #148]	; (81035b8 <face_recognition_configure_weights+0x1084>)
 8103522:	6013      	str	r3, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 178736);
 8103524:	4b17      	ldr	r3, [pc, #92]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	f503 332e 	add.w	r3, r3, #178176	; 0x2b800
 810352c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8103530:	4a21      	ldr	r2, [pc, #132]	; (81035b8 <face_recognition_configure_weights+0x1084>)
 8103532:	6093      	str	r3, [r2, #8]
    conv2d_60_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 178736);
 8103534:	4b13      	ldr	r3, [pc, #76]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	f503 332e 	add.w	r3, r3, #178176	; 0x2b800
 810353c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8103540:	4a1d      	ldr	r2, [pc, #116]	; (81035b8 <face_recognition_configure_weights+0x1084>)
 8103542:	60d3      	str	r3, [r2, #12]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8103544:	4b1d      	ldr	r3, [pc, #116]	; (81035bc <face_recognition_configure_weights+0x1088>)
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810354c:	4a1b      	ldr	r2, [pc, #108]	; (81035bc <face_recognition_configure_weights+0x1088>)
 810354e:	6013      	str	r3, [r2, #0]
    conv2d_61_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 180080);
 8103550:	4b0c      	ldr	r3, [pc, #48]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8103558:	f503 735c 	add.w	r3, r3, #880	; 0x370
 810355c:	4a17      	ldr	r2, [pc, #92]	; (81035bc <face_recognition_configure_weights+0x1088>)
 810355e:	6093      	str	r3, [r2, #8]
    conv2d_61_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 180080);
 8103560:	4b08      	ldr	r3, [pc, #32]	; (8103584 <face_recognition_configure_weights+0x1050>)
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8103568:	f503 735c 	add.w	r3, r3, #880	; 0x370
 810356c:	4a13      	ldr	r2, [pc, #76]	; (81035bc <face_recognition_configure_weights+0x1088>)
 810356e:	60d3      	str	r3, [r2, #12]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8103570:	4b13      	ldr	r3, [pc, #76]	; (81035c0 <face_recognition_configure_weights+0x108c>)
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103578:	4a11      	ldr	r2, [pc, #68]	; (81035c0 <face_recognition_configure_weights+0x108c>)
 810357a:	6013      	str	r3, [r2, #0]
 810357c:	e022      	b.n	81035c4 <face_recognition_configure_weights+0x1090>
 810357e:	bf00      	nop
 8103580:	10000a50 	.word	0x10000a50
 8103584:	1003fa30 	.word	0x1003fa30
 8103588:	10000a60 	.word	0x10000a60
 810358c:	10000a70 	.word	0x10000a70
 8103590:	10000a80 	.word	0x10000a80
 8103594:	10000a90 	.word	0x10000a90
 8103598:	10000aa0 	.word	0x10000aa0
 810359c:	10000ab0 	.word	0x10000ab0
 81035a0:	10000ac0 	.word	0x10000ac0
 81035a4:	10000ad0 	.word	0x10000ad0
 81035a8:	10000ae0 	.word	0x10000ae0
 81035ac:	10000af0 	.word	0x10000af0
 81035b0:	10000b00 	.word	0x10000b00
 81035b4:	10000b10 	.word	0x10000b10
 81035b8:	10000b20 	.word	0x10000b20
 81035bc:	10000b30 	.word	0x10000b30
 81035c0:	10000b40 	.word	0x10000b40
    conv2d_61_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 198896);
 81035c4:	4b77      	ldr	r3, [pc, #476]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 81035cc:	33f0      	adds	r3, #240	; 0xf0
 81035ce:	4a76      	ldr	r2, [pc, #472]	; (81037a8 <face_recognition_configure_weights+0x1274>)
 81035d0:	6093      	str	r3, [r2, #8]
    conv2d_61_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 198896);
 81035d2:	4b74      	ldr	r3, [pc, #464]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81035d4:	681b      	ldr	r3, [r3, #0]
 81035d6:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 81035da:	33f0      	adds	r3, #240	; 0xf0
 81035dc:	4a72      	ldr	r2, [pc, #456]	; (81037a8 <face_recognition_configure_weights+0x1274>)
 81035de:	60d3      	str	r3, [r2, #12]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 81035e0:	4b72      	ldr	r3, [pc, #456]	; (81037ac <face_recognition_configure_weights+0x1278>)
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81035e8:	4a70      	ldr	r2, [pc, #448]	; (81037ac <face_recognition_configure_weights+0x1278>)
 81035ea:	6013      	str	r3, [r2, #0]
    conv2d_63_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 199120);
 81035ec:	4b6d      	ldr	r3, [pc, #436]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 81035f4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 81035f8:	4a6c      	ldr	r2, [pc, #432]	; (81037ac <face_recognition_configure_weights+0x1278>)
 81035fa:	6093      	str	r3, [r2, #8]
    conv2d_63_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 199120);
 81035fc:	4b69      	ldr	r3, [pc, #420]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	f503 3342 	add.w	r3, r3, #198656	; 0x30800
 8103604:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8103608:	4a68      	ldr	r2, [pc, #416]	; (81037ac <face_recognition_configure_weights+0x1278>)
 810360a:	60d3      	str	r3, [r2, #12]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 810360c:	4b68      	ldr	r3, [pc, #416]	; (81037b0 <face_recognition_configure_weights+0x127c>)
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103614:	4a66      	ldr	r2, [pc, #408]	; (81037b0 <face_recognition_configure_weights+0x127c>)
 8103616:	6013      	str	r3, [r2, #0]
    conv2d_63_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 217936);
 8103618:	4b62      	ldr	r3, [pc, #392]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810361a:	681b      	ldr	r3, [r3, #0]
 810361c:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8103620:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8103624:	4a62      	ldr	r2, [pc, #392]	; (81037b0 <face_recognition_configure_weights+0x127c>)
 8103626:	6093      	str	r3, [r2, #8]
    conv2d_63_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 217936);
 8103628:	4b5e      	ldr	r3, [pc, #376]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	f503 3354 	add.w	r3, r3, #217088	; 0x35000
 8103630:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8103634:	4a5e      	ldr	r2, [pc, #376]	; (81037b0 <face_recognition_configure_weights+0x127c>)
 8103636:	60d3      	str	r3, [r2, #12]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8103638:	4b5e      	ldr	r3, [pc, #376]	; (81037b4 <face_recognition_configure_weights+0x1280>)
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103640:	4a5c      	ldr	r2, [pc, #368]	; (81037b4 <face_recognition_configure_weights+0x1280>)
 8103642:	6013      	str	r3, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 219280);
 8103644:	4b57      	ldr	r3, [pc, #348]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	f503 3356 	add.w	r3, r3, #219136	; 0x35800
 810364c:	3390      	adds	r3, #144	; 0x90
 810364e:	4a59      	ldr	r2, [pc, #356]	; (81037b4 <face_recognition_configure_weights+0x1280>)
 8103650:	6093      	str	r3, [r2, #8]
    conv2d_64_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 219280);
 8103652:	4b54      	ldr	r3, [pc, #336]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	f503 3356 	add.w	r3, r3, #219136	; 0x35800
 810365a:	3390      	adds	r3, #144	; 0x90
 810365c:	4a55      	ldr	r2, [pc, #340]	; (81037b4 <face_recognition_configure_weights+0x1280>)
 810365e:	60d3      	str	r3, [r2, #12]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8103660:	4b55      	ldr	r3, [pc, #340]	; (81037b8 <face_recognition_configure_weights+0x1284>)
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103668:	4a53      	ldr	r2, [pc, #332]	; (81037b8 <face_recognition_configure_weights+0x1284>)
 810366a:	6013      	str	r3, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 222304);
 810366c:	4b4d      	ldr	r3, [pc, #308]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8103674:	3360      	adds	r3, #96	; 0x60
 8103676:	4a50      	ldr	r2, [pc, #320]	; (81037b8 <face_recognition_configure_weights+0x1284>)
 8103678:	6093      	str	r3, [r2, #8]
    conv2d_64_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 222304);
 810367a:	4b4a      	ldr	r3, [pc, #296]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8103682:	3360      	adds	r3, #96	; 0x60
 8103684:	4a4c      	ldr	r2, [pc, #304]	; (81037b8 <face_recognition_configure_weights+0x1284>)
 8103686:	60d3      	str	r3, [r2, #12]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8103688:	4b4c      	ldr	r3, [pc, #304]	; (81037bc <face_recognition_configure_weights+0x1288>)
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103690:	4a4a      	ldr	r2, [pc, #296]	; (81037bc <face_recognition_configure_weights+0x1288>)
 8103692:	6013      	str	r3, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 223648);
 8103694:	4b43      	ldr	r3, [pc, #268]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 810369c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 81036a0:	4a46      	ldr	r2, [pc, #280]	; (81037bc <face_recognition_configure_weights+0x1288>)
 81036a2:	6093      	str	r3, [r2, #8]
    conv2d_65_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 223648);
 81036a4:	4b3f      	ldr	r3, [pc, #252]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81036a6:	681b      	ldr	r3, [r3, #0]
 81036a8:	f503 335a 	add.w	r3, r3, #223232	; 0x36800
 81036ac:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 81036b0:	4a42      	ldr	r2, [pc, #264]	; (81037bc <face_recognition_configure_weights+0x1288>)
 81036b2:	60d3      	str	r3, [r2, #12]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 81036b4:	4b42      	ldr	r3, [pc, #264]	; (81037c0 <face_recognition_configure_weights+0x128c>)
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81036bc:	4a40      	ldr	r2, [pc, #256]	; (81037c0 <face_recognition_configure_weights+0x128c>)
 81036be:	6013      	str	r3, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 261280);
 81036c0:	4b38      	ldr	r3, [pc, #224]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 81036c8:	33a0      	adds	r3, #160	; 0xa0
 81036ca:	4a3d      	ldr	r2, [pc, #244]	; (81037c0 <face_recognition_configure_weights+0x128c>)
 81036cc:	6093      	str	r3, [r2, #8]
    conv2d_65_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 261280);
 81036ce:	4b35      	ldr	r3, [pc, #212]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 81036d6:	33a0      	adds	r3, #160	; 0xa0
 81036d8:	4a39      	ldr	r2, [pc, #228]	; (81037c0 <face_recognition_configure_weights+0x128c>)
 81036da:	60d3      	str	r3, [r2, #12]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 81036dc:	4b39      	ldr	r3, [pc, #228]	; (81037c4 <face_recognition_configure_weights+0x1290>)
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81036e4:	4a37      	ldr	r2, [pc, #220]	; (81037c4 <face_recognition_configure_weights+0x1290>)
 81036e6:	6013      	str	r3, [r2, #0]
    conv2d_66_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 261728);
 81036e8:	4b2e      	ldr	r3, [pc, #184]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 81036f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 81036f4:	4a33      	ldr	r2, [pc, #204]	; (81037c4 <face_recognition_configure_weights+0x1290>)
 81036f6:	6093      	str	r3, [r2, #8]
    conv2d_66_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 261728);
 81036f8:	4b2a      	ldr	r3, [pc, #168]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8103700:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8103704:	4a2f      	ldr	r2, [pc, #188]	; (81037c4 <face_recognition_configure_weights+0x1290>)
 8103706:	60d3      	str	r3, [r2, #12]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8103708:	4b2f      	ldr	r3, [pc, #188]	; (81037c8 <face_recognition_configure_weights+0x1294>)
 810370a:	681b      	ldr	r3, [r3, #0]
 810370c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103710:	4a2d      	ldr	r2, [pc, #180]	; (81037c8 <face_recognition_configure_weights+0x1294>)
 8103712:	6013      	str	r3, [r2, #0]
    conv2d_66_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 405088);
 8103714:	4b23      	ldr	r3, [pc, #140]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	f503 23c5 	add.w	r3, r3, #403456	; 0x62800
 810371c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8103720:	4a29      	ldr	r2, [pc, #164]	; (81037c8 <face_recognition_configure_weights+0x1294>)
 8103722:	6093      	str	r3, [r2, #8]
    conv2d_66_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 405088);
 8103724:	4b1f      	ldr	r3, [pc, #124]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	f503 23c5 	add.w	r3, r3, #403456	; 0x62800
 810372c:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8103730:	4a25      	ldr	r2, [pc, #148]	; (81037c8 <face_recognition_configure_weights+0x1294>)
 8103732:	60d3      	str	r3, [r2, #12]
    gemm_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8103734:	4b25      	ldr	r3, [pc, #148]	; (81037cc <face_recognition_configure_weights+0x1298>)
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810373c:	4a23      	ldr	r2, [pc, #140]	; (81037cc <face_recognition_configure_weights+0x1298>)
 810373e:	6013      	str	r3, [r2, #0]
    gemm_68_weights_array.data = AI_PTR(g_face_recognition_weights_map[0] + 410208);
 8103740:	4b18      	ldr	r3, [pc, #96]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
 8103748:	f503 7318 	add.w	r3, r3, #608	; 0x260
 810374c:	4a1f      	ldr	r2, [pc, #124]	; (81037cc <face_recognition_configure_weights+0x1298>)
 810374e:	6093      	str	r3, [r2, #8]
    gemm_68_weights_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 410208);
 8103750:	4b14      	ldr	r3, [pc, #80]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
 8103758:	f503 7318 	add.w	r3, r3, #608	; 0x260
 810375c:	4a1b      	ldr	r2, [pc, #108]	; (81037cc <face_recognition_configure_weights+0x1298>)
 810375e:	60d3      	str	r3, [r2, #12]
    gemm_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8103760:	4b1b      	ldr	r3, [pc, #108]	; (81037d0 <face_recognition_configure_weights+0x129c>)
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103768:	4a19      	ldr	r2, [pc, #100]	; (81037d0 <face_recognition_configure_weights+0x129c>)
 810376a:	6013      	str	r3, [r2, #0]
    gemm_68_bias_array.data = AI_PTR(g_face_recognition_weights_map[0] + 411488);
 810376c:	4b0d      	ldr	r3, [pc, #52]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
 8103774:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8103778:	4a15      	ldr	r2, [pc, #84]	; (81037d0 <face_recognition_configure_weights+0x129c>)
 810377a:	6093      	str	r3, [r2, #8]
    gemm_68_bias_array.data_start = AI_PTR(g_face_recognition_weights_map[0] + 411488);
 810377c:	4b09      	ldr	r3, [pc, #36]	; (81037a4 <face_recognition_configure_weights+0x1270>)
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
 8103784:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8103788:	4a11      	ldr	r2, [pc, #68]	; (81037d0 <face_recognition_configure_weights+0x129c>)
 810378a:	60d3      	str	r3, [r2, #12]
    return true;
 810378c:	2301      	movs	r3, #1
 810378e:	e005      	b.n	810379c <face_recognition_configure_weights+0x1268>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8103790:	2212      	movs	r2, #18
 8103792:	2130      	movs	r1, #48	; 0x30
 8103794:	6878      	ldr	r0, [r7, #4]
 8103796:	f005 fd7d 	bl	8109294 <ai_platform_network_set_error>
  return false;
 810379a:	2300      	movs	r3, #0
}
 810379c:	4618      	mov	r0, r3
 810379e:	3708      	adds	r7, #8
 81037a0:	46bd      	mov	sp, r7
 81037a2:	bd80      	pop	{r7, pc}
 81037a4:	1003fa30 	.word	0x1003fa30
 81037a8:	10000b40 	.word	0x10000b40
 81037ac:	10000b50 	.word	0x10000b50
 81037b0:	10000b60 	.word	0x10000b60
 81037b4:	10000b70 	.word	0x10000b70
 81037b8:	10000b80 	.word	0x10000b80
 81037bc:	10000b90 	.word	0x10000b90
 81037c0:	10000ba0 	.word	0x10000ba0
 81037c4:	10000bb0 	.word	0x10000bb0
 81037c8:	10000bc0 	.word	0x10000bc0
 81037cc:	10000bd0 	.word	0x10000bd0
 81037d0:	10000be0 	.word	0x10000be0

081037d4 <ai_face_recognition_get_error>:
}


AI_API_ENTRY
ai_error ai_face_recognition_get_error(ai_handle network)
{
 81037d4:	b580      	push	{r7, lr}
 81037d6:	b082      	sub	sp, #8
 81037d8:	af00      	add	r7, sp, #0
 81037da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 81037dc:	6878      	ldr	r0, [r7, #4]
 81037de:	f005 fd4d 	bl	810927c <ai_platform_network_get_error>
 81037e2:	4603      	mov	r3, r0
}
 81037e4:	4618      	mov	r0, r3
 81037e6:	3708      	adds	r7, #8
 81037e8:	46bd      	mov	sp, r7
 81037ea:	bd80      	pop	{r7, pc}

081037ec <ai_face_recognition_create>:


AI_API_ENTRY
ai_error ai_face_recognition_create(
  ai_handle* network, const ai_buffer* network_config)
{
 81037ec:	b580      	push	{r7, lr}
 81037ee:	b084      	sub	sp, #16
 81037f0:	af02      	add	r7, sp, #8
 81037f2:	6078      	str	r0, [r7, #4]
 81037f4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 81037f6:	2300      	movs	r3, #0
 81037f8:	9301      	str	r3, [sp, #4]
 81037fa:	2305      	movs	r3, #5
 81037fc:	9300      	str	r3, [sp, #0]
 81037fe:	2301      	movs	r3, #1
 8103800:	4a04      	ldr	r2, [pc, #16]	; (8103814 <ai_face_recognition_create+0x28>)
 8103802:	6839      	ldr	r1, [r7, #0]
 8103804:	6878      	ldr	r0, [r7, #4]
 8103806:	f005 fd4b 	bl	81092a0 <ai_platform_network_create>
 810380a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 810380c:	4618      	mov	r0, r3
 810380e:	3708      	adds	r7, #8
 8103810:	46bd      	mov	sp, r7
 8103812:	bd80      	pop	{r7, pc}
 8103814:	100072cc 	.word	0x100072cc

08103818 <ai_face_recognition_create_and_init>:


AI_API_ENTRY
ai_error ai_face_recognition_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8103818:	b580      	push	{r7, lr}
 810381a:	b094      	sub	sp, #80	; 0x50
 810381c:	af00      	add	r7, sp, #0
 810381e:	60f8      	str	r0, [r7, #12]
 8103820:	60b9      	str	r1, [r7, #8]
 8103822:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_face_recognition_create(network, AI_FACE_RECOGNITION_DATA_CONFIG);
 8103824:	2100      	movs	r1, #0
 8103826:	68f8      	ldr	r0, [r7, #12]
 8103828:	f7ff ffe0 	bl	81037ec <ai_face_recognition_create>
 810382c:	4603      	mov	r3, r0
 810382e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (err.type != AI_ERROR_NONE) {
 8103830:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8103834:	2b00      	cmp	r3, #0
 8103836:	d001      	beq.n	810383c <ai_face_recognition_create_and_init+0x24>
    return err;
 8103838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810383a:	e067      	b.n	810390c <ai_face_recognition_create_and_init+0xf4>
  }
  
  if (ai_face_recognition_data_params_get(&params) != true) {
 810383c:	f107 0310 	add.w	r3, r7, #16
 8103840:	4618      	mov	r0, r3
 8103842:	f000 f8a3 	bl	810398c <ai_face_recognition_data_params_get>
 8103846:	4603      	mov	r3, r0
 8103848:	f083 0301 	eor.w	r3, r3, #1
 810384c:	b2db      	uxtb	r3, r3
 810384e:	2b00      	cmp	r3, #0
 8103850:	d008      	beq.n	8103864 <ai_face_recognition_create_and_init+0x4c>
    err = ai_face_recognition_get_error(*network);
 8103852:	68fb      	ldr	r3, [r7, #12]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	4618      	mov	r0, r3
 8103858:	f7ff ffbc 	bl	81037d4 <ai_face_recognition_get_error>
 810385c:	4603      	mov	r3, r0
 810385e:	64bb      	str	r3, [r7, #72]	; 0x48
    return err;
 8103860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103862:	e053      	b.n	810390c <ai_face_recognition_create_and_init+0xf4>
  }
#if defined(AI_FACE_RECOGNITION_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8103864:	2300      	movs	r3, #0
 8103866:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 810386a:	e012      	b.n	8103892 <ai_face_recognition_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 810386c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8103870:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8103874:	009b      	lsls	r3, r3, #2
 8103876:	68ba      	ldr	r2, [r7, #8]
 8103878:	4413      	add	r3, r2
 810387a:	681a      	ldr	r2, [r3, #0]
 810387c:	f107 0310 	add.w	r3, r7, #16
 8103880:	330c      	adds	r3, #12
 8103882:	4618      	mov	r0, r3
 8103884:	f005 fc20 	bl	81090c8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8103888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 810388c:	3301      	adds	r3, #1
 810388e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8103892:	68bb      	ldr	r3, [r7, #8]
 8103894:	2b00      	cmp	r3, #0
 8103896:	d004      	beq.n	81038a2 <ai_face_recognition_create_and_init+0x8a>
 8103898:	8bfb      	ldrh	r3, [r7, #30]
 810389a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 810389e:	429a      	cmp	r2, r3
 81038a0:	d3e4      	bcc.n	810386c <ai_face_recognition_create_and_init+0x54>
  }
#endif
#if defined(AI_FACE_RECOGNITION_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 81038a2:	2300      	movs	r3, #0
 81038a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 81038a8:	e012      	b.n	81038d0 <ai_face_recognition_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 81038aa:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 81038ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 81038b2:	009b      	lsls	r3, r3, #2
 81038b4:	687a      	ldr	r2, [r7, #4]
 81038b6:	4413      	add	r3, r2
 81038b8:	681a      	ldr	r2, [r3, #0]
 81038ba:	f107 0310 	add.w	r3, r7, #16
 81038be:	3304      	adds	r3, #4
 81038c0:	4618      	mov	r0, r3
 81038c2:	f005 fc01 	bl	81090c8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 81038c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 81038ca:	3301      	adds	r3, #1
 81038cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d004      	beq.n	81038e0 <ai_face_recognition_create_and_init+0xc8>
 81038d6:	8afb      	ldrh	r3, [r7, #22]
 81038d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 81038dc:	429a      	cmp	r2, r3
 81038de:	d3e4      	bcc.n	81038aa <ai_face_recognition_create_and_init+0x92>
  }
#endif
  if (ai_face_recognition_init(*network, &params) != true) {
 81038e0:	68fb      	ldr	r3, [r7, #12]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	f107 0210 	add.w	r2, r7, #16
 81038e8:	4611      	mov	r1, r2
 81038ea:	4618      	mov	r0, r3
 81038ec:	f000 f812 	bl	8103914 <ai_face_recognition_init>
 81038f0:	4603      	mov	r3, r0
 81038f2:	f083 0301 	eor.w	r3, r3, #1
 81038f6:	b2db      	uxtb	r3, r3
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d006      	beq.n	810390a <ai_face_recognition_create_and_init+0xf2>
    err = ai_face_recognition_get_error(*network);
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	4618      	mov	r0, r3
 8103902:	f7ff ff67 	bl	81037d4 <ai_face_recognition_get_error>
 8103906:	4603      	mov	r3, r0
 8103908:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  return err;
 810390a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 810390c:	4618      	mov	r0, r3
 810390e:	3750      	adds	r7, #80	; 0x50
 8103910:	46bd      	mov	sp, r7
 8103912:	bd80      	pop	{r7, pc}

08103914 <ai_face_recognition_init>:


AI_API_ENTRY
ai_bool ai_face_recognition_init(
  ai_handle network, const ai_network_params* params)
{
 8103914:	b580      	push	{r7, lr}
 8103916:	b084      	sub	sp, #16
 8103918:	af00      	add	r7, sp, #0
 810391a:	6078      	str	r0, [r7, #4]
 810391c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 810391e:	6839      	ldr	r1, [r7, #0]
 8103920:	6878      	ldr	r0, [r7, #4]
 8103922:	f005 fcff 	bl	8109324 <ai_platform_network_init>
 8103926:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8103928:	2301      	movs	r3, #1
 810392a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 810392c:	68fb      	ldr	r3, [r7, #12]
 810392e:	2b00      	cmp	r3, #0
 8103930:	d101      	bne.n	8103936 <ai_face_recognition_init+0x22>
 8103932:	2300      	movs	r3, #0
 8103934:	e026      	b.n	8103984 <ai_face_recognition_init+0x70>
  ok &= face_recognition_configure_weights(net_ctx, params);
 8103936:	6839      	ldr	r1, [r7, #0]
 8103938:	68f8      	ldr	r0, [r7, #12]
 810393a:	f7fe fdfb 	bl	8102534 <face_recognition_configure_weights>
 810393e:	4603      	mov	r3, r0
 8103940:	461a      	mov	r2, r3
 8103942:	7afb      	ldrb	r3, [r7, #11]
 8103944:	4013      	ands	r3, r2
 8103946:	2b00      	cmp	r3, #0
 8103948:	bf14      	ite	ne
 810394a:	2301      	movne	r3, #1
 810394c:	2300      	moveq	r3, #0
 810394e:	72fb      	strb	r3, [r7, #11]
  ok &= face_recognition_configure_activations(net_ctx, params);
 8103950:	6839      	ldr	r1, [r7, #0]
 8103952:	68f8      	ldr	r0, [r7, #12]
 8103954:	f7fd fdd4 	bl	8101500 <face_recognition_configure_activations>
 8103958:	4603      	mov	r3, r0
 810395a:	461a      	mov	r2, r3
 810395c:	7afb      	ldrb	r3, [r7, #11]
 810395e:	4013      	ands	r3, r2
 8103960:	2b00      	cmp	r3, #0
 8103962:	bf14      	ite	ne
 8103964:	2301      	movne	r3, #1
 8103966:	2300      	moveq	r3, #0
 8103968:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 810396a:	6878      	ldr	r0, [r7, #4]
 810396c:	f005 fda8 	bl	81094c0 <ai_platform_network_post_init>
 8103970:	4603      	mov	r3, r0
 8103972:	461a      	mov	r2, r3
 8103974:	7afb      	ldrb	r3, [r7, #11]
 8103976:	4013      	ands	r3, r2
 8103978:	2b00      	cmp	r3, #0
 810397a:	bf14      	ite	ne
 810397c:	2301      	movne	r3, #1
 810397e:	2300      	moveq	r3, #0
 8103980:	72fb      	strb	r3, [r7, #11]

  return ok;
 8103982:	7afb      	ldrb	r3, [r7, #11]
}
 8103984:	4618      	mov	r0, r3
 8103986:	3710      	adds	r7, #16
 8103988:	46bd      	mov	sp, r7
 810398a:	bd80      	pop	{r7, pc}

0810398c <ai_face_recognition_data_params_get>:
 * @ingroup face_recognition_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_face_recognition_data_params_get(ai_network_params* params)
{
 810398c:	b580      	push	{r7, lr}
 810398e:	b086      	sub	sp, #24
 8103990:	af00      	add	r7, sp, #0
 8103992:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	2b00      	cmp	r3, #0
 8103998:	d101      	bne.n	810399e <ai_face_recognition_data_params_get+0x12>
 810399a:	2300      	movs	r3, #0
 810399c:	e016      	b.n	81039cc <ai_face_recognition_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 810399e:	4a0d      	ldr	r2, [pc, #52]	; (81039d4 <ai_face_recognition_data_params_get+0x48>)
 81039a0:	f107 0310 	add.w	r3, r7, #16
 81039a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 81039a8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_RECOGNITION_DATA_ACTIVATIONS_COUNT, g_face_recognition_data_map_activations);
  
  const ai_buffer_array map_weights = 
 81039ac:	4a0a      	ldr	r2, [pc, #40]	; (81039d8 <ai_face_recognition_data_params_get+0x4c>)
 81039ae:	f107 0308 	add.w	r3, r7, #8
 81039b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 81039b6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_FACE_RECOGNITION_DATA_WEIGHTS_COUNT, g_face_recognition_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 81039ba:	f107 0210 	add.w	r2, r7, #16
 81039be:	f107 0308 	add.w	r3, r7, #8
 81039c2:	4619      	mov	r1, r3
 81039c4:	6878      	ldr	r0, [r7, #4]
 81039c6:	f005 fc37 	bl	8109238 <ai_platform_bind_network_params>
 81039ca:	4603      	mov	r3, r0
}
 81039cc:	4618      	mov	r0, r3
 81039ce:	3718      	adds	r7, #24
 81039d0:	46bd      	mov	sp, r7
 81039d2:	bd80      	pop	{r7, pc}
 81039d4:	08110874 	.word	0x08110874
 81039d8:	0811087c 	.word	0x0811087c

081039dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81039dc:	b480      	push	{r7}
 81039de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81039e0:	4b0b      	ldr	r3, [pc, #44]	; (8103a10 <SystemInit+0x34>)
 81039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81039e6:	4a0a      	ldr	r2, [pc, #40]	; (8103a10 <SystemInit+0x34>)
 81039e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81039ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81039f0:	4b07      	ldr	r3, [pc, #28]	; (8103a10 <SystemInit+0x34>)
 81039f2:	691b      	ldr	r3, [r3, #16]
 81039f4:	4a06      	ldr	r2, [pc, #24]	; (8103a10 <SystemInit+0x34>)
 81039f6:	f043 0310 	orr.w	r3, r3, #16
 81039fa:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81039fc:	4b04      	ldr	r3, [pc, #16]	; (8103a10 <SystemInit+0x34>)
 81039fe:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8103a02:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8103a04:	bf00      	nop
 8103a06:	46bd      	mov	sp, r7
 8103a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a0c:	4770      	bx	lr
 8103a0e:	bf00      	nop
 8103a10:	e000ed00 	.word	0xe000ed00

08103a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103a14:	b580      	push	{r7, lr}
 8103a16:	b082      	sub	sp, #8
 8103a18:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103a1a:	4b28      	ldr	r3, [pc, #160]	; (8103abc <HAL_Init+0xa8>)
 8103a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103a20:	4a26      	ldr	r2, [pc, #152]	; (8103abc <HAL_Init+0xa8>)
 8103a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8103a26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103a2a:	4b24      	ldr	r3, [pc, #144]	; (8103abc <HAL_Init+0xa8>)
 8103a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103a34:	603b      	str	r3, [r7, #0]
 8103a36:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103a38:	4b21      	ldr	r3, [pc, #132]	; (8103ac0 <HAL_Init+0xac>)
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103a44:	4a1e      	ldr	r2, [pc, #120]	; (8103ac0 <HAL_Init+0xac>)
 8103a46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103a4a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103a4c:	4b1c      	ldr	r3, [pc, #112]	; (8103ac0 <HAL_Init+0xac>)
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	4a1b      	ldr	r2, [pc, #108]	; (8103ac0 <HAL_Init+0xac>)
 8103a52:	f043 0301 	orr.w	r3, r3, #1
 8103a56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103a58:	2003      	movs	r0, #3
 8103a5a:	f000 f983 	bl	8103d64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103a5e:	f002 f98f 	bl	8105d80 <HAL_RCC_GetSysClockFreq>
 8103a62:	4602      	mov	r2, r0
 8103a64:	4b15      	ldr	r3, [pc, #84]	; (8103abc <HAL_Init+0xa8>)
 8103a66:	699b      	ldr	r3, [r3, #24]
 8103a68:	0a1b      	lsrs	r3, r3, #8
 8103a6a:	f003 030f 	and.w	r3, r3, #15
 8103a6e:	4915      	ldr	r1, [pc, #84]	; (8103ac4 <HAL_Init+0xb0>)
 8103a70:	5ccb      	ldrb	r3, [r1, r3]
 8103a72:	f003 031f 	and.w	r3, r3, #31
 8103a76:	fa22 f303 	lsr.w	r3, r2, r3
 8103a7a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a7c:	4b0f      	ldr	r3, [pc, #60]	; (8103abc <HAL_Init+0xa8>)
 8103a7e:	699b      	ldr	r3, [r3, #24]
 8103a80:	f003 030f 	and.w	r3, r3, #15
 8103a84:	4a0f      	ldr	r2, [pc, #60]	; (8103ac4 <HAL_Init+0xb0>)
 8103a86:	5cd3      	ldrb	r3, [r2, r3]
 8103a88:	f003 031f 	and.w	r3, r3, #31
 8103a8c:	687a      	ldr	r2, [r7, #4]
 8103a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8103a92:	4a0d      	ldr	r2, [pc, #52]	; (8103ac8 <HAL_Init+0xb4>)
 8103a94:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a96:	4b0c      	ldr	r3, [pc, #48]	; (8103ac8 <HAL_Init+0xb4>)
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a0c      	ldr	r2, [pc, #48]	; (8103acc <HAL_Init+0xb8>)
 8103a9c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103a9e:	200f      	movs	r0, #15
 8103aa0:	f000 f816 	bl	8103ad0 <HAL_InitTick>
 8103aa4:	4603      	mov	r3, r0
 8103aa6:	2b00      	cmp	r3, #0
 8103aa8:	d001      	beq.n	8103aae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103aaa:	2301      	movs	r3, #1
 8103aac:	e002      	b.n	8103ab4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103aae:	f7fd fb6f 	bl	8101190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103ab2:	2300      	movs	r3, #0
}
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	3708      	adds	r7, #8
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	bd80      	pop	{r7, pc}
 8103abc:	58024400 	.word	0x58024400
 8103ac0:	40024400 	.word	0x40024400
 8103ac4:	0817e9a8 	.word	0x0817e9a8
 8103ac8:	10007374 	.word	0x10007374
 8103acc:	10007370 	.word	0x10007370

08103ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103ad0:	b580      	push	{r7, lr}
 8103ad2:	b082      	sub	sp, #8
 8103ad4:	af00      	add	r7, sp, #0
 8103ad6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103ad8:	4b15      	ldr	r3, [pc, #84]	; (8103b30 <HAL_InitTick+0x60>)
 8103ada:	781b      	ldrb	r3, [r3, #0]
 8103adc:	2b00      	cmp	r3, #0
 8103ade:	d101      	bne.n	8103ae4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103ae0:	2301      	movs	r3, #1
 8103ae2:	e021      	b.n	8103b28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103ae4:	4b13      	ldr	r3, [pc, #76]	; (8103b34 <HAL_InitTick+0x64>)
 8103ae6:	681a      	ldr	r2, [r3, #0]
 8103ae8:	4b11      	ldr	r3, [pc, #68]	; (8103b30 <HAL_InitTick+0x60>)
 8103aea:	781b      	ldrb	r3, [r3, #0]
 8103aec:	4619      	mov	r1, r3
 8103aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8103af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8103af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8103afa:	4618      	mov	r0, r3
 8103afc:	f000 f965 	bl	8103dca <HAL_SYSTICK_Config>
 8103b00:	4603      	mov	r3, r0
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d001      	beq.n	8103b0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103b06:	2301      	movs	r3, #1
 8103b08:	e00e      	b.n	8103b28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	2b0f      	cmp	r3, #15
 8103b0e:	d80a      	bhi.n	8103b26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103b10:	2200      	movs	r2, #0
 8103b12:	6879      	ldr	r1, [r7, #4]
 8103b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8103b18:	f000 f92f 	bl	8103d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103b1c:	4a06      	ldr	r2, [pc, #24]	; (8103b38 <HAL_InitTick+0x68>)
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103b22:	2300      	movs	r3, #0
 8103b24:	e000      	b.n	8103b28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103b26:	2301      	movs	r3, #1
}
 8103b28:	4618      	mov	r0, r3
 8103b2a:	3708      	adds	r7, #8
 8103b2c:	46bd      	mov	sp, r7
 8103b2e:	bd80      	pop	{r7, pc}
 8103b30:	1000737c 	.word	0x1000737c
 8103b34:	10007370 	.word	0x10007370
 8103b38:	10007378 	.word	0x10007378

08103b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103b3c:	b480      	push	{r7}
 8103b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103b40:	4b06      	ldr	r3, [pc, #24]	; (8103b5c <HAL_IncTick+0x20>)
 8103b42:	781b      	ldrb	r3, [r3, #0]
 8103b44:	461a      	mov	r2, r3
 8103b46:	4b06      	ldr	r3, [pc, #24]	; (8103b60 <HAL_IncTick+0x24>)
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	4413      	add	r3, r2
 8103b4c:	4a04      	ldr	r2, [pc, #16]	; (8103b60 <HAL_IncTick+0x24>)
 8103b4e:	6013      	str	r3, [r2, #0]
}
 8103b50:	bf00      	nop
 8103b52:	46bd      	mov	sp, r7
 8103b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b58:	4770      	bx	lr
 8103b5a:	bf00      	nop
 8103b5c:	1000737c 	.word	0x1000737c
 8103b60:	1003fed4 	.word	0x1003fed4

08103b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103b64:	b480      	push	{r7}
 8103b66:	af00      	add	r7, sp, #0
  return uwTick;
 8103b68:	4b03      	ldr	r3, [pc, #12]	; (8103b78 <HAL_GetTick+0x14>)
 8103b6a:	681b      	ldr	r3, [r3, #0]
}
 8103b6c:	4618      	mov	r0, r3
 8103b6e:	46bd      	mov	sp, r7
 8103b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b74:	4770      	bx	lr
 8103b76:	bf00      	nop
 8103b78:	1003fed4 	.word	0x1003fed4

08103b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103b7c:	b580      	push	{r7, lr}
 8103b7e:	b084      	sub	sp, #16
 8103b80:	af00      	add	r7, sp, #0
 8103b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103b84:	f7ff ffee 	bl	8103b64 <HAL_GetTick>
 8103b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103b94:	d005      	beq.n	8103ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103b96:	4b0a      	ldr	r3, [pc, #40]	; (8103bc0 <HAL_Delay+0x44>)
 8103b98:	781b      	ldrb	r3, [r3, #0]
 8103b9a:	461a      	mov	r2, r3
 8103b9c:	68fb      	ldr	r3, [r7, #12]
 8103b9e:	4413      	add	r3, r2
 8103ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103ba2:	bf00      	nop
 8103ba4:	f7ff ffde 	bl	8103b64 <HAL_GetTick>
 8103ba8:	4602      	mov	r2, r0
 8103baa:	68bb      	ldr	r3, [r7, #8]
 8103bac:	1ad3      	subs	r3, r2, r3
 8103bae:	68fa      	ldr	r2, [r7, #12]
 8103bb0:	429a      	cmp	r2, r3
 8103bb2:	d8f7      	bhi.n	8103ba4 <HAL_Delay+0x28>
  {
  }
}
 8103bb4:	bf00      	nop
 8103bb6:	bf00      	nop
 8103bb8:	3710      	adds	r7, #16
 8103bba:	46bd      	mov	sp, r7
 8103bbc:	bd80      	pop	{r7, pc}
 8103bbe:	bf00      	nop
 8103bc0:	1000737c 	.word	0x1000737c

08103bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103bc4:	b480      	push	{r7}
 8103bc6:	b085      	sub	sp, #20
 8103bc8:	af00      	add	r7, sp, #0
 8103bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	f003 0307 	and.w	r3, r3, #7
 8103bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103bd4:	4b0c      	ldr	r3, [pc, #48]	; (8103c08 <__NVIC_SetPriorityGrouping+0x44>)
 8103bd6:	68db      	ldr	r3, [r3, #12]
 8103bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103bda:	68ba      	ldr	r2, [r7, #8]
 8103bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103be0:	4013      	ands	r3, r2
 8103be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103be8:	68bb      	ldr	r3, [r7, #8]
 8103bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103bf6:	4a04      	ldr	r2, [pc, #16]	; (8103c08 <__NVIC_SetPriorityGrouping+0x44>)
 8103bf8:	68bb      	ldr	r3, [r7, #8]
 8103bfa:	60d3      	str	r3, [r2, #12]
}
 8103bfc:	bf00      	nop
 8103bfe:	3714      	adds	r7, #20
 8103c00:	46bd      	mov	sp, r7
 8103c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c06:	4770      	bx	lr
 8103c08:	e000ed00 	.word	0xe000ed00

08103c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103c0c:	b480      	push	{r7}
 8103c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103c10:	4b04      	ldr	r3, [pc, #16]	; (8103c24 <__NVIC_GetPriorityGrouping+0x18>)
 8103c12:	68db      	ldr	r3, [r3, #12]
 8103c14:	0a1b      	lsrs	r3, r3, #8
 8103c16:	f003 0307 	and.w	r3, r3, #7
}
 8103c1a:	4618      	mov	r0, r3
 8103c1c:	46bd      	mov	sp, r7
 8103c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c22:	4770      	bx	lr
 8103c24:	e000ed00 	.word	0xe000ed00

08103c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103c28:	b480      	push	{r7}
 8103c2a:	b083      	sub	sp, #12
 8103c2c:	af00      	add	r7, sp, #0
 8103c2e:	4603      	mov	r3, r0
 8103c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	db0b      	blt.n	8103c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103c3a:	88fb      	ldrh	r3, [r7, #6]
 8103c3c:	f003 021f 	and.w	r2, r3, #31
 8103c40:	4907      	ldr	r1, [pc, #28]	; (8103c60 <__NVIC_EnableIRQ+0x38>)
 8103c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c46:	095b      	lsrs	r3, r3, #5
 8103c48:	2001      	movs	r0, #1
 8103c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8103c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103c52:	bf00      	nop
 8103c54:	370c      	adds	r7, #12
 8103c56:	46bd      	mov	sp, r7
 8103c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c5c:	4770      	bx	lr
 8103c5e:	bf00      	nop
 8103c60:	e000e100 	.word	0xe000e100

08103c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103c64:	b480      	push	{r7}
 8103c66:	b083      	sub	sp, #12
 8103c68:	af00      	add	r7, sp, #0
 8103c6a:	4603      	mov	r3, r0
 8103c6c:	6039      	str	r1, [r7, #0]
 8103c6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c74:	2b00      	cmp	r3, #0
 8103c76:	db0a      	blt.n	8103c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103c78:	683b      	ldr	r3, [r7, #0]
 8103c7a:	b2da      	uxtb	r2, r3
 8103c7c:	490c      	ldr	r1, [pc, #48]	; (8103cb0 <__NVIC_SetPriority+0x4c>)
 8103c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103c82:	0112      	lsls	r2, r2, #4
 8103c84:	b2d2      	uxtb	r2, r2
 8103c86:	440b      	add	r3, r1
 8103c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103c8c:	e00a      	b.n	8103ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103c8e:	683b      	ldr	r3, [r7, #0]
 8103c90:	b2da      	uxtb	r2, r3
 8103c92:	4908      	ldr	r1, [pc, #32]	; (8103cb4 <__NVIC_SetPriority+0x50>)
 8103c94:	88fb      	ldrh	r3, [r7, #6]
 8103c96:	f003 030f 	and.w	r3, r3, #15
 8103c9a:	3b04      	subs	r3, #4
 8103c9c:	0112      	lsls	r2, r2, #4
 8103c9e:	b2d2      	uxtb	r2, r2
 8103ca0:	440b      	add	r3, r1
 8103ca2:	761a      	strb	r2, [r3, #24]
}
 8103ca4:	bf00      	nop
 8103ca6:	370c      	adds	r7, #12
 8103ca8:	46bd      	mov	sp, r7
 8103caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cae:	4770      	bx	lr
 8103cb0:	e000e100 	.word	0xe000e100
 8103cb4:	e000ed00 	.word	0xe000ed00

08103cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103cb8:	b480      	push	{r7}
 8103cba:	b089      	sub	sp, #36	; 0x24
 8103cbc:	af00      	add	r7, sp, #0
 8103cbe:	60f8      	str	r0, [r7, #12]
 8103cc0:	60b9      	str	r1, [r7, #8]
 8103cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103cc4:	68fb      	ldr	r3, [r7, #12]
 8103cc6:	f003 0307 	and.w	r3, r3, #7
 8103cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103ccc:	69fb      	ldr	r3, [r7, #28]
 8103cce:	f1c3 0307 	rsb	r3, r3, #7
 8103cd2:	2b04      	cmp	r3, #4
 8103cd4:	bf28      	it	cs
 8103cd6:	2304      	movcs	r3, #4
 8103cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103cda:	69fb      	ldr	r3, [r7, #28]
 8103cdc:	3304      	adds	r3, #4
 8103cde:	2b06      	cmp	r3, #6
 8103ce0:	d902      	bls.n	8103ce8 <NVIC_EncodePriority+0x30>
 8103ce2:	69fb      	ldr	r3, [r7, #28]
 8103ce4:	3b03      	subs	r3, #3
 8103ce6:	e000      	b.n	8103cea <NVIC_EncodePriority+0x32>
 8103ce8:	2300      	movs	r3, #0
 8103cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103cf0:	69bb      	ldr	r3, [r7, #24]
 8103cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8103cf6:	43da      	mvns	r2, r3
 8103cf8:	68bb      	ldr	r3, [r7, #8]
 8103cfa:	401a      	ands	r2, r3
 8103cfc:	697b      	ldr	r3, [r7, #20]
 8103cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8103d04:	697b      	ldr	r3, [r7, #20]
 8103d06:	fa01 f303 	lsl.w	r3, r1, r3
 8103d0a:	43d9      	mvns	r1, r3
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103d10:	4313      	orrs	r3, r2
         );
}
 8103d12:	4618      	mov	r0, r3
 8103d14:	3724      	adds	r7, #36	; 0x24
 8103d16:	46bd      	mov	sp, r7
 8103d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d1c:	4770      	bx	lr
	...

08103d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103d20:	b580      	push	{r7, lr}
 8103d22:	b082      	sub	sp, #8
 8103d24:	af00      	add	r7, sp, #0
 8103d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	3b01      	subs	r3, #1
 8103d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103d30:	d301      	bcc.n	8103d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103d32:	2301      	movs	r3, #1
 8103d34:	e00f      	b.n	8103d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103d36:	4a0a      	ldr	r2, [pc, #40]	; (8103d60 <SysTick_Config+0x40>)
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	3b01      	subs	r3, #1
 8103d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103d3e:	210f      	movs	r1, #15
 8103d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8103d44:	f7ff ff8e 	bl	8103c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103d48:	4b05      	ldr	r3, [pc, #20]	; (8103d60 <SysTick_Config+0x40>)
 8103d4a:	2200      	movs	r2, #0
 8103d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103d4e:	4b04      	ldr	r3, [pc, #16]	; (8103d60 <SysTick_Config+0x40>)
 8103d50:	2207      	movs	r2, #7
 8103d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103d54:	2300      	movs	r3, #0
}
 8103d56:	4618      	mov	r0, r3
 8103d58:	3708      	adds	r7, #8
 8103d5a:	46bd      	mov	sp, r7
 8103d5c:	bd80      	pop	{r7, pc}
 8103d5e:	bf00      	nop
 8103d60:	e000e010 	.word	0xe000e010

08103d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d64:	b580      	push	{r7, lr}
 8103d66:	b082      	sub	sp, #8
 8103d68:	af00      	add	r7, sp, #0
 8103d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103d6c:	6878      	ldr	r0, [r7, #4]
 8103d6e:	f7ff ff29 	bl	8103bc4 <__NVIC_SetPriorityGrouping>
}
 8103d72:	bf00      	nop
 8103d74:	3708      	adds	r7, #8
 8103d76:	46bd      	mov	sp, r7
 8103d78:	bd80      	pop	{r7, pc}

08103d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103d7a:	b580      	push	{r7, lr}
 8103d7c:	b086      	sub	sp, #24
 8103d7e:	af00      	add	r7, sp, #0
 8103d80:	4603      	mov	r3, r0
 8103d82:	60b9      	str	r1, [r7, #8]
 8103d84:	607a      	str	r2, [r7, #4]
 8103d86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103d88:	f7ff ff40 	bl	8103c0c <__NVIC_GetPriorityGrouping>
 8103d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103d8e:	687a      	ldr	r2, [r7, #4]
 8103d90:	68b9      	ldr	r1, [r7, #8]
 8103d92:	6978      	ldr	r0, [r7, #20]
 8103d94:	f7ff ff90 	bl	8103cb8 <NVIC_EncodePriority>
 8103d98:	4602      	mov	r2, r0
 8103d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103d9e:	4611      	mov	r1, r2
 8103da0:	4618      	mov	r0, r3
 8103da2:	f7ff ff5f 	bl	8103c64 <__NVIC_SetPriority>
}
 8103da6:	bf00      	nop
 8103da8:	3718      	adds	r7, #24
 8103daa:	46bd      	mov	sp, r7
 8103dac:	bd80      	pop	{r7, pc}

08103dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103dae:	b580      	push	{r7, lr}
 8103db0:	b082      	sub	sp, #8
 8103db2:	af00      	add	r7, sp, #0
 8103db4:	4603      	mov	r3, r0
 8103db6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103dbc:	4618      	mov	r0, r3
 8103dbe:	f7ff ff33 	bl	8103c28 <__NVIC_EnableIRQ>
}
 8103dc2:	bf00      	nop
 8103dc4:	3708      	adds	r7, #8
 8103dc6:	46bd      	mov	sp, r7
 8103dc8:	bd80      	pop	{r7, pc}

08103dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103dca:	b580      	push	{r7, lr}
 8103dcc:	b082      	sub	sp, #8
 8103dce:	af00      	add	r7, sp, #0
 8103dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103dd2:	6878      	ldr	r0, [r7, #4]
 8103dd4:	f7ff ffa4 	bl	8103d20 <SysTick_Config>
 8103dd8:	4603      	mov	r3, r0
}
 8103dda:	4618      	mov	r0, r3
 8103ddc:	3708      	adds	r7, #8
 8103dde:	46bd      	mov	sp, r7
 8103de0:	bd80      	pop	{r7, pc}
	...

08103de4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8103de4:	b480      	push	{r7}
 8103de6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8103de8:	f3bf 8f5f 	dmb	sy
}
 8103dec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8103dee:	4b07      	ldr	r3, [pc, #28]	; (8103e0c <HAL_MPU_Disable+0x28>)
 8103df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103df2:	4a06      	ldr	r2, [pc, #24]	; (8103e0c <HAL_MPU_Disable+0x28>)
 8103df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103df8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8103dfa:	4b05      	ldr	r3, [pc, #20]	; (8103e10 <HAL_MPU_Disable+0x2c>)
 8103dfc:	2200      	movs	r2, #0
 8103dfe:	605a      	str	r2, [r3, #4]
}
 8103e00:	bf00      	nop
 8103e02:	46bd      	mov	sp, r7
 8103e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e08:	4770      	bx	lr
 8103e0a:	bf00      	nop
 8103e0c:	e000ed00 	.word	0xe000ed00
 8103e10:	e000ed90 	.word	0xe000ed90

08103e14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8103e14:	b480      	push	{r7}
 8103e16:	b083      	sub	sp, #12
 8103e18:	af00      	add	r7, sp, #0
 8103e1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8103e1c:	4a0b      	ldr	r2, [pc, #44]	; (8103e4c <HAL_MPU_Enable+0x38>)
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	f043 0301 	orr.w	r3, r3, #1
 8103e24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8103e26:	4b0a      	ldr	r3, [pc, #40]	; (8103e50 <HAL_MPU_Enable+0x3c>)
 8103e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e2a:	4a09      	ldr	r2, [pc, #36]	; (8103e50 <HAL_MPU_Enable+0x3c>)
 8103e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103e30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8103e32:	f3bf 8f4f 	dsb	sy
}
 8103e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103e38:	f3bf 8f6f 	isb	sy
}
 8103e3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8103e3e:	bf00      	nop
 8103e40:	370c      	adds	r7, #12
 8103e42:	46bd      	mov	sp, r7
 8103e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e48:	4770      	bx	lr
 8103e4a:	bf00      	nop
 8103e4c:	e000ed90 	.word	0xe000ed90
 8103e50:	e000ed00 	.word	0xe000ed00

08103e54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8103e54:	b480      	push	{r7}
 8103e56:	b083      	sub	sp, #12
 8103e58:	af00      	add	r7, sp, #0
 8103e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	785a      	ldrb	r2, [r3, #1]
 8103e60:	4b1d      	ldr	r3, [pc, #116]	; (8103ed8 <HAL_MPU_ConfigRegion+0x84>)
 8103e62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	781b      	ldrb	r3, [r3, #0]
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d029      	beq.n	8103ec0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8103e6c:	4a1a      	ldr	r2, [pc, #104]	; (8103ed8 <HAL_MPU_ConfigRegion+0x84>)
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	685b      	ldr	r3, [r3, #4]
 8103e72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	7b1b      	ldrb	r3, [r3, #12]
 8103e78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	7adb      	ldrb	r3, [r3, #11]
 8103e7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103e80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	7a9b      	ldrb	r3, [r3, #10]
 8103e86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103e88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	7b5b      	ldrb	r3, [r3, #13]
 8103e8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8103e90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	7b9b      	ldrb	r3, [r3, #14]
 8103e96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103e98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	7bdb      	ldrb	r3, [r3, #15]
 8103e9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8103ea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	7a5b      	ldrb	r3, [r3, #9]
 8103ea6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8103ea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	7a1b      	ldrb	r3, [r3, #8]
 8103eae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8103eb0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8103eb2:	687a      	ldr	r2, [r7, #4]
 8103eb4:	7812      	ldrb	r2, [r2, #0]
 8103eb6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103eb8:	4a07      	ldr	r2, [pc, #28]	; (8103ed8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8103eba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103ebc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8103ebe:	e005      	b.n	8103ecc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8103ec0:	4b05      	ldr	r3, [pc, #20]	; (8103ed8 <HAL_MPU_ConfigRegion+0x84>)
 8103ec2:	2200      	movs	r2, #0
 8103ec4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8103ec6:	4b04      	ldr	r3, [pc, #16]	; (8103ed8 <HAL_MPU_ConfigRegion+0x84>)
 8103ec8:	2200      	movs	r2, #0
 8103eca:	611a      	str	r2, [r3, #16]
}
 8103ecc:	bf00      	nop
 8103ece:	370c      	adds	r7, #12
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed6:	4770      	bx	lr
 8103ed8:	e000ed90 	.word	0xe000ed90

08103edc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103edc:	b480      	push	{r7}
 8103ede:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103ee0:	4b07      	ldr	r3, [pc, #28]	; (8103f00 <HAL_GetCurrentCPUID+0x24>)
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	091b      	lsrs	r3, r3, #4
 8103ee6:	f003 030f 	and.w	r3, r3, #15
 8103eea:	2b07      	cmp	r3, #7
 8103eec:	d101      	bne.n	8103ef2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103eee:	2303      	movs	r3, #3
 8103ef0:	e000      	b.n	8103ef4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103ef2:	2301      	movs	r3, #1
  }
}
 8103ef4:	4618      	mov	r0, r3
 8103ef6:	46bd      	mov	sp, r7
 8103ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103efc:	4770      	bx	lr
 8103efe:	bf00      	nop
 8103f00:	e000ed00 	.word	0xe000ed00

08103f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103f04:	b580      	push	{r7, lr}
 8103f06:	b086      	sub	sp, #24
 8103f08:	af00      	add	r7, sp, #0
 8103f0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103f0c:	f7ff fe2a 	bl	8103b64 <HAL_GetTick>
 8103f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d101      	bne.n	8103f1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103f18:	2301      	movs	r3, #1
 8103f1a:	e314      	b.n	8104546 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a66      	ldr	r2, [pc, #408]	; (81040bc <HAL_DMA_Init+0x1b8>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d04a      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4a65      	ldr	r2, [pc, #404]	; (81040c0 <HAL_DMA_Init+0x1bc>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d045      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4a63      	ldr	r2, [pc, #396]	; (81040c4 <HAL_DMA_Init+0x1c0>)
 8103f36:	4293      	cmp	r3, r2
 8103f38:	d040      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a62      	ldr	r2, [pc, #392]	; (81040c8 <HAL_DMA_Init+0x1c4>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d03b      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	4a60      	ldr	r2, [pc, #384]	; (81040cc <HAL_DMA_Init+0x1c8>)
 8103f4a:	4293      	cmp	r3, r2
 8103f4c:	d036      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a5f      	ldr	r2, [pc, #380]	; (81040d0 <HAL_DMA_Init+0x1cc>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d031      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a5d      	ldr	r2, [pc, #372]	; (81040d4 <HAL_DMA_Init+0x1d0>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d02c      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	4a5c      	ldr	r2, [pc, #368]	; (81040d8 <HAL_DMA_Init+0x1d4>)
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d027      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4a5a      	ldr	r2, [pc, #360]	; (81040dc <HAL_DMA_Init+0x1d8>)
 8103f72:	4293      	cmp	r3, r2
 8103f74:	d022      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a59      	ldr	r2, [pc, #356]	; (81040e0 <HAL_DMA_Init+0x1dc>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d01d      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4a57      	ldr	r2, [pc, #348]	; (81040e4 <HAL_DMA_Init+0x1e0>)
 8103f86:	4293      	cmp	r3, r2
 8103f88:	d018      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a56      	ldr	r2, [pc, #344]	; (81040e8 <HAL_DMA_Init+0x1e4>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d013      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4a54      	ldr	r2, [pc, #336]	; (81040ec <HAL_DMA_Init+0x1e8>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d00e      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	4a53      	ldr	r2, [pc, #332]	; (81040f0 <HAL_DMA_Init+0x1ec>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d009      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a51      	ldr	r2, [pc, #324]	; (81040f4 <HAL_DMA_Init+0x1f0>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d004      	beq.n	8103fbc <HAL_DMA_Init+0xb8>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a50      	ldr	r2, [pc, #320]	; (81040f8 <HAL_DMA_Init+0x1f4>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d101      	bne.n	8103fc0 <HAL_DMA_Init+0xbc>
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	e000      	b.n	8103fc2 <HAL_DMA_Init+0xbe>
 8103fc0:	2300      	movs	r3, #0
 8103fc2:	2b00      	cmp	r3, #0
 8103fc4:	f000 813b 	beq.w	810423e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	2202      	movs	r2, #2
 8103fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	2200      	movs	r2, #0
 8103fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	4a37      	ldr	r2, [pc, #220]	; (81040bc <HAL_DMA_Init+0x1b8>)
 8103fde:	4293      	cmp	r3, r2
 8103fe0:	d04a      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a36      	ldr	r2, [pc, #216]	; (81040c0 <HAL_DMA_Init+0x1bc>)
 8103fe8:	4293      	cmp	r3, r2
 8103fea:	d045      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a34      	ldr	r2, [pc, #208]	; (81040c4 <HAL_DMA_Init+0x1c0>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d040      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	4a33      	ldr	r2, [pc, #204]	; (81040c8 <HAL_DMA_Init+0x1c4>)
 8103ffc:	4293      	cmp	r3, r2
 8103ffe:	d03b      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a31      	ldr	r2, [pc, #196]	; (81040cc <HAL_DMA_Init+0x1c8>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d036      	beq.n	8104078 <HAL_DMA_Init+0x174>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a30      	ldr	r2, [pc, #192]	; (81040d0 <HAL_DMA_Init+0x1cc>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d031      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a2e      	ldr	r2, [pc, #184]	; (81040d4 <HAL_DMA_Init+0x1d0>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d02c      	beq.n	8104078 <HAL_DMA_Init+0x174>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a2d      	ldr	r2, [pc, #180]	; (81040d8 <HAL_DMA_Init+0x1d4>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d027      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a2b      	ldr	r2, [pc, #172]	; (81040dc <HAL_DMA_Init+0x1d8>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d022      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a2a      	ldr	r2, [pc, #168]	; (81040e0 <HAL_DMA_Init+0x1dc>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d01d      	beq.n	8104078 <HAL_DMA_Init+0x174>
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a28      	ldr	r2, [pc, #160]	; (81040e4 <HAL_DMA_Init+0x1e0>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d018      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a27      	ldr	r2, [pc, #156]	; (81040e8 <HAL_DMA_Init+0x1e4>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d013      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a25      	ldr	r2, [pc, #148]	; (81040ec <HAL_DMA_Init+0x1e8>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d00e      	beq.n	8104078 <HAL_DMA_Init+0x174>
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4a24      	ldr	r2, [pc, #144]	; (81040f0 <HAL_DMA_Init+0x1ec>)
 8104060:	4293      	cmp	r3, r2
 8104062:	d009      	beq.n	8104078 <HAL_DMA_Init+0x174>
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	4a22      	ldr	r2, [pc, #136]	; (81040f4 <HAL_DMA_Init+0x1f0>)
 810406a:	4293      	cmp	r3, r2
 810406c:	d004      	beq.n	8104078 <HAL_DMA_Init+0x174>
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	4a21      	ldr	r2, [pc, #132]	; (81040f8 <HAL_DMA_Init+0x1f4>)
 8104074:	4293      	cmp	r3, r2
 8104076:	d108      	bne.n	810408a <HAL_DMA_Init+0x186>
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	681a      	ldr	r2, [r3, #0]
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	f022 0201 	bic.w	r2, r2, #1
 8104086:	601a      	str	r2, [r3, #0]
 8104088:	e007      	b.n	810409a <HAL_DMA_Init+0x196>
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	681a      	ldr	r2, [r3, #0]
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	f022 0201 	bic.w	r2, r2, #1
 8104098:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810409a:	e02f      	b.n	81040fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810409c:	f7ff fd62 	bl	8103b64 <HAL_GetTick>
 81040a0:	4602      	mov	r2, r0
 81040a2:	693b      	ldr	r3, [r7, #16]
 81040a4:	1ad3      	subs	r3, r2, r3
 81040a6:	2b05      	cmp	r3, #5
 81040a8:	d928      	bls.n	81040fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	2220      	movs	r2, #32
 81040ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	2203      	movs	r2, #3
 81040b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81040b8:	2301      	movs	r3, #1
 81040ba:	e244      	b.n	8104546 <HAL_DMA_Init+0x642>
 81040bc:	40020010 	.word	0x40020010
 81040c0:	40020028 	.word	0x40020028
 81040c4:	40020040 	.word	0x40020040
 81040c8:	40020058 	.word	0x40020058
 81040cc:	40020070 	.word	0x40020070
 81040d0:	40020088 	.word	0x40020088
 81040d4:	400200a0 	.word	0x400200a0
 81040d8:	400200b8 	.word	0x400200b8
 81040dc:	40020410 	.word	0x40020410
 81040e0:	40020428 	.word	0x40020428
 81040e4:	40020440 	.word	0x40020440
 81040e8:	40020458 	.word	0x40020458
 81040ec:	40020470 	.word	0x40020470
 81040f0:	40020488 	.word	0x40020488
 81040f4:	400204a0 	.word	0x400204a0
 81040f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	681b      	ldr	r3, [r3, #0]
 8104102:	f003 0301 	and.w	r3, r3, #1
 8104106:	2b00      	cmp	r3, #0
 8104108:	d1c8      	bne.n	810409c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8104112:	697a      	ldr	r2, [r7, #20]
 8104114:	4b84      	ldr	r3, [pc, #528]	; (8104328 <HAL_DMA_Init+0x424>)
 8104116:	4013      	ands	r3, r2
 8104118:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8104122:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	691b      	ldr	r3, [r3, #16]
 8104128:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810412e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	699b      	ldr	r3, [r3, #24]
 8104134:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810413a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	6a1b      	ldr	r3, [r3, #32]
 8104140:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8104142:	697a      	ldr	r2, [r7, #20]
 8104144:	4313      	orrs	r3, r2
 8104146:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810414c:	2b04      	cmp	r3, #4
 810414e:	d107      	bne.n	8104160 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104158:	4313      	orrs	r3, r2
 810415a:	697a      	ldr	r2, [r7, #20]
 810415c:	4313      	orrs	r3, r2
 810415e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104160:	4b72      	ldr	r3, [pc, #456]	; (810432c <HAL_DMA_Init+0x428>)
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	0c1b      	lsrs	r3, r3, #16
 8104166:	041b      	lsls	r3, r3, #16
 8104168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810416c:	d328      	bcc.n	81041c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	685b      	ldr	r3, [r3, #4]
 8104172:	2b28      	cmp	r3, #40	; 0x28
 8104174:	d903      	bls.n	810417e <HAL_DMA_Init+0x27a>
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	685b      	ldr	r3, [r3, #4]
 810417a:	2b2e      	cmp	r3, #46	; 0x2e
 810417c:	d917      	bls.n	81041ae <HAL_DMA_Init+0x2aa>
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	685b      	ldr	r3, [r3, #4]
 8104182:	2b3e      	cmp	r3, #62	; 0x3e
 8104184:	d903      	bls.n	810418e <HAL_DMA_Init+0x28a>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	685b      	ldr	r3, [r3, #4]
 810418a:	2b42      	cmp	r3, #66	; 0x42
 810418c:	d90f      	bls.n	81041ae <HAL_DMA_Init+0x2aa>
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	685b      	ldr	r3, [r3, #4]
 8104192:	2b46      	cmp	r3, #70	; 0x46
 8104194:	d903      	bls.n	810419e <HAL_DMA_Init+0x29a>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	685b      	ldr	r3, [r3, #4]
 810419a:	2b48      	cmp	r3, #72	; 0x48
 810419c:	d907      	bls.n	81041ae <HAL_DMA_Init+0x2aa>
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	685b      	ldr	r3, [r3, #4]
 81041a2:	2b4e      	cmp	r3, #78	; 0x4e
 81041a4:	d905      	bls.n	81041b2 <HAL_DMA_Init+0x2ae>
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	685b      	ldr	r3, [r3, #4]
 81041aa:	2b52      	cmp	r3, #82	; 0x52
 81041ac:	d801      	bhi.n	81041b2 <HAL_DMA_Init+0x2ae>
 81041ae:	2301      	movs	r3, #1
 81041b0:	e000      	b.n	81041b4 <HAL_DMA_Init+0x2b0>
 81041b2:	2300      	movs	r3, #0
 81041b4:	2b00      	cmp	r3, #0
 81041b6:	d003      	beq.n	81041c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81041b8:	697b      	ldr	r3, [r7, #20]
 81041ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81041be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	697a      	ldr	r2, [r7, #20]
 81041c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	695b      	ldr	r3, [r3, #20]
 81041ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81041d0:	697b      	ldr	r3, [r7, #20]
 81041d2:	f023 0307 	bic.w	r3, r3, #7
 81041d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81041d8:	687b      	ldr	r3, [r7, #4]
 81041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041dc:	697a      	ldr	r2, [r7, #20]
 81041de:	4313      	orrs	r3, r2
 81041e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041e6:	2b04      	cmp	r3, #4
 81041e8:	d117      	bne.n	810421a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041ee:	697a      	ldr	r2, [r7, #20]
 81041f0:	4313      	orrs	r3, r2
 81041f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d00e      	beq.n	810421a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81041fc:	6878      	ldr	r0, [r7, #4]
 81041fe:	f001 f9b7 	bl	8105570 <DMA_CheckFifoParam>
 8104202:	4603      	mov	r3, r0
 8104204:	2b00      	cmp	r3, #0
 8104206:	d008      	beq.n	810421a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	2240      	movs	r2, #64	; 0x40
 810420c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	2201      	movs	r2, #1
 8104212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8104216:	2301      	movs	r3, #1
 8104218:	e195      	b.n	8104546 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	681b      	ldr	r3, [r3, #0]
 810421e:	697a      	ldr	r2, [r7, #20]
 8104220:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104222:	6878      	ldr	r0, [r7, #4]
 8104224:	f001 f8f2 	bl	810540c <DMA_CalcBaseAndBitshift>
 8104228:	4603      	mov	r3, r0
 810422a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104230:	f003 031f 	and.w	r3, r3, #31
 8104234:	223f      	movs	r2, #63	; 0x3f
 8104236:	409a      	lsls	r2, r3
 8104238:	68bb      	ldr	r3, [r7, #8]
 810423a:	609a      	str	r2, [r3, #8]
 810423c:	e0cb      	b.n	81043d6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	4a3b      	ldr	r2, [pc, #236]	; (8104330 <HAL_DMA_Init+0x42c>)
 8104244:	4293      	cmp	r3, r2
 8104246:	d022      	beq.n	810428e <HAL_DMA_Init+0x38a>
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	4a39      	ldr	r2, [pc, #228]	; (8104334 <HAL_DMA_Init+0x430>)
 810424e:	4293      	cmp	r3, r2
 8104250:	d01d      	beq.n	810428e <HAL_DMA_Init+0x38a>
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4a38      	ldr	r2, [pc, #224]	; (8104338 <HAL_DMA_Init+0x434>)
 8104258:	4293      	cmp	r3, r2
 810425a:	d018      	beq.n	810428e <HAL_DMA_Init+0x38a>
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	681b      	ldr	r3, [r3, #0]
 8104260:	4a36      	ldr	r2, [pc, #216]	; (810433c <HAL_DMA_Init+0x438>)
 8104262:	4293      	cmp	r3, r2
 8104264:	d013      	beq.n	810428e <HAL_DMA_Init+0x38a>
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	4a35      	ldr	r2, [pc, #212]	; (8104340 <HAL_DMA_Init+0x43c>)
 810426c:	4293      	cmp	r3, r2
 810426e:	d00e      	beq.n	810428e <HAL_DMA_Init+0x38a>
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	4a33      	ldr	r2, [pc, #204]	; (8104344 <HAL_DMA_Init+0x440>)
 8104276:	4293      	cmp	r3, r2
 8104278:	d009      	beq.n	810428e <HAL_DMA_Init+0x38a>
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	4a32      	ldr	r2, [pc, #200]	; (8104348 <HAL_DMA_Init+0x444>)
 8104280:	4293      	cmp	r3, r2
 8104282:	d004      	beq.n	810428e <HAL_DMA_Init+0x38a>
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	4a30      	ldr	r2, [pc, #192]	; (810434c <HAL_DMA_Init+0x448>)
 810428a:	4293      	cmp	r3, r2
 810428c:	d101      	bne.n	8104292 <HAL_DMA_Init+0x38e>
 810428e:	2301      	movs	r3, #1
 8104290:	e000      	b.n	8104294 <HAL_DMA_Init+0x390>
 8104292:	2300      	movs	r3, #0
 8104294:	2b00      	cmp	r3, #0
 8104296:	f000 8095 	beq.w	81043c4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	4a24      	ldr	r2, [pc, #144]	; (8104330 <HAL_DMA_Init+0x42c>)
 81042a0:	4293      	cmp	r3, r2
 81042a2:	d021      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a22      	ldr	r2, [pc, #136]	; (8104334 <HAL_DMA_Init+0x430>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d01c      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a21      	ldr	r2, [pc, #132]	; (8104338 <HAL_DMA_Init+0x434>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d017      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a1f      	ldr	r2, [pc, #124]	; (810433c <HAL_DMA_Init+0x438>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d012      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a1e      	ldr	r2, [pc, #120]	; (8104340 <HAL_DMA_Init+0x43c>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d00d      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a1c      	ldr	r2, [pc, #112]	; (8104344 <HAL_DMA_Init+0x440>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d008      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a1b      	ldr	r2, [pc, #108]	; (8104348 <HAL_DMA_Init+0x444>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d003      	beq.n	81042e8 <HAL_DMA_Init+0x3e4>
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a19      	ldr	r2, [pc, #100]	; (810434c <HAL_DMA_Init+0x448>)
 81042e6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	2202      	movs	r2, #2
 81042ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	2200      	movs	r2, #0
 81042f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8104300:	697b      	ldr	r3, [r7, #20]
 8104302:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8104306:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810430a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	689b      	ldr	r3, [r3, #8]
 8104310:	2b40      	cmp	r3, #64	; 0x40
 8104312:	d01d      	beq.n	8104350 <HAL_DMA_Init+0x44c>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	689b      	ldr	r3, [r3, #8]
 8104318:	2b80      	cmp	r3, #128	; 0x80
 810431a:	d102      	bne.n	8104322 <HAL_DMA_Init+0x41e>
 810431c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8104320:	e017      	b.n	8104352 <HAL_DMA_Init+0x44e>
 8104322:	2300      	movs	r3, #0
 8104324:	e015      	b.n	8104352 <HAL_DMA_Init+0x44e>
 8104326:	bf00      	nop
 8104328:	fe10803f 	.word	0xfe10803f
 810432c:	5c001000 	.word	0x5c001000
 8104330:	58025408 	.word	0x58025408
 8104334:	5802541c 	.word	0x5802541c
 8104338:	58025430 	.word	0x58025430
 810433c:	58025444 	.word	0x58025444
 8104340:	58025458 	.word	0x58025458
 8104344:	5802546c 	.word	0x5802546c
 8104348:	58025480 	.word	0x58025480
 810434c:	58025494 	.word	0x58025494
 8104350:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104352:	687a      	ldr	r2, [r7, #4]
 8104354:	68d2      	ldr	r2, [r2, #12]
 8104356:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	691b      	ldr	r3, [r3, #16]
 810435e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	695b      	ldr	r3, [r3, #20]
 8104366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	699b      	ldr	r3, [r3, #24]
 810436e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	69db      	ldr	r3, [r3, #28]
 8104376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	6a1b      	ldr	r3, [r3, #32]
 810437e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104380:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104382:	697a      	ldr	r2, [r7, #20]
 8104384:	4313      	orrs	r3, r2
 8104386:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	697a      	ldr	r2, [r7, #20]
 810438e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	461a      	mov	r2, r3
 8104396:	4b6e      	ldr	r3, [pc, #440]	; (8104550 <HAL_DMA_Init+0x64c>)
 8104398:	4413      	add	r3, r2
 810439a:	4a6e      	ldr	r2, [pc, #440]	; (8104554 <HAL_DMA_Init+0x650>)
 810439c:	fba2 2303 	umull	r2, r3, r2, r3
 81043a0:	091b      	lsrs	r3, r3, #4
 81043a2:	009a      	lsls	r2, r3, #2
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81043a8:	6878      	ldr	r0, [r7, #4]
 81043aa:	f001 f82f 	bl	810540c <DMA_CalcBaseAndBitshift>
 81043ae:	4603      	mov	r3, r0
 81043b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043b6:	f003 031f 	and.w	r3, r3, #31
 81043ba:	2201      	movs	r2, #1
 81043bc:	409a      	lsls	r2, r3
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	605a      	str	r2, [r3, #4]
 81043c2:	e008      	b.n	81043d6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	2240      	movs	r2, #64	; 0x40
 81043c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	2203      	movs	r2, #3
 81043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81043d2:	2301      	movs	r3, #1
 81043d4:	e0b7      	b.n	8104546 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a5f      	ldr	r2, [pc, #380]	; (8104558 <HAL_DMA_Init+0x654>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d072      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a5d      	ldr	r2, [pc, #372]	; (810455c <HAL_DMA_Init+0x658>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d06d      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a5c      	ldr	r2, [pc, #368]	; (8104560 <HAL_DMA_Init+0x65c>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d068      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a5a      	ldr	r2, [pc, #360]	; (8104564 <HAL_DMA_Init+0x660>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d063      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a59      	ldr	r2, [pc, #356]	; (8104568 <HAL_DMA_Init+0x664>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d05e      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a57      	ldr	r2, [pc, #348]	; (810456c <HAL_DMA_Init+0x668>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d059      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a56      	ldr	r2, [pc, #344]	; (8104570 <HAL_DMA_Init+0x66c>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d054      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a54      	ldr	r2, [pc, #336]	; (8104574 <HAL_DMA_Init+0x670>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d04f      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a53      	ldr	r2, [pc, #332]	; (8104578 <HAL_DMA_Init+0x674>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d04a      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a51      	ldr	r2, [pc, #324]	; (810457c <HAL_DMA_Init+0x678>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d045      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a50      	ldr	r2, [pc, #320]	; (8104580 <HAL_DMA_Init+0x67c>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d040      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a4e      	ldr	r2, [pc, #312]	; (8104584 <HAL_DMA_Init+0x680>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d03b      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a4d      	ldr	r2, [pc, #308]	; (8104588 <HAL_DMA_Init+0x684>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d036      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a4b      	ldr	r2, [pc, #300]	; (810458c <HAL_DMA_Init+0x688>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d031      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a4a      	ldr	r2, [pc, #296]	; (8104590 <HAL_DMA_Init+0x68c>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d02c      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a48      	ldr	r2, [pc, #288]	; (8104594 <HAL_DMA_Init+0x690>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d027      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	4a47      	ldr	r2, [pc, #284]	; (8104598 <HAL_DMA_Init+0x694>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d022      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	4a45      	ldr	r2, [pc, #276]	; (810459c <HAL_DMA_Init+0x698>)
 8104486:	4293      	cmp	r3, r2
 8104488:	d01d      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	4a44      	ldr	r2, [pc, #272]	; (81045a0 <HAL_DMA_Init+0x69c>)
 8104490:	4293      	cmp	r3, r2
 8104492:	d018      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	4a42      	ldr	r2, [pc, #264]	; (81045a4 <HAL_DMA_Init+0x6a0>)
 810449a:	4293      	cmp	r3, r2
 810449c:	d013      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	4a41      	ldr	r2, [pc, #260]	; (81045a8 <HAL_DMA_Init+0x6a4>)
 81044a4:	4293      	cmp	r3, r2
 81044a6:	d00e      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4a3f      	ldr	r2, [pc, #252]	; (81045ac <HAL_DMA_Init+0x6a8>)
 81044ae:	4293      	cmp	r3, r2
 81044b0:	d009      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	4a3e      	ldr	r2, [pc, #248]	; (81045b0 <HAL_DMA_Init+0x6ac>)
 81044b8:	4293      	cmp	r3, r2
 81044ba:	d004      	beq.n	81044c6 <HAL_DMA_Init+0x5c2>
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a3c      	ldr	r2, [pc, #240]	; (81045b4 <HAL_DMA_Init+0x6b0>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d101      	bne.n	81044ca <HAL_DMA_Init+0x5c6>
 81044c6:	2301      	movs	r3, #1
 81044c8:	e000      	b.n	81044cc <HAL_DMA_Init+0x5c8>
 81044ca:	2300      	movs	r3, #0
 81044cc:	2b00      	cmp	r3, #0
 81044ce:	d032      	beq.n	8104536 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81044d0:	6878      	ldr	r0, [r7, #4]
 81044d2:	f001 f8c9 	bl	8105668 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	689b      	ldr	r3, [r3, #8]
 81044da:	2b80      	cmp	r3, #128	; 0x80
 81044dc:	d102      	bne.n	81044e4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	2200      	movs	r2, #0
 81044e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	685a      	ldr	r2, [r3, #4]
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044ec:	b2d2      	uxtb	r2, r2
 81044ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044f4:	687a      	ldr	r2, [r7, #4]
 81044f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81044f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	685b      	ldr	r3, [r3, #4]
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d010      	beq.n	8104524 <HAL_DMA_Init+0x620>
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	685b      	ldr	r3, [r3, #4]
 8104506:	2b08      	cmp	r3, #8
 8104508:	d80c      	bhi.n	8104524 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810450a:	6878      	ldr	r0, [r7, #4]
 810450c:	f001 f946 	bl	810579c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104514:	2200      	movs	r2, #0
 8104516:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810451c:	687a      	ldr	r2, [r7, #4]
 810451e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104520:	605a      	str	r2, [r3, #4]
 8104522:	e008      	b.n	8104536 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	2200      	movs	r2, #0
 8104528:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	2200      	movs	r2, #0
 810452e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	2200      	movs	r2, #0
 8104534:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	2200      	movs	r2, #0
 810453a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	2201      	movs	r2, #1
 8104540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8104544:	2300      	movs	r3, #0
}
 8104546:	4618      	mov	r0, r3
 8104548:	3718      	adds	r7, #24
 810454a:	46bd      	mov	sp, r7
 810454c:	bd80      	pop	{r7, pc}
 810454e:	bf00      	nop
 8104550:	a7fdabf8 	.word	0xa7fdabf8
 8104554:	cccccccd 	.word	0xcccccccd
 8104558:	40020010 	.word	0x40020010
 810455c:	40020028 	.word	0x40020028
 8104560:	40020040 	.word	0x40020040
 8104564:	40020058 	.word	0x40020058
 8104568:	40020070 	.word	0x40020070
 810456c:	40020088 	.word	0x40020088
 8104570:	400200a0 	.word	0x400200a0
 8104574:	400200b8 	.word	0x400200b8
 8104578:	40020410 	.word	0x40020410
 810457c:	40020428 	.word	0x40020428
 8104580:	40020440 	.word	0x40020440
 8104584:	40020458 	.word	0x40020458
 8104588:	40020470 	.word	0x40020470
 810458c:	40020488 	.word	0x40020488
 8104590:	400204a0 	.word	0x400204a0
 8104594:	400204b8 	.word	0x400204b8
 8104598:	58025408 	.word	0x58025408
 810459c:	5802541c 	.word	0x5802541c
 81045a0:	58025430 	.word	0x58025430
 81045a4:	58025444 	.word	0x58025444
 81045a8:	58025458 	.word	0x58025458
 81045ac:	5802546c 	.word	0x5802546c
 81045b0:	58025480 	.word	0x58025480
 81045b4:	58025494 	.word	0x58025494

081045b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81045b8:	b580      	push	{r7, lr}
 81045ba:	b08a      	sub	sp, #40	; 0x28
 81045bc:	af00      	add	r7, sp, #0
 81045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81045c0:	2300      	movs	r3, #0
 81045c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81045c4:	4b67      	ldr	r3, [pc, #412]	; (8104764 <HAL_DMA_IRQHandler+0x1ac>)
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	4a67      	ldr	r2, [pc, #412]	; (8104768 <HAL_DMA_IRQHandler+0x1b0>)
 81045ca:	fba2 2303 	umull	r2, r3, r2, r3
 81045ce:	0a9b      	lsrs	r3, r3, #10
 81045d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81045de:	6a3b      	ldr	r3, [r7, #32]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81045e4:	69fb      	ldr	r3, [r7, #28]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	4a5f      	ldr	r2, [pc, #380]	; (810476c <HAL_DMA_IRQHandler+0x1b4>)
 81045f0:	4293      	cmp	r3, r2
 81045f2:	d04a      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	4a5d      	ldr	r2, [pc, #372]	; (8104770 <HAL_DMA_IRQHandler+0x1b8>)
 81045fa:	4293      	cmp	r3, r2
 81045fc:	d045      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	4a5c      	ldr	r2, [pc, #368]	; (8104774 <HAL_DMA_IRQHandler+0x1bc>)
 8104604:	4293      	cmp	r3, r2
 8104606:	d040      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	4a5a      	ldr	r2, [pc, #360]	; (8104778 <HAL_DMA_IRQHandler+0x1c0>)
 810460e:	4293      	cmp	r3, r2
 8104610:	d03b      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	4a59      	ldr	r2, [pc, #356]	; (810477c <HAL_DMA_IRQHandler+0x1c4>)
 8104618:	4293      	cmp	r3, r2
 810461a:	d036      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	4a57      	ldr	r2, [pc, #348]	; (8104780 <HAL_DMA_IRQHandler+0x1c8>)
 8104622:	4293      	cmp	r3, r2
 8104624:	d031      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4a56      	ldr	r2, [pc, #344]	; (8104784 <HAL_DMA_IRQHandler+0x1cc>)
 810462c:	4293      	cmp	r3, r2
 810462e:	d02c      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a54      	ldr	r2, [pc, #336]	; (8104788 <HAL_DMA_IRQHandler+0x1d0>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d027      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a53      	ldr	r2, [pc, #332]	; (810478c <HAL_DMA_IRQHandler+0x1d4>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d022      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a51      	ldr	r2, [pc, #324]	; (8104790 <HAL_DMA_IRQHandler+0x1d8>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d01d      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	4a50      	ldr	r2, [pc, #320]	; (8104794 <HAL_DMA_IRQHandler+0x1dc>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d018      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	4a4e      	ldr	r2, [pc, #312]	; (8104798 <HAL_DMA_IRQHandler+0x1e0>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d013      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	4a4d      	ldr	r2, [pc, #308]	; (810479c <HAL_DMA_IRQHandler+0x1e4>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d00e      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	4a4b      	ldr	r2, [pc, #300]	; (81047a0 <HAL_DMA_IRQHandler+0x1e8>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d009      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	4a4a      	ldr	r2, [pc, #296]	; (81047a4 <HAL_DMA_IRQHandler+0x1ec>)
 810467c:	4293      	cmp	r3, r2
 810467e:	d004      	beq.n	810468a <HAL_DMA_IRQHandler+0xd2>
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	4a48      	ldr	r2, [pc, #288]	; (81047a8 <HAL_DMA_IRQHandler+0x1f0>)
 8104686:	4293      	cmp	r3, r2
 8104688:	d101      	bne.n	810468e <HAL_DMA_IRQHandler+0xd6>
 810468a:	2301      	movs	r3, #1
 810468c:	e000      	b.n	8104690 <HAL_DMA_IRQHandler+0xd8>
 810468e:	2300      	movs	r3, #0
 8104690:	2b00      	cmp	r3, #0
 8104692:	f000 842b 	beq.w	8104eec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810469a:	f003 031f 	and.w	r3, r3, #31
 810469e:	2208      	movs	r2, #8
 81046a0:	409a      	lsls	r2, r3
 81046a2:	69bb      	ldr	r3, [r7, #24]
 81046a4:	4013      	ands	r3, r2
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	f000 80a2 	beq.w	81047f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	4a2e      	ldr	r2, [pc, #184]	; (810476c <HAL_DMA_IRQHandler+0x1b4>)
 81046b2:	4293      	cmp	r3, r2
 81046b4:	d04a      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	4a2d      	ldr	r2, [pc, #180]	; (8104770 <HAL_DMA_IRQHandler+0x1b8>)
 81046bc:	4293      	cmp	r3, r2
 81046be:	d045      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	4a2b      	ldr	r2, [pc, #172]	; (8104774 <HAL_DMA_IRQHandler+0x1bc>)
 81046c6:	4293      	cmp	r3, r2
 81046c8:	d040      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	4a2a      	ldr	r2, [pc, #168]	; (8104778 <HAL_DMA_IRQHandler+0x1c0>)
 81046d0:	4293      	cmp	r3, r2
 81046d2:	d03b      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	4a28      	ldr	r2, [pc, #160]	; (810477c <HAL_DMA_IRQHandler+0x1c4>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d036      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4a27      	ldr	r2, [pc, #156]	; (8104780 <HAL_DMA_IRQHandler+0x1c8>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d031      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	4a25      	ldr	r2, [pc, #148]	; (8104784 <HAL_DMA_IRQHandler+0x1cc>)
 81046ee:	4293      	cmp	r3, r2
 81046f0:	d02c      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	4a24      	ldr	r2, [pc, #144]	; (8104788 <HAL_DMA_IRQHandler+0x1d0>)
 81046f8:	4293      	cmp	r3, r2
 81046fa:	d027      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	4a22      	ldr	r2, [pc, #136]	; (810478c <HAL_DMA_IRQHandler+0x1d4>)
 8104702:	4293      	cmp	r3, r2
 8104704:	d022      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	4a21      	ldr	r2, [pc, #132]	; (8104790 <HAL_DMA_IRQHandler+0x1d8>)
 810470c:	4293      	cmp	r3, r2
 810470e:	d01d      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	4a1f      	ldr	r2, [pc, #124]	; (8104794 <HAL_DMA_IRQHandler+0x1dc>)
 8104716:	4293      	cmp	r3, r2
 8104718:	d018      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	4a1e      	ldr	r2, [pc, #120]	; (8104798 <HAL_DMA_IRQHandler+0x1e0>)
 8104720:	4293      	cmp	r3, r2
 8104722:	d013      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	4a1c      	ldr	r2, [pc, #112]	; (810479c <HAL_DMA_IRQHandler+0x1e4>)
 810472a:	4293      	cmp	r3, r2
 810472c:	d00e      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	4a1b      	ldr	r2, [pc, #108]	; (81047a0 <HAL_DMA_IRQHandler+0x1e8>)
 8104734:	4293      	cmp	r3, r2
 8104736:	d009      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	4a19      	ldr	r2, [pc, #100]	; (81047a4 <HAL_DMA_IRQHandler+0x1ec>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d004      	beq.n	810474c <HAL_DMA_IRQHandler+0x194>
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	4a18      	ldr	r2, [pc, #96]	; (81047a8 <HAL_DMA_IRQHandler+0x1f0>)
 8104748:	4293      	cmp	r3, r2
 810474a:	d12f      	bne.n	81047ac <HAL_DMA_IRQHandler+0x1f4>
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	f003 0304 	and.w	r3, r3, #4
 8104756:	2b00      	cmp	r3, #0
 8104758:	bf14      	ite	ne
 810475a:	2301      	movne	r3, #1
 810475c:	2300      	moveq	r3, #0
 810475e:	b2db      	uxtb	r3, r3
 8104760:	e02e      	b.n	81047c0 <HAL_DMA_IRQHandler+0x208>
 8104762:	bf00      	nop
 8104764:	10007370 	.word	0x10007370
 8104768:	1b4e81b5 	.word	0x1b4e81b5
 810476c:	40020010 	.word	0x40020010
 8104770:	40020028 	.word	0x40020028
 8104774:	40020040 	.word	0x40020040
 8104778:	40020058 	.word	0x40020058
 810477c:	40020070 	.word	0x40020070
 8104780:	40020088 	.word	0x40020088
 8104784:	400200a0 	.word	0x400200a0
 8104788:	400200b8 	.word	0x400200b8
 810478c:	40020410 	.word	0x40020410
 8104790:	40020428 	.word	0x40020428
 8104794:	40020440 	.word	0x40020440
 8104798:	40020458 	.word	0x40020458
 810479c:	40020470 	.word	0x40020470
 81047a0:	40020488 	.word	0x40020488
 81047a4:	400204a0 	.word	0x400204a0
 81047a8:	400204b8 	.word	0x400204b8
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	f003 0308 	and.w	r3, r3, #8
 81047b6:	2b00      	cmp	r3, #0
 81047b8:	bf14      	ite	ne
 81047ba:	2301      	movne	r3, #1
 81047bc:	2300      	moveq	r3, #0
 81047be:	b2db      	uxtb	r3, r3
 81047c0:	2b00      	cmp	r3, #0
 81047c2:	d015      	beq.n	81047f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	681a      	ldr	r2, [r3, #0]
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	f022 0204 	bic.w	r2, r2, #4
 81047d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047d8:	f003 031f 	and.w	r3, r3, #31
 81047dc:	2208      	movs	r2, #8
 81047de:	409a      	lsls	r2, r3
 81047e0:	6a3b      	ldr	r3, [r7, #32]
 81047e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047e8:	f043 0201 	orr.w	r2, r3, #1
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047f4:	f003 031f 	and.w	r3, r3, #31
 81047f8:	69ba      	ldr	r2, [r7, #24]
 81047fa:	fa22 f303 	lsr.w	r3, r2, r3
 81047fe:	f003 0301 	and.w	r3, r3, #1
 8104802:	2b00      	cmp	r3, #0
 8104804:	d06e      	beq.n	81048e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a69      	ldr	r2, [pc, #420]	; (81049b0 <HAL_DMA_IRQHandler+0x3f8>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d04a      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a67      	ldr	r2, [pc, #412]	; (81049b4 <HAL_DMA_IRQHandler+0x3fc>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d045      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a66      	ldr	r2, [pc, #408]	; (81049b8 <HAL_DMA_IRQHandler+0x400>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d040      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a64      	ldr	r2, [pc, #400]	; (81049bc <HAL_DMA_IRQHandler+0x404>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d03b      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a63      	ldr	r2, [pc, #396]	; (81049c0 <HAL_DMA_IRQHandler+0x408>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d036      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a61      	ldr	r2, [pc, #388]	; (81049c4 <HAL_DMA_IRQHandler+0x40c>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d031      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a60      	ldr	r2, [pc, #384]	; (81049c8 <HAL_DMA_IRQHandler+0x410>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d02c      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	4a5e      	ldr	r2, [pc, #376]	; (81049cc <HAL_DMA_IRQHandler+0x414>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d027      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a5d      	ldr	r2, [pc, #372]	; (81049d0 <HAL_DMA_IRQHandler+0x418>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d022      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	4a5b      	ldr	r2, [pc, #364]	; (81049d4 <HAL_DMA_IRQHandler+0x41c>)
 8104866:	4293      	cmp	r3, r2
 8104868:	d01d      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	4a5a      	ldr	r2, [pc, #360]	; (81049d8 <HAL_DMA_IRQHandler+0x420>)
 8104870:	4293      	cmp	r3, r2
 8104872:	d018      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	4a58      	ldr	r2, [pc, #352]	; (81049dc <HAL_DMA_IRQHandler+0x424>)
 810487a:	4293      	cmp	r3, r2
 810487c:	d013      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	4a57      	ldr	r2, [pc, #348]	; (81049e0 <HAL_DMA_IRQHandler+0x428>)
 8104884:	4293      	cmp	r3, r2
 8104886:	d00e      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4a55      	ldr	r2, [pc, #340]	; (81049e4 <HAL_DMA_IRQHandler+0x42c>)
 810488e:	4293      	cmp	r3, r2
 8104890:	d009      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	4a54      	ldr	r2, [pc, #336]	; (81049e8 <HAL_DMA_IRQHandler+0x430>)
 8104898:	4293      	cmp	r3, r2
 810489a:	d004      	beq.n	81048a6 <HAL_DMA_IRQHandler+0x2ee>
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a52      	ldr	r2, [pc, #328]	; (81049ec <HAL_DMA_IRQHandler+0x434>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d10a      	bne.n	81048bc <HAL_DMA_IRQHandler+0x304>
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	695b      	ldr	r3, [r3, #20]
 81048ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	bf14      	ite	ne
 81048b4:	2301      	movne	r3, #1
 81048b6:	2300      	moveq	r3, #0
 81048b8:	b2db      	uxtb	r3, r3
 81048ba:	e003      	b.n	81048c4 <HAL_DMA_IRQHandler+0x30c>
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	2300      	movs	r3, #0
 81048c4:	2b00      	cmp	r3, #0
 81048c6:	d00d      	beq.n	81048e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048cc:	f003 031f 	and.w	r3, r3, #31
 81048d0:	2201      	movs	r2, #1
 81048d2:	409a      	lsls	r2, r3
 81048d4:	6a3b      	ldr	r3, [r7, #32]
 81048d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048dc:	f043 0202 	orr.w	r2, r3, #2
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048e8:	f003 031f 	and.w	r3, r3, #31
 81048ec:	2204      	movs	r2, #4
 81048ee:	409a      	lsls	r2, r3
 81048f0:	69bb      	ldr	r3, [r7, #24]
 81048f2:	4013      	ands	r3, r2
 81048f4:	2b00      	cmp	r3, #0
 81048f6:	f000 808f 	beq.w	8104a18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4a2c      	ldr	r2, [pc, #176]	; (81049b0 <HAL_DMA_IRQHandler+0x3f8>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d04a      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	4a2a      	ldr	r2, [pc, #168]	; (81049b4 <HAL_DMA_IRQHandler+0x3fc>)
 810490a:	4293      	cmp	r3, r2
 810490c:	d045      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	681b      	ldr	r3, [r3, #0]
 8104912:	4a29      	ldr	r2, [pc, #164]	; (81049b8 <HAL_DMA_IRQHandler+0x400>)
 8104914:	4293      	cmp	r3, r2
 8104916:	d040      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	4a27      	ldr	r2, [pc, #156]	; (81049bc <HAL_DMA_IRQHandler+0x404>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d03b      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	4a26      	ldr	r2, [pc, #152]	; (81049c0 <HAL_DMA_IRQHandler+0x408>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d036      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	4a24      	ldr	r2, [pc, #144]	; (81049c4 <HAL_DMA_IRQHandler+0x40c>)
 8104932:	4293      	cmp	r3, r2
 8104934:	d031      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4a23      	ldr	r2, [pc, #140]	; (81049c8 <HAL_DMA_IRQHandler+0x410>)
 810493c:	4293      	cmp	r3, r2
 810493e:	d02c      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	4a21      	ldr	r2, [pc, #132]	; (81049cc <HAL_DMA_IRQHandler+0x414>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d027      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	4a20      	ldr	r2, [pc, #128]	; (81049d0 <HAL_DMA_IRQHandler+0x418>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d022      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	681b      	ldr	r3, [r3, #0]
 8104958:	4a1e      	ldr	r2, [pc, #120]	; (81049d4 <HAL_DMA_IRQHandler+0x41c>)
 810495a:	4293      	cmp	r3, r2
 810495c:	d01d      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 810495e:	687b      	ldr	r3, [r7, #4]
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	4a1d      	ldr	r2, [pc, #116]	; (81049d8 <HAL_DMA_IRQHandler+0x420>)
 8104964:	4293      	cmp	r3, r2
 8104966:	d018      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104968:	687b      	ldr	r3, [r7, #4]
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	4a1b      	ldr	r2, [pc, #108]	; (81049dc <HAL_DMA_IRQHandler+0x424>)
 810496e:	4293      	cmp	r3, r2
 8104970:	d013      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	4a1a      	ldr	r2, [pc, #104]	; (81049e0 <HAL_DMA_IRQHandler+0x428>)
 8104978:	4293      	cmp	r3, r2
 810497a:	d00e      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	4a18      	ldr	r2, [pc, #96]	; (81049e4 <HAL_DMA_IRQHandler+0x42c>)
 8104982:	4293      	cmp	r3, r2
 8104984:	d009      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	4a17      	ldr	r2, [pc, #92]	; (81049e8 <HAL_DMA_IRQHandler+0x430>)
 810498c:	4293      	cmp	r3, r2
 810498e:	d004      	beq.n	810499a <HAL_DMA_IRQHandler+0x3e2>
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4a15      	ldr	r2, [pc, #84]	; (81049ec <HAL_DMA_IRQHandler+0x434>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d12a      	bne.n	81049f0 <HAL_DMA_IRQHandler+0x438>
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	f003 0302 	and.w	r3, r3, #2
 81049a4:	2b00      	cmp	r3, #0
 81049a6:	bf14      	ite	ne
 81049a8:	2301      	movne	r3, #1
 81049aa:	2300      	moveq	r3, #0
 81049ac:	b2db      	uxtb	r3, r3
 81049ae:	e023      	b.n	81049f8 <HAL_DMA_IRQHandler+0x440>
 81049b0:	40020010 	.word	0x40020010
 81049b4:	40020028 	.word	0x40020028
 81049b8:	40020040 	.word	0x40020040
 81049bc:	40020058 	.word	0x40020058
 81049c0:	40020070 	.word	0x40020070
 81049c4:	40020088 	.word	0x40020088
 81049c8:	400200a0 	.word	0x400200a0
 81049cc:	400200b8 	.word	0x400200b8
 81049d0:	40020410 	.word	0x40020410
 81049d4:	40020428 	.word	0x40020428
 81049d8:	40020440 	.word	0x40020440
 81049dc:	40020458 	.word	0x40020458
 81049e0:	40020470 	.word	0x40020470
 81049e4:	40020488 	.word	0x40020488
 81049e8:	400204a0 	.word	0x400204a0
 81049ec:	400204b8 	.word	0x400204b8
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	2300      	movs	r3, #0
 81049f8:	2b00      	cmp	r3, #0
 81049fa:	d00d      	beq.n	8104a18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a00:	f003 031f 	and.w	r3, r3, #31
 8104a04:	2204      	movs	r2, #4
 8104a06:	409a      	lsls	r2, r3
 8104a08:	6a3b      	ldr	r3, [r7, #32]
 8104a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a10:	f043 0204 	orr.w	r2, r3, #4
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a1c:	f003 031f 	and.w	r3, r3, #31
 8104a20:	2210      	movs	r2, #16
 8104a22:	409a      	lsls	r2, r3
 8104a24:	69bb      	ldr	r3, [r7, #24]
 8104a26:	4013      	ands	r3, r2
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	f000 80a6 	beq.w	8104b7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a85      	ldr	r2, [pc, #532]	; (8104c48 <HAL_DMA_IRQHandler+0x690>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d04a      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a83      	ldr	r2, [pc, #524]	; (8104c4c <HAL_DMA_IRQHandler+0x694>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d045      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a82      	ldr	r2, [pc, #520]	; (8104c50 <HAL_DMA_IRQHandler+0x698>)
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d040      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a4c:	687b      	ldr	r3, [r7, #4]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	4a80      	ldr	r2, [pc, #512]	; (8104c54 <HAL_DMA_IRQHandler+0x69c>)
 8104a52:	4293      	cmp	r3, r2
 8104a54:	d03b      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	4a7f      	ldr	r2, [pc, #508]	; (8104c58 <HAL_DMA_IRQHandler+0x6a0>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d036      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4a7d      	ldr	r2, [pc, #500]	; (8104c5c <HAL_DMA_IRQHandler+0x6a4>)
 8104a66:	4293      	cmp	r3, r2
 8104a68:	d031      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a7c      	ldr	r2, [pc, #496]	; (8104c60 <HAL_DMA_IRQHandler+0x6a8>)
 8104a70:	4293      	cmp	r3, r2
 8104a72:	d02c      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a7a      	ldr	r2, [pc, #488]	; (8104c64 <HAL_DMA_IRQHandler+0x6ac>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d027      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	4a79      	ldr	r2, [pc, #484]	; (8104c68 <HAL_DMA_IRQHandler+0x6b0>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d022      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	4a77      	ldr	r2, [pc, #476]	; (8104c6c <HAL_DMA_IRQHandler+0x6b4>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d01d      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	4a76      	ldr	r2, [pc, #472]	; (8104c70 <HAL_DMA_IRQHandler+0x6b8>)
 8104a98:	4293      	cmp	r3, r2
 8104a9a:	d018      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	4a74      	ldr	r2, [pc, #464]	; (8104c74 <HAL_DMA_IRQHandler+0x6bc>)
 8104aa2:	4293      	cmp	r3, r2
 8104aa4:	d013      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	4a73      	ldr	r2, [pc, #460]	; (8104c78 <HAL_DMA_IRQHandler+0x6c0>)
 8104aac:	4293      	cmp	r3, r2
 8104aae:	d00e      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	4a71      	ldr	r2, [pc, #452]	; (8104c7c <HAL_DMA_IRQHandler+0x6c4>)
 8104ab6:	4293      	cmp	r3, r2
 8104ab8:	d009      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4a70      	ldr	r2, [pc, #448]	; (8104c80 <HAL_DMA_IRQHandler+0x6c8>)
 8104ac0:	4293      	cmp	r3, r2
 8104ac2:	d004      	beq.n	8104ace <HAL_DMA_IRQHandler+0x516>
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	4a6e      	ldr	r2, [pc, #440]	; (8104c84 <HAL_DMA_IRQHandler+0x6cc>)
 8104aca:	4293      	cmp	r3, r2
 8104acc:	d10a      	bne.n	8104ae4 <HAL_DMA_IRQHandler+0x52c>
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	f003 0308 	and.w	r3, r3, #8
 8104ad8:	2b00      	cmp	r3, #0
 8104ada:	bf14      	ite	ne
 8104adc:	2301      	movne	r3, #1
 8104ade:	2300      	moveq	r3, #0
 8104ae0:	b2db      	uxtb	r3, r3
 8104ae2:	e009      	b.n	8104af8 <HAL_DMA_IRQHandler+0x540>
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	f003 0304 	and.w	r3, r3, #4
 8104aee:	2b00      	cmp	r3, #0
 8104af0:	bf14      	ite	ne
 8104af2:	2301      	movne	r3, #1
 8104af4:	2300      	moveq	r3, #0
 8104af6:	b2db      	uxtb	r3, r3
 8104af8:	2b00      	cmp	r3, #0
 8104afa:	d03e      	beq.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b00:	f003 031f 	and.w	r3, r3, #31
 8104b04:	2210      	movs	r2, #16
 8104b06:	409a      	lsls	r2, r3
 8104b08:	6a3b      	ldr	r3, [r7, #32]
 8104b0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104b16:	2b00      	cmp	r3, #0
 8104b18:	d018      	beq.n	8104b4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104b24:	2b00      	cmp	r3, #0
 8104b26:	d108      	bne.n	8104b3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	d024      	beq.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b34:	6878      	ldr	r0, [r7, #4]
 8104b36:	4798      	blx	r3
 8104b38:	e01f      	b.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d01b      	beq.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104b46:	6878      	ldr	r0, [r7, #4]
 8104b48:	4798      	blx	r3
 8104b4a:	e016      	b.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d107      	bne.n	8104b6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	681a      	ldr	r2, [r3, #0]
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	f022 0208 	bic.w	r2, r2, #8
 8104b68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b6e:	2b00      	cmp	r3, #0
 8104b70:	d003      	beq.n	8104b7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b76:	6878      	ldr	r0, [r7, #4]
 8104b78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b7e:	f003 031f 	and.w	r3, r3, #31
 8104b82:	2220      	movs	r2, #32
 8104b84:	409a      	lsls	r2, r3
 8104b86:	69bb      	ldr	r3, [r7, #24]
 8104b88:	4013      	ands	r3, r2
 8104b8a:	2b00      	cmp	r3, #0
 8104b8c:	f000 8110 	beq.w	8104db0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	4a2c      	ldr	r2, [pc, #176]	; (8104c48 <HAL_DMA_IRQHandler+0x690>)
 8104b96:	4293      	cmp	r3, r2
 8104b98:	d04a      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	4a2b      	ldr	r2, [pc, #172]	; (8104c4c <HAL_DMA_IRQHandler+0x694>)
 8104ba0:	4293      	cmp	r3, r2
 8104ba2:	d045      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	4a29      	ldr	r2, [pc, #164]	; (8104c50 <HAL_DMA_IRQHandler+0x698>)
 8104baa:	4293      	cmp	r3, r2
 8104bac:	d040      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	4a28      	ldr	r2, [pc, #160]	; (8104c54 <HAL_DMA_IRQHandler+0x69c>)
 8104bb4:	4293      	cmp	r3, r2
 8104bb6:	d03b      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	4a26      	ldr	r2, [pc, #152]	; (8104c58 <HAL_DMA_IRQHandler+0x6a0>)
 8104bbe:	4293      	cmp	r3, r2
 8104bc0:	d036      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	4a25      	ldr	r2, [pc, #148]	; (8104c5c <HAL_DMA_IRQHandler+0x6a4>)
 8104bc8:	4293      	cmp	r3, r2
 8104bca:	d031      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	4a23      	ldr	r2, [pc, #140]	; (8104c60 <HAL_DMA_IRQHandler+0x6a8>)
 8104bd2:	4293      	cmp	r3, r2
 8104bd4:	d02c      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a22      	ldr	r2, [pc, #136]	; (8104c64 <HAL_DMA_IRQHandler+0x6ac>)
 8104bdc:	4293      	cmp	r3, r2
 8104bde:	d027      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	4a20      	ldr	r2, [pc, #128]	; (8104c68 <HAL_DMA_IRQHandler+0x6b0>)
 8104be6:	4293      	cmp	r3, r2
 8104be8:	d022      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	4a1f      	ldr	r2, [pc, #124]	; (8104c6c <HAL_DMA_IRQHandler+0x6b4>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d01d      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	4a1d      	ldr	r2, [pc, #116]	; (8104c70 <HAL_DMA_IRQHandler+0x6b8>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d018      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	4a1c      	ldr	r2, [pc, #112]	; (8104c74 <HAL_DMA_IRQHandler+0x6bc>)
 8104c04:	4293      	cmp	r3, r2
 8104c06:	d013      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	4a1a      	ldr	r2, [pc, #104]	; (8104c78 <HAL_DMA_IRQHandler+0x6c0>)
 8104c0e:	4293      	cmp	r3, r2
 8104c10:	d00e      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a19      	ldr	r2, [pc, #100]	; (8104c7c <HAL_DMA_IRQHandler+0x6c4>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d009      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	4a17      	ldr	r2, [pc, #92]	; (8104c80 <HAL_DMA_IRQHandler+0x6c8>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d004      	beq.n	8104c30 <HAL_DMA_IRQHandler+0x678>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	4a16      	ldr	r2, [pc, #88]	; (8104c84 <HAL_DMA_IRQHandler+0x6cc>)
 8104c2c:	4293      	cmp	r3, r2
 8104c2e:	d12b      	bne.n	8104c88 <HAL_DMA_IRQHandler+0x6d0>
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	f003 0310 	and.w	r3, r3, #16
 8104c3a:	2b00      	cmp	r3, #0
 8104c3c:	bf14      	ite	ne
 8104c3e:	2301      	movne	r3, #1
 8104c40:	2300      	moveq	r3, #0
 8104c42:	b2db      	uxtb	r3, r3
 8104c44:	e02a      	b.n	8104c9c <HAL_DMA_IRQHandler+0x6e4>
 8104c46:	bf00      	nop
 8104c48:	40020010 	.word	0x40020010
 8104c4c:	40020028 	.word	0x40020028
 8104c50:	40020040 	.word	0x40020040
 8104c54:	40020058 	.word	0x40020058
 8104c58:	40020070 	.word	0x40020070
 8104c5c:	40020088 	.word	0x40020088
 8104c60:	400200a0 	.word	0x400200a0
 8104c64:	400200b8 	.word	0x400200b8
 8104c68:	40020410 	.word	0x40020410
 8104c6c:	40020428 	.word	0x40020428
 8104c70:	40020440 	.word	0x40020440
 8104c74:	40020458 	.word	0x40020458
 8104c78:	40020470 	.word	0x40020470
 8104c7c:	40020488 	.word	0x40020488
 8104c80:	400204a0 	.word	0x400204a0
 8104c84:	400204b8 	.word	0x400204b8
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	f003 0302 	and.w	r3, r3, #2
 8104c92:	2b00      	cmp	r3, #0
 8104c94:	bf14      	ite	ne
 8104c96:	2301      	movne	r3, #1
 8104c98:	2300      	moveq	r3, #0
 8104c9a:	b2db      	uxtb	r3, r3
 8104c9c:	2b00      	cmp	r3, #0
 8104c9e:	f000 8087 	beq.w	8104db0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ca6:	f003 031f 	and.w	r3, r3, #31
 8104caa:	2220      	movs	r2, #32
 8104cac:	409a      	lsls	r2, r3
 8104cae:	6a3b      	ldr	r3, [r7, #32]
 8104cb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104cb8:	b2db      	uxtb	r3, r3
 8104cba:	2b04      	cmp	r3, #4
 8104cbc:	d139      	bne.n	8104d32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	681a      	ldr	r2, [r3, #0]
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	f022 0216 	bic.w	r2, r2, #22
 8104ccc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	695a      	ldr	r2, [r3, #20]
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104cdc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ce2:	2b00      	cmp	r3, #0
 8104ce4:	d103      	bne.n	8104cee <HAL_DMA_IRQHandler+0x736>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d007      	beq.n	8104cfe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	681a      	ldr	r2, [r3, #0]
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f022 0208 	bic.w	r2, r2, #8
 8104cfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104d02:	f003 031f 	and.w	r3, r3, #31
 8104d06:	223f      	movs	r2, #63	; 0x3f
 8104d08:	409a      	lsls	r2, r3
 8104d0a:	6a3b      	ldr	r3, [r7, #32]
 8104d0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	2201      	movs	r2, #1
 8104d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	2200      	movs	r2, #0
 8104d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d22:	2b00      	cmp	r3, #0
 8104d24:	f000 834a 	beq.w	81053bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d2c:	6878      	ldr	r0, [r7, #4]
 8104d2e:	4798      	blx	r3
          }
          return;
 8104d30:	e344      	b.n	81053bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d018      	beq.n	8104d72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104d4a:	2b00      	cmp	r3, #0
 8104d4c:	d108      	bne.n	8104d60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d52:	2b00      	cmp	r3, #0
 8104d54:	d02c      	beq.n	8104db0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d5a:	6878      	ldr	r0, [r7, #4]
 8104d5c:	4798      	blx	r3
 8104d5e:	e027      	b.n	8104db0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d64:	2b00      	cmp	r3, #0
 8104d66:	d023      	beq.n	8104db0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104d6c:	6878      	ldr	r0, [r7, #4]
 8104d6e:	4798      	blx	r3
 8104d70:	e01e      	b.n	8104db0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d7c:	2b00      	cmp	r3, #0
 8104d7e:	d10f      	bne.n	8104da0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	681a      	ldr	r2, [r3, #0]
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	f022 0210 	bic.w	r2, r2, #16
 8104d8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	2201      	movs	r2, #1
 8104d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	2200      	movs	r2, #0
 8104d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d003      	beq.n	8104db0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104dac:	6878      	ldr	r0, [r7, #4]
 8104dae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	f000 8306 	beq.w	81053c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dbe:	f003 0301 	and.w	r3, r3, #1
 8104dc2:	2b00      	cmp	r3, #0
 8104dc4:	f000 8088 	beq.w	8104ed8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8104dc8:	687b      	ldr	r3, [r7, #4]
 8104dca:	2204      	movs	r2, #4
 8104dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	681b      	ldr	r3, [r3, #0]
 8104dd4:	4a7a      	ldr	r2, [pc, #488]	; (8104fc0 <HAL_DMA_IRQHandler+0xa08>)
 8104dd6:	4293      	cmp	r3, r2
 8104dd8:	d04a      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	4a79      	ldr	r2, [pc, #484]	; (8104fc4 <HAL_DMA_IRQHandler+0xa0c>)
 8104de0:	4293      	cmp	r3, r2
 8104de2:	d045      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	4a77      	ldr	r2, [pc, #476]	; (8104fc8 <HAL_DMA_IRQHandler+0xa10>)
 8104dea:	4293      	cmp	r3, r2
 8104dec:	d040      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	681b      	ldr	r3, [r3, #0]
 8104df2:	4a76      	ldr	r2, [pc, #472]	; (8104fcc <HAL_DMA_IRQHandler+0xa14>)
 8104df4:	4293      	cmp	r3, r2
 8104df6:	d03b      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	4a74      	ldr	r2, [pc, #464]	; (8104fd0 <HAL_DMA_IRQHandler+0xa18>)
 8104dfe:	4293      	cmp	r3, r2
 8104e00:	d036      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	681b      	ldr	r3, [r3, #0]
 8104e06:	4a73      	ldr	r2, [pc, #460]	; (8104fd4 <HAL_DMA_IRQHandler+0xa1c>)
 8104e08:	4293      	cmp	r3, r2
 8104e0a:	d031      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	4a71      	ldr	r2, [pc, #452]	; (8104fd8 <HAL_DMA_IRQHandler+0xa20>)
 8104e12:	4293      	cmp	r3, r2
 8104e14:	d02c      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	4a70      	ldr	r2, [pc, #448]	; (8104fdc <HAL_DMA_IRQHandler+0xa24>)
 8104e1c:	4293      	cmp	r3, r2
 8104e1e:	d027      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	4a6e      	ldr	r2, [pc, #440]	; (8104fe0 <HAL_DMA_IRQHandler+0xa28>)
 8104e26:	4293      	cmp	r3, r2
 8104e28:	d022      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	4a6d      	ldr	r2, [pc, #436]	; (8104fe4 <HAL_DMA_IRQHandler+0xa2c>)
 8104e30:	4293      	cmp	r3, r2
 8104e32:	d01d      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	681b      	ldr	r3, [r3, #0]
 8104e38:	4a6b      	ldr	r2, [pc, #428]	; (8104fe8 <HAL_DMA_IRQHandler+0xa30>)
 8104e3a:	4293      	cmp	r3, r2
 8104e3c:	d018      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	681b      	ldr	r3, [r3, #0]
 8104e42:	4a6a      	ldr	r2, [pc, #424]	; (8104fec <HAL_DMA_IRQHandler+0xa34>)
 8104e44:	4293      	cmp	r3, r2
 8104e46:	d013      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	4a68      	ldr	r2, [pc, #416]	; (8104ff0 <HAL_DMA_IRQHandler+0xa38>)
 8104e4e:	4293      	cmp	r3, r2
 8104e50:	d00e      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	681b      	ldr	r3, [r3, #0]
 8104e56:	4a67      	ldr	r2, [pc, #412]	; (8104ff4 <HAL_DMA_IRQHandler+0xa3c>)
 8104e58:	4293      	cmp	r3, r2
 8104e5a:	d009      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	681b      	ldr	r3, [r3, #0]
 8104e60:	4a65      	ldr	r2, [pc, #404]	; (8104ff8 <HAL_DMA_IRQHandler+0xa40>)
 8104e62:	4293      	cmp	r3, r2
 8104e64:	d004      	beq.n	8104e70 <HAL_DMA_IRQHandler+0x8b8>
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	4a64      	ldr	r2, [pc, #400]	; (8104ffc <HAL_DMA_IRQHandler+0xa44>)
 8104e6c:	4293      	cmp	r3, r2
 8104e6e:	d108      	bne.n	8104e82 <HAL_DMA_IRQHandler+0x8ca>
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	681a      	ldr	r2, [r3, #0]
 8104e76:	687b      	ldr	r3, [r7, #4]
 8104e78:	681b      	ldr	r3, [r3, #0]
 8104e7a:	f022 0201 	bic.w	r2, r2, #1
 8104e7e:	601a      	str	r2, [r3, #0]
 8104e80:	e007      	b.n	8104e92 <HAL_DMA_IRQHandler+0x8da>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	681a      	ldr	r2, [r3, #0]
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	f022 0201 	bic.w	r2, r2, #1
 8104e90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8104e92:	68fb      	ldr	r3, [r7, #12]
 8104e94:	3301      	adds	r3, #1
 8104e96:	60fb      	str	r3, [r7, #12]
 8104e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104e9a:	429a      	cmp	r2, r3
 8104e9c:	d307      	bcc.n	8104eae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8104e9e:	687b      	ldr	r3, [r7, #4]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	f003 0301 	and.w	r3, r3, #1
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d1f2      	bne.n	8104e92 <HAL_DMA_IRQHandler+0x8da>
 8104eac:	e000      	b.n	8104eb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8104eae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	f003 0301 	and.w	r3, r3, #1
 8104eba:	2b00      	cmp	r3, #0
 8104ebc:	d004      	beq.n	8104ec8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	2203      	movs	r2, #3
 8104ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8104ec6:	e003      	b.n	8104ed0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	2201      	movs	r2, #1
 8104ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	2200      	movs	r2, #0
 8104ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104edc:	2b00      	cmp	r3, #0
 8104ede:	f000 8272 	beq.w	81053c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ee6:	6878      	ldr	r0, [r7, #4]
 8104ee8:	4798      	blx	r3
 8104eea:	e26c      	b.n	81053c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	4a43      	ldr	r2, [pc, #268]	; (8105000 <HAL_DMA_IRQHandler+0xa48>)
 8104ef2:	4293      	cmp	r3, r2
 8104ef4:	d022      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	4a42      	ldr	r2, [pc, #264]	; (8105004 <HAL_DMA_IRQHandler+0xa4c>)
 8104efc:	4293      	cmp	r3, r2
 8104efe:	d01d      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	681b      	ldr	r3, [r3, #0]
 8104f04:	4a40      	ldr	r2, [pc, #256]	; (8105008 <HAL_DMA_IRQHandler+0xa50>)
 8104f06:	4293      	cmp	r3, r2
 8104f08:	d018      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	4a3f      	ldr	r2, [pc, #252]	; (810500c <HAL_DMA_IRQHandler+0xa54>)
 8104f10:	4293      	cmp	r3, r2
 8104f12:	d013      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	4a3d      	ldr	r2, [pc, #244]	; (8105010 <HAL_DMA_IRQHandler+0xa58>)
 8104f1a:	4293      	cmp	r3, r2
 8104f1c:	d00e      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	4a3c      	ldr	r2, [pc, #240]	; (8105014 <HAL_DMA_IRQHandler+0xa5c>)
 8104f24:	4293      	cmp	r3, r2
 8104f26:	d009      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	4a3a      	ldr	r2, [pc, #232]	; (8105018 <HAL_DMA_IRQHandler+0xa60>)
 8104f2e:	4293      	cmp	r3, r2
 8104f30:	d004      	beq.n	8104f3c <HAL_DMA_IRQHandler+0x984>
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	4a39      	ldr	r2, [pc, #228]	; (810501c <HAL_DMA_IRQHandler+0xa64>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d101      	bne.n	8104f40 <HAL_DMA_IRQHandler+0x988>
 8104f3c:	2301      	movs	r3, #1
 8104f3e:	e000      	b.n	8104f42 <HAL_DMA_IRQHandler+0x98a>
 8104f40:	2300      	movs	r3, #0
 8104f42:	2b00      	cmp	r3, #0
 8104f44:	f000 823f 	beq.w	81053c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f54:	f003 031f 	and.w	r3, r3, #31
 8104f58:	2204      	movs	r2, #4
 8104f5a:	409a      	lsls	r2, r3
 8104f5c:	697b      	ldr	r3, [r7, #20]
 8104f5e:	4013      	ands	r3, r2
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	f000 80cd 	beq.w	8105100 <HAL_DMA_IRQHandler+0xb48>
 8104f66:	693b      	ldr	r3, [r7, #16]
 8104f68:	f003 0304 	and.w	r3, r3, #4
 8104f6c:	2b00      	cmp	r3, #0
 8104f6e:	f000 80c7 	beq.w	8105100 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f76:	f003 031f 	and.w	r3, r3, #31
 8104f7a:	2204      	movs	r2, #4
 8104f7c:	409a      	lsls	r2, r3
 8104f7e:	69fb      	ldr	r3, [r7, #28]
 8104f80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104f82:	693b      	ldr	r3, [r7, #16]
 8104f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104f88:	2b00      	cmp	r3, #0
 8104f8a:	d049      	beq.n	8105020 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104f8c:	693b      	ldr	r3, [r7, #16]
 8104f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104f92:	2b00      	cmp	r3, #0
 8104f94:	d109      	bne.n	8104faa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104f9a:	2b00      	cmp	r3, #0
 8104f9c:	f000 8210 	beq.w	81053c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104fa4:	6878      	ldr	r0, [r7, #4]
 8104fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104fa8:	e20a      	b.n	81053c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104fae:	2b00      	cmp	r3, #0
 8104fb0:	f000 8206 	beq.w	81053c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104fb8:	6878      	ldr	r0, [r7, #4]
 8104fba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104fbc:	e200      	b.n	81053c0 <HAL_DMA_IRQHandler+0xe08>
 8104fbe:	bf00      	nop
 8104fc0:	40020010 	.word	0x40020010
 8104fc4:	40020028 	.word	0x40020028
 8104fc8:	40020040 	.word	0x40020040
 8104fcc:	40020058 	.word	0x40020058
 8104fd0:	40020070 	.word	0x40020070
 8104fd4:	40020088 	.word	0x40020088
 8104fd8:	400200a0 	.word	0x400200a0
 8104fdc:	400200b8 	.word	0x400200b8
 8104fe0:	40020410 	.word	0x40020410
 8104fe4:	40020428 	.word	0x40020428
 8104fe8:	40020440 	.word	0x40020440
 8104fec:	40020458 	.word	0x40020458
 8104ff0:	40020470 	.word	0x40020470
 8104ff4:	40020488 	.word	0x40020488
 8104ff8:	400204a0 	.word	0x400204a0
 8104ffc:	400204b8 	.word	0x400204b8
 8105000:	58025408 	.word	0x58025408
 8105004:	5802541c 	.word	0x5802541c
 8105008:	58025430 	.word	0x58025430
 810500c:	58025444 	.word	0x58025444
 8105010:	58025458 	.word	0x58025458
 8105014:	5802546c 	.word	0x5802546c
 8105018:	58025480 	.word	0x58025480
 810501c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105020:	693b      	ldr	r3, [r7, #16]
 8105022:	f003 0320 	and.w	r3, r3, #32
 8105026:	2b00      	cmp	r3, #0
 8105028:	d160      	bne.n	81050ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	4a7f      	ldr	r2, [pc, #508]	; (810522c <HAL_DMA_IRQHandler+0xc74>)
 8105030:	4293      	cmp	r3, r2
 8105032:	d04a      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	4a7d      	ldr	r2, [pc, #500]	; (8105230 <HAL_DMA_IRQHandler+0xc78>)
 810503a:	4293      	cmp	r3, r2
 810503c:	d045      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	4a7c      	ldr	r2, [pc, #496]	; (8105234 <HAL_DMA_IRQHandler+0xc7c>)
 8105044:	4293      	cmp	r3, r2
 8105046:	d040      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	4a7a      	ldr	r2, [pc, #488]	; (8105238 <HAL_DMA_IRQHandler+0xc80>)
 810504e:	4293      	cmp	r3, r2
 8105050:	d03b      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	4a79      	ldr	r2, [pc, #484]	; (810523c <HAL_DMA_IRQHandler+0xc84>)
 8105058:	4293      	cmp	r3, r2
 810505a:	d036      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	4a77      	ldr	r2, [pc, #476]	; (8105240 <HAL_DMA_IRQHandler+0xc88>)
 8105062:	4293      	cmp	r3, r2
 8105064:	d031      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	4a76      	ldr	r2, [pc, #472]	; (8105244 <HAL_DMA_IRQHandler+0xc8c>)
 810506c:	4293      	cmp	r3, r2
 810506e:	d02c      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	4a74      	ldr	r2, [pc, #464]	; (8105248 <HAL_DMA_IRQHandler+0xc90>)
 8105076:	4293      	cmp	r3, r2
 8105078:	d027      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	4a73      	ldr	r2, [pc, #460]	; (810524c <HAL_DMA_IRQHandler+0xc94>)
 8105080:	4293      	cmp	r3, r2
 8105082:	d022      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	4a71      	ldr	r2, [pc, #452]	; (8105250 <HAL_DMA_IRQHandler+0xc98>)
 810508a:	4293      	cmp	r3, r2
 810508c:	d01d      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	4a70      	ldr	r2, [pc, #448]	; (8105254 <HAL_DMA_IRQHandler+0xc9c>)
 8105094:	4293      	cmp	r3, r2
 8105096:	d018      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	4a6e      	ldr	r2, [pc, #440]	; (8105258 <HAL_DMA_IRQHandler+0xca0>)
 810509e:	4293      	cmp	r3, r2
 81050a0:	d013      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 81050a2:	687b      	ldr	r3, [r7, #4]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	4a6d      	ldr	r2, [pc, #436]	; (810525c <HAL_DMA_IRQHandler+0xca4>)
 81050a8:	4293      	cmp	r3, r2
 81050aa:	d00e      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	4a6b      	ldr	r2, [pc, #428]	; (8105260 <HAL_DMA_IRQHandler+0xca8>)
 81050b2:	4293      	cmp	r3, r2
 81050b4:	d009      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	4a6a      	ldr	r2, [pc, #424]	; (8105264 <HAL_DMA_IRQHandler+0xcac>)
 81050bc:	4293      	cmp	r3, r2
 81050be:	d004      	beq.n	81050ca <HAL_DMA_IRQHandler+0xb12>
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	4a68      	ldr	r2, [pc, #416]	; (8105268 <HAL_DMA_IRQHandler+0xcb0>)
 81050c6:	4293      	cmp	r3, r2
 81050c8:	d108      	bne.n	81050dc <HAL_DMA_IRQHandler+0xb24>
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	681a      	ldr	r2, [r3, #0]
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	f022 0208 	bic.w	r2, r2, #8
 81050d8:	601a      	str	r2, [r3, #0]
 81050da:	e007      	b.n	81050ec <HAL_DMA_IRQHandler+0xb34>
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	681a      	ldr	r2, [r3, #0]
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	f022 0204 	bic.w	r2, r2, #4
 81050ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	f000 8165 	beq.w	81053c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81050fa:	6878      	ldr	r0, [r7, #4]
 81050fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81050fe:	e15f      	b.n	81053c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105104:	f003 031f 	and.w	r3, r3, #31
 8105108:	2202      	movs	r2, #2
 810510a:	409a      	lsls	r2, r3
 810510c:	697b      	ldr	r3, [r7, #20]
 810510e:	4013      	ands	r3, r2
 8105110:	2b00      	cmp	r3, #0
 8105112:	f000 80c5 	beq.w	81052a0 <HAL_DMA_IRQHandler+0xce8>
 8105116:	693b      	ldr	r3, [r7, #16]
 8105118:	f003 0302 	and.w	r3, r3, #2
 810511c:	2b00      	cmp	r3, #0
 810511e:	f000 80bf 	beq.w	81052a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105126:	f003 031f 	and.w	r3, r3, #31
 810512a:	2202      	movs	r2, #2
 810512c:	409a      	lsls	r2, r3
 810512e:	69fb      	ldr	r3, [r7, #28]
 8105130:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105132:	693b      	ldr	r3, [r7, #16]
 8105134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105138:	2b00      	cmp	r3, #0
 810513a:	d018      	beq.n	810516e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810513c:	693b      	ldr	r3, [r7, #16]
 810513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105142:	2b00      	cmp	r3, #0
 8105144:	d109      	bne.n	810515a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810514a:	2b00      	cmp	r3, #0
 810514c:	f000 813a 	beq.w	81053c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105154:	6878      	ldr	r0, [r7, #4]
 8105156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105158:	e134      	b.n	81053c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810515e:	2b00      	cmp	r3, #0
 8105160:	f000 8130 	beq.w	81053c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105168:	6878      	ldr	r0, [r7, #4]
 810516a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810516c:	e12a      	b.n	81053c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810516e:	693b      	ldr	r3, [r7, #16]
 8105170:	f003 0320 	and.w	r3, r3, #32
 8105174:	2b00      	cmp	r3, #0
 8105176:	f040 8089 	bne.w	810528c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	4a2b      	ldr	r2, [pc, #172]	; (810522c <HAL_DMA_IRQHandler+0xc74>)
 8105180:	4293      	cmp	r3, r2
 8105182:	d04a      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4a29      	ldr	r2, [pc, #164]	; (8105230 <HAL_DMA_IRQHandler+0xc78>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d045      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	4a28      	ldr	r2, [pc, #160]	; (8105234 <HAL_DMA_IRQHandler+0xc7c>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d040      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	4a26      	ldr	r2, [pc, #152]	; (8105238 <HAL_DMA_IRQHandler+0xc80>)
 810519e:	4293      	cmp	r3, r2
 81051a0:	d03b      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	681b      	ldr	r3, [r3, #0]
 81051a6:	4a25      	ldr	r2, [pc, #148]	; (810523c <HAL_DMA_IRQHandler+0xc84>)
 81051a8:	4293      	cmp	r3, r2
 81051aa:	d036      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	681b      	ldr	r3, [r3, #0]
 81051b0:	4a23      	ldr	r2, [pc, #140]	; (8105240 <HAL_DMA_IRQHandler+0xc88>)
 81051b2:	4293      	cmp	r3, r2
 81051b4:	d031      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	4a22      	ldr	r2, [pc, #136]	; (8105244 <HAL_DMA_IRQHandler+0xc8c>)
 81051bc:	4293      	cmp	r3, r2
 81051be:	d02c      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051c0:	687b      	ldr	r3, [r7, #4]
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	4a20      	ldr	r2, [pc, #128]	; (8105248 <HAL_DMA_IRQHandler+0xc90>)
 81051c6:	4293      	cmp	r3, r2
 81051c8:	d027      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	681b      	ldr	r3, [r3, #0]
 81051ce:	4a1f      	ldr	r2, [pc, #124]	; (810524c <HAL_DMA_IRQHandler+0xc94>)
 81051d0:	4293      	cmp	r3, r2
 81051d2:	d022      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	4a1d      	ldr	r2, [pc, #116]	; (8105250 <HAL_DMA_IRQHandler+0xc98>)
 81051da:	4293      	cmp	r3, r2
 81051dc:	d01d      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	681b      	ldr	r3, [r3, #0]
 81051e2:	4a1c      	ldr	r2, [pc, #112]	; (8105254 <HAL_DMA_IRQHandler+0xc9c>)
 81051e4:	4293      	cmp	r3, r2
 81051e6:	d018      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	4a1a      	ldr	r2, [pc, #104]	; (8105258 <HAL_DMA_IRQHandler+0xca0>)
 81051ee:	4293      	cmp	r3, r2
 81051f0:	d013      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	4a19      	ldr	r2, [pc, #100]	; (810525c <HAL_DMA_IRQHandler+0xca4>)
 81051f8:	4293      	cmp	r3, r2
 81051fa:	d00e      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	4a17      	ldr	r2, [pc, #92]	; (8105260 <HAL_DMA_IRQHandler+0xca8>)
 8105202:	4293      	cmp	r3, r2
 8105204:	d009      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	4a16      	ldr	r2, [pc, #88]	; (8105264 <HAL_DMA_IRQHandler+0xcac>)
 810520c:	4293      	cmp	r3, r2
 810520e:	d004      	beq.n	810521a <HAL_DMA_IRQHandler+0xc62>
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	4a14      	ldr	r2, [pc, #80]	; (8105268 <HAL_DMA_IRQHandler+0xcb0>)
 8105216:	4293      	cmp	r3, r2
 8105218:	d128      	bne.n	810526c <HAL_DMA_IRQHandler+0xcb4>
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	681a      	ldr	r2, [r3, #0]
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	f022 0214 	bic.w	r2, r2, #20
 8105228:	601a      	str	r2, [r3, #0]
 810522a:	e027      	b.n	810527c <HAL_DMA_IRQHandler+0xcc4>
 810522c:	40020010 	.word	0x40020010
 8105230:	40020028 	.word	0x40020028
 8105234:	40020040 	.word	0x40020040
 8105238:	40020058 	.word	0x40020058
 810523c:	40020070 	.word	0x40020070
 8105240:	40020088 	.word	0x40020088
 8105244:	400200a0 	.word	0x400200a0
 8105248:	400200b8 	.word	0x400200b8
 810524c:	40020410 	.word	0x40020410
 8105250:	40020428 	.word	0x40020428
 8105254:	40020440 	.word	0x40020440
 8105258:	40020458 	.word	0x40020458
 810525c:	40020470 	.word	0x40020470
 8105260:	40020488 	.word	0x40020488
 8105264:	400204a0 	.word	0x400204a0
 8105268:	400204b8 	.word	0x400204b8
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	681a      	ldr	r2, [r3, #0]
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	f022 020a 	bic.w	r2, r2, #10
 810527a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	2201      	movs	r2, #1
 8105280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	2200      	movs	r2, #0
 8105288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105290:	2b00      	cmp	r3, #0
 8105292:	f000 8097 	beq.w	81053c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810529a:	6878      	ldr	r0, [r7, #4]
 810529c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810529e:	e091      	b.n	81053c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052a4:	f003 031f 	and.w	r3, r3, #31
 81052a8:	2208      	movs	r2, #8
 81052aa:	409a      	lsls	r2, r3
 81052ac:	697b      	ldr	r3, [r7, #20]
 81052ae:	4013      	ands	r3, r2
 81052b0:	2b00      	cmp	r3, #0
 81052b2:	f000 8088 	beq.w	81053c6 <HAL_DMA_IRQHandler+0xe0e>
 81052b6:	693b      	ldr	r3, [r7, #16]
 81052b8:	f003 0308 	and.w	r3, r3, #8
 81052bc:	2b00      	cmp	r3, #0
 81052be:	f000 8082 	beq.w	81053c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	4a41      	ldr	r2, [pc, #260]	; (81053cc <HAL_DMA_IRQHandler+0xe14>)
 81052c8:	4293      	cmp	r3, r2
 81052ca:	d04a      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	4a3f      	ldr	r2, [pc, #252]	; (81053d0 <HAL_DMA_IRQHandler+0xe18>)
 81052d2:	4293      	cmp	r3, r2
 81052d4:	d045      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	4a3e      	ldr	r2, [pc, #248]	; (81053d4 <HAL_DMA_IRQHandler+0xe1c>)
 81052dc:	4293      	cmp	r3, r2
 81052de:	d040      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	4a3c      	ldr	r2, [pc, #240]	; (81053d8 <HAL_DMA_IRQHandler+0xe20>)
 81052e6:	4293      	cmp	r3, r2
 81052e8:	d03b      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	4a3b      	ldr	r2, [pc, #236]	; (81053dc <HAL_DMA_IRQHandler+0xe24>)
 81052f0:	4293      	cmp	r3, r2
 81052f2:	d036      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	681b      	ldr	r3, [r3, #0]
 81052f8:	4a39      	ldr	r2, [pc, #228]	; (81053e0 <HAL_DMA_IRQHandler+0xe28>)
 81052fa:	4293      	cmp	r3, r2
 81052fc:	d031      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	4a38      	ldr	r2, [pc, #224]	; (81053e4 <HAL_DMA_IRQHandler+0xe2c>)
 8105304:	4293      	cmp	r3, r2
 8105306:	d02c      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	4a36      	ldr	r2, [pc, #216]	; (81053e8 <HAL_DMA_IRQHandler+0xe30>)
 810530e:	4293      	cmp	r3, r2
 8105310:	d027      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	4a35      	ldr	r2, [pc, #212]	; (81053ec <HAL_DMA_IRQHandler+0xe34>)
 8105318:	4293      	cmp	r3, r2
 810531a:	d022      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	4a33      	ldr	r2, [pc, #204]	; (81053f0 <HAL_DMA_IRQHandler+0xe38>)
 8105322:	4293      	cmp	r3, r2
 8105324:	d01d      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	4a32      	ldr	r2, [pc, #200]	; (81053f4 <HAL_DMA_IRQHandler+0xe3c>)
 810532c:	4293      	cmp	r3, r2
 810532e:	d018      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	4a30      	ldr	r2, [pc, #192]	; (81053f8 <HAL_DMA_IRQHandler+0xe40>)
 8105336:	4293      	cmp	r3, r2
 8105338:	d013      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	681b      	ldr	r3, [r3, #0]
 810533e:	4a2f      	ldr	r2, [pc, #188]	; (81053fc <HAL_DMA_IRQHandler+0xe44>)
 8105340:	4293      	cmp	r3, r2
 8105342:	d00e      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	681b      	ldr	r3, [r3, #0]
 8105348:	4a2d      	ldr	r2, [pc, #180]	; (8105400 <HAL_DMA_IRQHandler+0xe48>)
 810534a:	4293      	cmp	r3, r2
 810534c:	d009      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	681b      	ldr	r3, [r3, #0]
 8105352:	4a2c      	ldr	r2, [pc, #176]	; (8105404 <HAL_DMA_IRQHandler+0xe4c>)
 8105354:	4293      	cmp	r3, r2
 8105356:	d004      	beq.n	8105362 <HAL_DMA_IRQHandler+0xdaa>
 8105358:	687b      	ldr	r3, [r7, #4]
 810535a:	681b      	ldr	r3, [r3, #0]
 810535c:	4a2a      	ldr	r2, [pc, #168]	; (8105408 <HAL_DMA_IRQHandler+0xe50>)
 810535e:	4293      	cmp	r3, r2
 8105360:	d108      	bne.n	8105374 <HAL_DMA_IRQHandler+0xdbc>
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	681a      	ldr	r2, [r3, #0]
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	f022 021c 	bic.w	r2, r2, #28
 8105370:	601a      	str	r2, [r3, #0]
 8105372:	e007      	b.n	8105384 <HAL_DMA_IRQHandler+0xdcc>
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	681a      	ldr	r2, [r3, #0]
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	f022 020e 	bic.w	r2, r2, #14
 8105382:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105388:	f003 031f 	and.w	r3, r3, #31
 810538c:	2201      	movs	r2, #1
 810538e:	409a      	lsls	r2, r3
 8105390:	69fb      	ldr	r3, [r7, #28]
 8105392:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	2201      	movs	r2, #1
 8105398:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	2201      	movs	r2, #1
 810539e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	2200      	movs	r2, #0
 81053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81053ae:	2b00      	cmp	r3, #0
 81053b0:	d009      	beq.n	81053c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81053b6:	6878      	ldr	r0, [r7, #4]
 81053b8:	4798      	blx	r3
 81053ba:	e004      	b.n	81053c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81053bc:	bf00      	nop
 81053be:	e002      	b.n	81053c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81053c0:	bf00      	nop
 81053c2:	e000      	b.n	81053c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81053c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81053c6:	3728      	adds	r7, #40	; 0x28
 81053c8:	46bd      	mov	sp, r7
 81053ca:	bd80      	pop	{r7, pc}
 81053cc:	40020010 	.word	0x40020010
 81053d0:	40020028 	.word	0x40020028
 81053d4:	40020040 	.word	0x40020040
 81053d8:	40020058 	.word	0x40020058
 81053dc:	40020070 	.word	0x40020070
 81053e0:	40020088 	.word	0x40020088
 81053e4:	400200a0 	.word	0x400200a0
 81053e8:	400200b8 	.word	0x400200b8
 81053ec:	40020410 	.word	0x40020410
 81053f0:	40020428 	.word	0x40020428
 81053f4:	40020440 	.word	0x40020440
 81053f8:	40020458 	.word	0x40020458
 81053fc:	40020470 	.word	0x40020470
 8105400:	40020488 	.word	0x40020488
 8105404:	400204a0 	.word	0x400204a0
 8105408:	400204b8 	.word	0x400204b8

0810540c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 810540c:	b480      	push	{r7}
 810540e:	b085      	sub	sp, #20
 8105410:	af00      	add	r7, sp, #0
 8105412:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	4a43      	ldr	r2, [pc, #268]	; (8105528 <DMA_CalcBaseAndBitshift+0x11c>)
 810541a:	4293      	cmp	r3, r2
 810541c:	d04a      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	4a42      	ldr	r2, [pc, #264]	; (810552c <DMA_CalcBaseAndBitshift+0x120>)
 8105424:	4293      	cmp	r3, r2
 8105426:	d045      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	4a40      	ldr	r2, [pc, #256]	; (8105530 <DMA_CalcBaseAndBitshift+0x124>)
 810542e:	4293      	cmp	r3, r2
 8105430:	d040      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	681b      	ldr	r3, [r3, #0]
 8105436:	4a3f      	ldr	r2, [pc, #252]	; (8105534 <DMA_CalcBaseAndBitshift+0x128>)
 8105438:	4293      	cmp	r3, r2
 810543a:	d03b      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	4a3d      	ldr	r2, [pc, #244]	; (8105538 <DMA_CalcBaseAndBitshift+0x12c>)
 8105442:	4293      	cmp	r3, r2
 8105444:	d036      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	4a3c      	ldr	r2, [pc, #240]	; (810553c <DMA_CalcBaseAndBitshift+0x130>)
 810544c:	4293      	cmp	r3, r2
 810544e:	d031      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	4a3a      	ldr	r2, [pc, #232]	; (8105540 <DMA_CalcBaseAndBitshift+0x134>)
 8105456:	4293      	cmp	r3, r2
 8105458:	d02c      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a39      	ldr	r2, [pc, #228]	; (8105544 <DMA_CalcBaseAndBitshift+0x138>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d027      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a37      	ldr	r2, [pc, #220]	; (8105548 <DMA_CalcBaseAndBitshift+0x13c>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d022      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a36      	ldr	r2, [pc, #216]	; (810554c <DMA_CalcBaseAndBitshift+0x140>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d01d      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a34      	ldr	r2, [pc, #208]	; (8105550 <DMA_CalcBaseAndBitshift+0x144>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d018      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a33      	ldr	r2, [pc, #204]	; (8105554 <DMA_CalcBaseAndBitshift+0x148>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d013      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a31      	ldr	r2, [pc, #196]	; (8105558 <DMA_CalcBaseAndBitshift+0x14c>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d00e      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a30      	ldr	r2, [pc, #192]	; (810555c <DMA_CalcBaseAndBitshift+0x150>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d009      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a2e      	ldr	r2, [pc, #184]	; (8105560 <DMA_CalcBaseAndBitshift+0x154>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d004      	beq.n	81054b4 <DMA_CalcBaseAndBitshift+0xa8>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a2d      	ldr	r2, [pc, #180]	; (8105564 <DMA_CalcBaseAndBitshift+0x158>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d101      	bne.n	81054b8 <DMA_CalcBaseAndBitshift+0xac>
 81054b4:	2301      	movs	r3, #1
 81054b6:	e000      	b.n	81054ba <DMA_CalcBaseAndBitshift+0xae>
 81054b8:	2300      	movs	r3, #0
 81054ba:	2b00      	cmp	r3, #0
 81054bc:	d026      	beq.n	810550c <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	b2db      	uxtb	r3, r3
 81054c4:	3b10      	subs	r3, #16
 81054c6:	4a28      	ldr	r2, [pc, #160]	; (8105568 <DMA_CalcBaseAndBitshift+0x15c>)
 81054c8:	fba2 2303 	umull	r2, r3, r2, r3
 81054cc:	091b      	lsrs	r3, r3, #4
 81054ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	f003 0307 	and.w	r3, r3, #7
 81054d6:	4a25      	ldr	r2, [pc, #148]	; (810556c <DMA_CalcBaseAndBitshift+0x160>)
 81054d8:	5cd3      	ldrb	r3, [r2, r3]
 81054da:	461a      	mov	r2, r3
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81054e0:	68fb      	ldr	r3, [r7, #12]
 81054e2:	2b03      	cmp	r3, #3
 81054e4:	d909      	bls.n	81054fa <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81054ee:	f023 0303 	bic.w	r3, r3, #3
 81054f2:	1d1a      	adds	r2, r3, #4
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	659a      	str	r2, [r3, #88]	; 0x58
 81054f8:	e00e      	b.n	8105518 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8105502:	f023 0303 	bic.w	r3, r3, #3
 8105506:	687a      	ldr	r2, [r7, #4]
 8105508:	6593      	str	r3, [r2, #88]	; 0x58
 810550a:	e005      	b.n	8105518 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 810551c:	4618      	mov	r0, r3
 810551e:	3714      	adds	r7, #20
 8105520:	46bd      	mov	sp, r7
 8105522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105526:	4770      	bx	lr
 8105528:	40020010 	.word	0x40020010
 810552c:	40020028 	.word	0x40020028
 8105530:	40020040 	.word	0x40020040
 8105534:	40020058 	.word	0x40020058
 8105538:	40020070 	.word	0x40020070
 810553c:	40020088 	.word	0x40020088
 8105540:	400200a0 	.word	0x400200a0
 8105544:	400200b8 	.word	0x400200b8
 8105548:	40020410 	.word	0x40020410
 810554c:	40020428 	.word	0x40020428
 8105550:	40020440 	.word	0x40020440
 8105554:	40020458 	.word	0x40020458
 8105558:	40020470 	.word	0x40020470
 810555c:	40020488 	.word	0x40020488
 8105560:	400204a0 	.word	0x400204a0
 8105564:	400204b8 	.word	0x400204b8
 8105568:	aaaaaaab 	.word	0xaaaaaaab
 810556c:	0817e9b8 	.word	0x0817e9b8

08105570 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8105570:	b480      	push	{r7}
 8105572:	b085      	sub	sp, #20
 8105574:	af00      	add	r7, sp, #0
 8105576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105578:	2300      	movs	r3, #0
 810557a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	699b      	ldr	r3, [r3, #24]
 8105580:	2b00      	cmp	r3, #0
 8105582:	d120      	bne.n	81055c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105588:	2b03      	cmp	r3, #3
 810558a:	d858      	bhi.n	810563e <DMA_CheckFifoParam+0xce>
 810558c:	a201      	add	r2, pc, #4	; (adr r2, 8105594 <DMA_CheckFifoParam+0x24>)
 810558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105592:	bf00      	nop
 8105594:	081055a5 	.word	0x081055a5
 8105598:	081055b7 	.word	0x081055b7
 810559c:	081055a5 	.word	0x081055a5
 81055a0:	0810563f 	.word	0x0810563f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d048      	beq.n	8105642 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81055b0:	2301      	movs	r3, #1
 81055b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81055b4:	e045      	b.n	8105642 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81055be:	d142      	bne.n	8105646 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81055c0:	2301      	movs	r3, #1
 81055c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81055c4:	e03f      	b.n	8105646 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	699b      	ldr	r3, [r3, #24]
 81055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81055ce:	d123      	bne.n	8105618 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055d4:	2b03      	cmp	r3, #3
 81055d6:	d838      	bhi.n	810564a <DMA_CheckFifoParam+0xda>
 81055d8:	a201      	add	r2, pc, #4	; (adr r2, 81055e0 <DMA_CheckFifoParam+0x70>)
 81055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055de:	bf00      	nop
 81055e0:	081055f1 	.word	0x081055f1
 81055e4:	081055f7 	.word	0x081055f7
 81055e8:	081055f1 	.word	0x081055f1
 81055ec:	08105609 	.word	0x08105609
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81055f0:	2301      	movs	r3, #1
 81055f2:	73fb      	strb	r3, [r7, #15]
        break;
 81055f4:	e030      	b.n	8105658 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81055fe:	2b00      	cmp	r3, #0
 8105600:	d025      	beq.n	810564e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8105602:	2301      	movs	r3, #1
 8105604:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105606:	e022      	b.n	810564e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8105608:	687b      	ldr	r3, [r7, #4]
 810560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810560c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8105610:	d11f      	bne.n	8105652 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8105612:	2301      	movs	r3, #1
 8105614:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105616:	e01c      	b.n	8105652 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810561c:	2b02      	cmp	r3, #2
 810561e:	d902      	bls.n	8105626 <DMA_CheckFifoParam+0xb6>
 8105620:	2b03      	cmp	r3, #3
 8105622:	d003      	beq.n	810562c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8105624:	e018      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8105626:	2301      	movs	r3, #1
 8105628:	73fb      	strb	r3, [r7, #15]
        break;
 810562a:	e015      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105634:	2b00      	cmp	r3, #0
 8105636:	d00e      	beq.n	8105656 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8105638:	2301      	movs	r3, #1
 810563a:	73fb      	strb	r3, [r7, #15]
    break;
 810563c:	e00b      	b.n	8105656 <DMA_CheckFifoParam+0xe6>
        break;
 810563e:	bf00      	nop
 8105640:	e00a      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        break;
 8105642:	bf00      	nop
 8105644:	e008      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        break;
 8105646:	bf00      	nop
 8105648:	e006      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        break;
 810564a:	bf00      	nop
 810564c:	e004      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        break;
 810564e:	bf00      	nop
 8105650:	e002      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
        break;
 8105652:	bf00      	nop
 8105654:	e000      	b.n	8105658 <DMA_CheckFifoParam+0xe8>
    break;
 8105656:	bf00      	nop
    }
  }

  return status;
 8105658:	7bfb      	ldrb	r3, [r7, #15]
}
 810565a:	4618      	mov	r0, r3
 810565c:	3714      	adds	r7, #20
 810565e:	46bd      	mov	sp, r7
 8105660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105664:	4770      	bx	lr
 8105666:	bf00      	nop

08105668 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8105668:	b480      	push	{r7}
 810566a:	b085      	sub	sp, #20
 810566c:	af00      	add	r7, sp, #0
 810566e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	681b      	ldr	r3, [r3, #0]
 8105674:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a3a      	ldr	r2, [pc, #232]	; (8105764 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d022      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a38      	ldr	r2, [pc, #224]	; (8105768 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d01d      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a37      	ldr	r2, [pc, #220]	; (810576c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d018      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a35      	ldr	r2, [pc, #212]	; (8105770 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d013      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a34      	ldr	r2, [pc, #208]	; (8105774 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d00e      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	4a32      	ldr	r2, [pc, #200]	; (8105778 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81056ae:	4293      	cmp	r3, r2
 81056b0:	d009      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a31      	ldr	r2, [pc, #196]	; (810577c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81056b8:	4293      	cmp	r3, r2
 81056ba:	d004      	beq.n	81056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a2f      	ldr	r2, [pc, #188]	; (8105780 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d101      	bne.n	81056ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81056c6:	2301      	movs	r3, #1
 81056c8:	e000      	b.n	81056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81056ca:	2300      	movs	r3, #0
 81056cc:	2b00      	cmp	r3, #0
 81056ce:	d01c      	beq.n	810570a <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	b2db      	uxtb	r3, r3
 81056d6:	3b08      	subs	r3, #8
 81056d8:	4a2a      	ldr	r2, [pc, #168]	; (8105784 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81056da:	fba2 2303 	umull	r2, r3, r2, r3
 81056de:	091b      	lsrs	r3, r3, #4
 81056e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81056e2:	68fb      	ldr	r3, [r7, #12]
 81056e4:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81056e8:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81056ec:	009b      	lsls	r3, r3, #2
 81056ee:	461a      	mov	r2, r3
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	4a24      	ldr	r2, [pc, #144]	; (8105788 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81056f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81056fa:	68fb      	ldr	r3, [r7, #12]
 81056fc:	f003 031f 	and.w	r3, r3, #31
 8105700:	2201      	movs	r2, #1
 8105702:	409a      	lsls	r2, r3
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8105708:	e026      	b.n	8105758 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	b2db      	uxtb	r3, r3
 8105710:	3b10      	subs	r3, #16
 8105712:	4a1e      	ldr	r2, [pc, #120]	; (810578c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8105714:	fba2 2303 	umull	r2, r3, r2, r3
 8105718:	091b      	lsrs	r3, r3, #4
 810571a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810571c:	68bb      	ldr	r3, [r7, #8]
 810571e:	4a1c      	ldr	r2, [pc, #112]	; (8105790 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8105720:	4293      	cmp	r3, r2
 8105722:	d806      	bhi.n	8105732 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8105724:	68bb      	ldr	r3, [r7, #8]
 8105726:	4a1b      	ldr	r2, [pc, #108]	; (8105794 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8105728:	4293      	cmp	r3, r2
 810572a:	d902      	bls.n	8105732 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	3308      	adds	r3, #8
 8105730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8105732:	68fb      	ldr	r3, [r7, #12]
 8105734:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8105738:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 810573c:	009b      	lsls	r3, r3, #2
 810573e:	461a      	mov	r2, r3
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	4a14      	ldr	r2, [pc, #80]	; (8105798 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8105748:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810574a:	68fb      	ldr	r3, [r7, #12]
 810574c:	f003 031f 	and.w	r3, r3, #31
 8105750:	2201      	movs	r2, #1
 8105752:	409a      	lsls	r2, r3
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	669a      	str	r2, [r3, #104]	; 0x68
}
 8105758:	bf00      	nop
 810575a:	3714      	adds	r7, #20
 810575c:	46bd      	mov	sp, r7
 810575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105762:	4770      	bx	lr
 8105764:	58025408 	.word	0x58025408
 8105768:	5802541c 	.word	0x5802541c
 810576c:	58025430 	.word	0x58025430
 8105770:	58025444 	.word	0x58025444
 8105774:	58025458 	.word	0x58025458
 8105778:	5802546c 	.word	0x5802546c
 810577c:	58025480 	.word	0x58025480
 8105780:	58025494 	.word	0x58025494
 8105784:	cccccccd 	.word	0xcccccccd
 8105788:	58025880 	.word	0x58025880
 810578c:	aaaaaaab 	.word	0xaaaaaaab
 8105790:	400204b8 	.word	0x400204b8
 8105794:	4002040f 	.word	0x4002040f
 8105798:	40020880 	.word	0x40020880

0810579c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810579c:	b480      	push	{r7}
 810579e:	b085      	sub	sp, #20
 81057a0:	af00      	add	r7, sp, #0
 81057a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	685b      	ldr	r3, [r3, #4]
 81057a8:	b2db      	uxtb	r3, r3
 81057aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81057ac:	68fb      	ldr	r3, [r7, #12]
 81057ae:	2b00      	cmp	r3, #0
 81057b0:	d04a      	beq.n	8105848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81057b2:	68fb      	ldr	r3, [r7, #12]
 81057b4:	2b08      	cmp	r3, #8
 81057b6:	d847      	bhi.n	8105848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	4a25      	ldr	r2, [pc, #148]	; (8105854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81057be:	4293      	cmp	r3, r2
 81057c0:	d022      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	681b      	ldr	r3, [r3, #0]
 81057c6:	4a24      	ldr	r2, [pc, #144]	; (8105858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81057c8:	4293      	cmp	r3, r2
 81057ca:	d01d      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	4a22      	ldr	r2, [pc, #136]	; (810585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81057d2:	4293      	cmp	r3, r2
 81057d4:	d018      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	4a21      	ldr	r2, [pc, #132]	; (8105860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81057dc:	4293      	cmp	r3, r2
 81057de:	d013      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	4a1f      	ldr	r2, [pc, #124]	; (8105864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d00e      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	4a1e      	ldr	r2, [pc, #120]	; (8105868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81057f0:	4293      	cmp	r3, r2
 81057f2:	d009      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	681b      	ldr	r3, [r3, #0]
 81057f8:	4a1c      	ldr	r2, [pc, #112]	; (810586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81057fa:	4293      	cmp	r3, r2
 81057fc:	d004      	beq.n	8105808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	4a1b      	ldr	r2, [pc, #108]	; (8105870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8105804:	4293      	cmp	r3, r2
 8105806:	d101      	bne.n	810580c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8105808:	2301      	movs	r3, #1
 810580a:	e000      	b.n	810580e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 810580c:	2300      	movs	r3, #0
 810580e:	2b00      	cmp	r3, #0
 8105810:	d00a      	beq.n	8105828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8105812:	68fa      	ldr	r2, [r7, #12]
 8105814:	4b17      	ldr	r3, [pc, #92]	; (8105874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8105816:	4413      	add	r3, r2
 8105818:	009b      	lsls	r3, r3, #2
 810581a:	461a      	mov	r2, r3
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	4a15      	ldr	r2, [pc, #84]	; (8105878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8105824:	671a      	str	r2, [r3, #112]	; 0x70
 8105826:	e009      	b.n	810583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8105828:	68fa      	ldr	r2, [r7, #12]
 810582a:	4b14      	ldr	r3, [pc, #80]	; (810587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 810582c:	4413      	add	r3, r2
 810582e:	009b      	lsls	r3, r3, #2
 8105830:	461a      	mov	r2, r3
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	4a11      	ldr	r2, [pc, #68]	; (8105880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810583a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810583c:	68fb      	ldr	r3, [r7, #12]
 810583e:	3b01      	subs	r3, #1
 8105840:	2201      	movs	r2, #1
 8105842:	409a      	lsls	r2, r3
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8105848:	bf00      	nop
 810584a:	3714      	adds	r7, #20
 810584c:	46bd      	mov	sp, r7
 810584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105852:	4770      	bx	lr
 8105854:	58025408 	.word	0x58025408
 8105858:	5802541c 	.word	0x5802541c
 810585c:	58025430 	.word	0x58025430
 8105860:	58025444 	.word	0x58025444
 8105864:	58025458 	.word	0x58025458
 8105868:	5802546c 	.word	0x5802546c
 810586c:	58025480 	.word	0x58025480
 8105870:	58025494 	.word	0x58025494
 8105874:	1600963f 	.word	0x1600963f
 8105878:	58025940 	.word	0x58025940
 810587c:	1000823f 	.word	0x1000823f
 8105880:	40020940 	.word	0x40020940

08105884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105884:	b480      	push	{r7}
 8105886:	b089      	sub	sp, #36	; 0x24
 8105888:	af00      	add	r7, sp, #0
 810588a:	6078      	str	r0, [r7, #4]
 810588c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810588e:	2300      	movs	r3, #0
 8105890:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8105892:	4b89      	ldr	r3, [pc, #548]	; (8105ab8 <HAL_GPIO_Init+0x234>)
 8105894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105896:	e194      	b.n	8105bc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105898:	683b      	ldr	r3, [r7, #0]
 810589a:	681a      	ldr	r2, [r3, #0]
 810589c:	2101      	movs	r1, #1
 810589e:	69fb      	ldr	r3, [r7, #28]
 81058a0:	fa01 f303 	lsl.w	r3, r1, r3
 81058a4:	4013      	ands	r3, r2
 81058a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81058a8:	693b      	ldr	r3, [r7, #16]
 81058aa:	2b00      	cmp	r3, #0
 81058ac:	f000 8186 	beq.w	8105bbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81058b0:	683b      	ldr	r3, [r7, #0]
 81058b2:	685b      	ldr	r3, [r3, #4]
 81058b4:	f003 0303 	and.w	r3, r3, #3
 81058b8:	2b01      	cmp	r3, #1
 81058ba:	d005      	beq.n	81058c8 <HAL_GPIO_Init+0x44>
 81058bc:	683b      	ldr	r3, [r7, #0]
 81058be:	685b      	ldr	r3, [r3, #4]
 81058c0:	f003 0303 	and.w	r3, r3, #3
 81058c4:	2b02      	cmp	r3, #2
 81058c6:	d130      	bne.n	810592a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	689b      	ldr	r3, [r3, #8]
 81058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81058ce:	69fb      	ldr	r3, [r7, #28]
 81058d0:	005b      	lsls	r3, r3, #1
 81058d2:	2203      	movs	r2, #3
 81058d4:	fa02 f303 	lsl.w	r3, r2, r3
 81058d8:	43db      	mvns	r3, r3
 81058da:	69ba      	ldr	r2, [r7, #24]
 81058dc:	4013      	ands	r3, r2
 81058de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81058e0:	683b      	ldr	r3, [r7, #0]
 81058e2:	68da      	ldr	r2, [r3, #12]
 81058e4:	69fb      	ldr	r3, [r7, #28]
 81058e6:	005b      	lsls	r3, r3, #1
 81058e8:	fa02 f303 	lsl.w	r3, r2, r3
 81058ec:	69ba      	ldr	r2, [r7, #24]
 81058ee:	4313      	orrs	r3, r2
 81058f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	69ba      	ldr	r2, [r7, #24]
 81058f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	685b      	ldr	r3, [r3, #4]
 81058fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81058fe:	2201      	movs	r2, #1
 8105900:	69fb      	ldr	r3, [r7, #28]
 8105902:	fa02 f303 	lsl.w	r3, r2, r3
 8105906:	43db      	mvns	r3, r3
 8105908:	69ba      	ldr	r2, [r7, #24]
 810590a:	4013      	ands	r3, r2
 810590c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810590e:	683b      	ldr	r3, [r7, #0]
 8105910:	685b      	ldr	r3, [r3, #4]
 8105912:	091b      	lsrs	r3, r3, #4
 8105914:	f003 0201 	and.w	r2, r3, #1
 8105918:	69fb      	ldr	r3, [r7, #28]
 810591a:	fa02 f303 	lsl.w	r3, r2, r3
 810591e:	69ba      	ldr	r2, [r7, #24]
 8105920:	4313      	orrs	r3, r2
 8105922:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	69ba      	ldr	r2, [r7, #24]
 8105928:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810592a:	683b      	ldr	r3, [r7, #0]
 810592c:	685b      	ldr	r3, [r3, #4]
 810592e:	f003 0303 	and.w	r3, r3, #3
 8105932:	2b03      	cmp	r3, #3
 8105934:	d017      	beq.n	8105966 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	68db      	ldr	r3, [r3, #12]
 810593a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810593c:	69fb      	ldr	r3, [r7, #28]
 810593e:	005b      	lsls	r3, r3, #1
 8105940:	2203      	movs	r2, #3
 8105942:	fa02 f303 	lsl.w	r3, r2, r3
 8105946:	43db      	mvns	r3, r3
 8105948:	69ba      	ldr	r2, [r7, #24]
 810594a:	4013      	ands	r3, r2
 810594c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810594e:	683b      	ldr	r3, [r7, #0]
 8105950:	689a      	ldr	r2, [r3, #8]
 8105952:	69fb      	ldr	r3, [r7, #28]
 8105954:	005b      	lsls	r3, r3, #1
 8105956:	fa02 f303 	lsl.w	r3, r2, r3
 810595a:	69ba      	ldr	r2, [r7, #24]
 810595c:	4313      	orrs	r3, r2
 810595e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	69ba      	ldr	r2, [r7, #24]
 8105964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105966:	683b      	ldr	r3, [r7, #0]
 8105968:	685b      	ldr	r3, [r3, #4]
 810596a:	f003 0303 	and.w	r3, r3, #3
 810596e:	2b02      	cmp	r3, #2
 8105970:	d123      	bne.n	81059ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105972:	69fb      	ldr	r3, [r7, #28]
 8105974:	08da      	lsrs	r2, r3, #3
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	3208      	adds	r2, #8
 810597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810597e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105980:	69fb      	ldr	r3, [r7, #28]
 8105982:	f003 0307 	and.w	r3, r3, #7
 8105986:	009b      	lsls	r3, r3, #2
 8105988:	220f      	movs	r2, #15
 810598a:	fa02 f303 	lsl.w	r3, r2, r3
 810598e:	43db      	mvns	r3, r3
 8105990:	69ba      	ldr	r2, [r7, #24]
 8105992:	4013      	ands	r3, r2
 8105994:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105996:	683b      	ldr	r3, [r7, #0]
 8105998:	691a      	ldr	r2, [r3, #16]
 810599a:	69fb      	ldr	r3, [r7, #28]
 810599c:	f003 0307 	and.w	r3, r3, #7
 81059a0:	009b      	lsls	r3, r3, #2
 81059a2:	fa02 f303 	lsl.w	r3, r2, r3
 81059a6:	69ba      	ldr	r2, [r7, #24]
 81059a8:	4313      	orrs	r3, r2
 81059aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81059ac:	69fb      	ldr	r3, [r7, #28]
 81059ae:	08da      	lsrs	r2, r3, #3
 81059b0:	687b      	ldr	r3, [r7, #4]
 81059b2:	3208      	adds	r2, #8
 81059b4:	69b9      	ldr	r1, [r7, #24]
 81059b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81059c0:	69fb      	ldr	r3, [r7, #28]
 81059c2:	005b      	lsls	r3, r3, #1
 81059c4:	2203      	movs	r2, #3
 81059c6:	fa02 f303 	lsl.w	r3, r2, r3
 81059ca:	43db      	mvns	r3, r3
 81059cc:	69ba      	ldr	r2, [r7, #24]
 81059ce:	4013      	ands	r3, r2
 81059d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81059d2:	683b      	ldr	r3, [r7, #0]
 81059d4:	685b      	ldr	r3, [r3, #4]
 81059d6:	f003 0203 	and.w	r2, r3, #3
 81059da:	69fb      	ldr	r3, [r7, #28]
 81059dc:	005b      	lsls	r3, r3, #1
 81059de:	fa02 f303 	lsl.w	r3, r2, r3
 81059e2:	69ba      	ldr	r2, [r7, #24]
 81059e4:	4313      	orrs	r3, r2
 81059e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	69ba      	ldr	r2, [r7, #24]
 81059ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81059ee:	683b      	ldr	r3, [r7, #0]
 81059f0:	685b      	ldr	r3, [r3, #4]
 81059f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81059f6:	2b00      	cmp	r3, #0
 81059f8:	f000 80e0 	beq.w	8105bbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81059fc:	4b2f      	ldr	r3, [pc, #188]	; (8105abc <HAL_GPIO_Init+0x238>)
 81059fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a02:	4a2e      	ldr	r2, [pc, #184]	; (8105abc <HAL_GPIO_Init+0x238>)
 8105a04:	f043 0302 	orr.w	r3, r3, #2
 8105a08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105a0c:	4b2b      	ldr	r3, [pc, #172]	; (8105abc <HAL_GPIO_Init+0x238>)
 8105a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105a12:	f003 0302 	and.w	r3, r3, #2
 8105a16:	60fb      	str	r3, [r7, #12]
 8105a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105a1a:	4a29      	ldr	r2, [pc, #164]	; (8105ac0 <HAL_GPIO_Init+0x23c>)
 8105a1c:	69fb      	ldr	r3, [r7, #28]
 8105a1e:	089b      	lsrs	r3, r3, #2
 8105a20:	3302      	adds	r3, #2
 8105a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105a28:	69fb      	ldr	r3, [r7, #28]
 8105a2a:	f003 0303 	and.w	r3, r3, #3
 8105a2e:	009b      	lsls	r3, r3, #2
 8105a30:	220f      	movs	r2, #15
 8105a32:	fa02 f303 	lsl.w	r3, r2, r3
 8105a36:	43db      	mvns	r3, r3
 8105a38:	69ba      	ldr	r2, [r7, #24]
 8105a3a:	4013      	ands	r3, r2
 8105a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	4a20      	ldr	r2, [pc, #128]	; (8105ac4 <HAL_GPIO_Init+0x240>)
 8105a42:	4293      	cmp	r3, r2
 8105a44:	d052      	beq.n	8105aec <HAL_GPIO_Init+0x268>
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	4a1f      	ldr	r2, [pc, #124]	; (8105ac8 <HAL_GPIO_Init+0x244>)
 8105a4a:	4293      	cmp	r3, r2
 8105a4c:	d031      	beq.n	8105ab2 <HAL_GPIO_Init+0x22e>
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	4a1e      	ldr	r2, [pc, #120]	; (8105acc <HAL_GPIO_Init+0x248>)
 8105a52:	4293      	cmp	r3, r2
 8105a54:	d02b      	beq.n	8105aae <HAL_GPIO_Init+0x22a>
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	4a1d      	ldr	r2, [pc, #116]	; (8105ad0 <HAL_GPIO_Init+0x24c>)
 8105a5a:	4293      	cmp	r3, r2
 8105a5c:	d025      	beq.n	8105aaa <HAL_GPIO_Init+0x226>
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	4a1c      	ldr	r2, [pc, #112]	; (8105ad4 <HAL_GPIO_Init+0x250>)
 8105a62:	4293      	cmp	r3, r2
 8105a64:	d01f      	beq.n	8105aa6 <HAL_GPIO_Init+0x222>
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	4a1b      	ldr	r2, [pc, #108]	; (8105ad8 <HAL_GPIO_Init+0x254>)
 8105a6a:	4293      	cmp	r3, r2
 8105a6c:	d019      	beq.n	8105aa2 <HAL_GPIO_Init+0x21e>
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	4a1a      	ldr	r2, [pc, #104]	; (8105adc <HAL_GPIO_Init+0x258>)
 8105a72:	4293      	cmp	r3, r2
 8105a74:	d013      	beq.n	8105a9e <HAL_GPIO_Init+0x21a>
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	4a19      	ldr	r2, [pc, #100]	; (8105ae0 <HAL_GPIO_Init+0x25c>)
 8105a7a:	4293      	cmp	r3, r2
 8105a7c:	d00d      	beq.n	8105a9a <HAL_GPIO_Init+0x216>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	4a18      	ldr	r2, [pc, #96]	; (8105ae4 <HAL_GPIO_Init+0x260>)
 8105a82:	4293      	cmp	r3, r2
 8105a84:	d007      	beq.n	8105a96 <HAL_GPIO_Init+0x212>
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	4a17      	ldr	r2, [pc, #92]	; (8105ae8 <HAL_GPIO_Init+0x264>)
 8105a8a:	4293      	cmp	r3, r2
 8105a8c:	d101      	bne.n	8105a92 <HAL_GPIO_Init+0x20e>
 8105a8e:	2309      	movs	r3, #9
 8105a90:	e02d      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105a92:	230a      	movs	r3, #10
 8105a94:	e02b      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105a96:	2308      	movs	r3, #8
 8105a98:	e029      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105a9a:	2307      	movs	r3, #7
 8105a9c:	e027      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105a9e:	2306      	movs	r3, #6
 8105aa0:	e025      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105aa2:	2305      	movs	r3, #5
 8105aa4:	e023      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105aa6:	2304      	movs	r3, #4
 8105aa8:	e021      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105aaa:	2303      	movs	r3, #3
 8105aac:	e01f      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105aae:	2302      	movs	r3, #2
 8105ab0:	e01d      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105ab2:	2301      	movs	r3, #1
 8105ab4:	e01b      	b.n	8105aee <HAL_GPIO_Init+0x26a>
 8105ab6:	bf00      	nop
 8105ab8:	580000c0 	.word	0x580000c0
 8105abc:	58024400 	.word	0x58024400
 8105ac0:	58000400 	.word	0x58000400
 8105ac4:	58020000 	.word	0x58020000
 8105ac8:	58020400 	.word	0x58020400
 8105acc:	58020800 	.word	0x58020800
 8105ad0:	58020c00 	.word	0x58020c00
 8105ad4:	58021000 	.word	0x58021000
 8105ad8:	58021400 	.word	0x58021400
 8105adc:	58021800 	.word	0x58021800
 8105ae0:	58021c00 	.word	0x58021c00
 8105ae4:	58022000 	.word	0x58022000
 8105ae8:	58022400 	.word	0x58022400
 8105aec:	2300      	movs	r3, #0
 8105aee:	69fa      	ldr	r2, [r7, #28]
 8105af0:	f002 0203 	and.w	r2, r2, #3
 8105af4:	0092      	lsls	r2, r2, #2
 8105af6:	4093      	lsls	r3, r2
 8105af8:	69ba      	ldr	r2, [r7, #24]
 8105afa:	4313      	orrs	r3, r2
 8105afc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105afe:	4938      	ldr	r1, [pc, #224]	; (8105be0 <HAL_GPIO_Init+0x35c>)
 8105b00:	69fb      	ldr	r3, [r7, #28]
 8105b02:	089b      	lsrs	r3, r3, #2
 8105b04:	3302      	adds	r3, #2
 8105b06:	69ba      	ldr	r2, [r7, #24]
 8105b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b14:	693b      	ldr	r3, [r7, #16]
 8105b16:	43db      	mvns	r3, r3
 8105b18:	69ba      	ldr	r2, [r7, #24]
 8105b1a:	4013      	ands	r3, r2
 8105b1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105b1e:	683b      	ldr	r3, [r7, #0]
 8105b20:	685b      	ldr	r3, [r3, #4]
 8105b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105b26:	2b00      	cmp	r3, #0
 8105b28:	d003      	beq.n	8105b32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8105b2a:	69ba      	ldr	r2, [r7, #24]
 8105b2c:	693b      	ldr	r3, [r7, #16]
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105b36:	69bb      	ldr	r3, [r7, #24]
 8105b38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105b3e:	685b      	ldr	r3, [r3, #4]
 8105b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b42:	693b      	ldr	r3, [r7, #16]
 8105b44:	43db      	mvns	r3, r3
 8105b46:	69ba      	ldr	r2, [r7, #24]
 8105b48:	4013      	ands	r3, r2
 8105b4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105b4c:	683b      	ldr	r3, [r7, #0]
 8105b4e:	685b      	ldr	r3, [r3, #4]
 8105b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105b54:	2b00      	cmp	r3, #0
 8105b56:	d003      	beq.n	8105b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8105b58:	69ba      	ldr	r2, [r7, #24]
 8105b5a:	693b      	ldr	r3, [r7, #16]
 8105b5c:	4313      	orrs	r3, r2
 8105b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105b64:	69bb      	ldr	r3, [r7, #24]
 8105b66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105b68:	697b      	ldr	r3, [r7, #20]
 8105b6a:	685b      	ldr	r3, [r3, #4]
 8105b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b6e:	693b      	ldr	r3, [r7, #16]
 8105b70:	43db      	mvns	r3, r3
 8105b72:	69ba      	ldr	r2, [r7, #24]
 8105b74:	4013      	ands	r3, r2
 8105b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105b78:	683b      	ldr	r3, [r7, #0]
 8105b7a:	685b      	ldr	r3, [r3, #4]
 8105b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105b80:	2b00      	cmp	r3, #0
 8105b82:	d003      	beq.n	8105b8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105b84:	69ba      	ldr	r2, [r7, #24]
 8105b86:	693b      	ldr	r3, [r7, #16]
 8105b88:	4313      	orrs	r3, r2
 8105b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105b8c:	697b      	ldr	r3, [r7, #20]
 8105b8e:	69ba      	ldr	r2, [r7, #24]
 8105b90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105b92:	697b      	ldr	r3, [r7, #20]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105b98:	693b      	ldr	r3, [r7, #16]
 8105b9a:	43db      	mvns	r3, r3
 8105b9c:	69ba      	ldr	r2, [r7, #24]
 8105b9e:	4013      	ands	r3, r2
 8105ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8105ba2:	683b      	ldr	r3, [r7, #0]
 8105ba4:	685b      	ldr	r3, [r3, #4]
 8105ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105baa:	2b00      	cmp	r3, #0
 8105bac:	d003      	beq.n	8105bb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105bae:	69ba      	ldr	r2, [r7, #24]
 8105bb0:	693b      	ldr	r3, [r7, #16]
 8105bb2:	4313      	orrs	r3, r2
 8105bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105bb6:	697b      	ldr	r3, [r7, #20]
 8105bb8:	69ba      	ldr	r2, [r7, #24]
 8105bba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105bbc:	69fb      	ldr	r3, [r7, #28]
 8105bbe:	3301      	adds	r3, #1
 8105bc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105bc2:	683b      	ldr	r3, [r7, #0]
 8105bc4:	681a      	ldr	r2, [r3, #0]
 8105bc6:	69fb      	ldr	r3, [r7, #28]
 8105bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	f47f ae63 	bne.w	8105898 <HAL_GPIO_Init+0x14>
  }
}
 8105bd2:	bf00      	nop
 8105bd4:	bf00      	nop
 8105bd6:	3724      	adds	r7, #36	; 0x24
 8105bd8:	46bd      	mov	sp, r7
 8105bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bde:	4770      	bx	lr
 8105be0:	58000400 	.word	0x58000400

08105be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105be4:	b480      	push	{r7}
 8105be6:	b083      	sub	sp, #12
 8105be8:	af00      	add	r7, sp, #0
 8105bea:	6078      	str	r0, [r7, #4]
 8105bec:	460b      	mov	r3, r1
 8105bee:	807b      	strh	r3, [r7, #2]
 8105bf0:	4613      	mov	r3, r2
 8105bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105bf4:	787b      	ldrb	r3, [r7, #1]
 8105bf6:	2b00      	cmp	r3, #0
 8105bf8:	d003      	beq.n	8105c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105bfa:	887a      	ldrh	r2, [r7, #2]
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105c00:	e003      	b.n	8105c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105c02:	887b      	ldrh	r3, [r7, #2]
 8105c04:	041a      	lsls	r2, r3, #16
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	619a      	str	r2, [r3, #24]
}
 8105c0a:	bf00      	nop
 8105c0c:	370c      	adds	r7, #12
 8105c0e:	46bd      	mov	sp, r7
 8105c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c14:	4770      	bx	lr

08105c16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8105c16:	b480      	push	{r7}
 8105c18:	b085      	sub	sp, #20
 8105c1a:	af00      	add	r7, sp, #0
 8105c1c:	6078      	str	r0, [r7, #4]
 8105c1e:	460b      	mov	r3, r1
 8105c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	695b      	ldr	r3, [r3, #20]
 8105c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8105c28:	887a      	ldrh	r2, [r7, #2]
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	4013      	ands	r3, r2
 8105c2e:	041a      	lsls	r2, r3, #16
 8105c30:	68fb      	ldr	r3, [r7, #12]
 8105c32:	43d9      	mvns	r1, r3
 8105c34:	887b      	ldrh	r3, [r7, #2]
 8105c36:	400b      	ands	r3, r1
 8105c38:	431a      	orrs	r2, r3
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	619a      	str	r2, [r3, #24]
}
 8105c3e:	bf00      	nop
 8105c40:	3714      	adds	r7, #20
 8105c42:	46bd      	mov	sp, r7
 8105c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c48:	4770      	bx	lr
	...

08105c4c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105c4c:	b480      	push	{r7}
 8105c4e:	b083      	sub	sp, #12
 8105c50:	af00      	add	r7, sp, #0
 8105c52:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105c54:	4b05      	ldr	r3, [pc, #20]	; (8105c6c <HAL_HSEM_ActivateNotification+0x20>)
 8105c56:	681a      	ldr	r2, [r3, #0]
 8105c58:	4904      	ldr	r1, [pc, #16]	; (8105c6c <HAL_HSEM_ActivateNotification+0x20>)
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	4313      	orrs	r3, r2
 8105c5e:	600b      	str	r3, [r1, #0]
#endif
}
 8105c60:	bf00      	nop
 8105c62:	370c      	adds	r7, #12
 8105c64:	46bd      	mov	sp, r7
 8105c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c6a:	4770      	bx	lr
 8105c6c:	58026510 	.word	0x58026510

08105c70 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105c70:	b580      	push	{r7, lr}
 8105c72:	b084      	sub	sp, #16
 8105c74:	af00      	add	r7, sp, #0
 8105c76:	60f8      	str	r0, [r7, #12]
 8105c78:	460b      	mov	r3, r1
 8105c7a:	607a      	str	r2, [r7, #4]
 8105c7c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105c7e:	4b37      	ldr	r3, [pc, #220]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	f023 0201 	bic.w	r2, r3, #1
 8105c86:	4935      	ldr	r1, [pc, #212]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105c88:	68fb      	ldr	r3, [r7, #12]
 8105c8a:	4313      	orrs	r3, r2
 8105c8c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	d123      	bne.n	8105cdc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105c94:	f7fe f922 	bl	8103edc <HAL_GetCurrentCPUID>
 8105c98:	4603      	mov	r3, r0
 8105c9a:	2b03      	cmp	r3, #3
 8105c9c:	d158      	bne.n	8105d50 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105c9e:	4b2f      	ldr	r3, [pc, #188]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ca0:	691b      	ldr	r3, [r3, #16]
 8105ca2:	4a2e      	ldr	r2, [pc, #184]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ca4:	f023 0301 	bic.w	r3, r3, #1
 8105ca8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105caa:	4b2d      	ldr	r3, [pc, #180]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cac:	691b      	ldr	r3, [r3, #16]
 8105cae:	4a2c      	ldr	r2, [pc, #176]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cb0:	f043 0304 	orr.w	r3, r3, #4
 8105cb4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105cb6:	f3bf 8f4f 	dsb	sy
}
 8105cba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105cbc:	f3bf 8f6f 	isb	sy
}
 8105cc0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105cc2:	7afb      	ldrb	r3, [r7, #11]
 8105cc4:	2b01      	cmp	r3, #1
 8105cc6:	d101      	bne.n	8105ccc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105cc8:	bf30      	wfi
 8105cca:	e000      	b.n	8105cce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105ccc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105cce:	4b24      	ldr	r3, [pc, #144]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cd0:	691b      	ldr	r3, [r3, #16]
 8105cd2:	4a23      	ldr	r2, [pc, #140]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cd4:	f023 0304 	bic.w	r3, r3, #4
 8105cd8:	6113      	str	r3, [r2, #16]
 8105cda:	e03c      	b.n	8105d56 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	2b01      	cmp	r3, #1
 8105ce0:	d123      	bne.n	8105d2a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105ce2:	f7fe f8fb 	bl	8103edc <HAL_GetCurrentCPUID>
 8105ce6:	4603      	mov	r3, r0
 8105ce8:	2b01      	cmp	r3, #1
 8105cea:	d133      	bne.n	8105d54 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105cec:	4b1b      	ldr	r3, [pc, #108]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cee:	695b      	ldr	r3, [r3, #20]
 8105cf0:	4a1a      	ldr	r2, [pc, #104]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105cf2:	f023 0302 	bic.w	r3, r3, #2
 8105cf6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105cf8:	4b19      	ldr	r3, [pc, #100]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cfa:	691b      	ldr	r3, [r3, #16]
 8105cfc:	4a18      	ldr	r2, [pc, #96]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105cfe:	f043 0304 	orr.w	r3, r3, #4
 8105d02:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105d04:	f3bf 8f4f 	dsb	sy
}
 8105d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105d0a:	f3bf 8f6f 	isb	sy
}
 8105d0e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105d10:	7afb      	ldrb	r3, [r7, #11]
 8105d12:	2b01      	cmp	r3, #1
 8105d14:	d101      	bne.n	8105d1a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105d16:	bf30      	wfi
 8105d18:	e000      	b.n	8105d1c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105d1a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105d1c:	4b10      	ldr	r3, [pc, #64]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d1e:	691b      	ldr	r3, [r3, #16]
 8105d20:	4a0f      	ldr	r2, [pc, #60]	; (8105d60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105d22:	f023 0304 	bic.w	r3, r3, #4
 8105d26:	6113      	str	r3, [r2, #16]
 8105d28:	e015      	b.n	8105d56 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105d2a:	f7fe f8d7 	bl	8103edc <HAL_GetCurrentCPUID>
 8105d2e:	4603      	mov	r3, r0
 8105d30:	2b03      	cmp	r3, #3
 8105d32:	d106      	bne.n	8105d42 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105d34:	4b09      	ldr	r3, [pc, #36]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d36:	691b      	ldr	r3, [r3, #16]
 8105d38:	4a08      	ldr	r2, [pc, #32]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d3a:	f023 0304 	bic.w	r3, r3, #4
 8105d3e:	6113      	str	r3, [r2, #16]
 8105d40:	e009      	b.n	8105d56 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105d42:	4b06      	ldr	r3, [pc, #24]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d44:	695b      	ldr	r3, [r3, #20]
 8105d46:	4a05      	ldr	r2, [pc, #20]	; (8105d5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8105d48:	f023 0304 	bic.w	r3, r3, #4
 8105d4c:	6153      	str	r3, [r2, #20]
 8105d4e:	e002      	b.n	8105d56 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d50:	bf00      	nop
 8105d52:	e000      	b.n	8105d56 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105d54:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105d56:	3710      	adds	r7, #16
 8105d58:	46bd      	mov	sp, r7
 8105d5a:	bd80      	pop	{r7, pc}
 8105d5c:	58024800 	.word	0x58024800
 8105d60:	e000ed00 	.word	0xe000ed00

08105d64 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105d64:	b580      	push	{r7, lr}
 8105d66:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105d68:	f7fe f8b8 	bl	8103edc <HAL_GetCurrentCPUID>
 8105d6c:	4603      	mov	r3, r0
 8105d6e:	2b03      	cmp	r3, #3
 8105d70:	d101      	bne.n	8105d76 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105d72:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105d74:	e001      	b.n	8105d7a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105d76:	bf40      	sev
    __WFE ();
 8105d78:	bf20      	wfe
}
 8105d7a:	bf00      	nop
 8105d7c:	bd80      	pop	{r7, pc}
	...

08105d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105d80:	b480      	push	{r7}
 8105d82:	b089      	sub	sp, #36	; 0x24
 8105d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105d86:	4bb3      	ldr	r3, [pc, #716]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105d88:	691b      	ldr	r3, [r3, #16]
 8105d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105d8e:	2b18      	cmp	r3, #24
 8105d90:	f200 8155 	bhi.w	810603e <HAL_RCC_GetSysClockFreq+0x2be>
 8105d94:	a201      	add	r2, pc, #4	; (adr r2, 8105d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8105d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d9a:	bf00      	nop
 8105d9c:	08105e01 	.word	0x08105e01
 8105da0:	0810603f 	.word	0x0810603f
 8105da4:	0810603f 	.word	0x0810603f
 8105da8:	0810603f 	.word	0x0810603f
 8105dac:	0810603f 	.word	0x0810603f
 8105db0:	0810603f 	.word	0x0810603f
 8105db4:	0810603f 	.word	0x0810603f
 8105db8:	0810603f 	.word	0x0810603f
 8105dbc:	08105e27 	.word	0x08105e27
 8105dc0:	0810603f 	.word	0x0810603f
 8105dc4:	0810603f 	.word	0x0810603f
 8105dc8:	0810603f 	.word	0x0810603f
 8105dcc:	0810603f 	.word	0x0810603f
 8105dd0:	0810603f 	.word	0x0810603f
 8105dd4:	0810603f 	.word	0x0810603f
 8105dd8:	0810603f 	.word	0x0810603f
 8105ddc:	08105e2d 	.word	0x08105e2d
 8105de0:	0810603f 	.word	0x0810603f
 8105de4:	0810603f 	.word	0x0810603f
 8105de8:	0810603f 	.word	0x0810603f
 8105dec:	0810603f 	.word	0x0810603f
 8105df0:	0810603f 	.word	0x0810603f
 8105df4:	0810603f 	.word	0x0810603f
 8105df8:	0810603f 	.word	0x0810603f
 8105dfc:	08105e33 	.word	0x08105e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e00:	4b94      	ldr	r3, [pc, #592]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	f003 0320 	and.w	r3, r3, #32
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d009      	beq.n	8105e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e0c:	4b91      	ldr	r3, [pc, #580]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	08db      	lsrs	r3, r3, #3
 8105e12:	f003 0303 	and.w	r3, r3, #3
 8105e16:	4a90      	ldr	r2, [pc, #576]	; (8106058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e18:	fa22 f303 	lsr.w	r3, r2, r3
 8105e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105e1e:	e111      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105e20:	4b8d      	ldr	r3, [pc, #564]	; (8106058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105e22:	61bb      	str	r3, [r7, #24]
      break;
 8105e24:	e10e      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105e26:	4b8d      	ldr	r3, [pc, #564]	; (810605c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105e28:	61bb      	str	r3, [r7, #24]
      break;
 8105e2a:	e10b      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105e2c:	4b8c      	ldr	r3, [pc, #560]	; (8106060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105e2e:	61bb      	str	r3, [r7, #24]
      break;
 8105e30:	e108      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e32:	4b88      	ldr	r3, [pc, #544]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e36:	f003 0303 	and.w	r3, r3, #3
 8105e3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105e3c:	4b85      	ldr	r3, [pc, #532]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e40:	091b      	lsrs	r3, r3, #4
 8105e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105e46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105e48:	4b82      	ldr	r3, [pc, #520]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e4c:	f003 0301 	and.w	r3, r3, #1
 8105e50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105e52:	4b80      	ldr	r3, [pc, #512]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105e56:	08db      	lsrs	r3, r3, #3
 8105e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105e5c:	68fa      	ldr	r2, [r7, #12]
 8105e5e:	fb02 f303 	mul.w	r3, r2, r3
 8105e62:	ee07 3a90 	vmov	s15, r3
 8105e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105e6e:	693b      	ldr	r3, [r7, #16]
 8105e70:	2b00      	cmp	r3, #0
 8105e72:	f000 80e1 	beq.w	8106038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105e76:	697b      	ldr	r3, [r7, #20]
 8105e78:	2b02      	cmp	r3, #2
 8105e7a:	f000 8083 	beq.w	8105f84 <HAL_RCC_GetSysClockFreq+0x204>
 8105e7e:	697b      	ldr	r3, [r7, #20]
 8105e80:	2b02      	cmp	r3, #2
 8105e82:	f200 80a1 	bhi.w	8105fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8105e86:	697b      	ldr	r3, [r7, #20]
 8105e88:	2b00      	cmp	r3, #0
 8105e8a:	d003      	beq.n	8105e94 <HAL_RCC_GetSysClockFreq+0x114>
 8105e8c:	697b      	ldr	r3, [r7, #20]
 8105e8e:	2b01      	cmp	r3, #1
 8105e90:	d056      	beq.n	8105f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105e92:	e099      	b.n	8105fc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e94:	4b6f      	ldr	r3, [pc, #444]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	f003 0320 	and.w	r3, r3, #32
 8105e9c:	2b00      	cmp	r3, #0
 8105e9e:	d02d      	beq.n	8105efc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105ea0:	4b6c      	ldr	r3, [pc, #432]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	08db      	lsrs	r3, r3, #3
 8105ea6:	f003 0303 	and.w	r3, r3, #3
 8105eaa:	4a6b      	ldr	r2, [pc, #428]	; (8106058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105eac:	fa22 f303 	lsr.w	r3, r2, r3
 8105eb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	ee07 3a90 	vmov	s15, r3
 8105eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ebc:	693b      	ldr	r3, [r7, #16]
 8105ebe:	ee07 3a90 	vmov	s15, r3
 8105ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105eca:	4b62      	ldr	r3, [pc, #392]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ed2:	ee07 3a90 	vmov	s15, r3
 8105ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8105ede:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105efa:	e087      	b.n	810600c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105efc:	693b      	ldr	r3, [r7, #16]
 8105efe:	ee07 3a90 	vmov	s15, r3
 8105f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f0e:	4b51      	ldr	r3, [pc, #324]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f16:	ee07 3a90 	vmov	s15, r3
 8105f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105f3e:	e065      	b.n	810600c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105f40:	693b      	ldr	r3, [r7, #16]
 8105f42:	ee07 3a90 	vmov	s15, r3
 8105f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810606c <HAL_RCC_GetSysClockFreq+0x2ec>
 8105f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f52:	4b40      	ldr	r3, [pc, #256]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f5a:	ee07 3a90 	vmov	s15, r3
 8105f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8105f66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105f82:	e043      	b.n	810600c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105f84:	693b      	ldr	r3, [r7, #16]
 8105f86:	ee07 3a90 	vmov	s15, r3
 8105f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8105f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f96:	4b2f      	ldr	r3, [pc, #188]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f9e:	ee07 3a90 	vmov	s15, r3
 8105fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105faa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105fc6:	e021      	b.n	810600c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105fc8:	693b      	ldr	r3, [r7, #16]
 8105fca:	ee07 3a90 	vmov	s15, r3
 8105fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810606c <HAL_RCC_GetSysClockFreq+0x2ec>
 8105fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fda:	4b1e      	ldr	r3, [pc, #120]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fe2:	ee07 3a90 	vmov	s15, r3
 8105fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8105fee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810600a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810600c:	4b11      	ldr	r3, [pc, #68]	; (8106054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106010:	0a5b      	lsrs	r3, r3, #9
 8106012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106016:	3301      	adds	r3, #1
 8106018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810601a:	683b      	ldr	r3, [r7, #0]
 810601c:	ee07 3a90 	vmov	s15, r3
 8106020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106024:	edd7 6a07 	vldr	s13, [r7, #28]
 8106028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810602c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106030:	ee17 3a90 	vmov	r3, s15
 8106034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106036:	e005      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106038:	2300      	movs	r3, #0
 810603a:	61bb      	str	r3, [r7, #24]
      break;
 810603c:	e002      	b.n	8106044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810603e:	4b07      	ldr	r3, [pc, #28]	; (810605c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106040:	61bb      	str	r3, [r7, #24]
      break;
 8106042:	bf00      	nop
  }

  return sysclockfreq;
 8106044:	69bb      	ldr	r3, [r7, #24]
}
 8106046:	4618      	mov	r0, r3
 8106048:	3724      	adds	r7, #36	; 0x24
 810604a:	46bd      	mov	sp, r7
 810604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106050:	4770      	bx	lr
 8106052:	bf00      	nop
 8106054:	58024400 	.word	0x58024400
 8106058:	03d09000 	.word	0x03d09000
 810605c:	003d0900 	.word	0x003d0900
 8106060:	017d7840 	.word	0x017d7840
 8106064:	46000000 	.word	0x46000000
 8106068:	4c742400 	.word	0x4c742400
 810606c:	4a742400 	.word	0x4a742400
 8106070:	4bbebc20 	.word	0x4bbebc20

08106074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106074:	b580      	push	{r7, lr}
 8106076:	b082      	sub	sp, #8
 8106078:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810607a:	f7ff fe81 	bl	8105d80 <HAL_RCC_GetSysClockFreq>
 810607e:	4602      	mov	r2, r0
 8106080:	4b11      	ldr	r3, [pc, #68]	; (81060c8 <HAL_RCC_GetHCLKFreq+0x54>)
 8106082:	699b      	ldr	r3, [r3, #24]
 8106084:	0a1b      	lsrs	r3, r3, #8
 8106086:	f003 030f 	and.w	r3, r3, #15
 810608a:	4910      	ldr	r1, [pc, #64]	; (81060cc <HAL_RCC_GetHCLKFreq+0x58>)
 810608c:	5ccb      	ldrb	r3, [r1, r3]
 810608e:	f003 031f 	and.w	r3, r3, #31
 8106092:	fa22 f303 	lsr.w	r3, r2, r3
 8106096:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106098:	4b0b      	ldr	r3, [pc, #44]	; (81060c8 <HAL_RCC_GetHCLKFreq+0x54>)
 810609a:	699b      	ldr	r3, [r3, #24]
 810609c:	f003 030f 	and.w	r3, r3, #15
 81060a0:	4a0a      	ldr	r2, [pc, #40]	; (81060cc <HAL_RCC_GetHCLKFreq+0x58>)
 81060a2:	5cd3      	ldrb	r3, [r2, r3]
 81060a4:	f003 031f 	and.w	r3, r3, #31
 81060a8:	687a      	ldr	r2, [r7, #4]
 81060aa:	fa22 f303 	lsr.w	r3, r2, r3
 81060ae:	4a08      	ldr	r2, [pc, #32]	; (81060d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81060b2:	4b07      	ldr	r3, [pc, #28]	; (81060d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	4a07      	ldr	r2, [pc, #28]	; (81060d4 <HAL_RCC_GetHCLKFreq+0x60>)
 81060b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81060ba:	4b05      	ldr	r3, [pc, #20]	; (81060d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81060bc:	681b      	ldr	r3, [r3, #0]
}
 81060be:	4618      	mov	r0, r3
 81060c0:	3708      	adds	r7, #8
 81060c2:	46bd      	mov	sp, r7
 81060c4:	bd80      	pop	{r7, pc}
 81060c6:	bf00      	nop
 81060c8:	58024400 	.word	0x58024400
 81060cc:	0817e9a8 	.word	0x0817e9a8
 81060d0:	10007374 	.word	0x10007374
 81060d4:	10007370 	.word	0x10007370

081060d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81060d8:	b580      	push	{r7, lr}
 81060da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81060dc:	f7ff ffca 	bl	8106074 <HAL_RCC_GetHCLKFreq>
 81060e0:	4602      	mov	r2, r0
 81060e2:	4b06      	ldr	r3, [pc, #24]	; (81060fc <HAL_RCC_GetPCLK1Freq+0x24>)
 81060e4:	69db      	ldr	r3, [r3, #28]
 81060e6:	091b      	lsrs	r3, r3, #4
 81060e8:	f003 0307 	and.w	r3, r3, #7
 81060ec:	4904      	ldr	r1, [pc, #16]	; (8106100 <HAL_RCC_GetPCLK1Freq+0x28>)
 81060ee:	5ccb      	ldrb	r3, [r1, r3]
 81060f0:	f003 031f 	and.w	r3, r3, #31
 81060f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81060f8:	4618      	mov	r0, r3
 81060fa:	bd80      	pop	{r7, pc}
 81060fc:	58024400 	.word	0x58024400
 8106100:	0817e9a8 	.word	0x0817e9a8

08106104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106104:	b580      	push	{r7, lr}
 8106106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106108:	f7ff ffb4 	bl	8106074 <HAL_RCC_GetHCLKFreq>
 810610c:	4602      	mov	r2, r0
 810610e:	4b06      	ldr	r3, [pc, #24]	; (8106128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106110:	69db      	ldr	r3, [r3, #28]
 8106112:	0a1b      	lsrs	r3, r3, #8
 8106114:	f003 0307 	and.w	r3, r3, #7
 8106118:	4904      	ldr	r1, [pc, #16]	; (810612c <HAL_RCC_GetPCLK2Freq+0x28>)
 810611a:	5ccb      	ldrb	r3, [r1, r3]
 810611c:	f003 031f 	and.w	r3, r3, #31
 8106120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106124:	4618      	mov	r0, r3
 8106126:	bd80      	pop	{r7, pc}
 8106128:	58024400 	.word	0x58024400
 810612c:	0817e9a8 	.word	0x0817e9a8

08106130 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106134:	b0ca      	sub	sp, #296	; 0x128
 8106136:	af00      	add	r7, sp, #0
 8106138:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810613c:	2300      	movs	r3, #0
 810613e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106142:	2300      	movs	r3, #0
 8106144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106150:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8106154:	2500      	movs	r5, #0
 8106156:	ea54 0305 	orrs.w	r3, r4, r5
 810615a:	d049      	beq.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106162:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106166:	d02f      	beq.n	81061c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8106168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810616c:	d828      	bhi.n	81061c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810616e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106172:	d01a      	beq.n	81061aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106178:	d822      	bhi.n	81061c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810617a:	2b00      	cmp	r3, #0
 810617c:	d003      	beq.n	8106186 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810617e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106182:	d007      	beq.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106184:	e01c      	b.n	81061c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106186:	4bb8      	ldr	r3, [pc, #736]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810618a:	4ab7      	ldr	r2, [pc, #732]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810618c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106192:	e01a      	b.n	81061ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106198:	3308      	adds	r3, #8
 810619a:	2102      	movs	r1, #2
 810619c:	4618      	mov	r0, r3
 810619e:	f001 fc8f 	bl	8107ac0 <RCCEx_PLL2_Config>
 81061a2:	4603      	mov	r3, r0
 81061a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81061a8:	e00f      	b.n	81061ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061ae:	3328      	adds	r3, #40	; 0x28
 81061b0:	2102      	movs	r1, #2
 81061b2:	4618      	mov	r0, r3
 81061b4:	f001 fd36 	bl	8107c24 <RCCEx_PLL3_Config>
 81061b8:	4603      	mov	r3, r0
 81061ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81061be:	e004      	b.n	81061ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81061c0:	2301      	movs	r3, #1
 81061c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81061c6:	e000      	b.n	81061ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	d10a      	bne.n	81061e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81061d2:	4ba5      	ldr	r3, [pc, #660]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81061d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81061d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81061e0:	4aa1      	ldr	r2, [pc, #644]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81061e2:	430b      	orrs	r3, r1
 81061e4:	6513      	str	r3, [r2, #80]	; 0x50
 81061e6:	e003      	b.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81061fc:	f04f 0900 	mov.w	r9, #0
 8106200:	ea58 0309 	orrs.w	r3, r8, r9
 8106204:	d047      	beq.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810620c:	2b04      	cmp	r3, #4
 810620e:	d82a      	bhi.n	8106266 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106210:	a201      	add	r2, pc, #4	; (adr r2, 8106218 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106216:	bf00      	nop
 8106218:	0810622d 	.word	0x0810622d
 810621c:	0810623b 	.word	0x0810623b
 8106220:	08106251 	.word	0x08106251
 8106224:	0810626f 	.word	0x0810626f
 8106228:	0810626f 	.word	0x0810626f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810622c:	4b8e      	ldr	r3, [pc, #568]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106230:	4a8d      	ldr	r2, [pc, #564]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106238:	e01a      	b.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810623e:	3308      	adds	r3, #8
 8106240:	2100      	movs	r1, #0
 8106242:	4618      	mov	r0, r3
 8106244:	f001 fc3c 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106248:	4603      	mov	r3, r0
 810624a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810624e:	e00f      	b.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106254:	3328      	adds	r3, #40	; 0x28
 8106256:	2100      	movs	r1, #0
 8106258:	4618      	mov	r0, r3
 810625a:	f001 fce3 	bl	8107c24 <RCCEx_PLL3_Config>
 810625e:	4603      	mov	r3, r0
 8106260:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106264:	e004      	b.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106266:	2301      	movs	r3, #1
 8106268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810626c:	e000      	b.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810626e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106274:	2b00      	cmp	r3, #0
 8106276:	d10a      	bne.n	810628e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106278:	4b7b      	ldr	r3, [pc, #492]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810627c:	f023 0107 	bic.w	r1, r3, #7
 8106280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106286:	4a78      	ldr	r2, [pc, #480]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106288:	430b      	orrs	r3, r1
 810628a:	6513      	str	r3, [r2, #80]	; 0x50
 810628c:	e003      	b.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810628e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810629e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 81062a2:	f04f 0b00 	mov.w	fp, #0
 81062a6:	ea5a 030b 	orrs.w	r3, sl, fp
 81062aa:	d04c      	beq.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062b6:	d030      	beq.n	810631a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81062b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062bc:	d829      	bhi.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81062be:	2bc0      	cmp	r3, #192	; 0xc0
 81062c0:	d02d      	beq.n	810631e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81062c2:	2bc0      	cmp	r3, #192	; 0xc0
 81062c4:	d825      	bhi.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81062c6:	2b80      	cmp	r3, #128	; 0x80
 81062c8:	d018      	beq.n	81062fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81062ca:	2b80      	cmp	r3, #128	; 0x80
 81062cc:	d821      	bhi.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81062ce:	2b00      	cmp	r3, #0
 81062d0:	d002      	beq.n	81062d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81062d2:	2b40      	cmp	r3, #64	; 0x40
 81062d4:	d007      	beq.n	81062e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81062d6:	e01c      	b.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81062d8:	4b63      	ldr	r3, [pc, #396]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062dc:	4a62      	ldr	r2, [pc, #392]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81062e4:	e01c      	b.n	8106320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062ea:	3308      	adds	r3, #8
 81062ec:	2100      	movs	r1, #0
 81062ee:	4618      	mov	r0, r3
 81062f0:	f001 fbe6 	bl	8107ac0 <RCCEx_PLL2_Config>
 81062f4:	4603      	mov	r3, r0
 81062f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81062fa:	e011      	b.n	8106320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106300:	3328      	adds	r3, #40	; 0x28
 8106302:	2100      	movs	r1, #0
 8106304:	4618      	mov	r0, r3
 8106306:	f001 fc8d 	bl	8107c24 <RCCEx_PLL3_Config>
 810630a:	4603      	mov	r3, r0
 810630c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106310:	e006      	b.n	8106320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106312:	2301      	movs	r3, #1
 8106314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106318:	e002      	b.n	8106320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810631a:	bf00      	nop
 810631c:	e000      	b.n	8106320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106320:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106324:	2b00      	cmp	r3, #0
 8106326:	d10a      	bne.n	810633e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106328:	4b4f      	ldr	r3, [pc, #316]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810632c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8106330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106336:	4a4c      	ldr	r2, [pc, #304]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106338:	430b      	orrs	r3, r1
 810633a:	6513      	str	r3, [r2, #80]	; 0x50
 810633c:	e003      	b.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810633e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810634e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8106352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8106356:	2300      	movs	r3, #0
 8106358:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 810635c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8106360:	460b      	mov	r3, r1
 8106362:	4313      	orrs	r3, r2
 8106364:	d053      	beq.n	810640e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810636a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810636e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106372:	d035      	beq.n	81063e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106378:	d82e      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810637a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810637e:	d031      	beq.n	81063e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106380:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106384:	d828      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810638a:	d01a      	beq.n	81063c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810638c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106390:	d822      	bhi.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106392:	2b00      	cmp	r3, #0
 8106394:	d003      	beq.n	810639e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810639a:	d007      	beq.n	81063ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810639c:	e01c      	b.n	81063d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810639e:	4b32      	ldr	r3, [pc, #200]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063a2:	4a31      	ldr	r2, [pc, #196]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81063a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81063aa:	e01c      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063b0:	3308      	adds	r3, #8
 81063b2:	2100      	movs	r1, #0
 81063b4:	4618      	mov	r0, r3
 81063b6:	f001 fb83 	bl	8107ac0 <RCCEx_PLL2_Config>
 81063ba:	4603      	mov	r3, r0
 81063bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81063c0:	e011      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063c6:	3328      	adds	r3, #40	; 0x28
 81063c8:	2100      	movs	r1, #0
 81063ca:	4618      	mov	r0, r3
 81063cc:	f001 fc2a 	bl	8107c24 <RCCEx_PLL3_Config>
 81063d0:	4603      	mov	r3, r0
 81063d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81063d6:	e006      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81063d8:	2301      	movs	r3, #1
 81063da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81063de:	e002      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81063e0:	bf00      	nop
 81063e2:	e000      	b.n	81063e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81063e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	d10b      	bne.n	8106406 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81063ee:	4b1e      	ldr	r3, [pc, #120]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063f2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81063fe:	4a1a      	ldr	r2, [pc, #104]	; (8106468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106400:	430b      	orrs	r3, r1
 8106402:	6593      	str	r3, [r2, #88]	; 0x58
 8106404:	e003      	b.n	810640e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810640a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106416:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810641a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 810641e:	2300      	movs	r3, #0
 8106420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8106424:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8106428:	460b      	mov	r3, r1
 810642a:	4313      	orrs	r3, r2
 810642c:	d056      	beq.n	81064dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810643a:	d038      	beq.n	81064ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810643c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106440:	d831      	bhi.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106446:	d034      	beq.n	81064b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810644c:	d82b      	bhi.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810644e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106452:	d01d      	beq.n	8106490 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106458:	d825      	bhi.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810645a:	2b00      	cmp	r3, #0
 810645c:	d006      	beq.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810645e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106462:	d00a      	beq.n	810647a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106464:	e01f      	b.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106466:	bf00      	nop
 8106468:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810646c:	4ba2      	ldr	r3, [pc, #648]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106470:	4aa1      	ldr	r2, [pc, #644]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106478:	e01c      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810647e:	3308      	adds	r3, #8
 8106480:	2100      	movs	r1, #0
 8106482:	4618      	mov	r0, r3
 8106484:	f001 fb1c 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106488:	4603      	mov	r3, r0
 810648a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810648e:	e011      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106494:	3328      	adds	r3, #40	; 0x28
 8106496:	2100      	movs	r1, #0
 8106498:	4618      	mov	r0, r3
 810649a:	f001 fbc3 	bl	8107c24 <RCCEx_PLL3_Config>
 810649e:	4603      	mov	r3, r0
 81064a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81064a4:	e006      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81064a6:	2301      	movs	r3, #1
 81064a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81064ac:	e002      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81064ae:	bf00      	nop
 81064b0:	e000      	b.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81064b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064b8:	2b00      	cmp	r3, #0
 81064ba:	d10b      	bne.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81064bc:	4b8e      	ldr	r3, [pc, #568]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 81064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81064cc:	4a8a      	ldr	r2, [pc, #552]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81064ce:	430b      	orrs	r3, r1
 81064d0:	6593      	str	r3, [r2, #88]	; 0x58
 81064d2:	e003      	b.n	81064dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 81064e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 81064ec:	2300      	movs	r3, #0
 81064ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 81064f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 81064f6:	460b      	mov	r3, r1
 81064f8:	4313      	orrs	r3, r2
 81064fa:	d03a      	beq.n	8106572 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106502:	2b30      	cmp	r3, #48	; 0x30
 8106504:	d01f      	beq.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106506:	2b30      	cmp	r3, #48	; 0x30
 8106508:	d819      	bhi.n	810653e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810650a:	2b20      	cmp	r3, #32
 810650c:	d00c      	beq.n	8106528 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810650e:	2b20      	cmp	r3, #32
 8106510:	d815      	bhi.n	810653e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106512:	2b00      	cmp	r3, #0
 8106514:	d019      	beq.n	810654a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106516:	2b10      	cmp	r3, #16
 8106518:	d111      	bne.n	810653e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810651a:	4b77      	ldr	r3, [pc, #476]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810651e:	4a76      	ldr	r2, [pc, #472]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106526:	e011      	b.n	810654c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810652c:	3308      	adds	r3, #8
 810652e:	2102      	movs	r1, #2
 8106530:	4618      	mov	r0, r3
 8106532:	f001 fac5 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106536:	4603      	mov	r3, r0
 8106538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810653c:	e006      	b.n	810654c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810653e:	2301      	movs	r3, #1
 8106540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106544:	e002      	b.n	810654c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106546:	bf00      	nop
 8106548:	e000      	b.n	810654c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810654a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810654c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106550:	2b00      	cmp	r3, #0
 8106552:	d10a      	bne.n	810656a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106554:	4b68      	ldr	r3, [pc, #416]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106558:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 810655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106562:	4a65      	ldr	r2, [pc, #404]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106564:	430b      	orrs	r3, r1
 8106566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106568:	e003      	b.n	8106572 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810656a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810656e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106576:	e9d3 2300 	ldrd	r2, r3, [r3]
 810657a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 810657e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8106582:	2300      	movs	r3, #0
 8106584:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8106588:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 810658c:	460b      	mov	r3, r1
 810658e:	4313      	orrs	r3, r2
 8106590:	d051      	beq.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810659c:	d035      	beq.n	810660a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810659e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81065a2:	d82e      	bhi.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81065a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81065a8:	d031      	beq.n	810660e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81065aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81065ae:	d828      	bhi.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81065b4:	d01a      	beq.n	81065ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81065ba:	d822      	bhi.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81065bc:	2b00      	cmp	r3, #0
 81065be:	d003      	beq.n	81065c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81065c4:	d007      	beq.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81065c6:	e01c      	b.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065c8:	4b4b      	ldr	r3, [pc, #300]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065cc:	4a4a      	ldr	r2, [pc, #296]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81065ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81065d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81065d4:	e01c      	b.n	8106610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81065d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065da:	3308      	adds	r3, #8
 81065dc:	2100      	movs	r1, #0
 81065de:	4618      	mov	r0, r3
 81065e0:	f001 fa6e 	bl	8107ac0 <RCCEx_PLL2_Config>
 81065e4:	4603      	mov	r3, r0
 81065e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81065ea:	e011      	b.n	8106610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065f0:	3328      	adds	r3, #40	; 0x28
 81065f2:	2100      	movs	r1, #0
 81065f4:	4618      	mov	r0, r3
 81065f6:	f001 fb15 	bl	8107c24 <RCCEx_PLL3_Config>
 81065fa:	4603      	mov	r3, r0
 81065fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106600:	e006      	b.n	8106610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106602:	2301      	movs	r3, #1
 8106604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106608:	e002      	b.n	8106610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810660a:	bf00      	nop
 810660c:	e000      	b.n	8106610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810660e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106614:	2b00      	cmp	r3, #0
 8106616:	d10a      	bne.n	810662e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106618:	4b37      	ldr	r3, [pc, #220]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810661c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8106620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106626:	4a34      	ldr	r2, [pc, #208]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106628:	430b      	orrs	r3, r1
 810662a:	6513      	str	r3, [r2, #80]	; 0x50
 810662c:	e003      	b.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810662e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810663e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8106642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8106646:	2300      	movs	r3, #0
 8106648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 810664c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8106650:	460b      	mov	r3, r1
 8106652:	4313      	orrs	r3, r2
 8106654:	d056      	beq.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810665a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810665c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106660:	d033      	beq.n	81066ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106662:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106666:	d82c      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810666c:	d02f      	beq.n	81066ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810666e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106672:	d826      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106674:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106678:	d02b      	beq.n	81066d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810667a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810667e:	d820      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106684:	d012      	beq.n	81066ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810668a:	d81a      	bhi.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810668c:	2b00      	cmp	r3, #0
 810668e:	d022      	beq.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106694:	d115      	bne.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810669a:	3308      	adds	r3, #8
 810669c:	2101      	movs	r1, #1
 810669e:	4618      	mov	r0, r3
 81066a0:	f001 fa0e 	bl	8107ac0 <RCCEx_PLL2_Config>
 81066a4:	4603      	mov	r3, r0
 81066a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81066aa:	e015      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81066ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066b0:	3328      	adds	r3, #40	; 0x28
 81066b2:	2101      	movs	r1, #1
 81066b4:	4618      	mov	r0, r3
 81066b6:	f001 fab5 	bl	8107c24 <RCCEx_PLL3_Config>
 81066ba:	4603      	mov	r3, r0
 81066bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81066c0:	e00a      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066c2:	2301      	movs	r3, #1
 81066c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81066c8:	e006      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81066ca:	bf00      	nop
 81066cc:	e004      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81066ce:	bf00      	nop
 81066d0:	e002      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81066d2:	bf00      	nop
 81066d4:	e000      	b.n	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81066d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066dc:	2b00      	cmp	r3, #0
 81066de:	d10d      	bne.n	81066fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81066e0:	4b05      	ldr	r3, [pc, #20]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 81066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81066ee:	4a02      	ldr	r2, [pc, #8]	; (81066f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81066f0:	430b      	orrs	r3, r1
 81066f2:	6513      	str	r3, [r2, #80]	; 0x50
 81066f4:	e006      	b.n	8106704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81066f6:	bf00      	nop
 81066f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106708:	e9d3 2300 	ldrd	r2, r3, [r3]
 810670c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8106710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8106714:	2300      	movs	r3, #0
 8106716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810671a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 810671e:	460b      	mov	r3, r1
 8106720:	4313      	orrs	r3, r2
 8106722:	d055      	beq.n	81067d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810672c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106730:	d033      	beq.n	810679a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106736:	d82c      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810673c:	d02f      	beq.n	810679e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106742:	d826      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106744:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106748:	d02b      	beq.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810674a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810674e:	d820      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106754:	d012      	beq.n	810677c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810675a:	d81a      	bhi.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810675c:	2b00      	cmp	r3, #0
 810675e:	d022      	beq.n	81067a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106764:	d115      	bne.n	8106792 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810676a:	3308      	adds	r3, #8
 810676c:	2101      	movs	r1, #1
 810676e:	4618      	mov	r0, r3
 8106770:	f001 f9a6 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106774:	4603      	mov	r3, r0
 8106776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810677a:	e015      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106780:	3328      	adds	r3, #40	; 0x28
 8106782:	2101      	movs	r1, #1
 8106784:	4618      	mov	r0, r3
 8106786:	f001 fa4d 	bl	8107c24 <RCCEx_PLL3_Config>
 810678a:	4603      	mov	r3, r0
 810678c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106790:	e00a      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106792:	2301      	movs	r3, #1
 8106794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106798:	e006      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810679a:	bf00      	nop
 810679c:	e004      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810679e:	bf00      	nop
 81067a0:	e002      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81067a2:	bf00      	nop
 81067a4:	e000      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81067a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d10b      	bne.n	81067c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81067b0:	4ba4      	ldr	r3, [pc, #656]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81067b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067b4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81067c0:	4aa0      	ldr	r2, [pc, #640]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81067c2:	430b      	orrs	r3, r1
 81067c4:	6593      	str	r3, [r2, #88]	; 0x58
 81067c6:	e003      	b.n	81067d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067d8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81067dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81067e0:	2300      	movs	r3, #0
 81067e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81067e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81067ea:	460b      	mov	r3, r1
 81067ec:	4313      	orrs	r3, r2
 81067ee:	d037      	beq.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81067f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81067fa:	d00e      	beq.n	810681a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81067fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106800:	d816      	bhi.n	8106830 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106802:	2b00      	cmp	r3, #0
 8106804:	d018      	beq.n	8106838 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810680a:	d111      	bne.n	8106830 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810680c:	4b8d      	ldr	r3, [pc, #564]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106810:	4a8c      	ldr	r2, [pc, #560]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106818:	e00f      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810681e:	3308      	adds	r3, #8
 8106820:	2101      	movs	r1, #1
 8106822:	4618      	mov	r0, r3
 8106824:	f001 f94c 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106828:	4603      	mov	r3, r0
 810682a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810682e:	e004      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106830:	2301      	movs	r3, #1
 8106832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106836:	e000      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106838:	bf00      	nop
    }

    if (ret == HAL_OK)
 810683a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810683e:	2b00      	cmp	r3, #0
 8106840:	d10a      	bne.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106842:	4b80      	ldr	r3, [pc, #512]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106846:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106850:	4a7c      	ldr	r2, [pc, #496]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106852:	430b      	orrs	r3, r1
 8106854:	6513      	str	r3, [r2, #80]	; 0x50
 8106856:	e003      	b.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810685c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106868:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 810686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106870:	2300      	movs	r3, #0
 8106872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8106876:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810687a:	460b      	mov	r3, r1
 810687c:	4313      	orrs	r3, r2
 810687e:	d039      	beq.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106886:	2b03      	cmp	r3, #3
 8106888:	d81c      	bhi.n	81068c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810688a:	a201      	add	r2, pc, #4	; (adr r2, 8106890 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106890:	081068cd 	.word	0x081068cd
 8106894:	081068a1 	.word	0x081068a1
 8106898:	081068af 	.word	0x081068af
 810689c:	081068cd 	.word	0x081068cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068a0:	4b68      	ldr	r3, [pc, #416]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068a4:	4a67      	ldr	r2, [pc, #412]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81068ac:	e00f      	b.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068b2:	3308      	adds	r3, #8
 81068b4:	2102      	movs	r1, #2
 81068b6:	4618      	mov	r0, r3
 81068b8:	f001 f902 	bl	8107ac0 <RCCEx_PLL2_Config>
 81068bc:	4603      	mov	r3, r0
 81068be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81068c2:	e004      	b.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81068c4:	2301      	movs	r3, #1
 81068c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81068ca:	e000      	b.n	81068ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81068cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81068d2:	2b00      	cmp	r3, #0
 81068d4:	d10a      	bne.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81068d6:	4b5b      	ldr	r3, [pc, #364]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81068da:	f023 0103 	bic.w	r1, r3, #3
 81068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81068e4:	4a57      	ldr	r2, [pc, #348]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81068e6:	430b      	orrs	r3, r1
 81068e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 81068ea:	e003      	b.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81068f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8106900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106904:	2300      	movs	r3, #0
 8106906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810690a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810690e:	460b      	mov	r3, r1
 8106910:	4313      	orrs	r3, r2
 8106912:	f000 809f 	beq.w	8106a54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106916:	4b4c      	ldr	r3, [pc, #304]	; (8106a48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a4b      	ldr	r2, [pc, #300]	; (8106a48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106922:	f7fd f91f 	bl	8103b64 <HAL_GetTick>
 8106926:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810692a:	e00b      	b.n	8106944 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810692c:	f7fd f91a 	bl	8103b64 <HAL_GetTick>
 8106930:	4602      	mov	r2, r0
 8106932:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106936:	1ad3      	subs	r3, r2, r3
 8106938:	2b64      	cmp	r3, #100	; 0x64
 810693a:	d903      	bls.n	8106944 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810693c:	2303      	movs	r3, #3
 810693e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106942:	e005      	b.n	8106950 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106944:	4b40      	ldr	r3, [pc, #256]	; (8106a48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106946:	681b      	ldr	r3, [r3, #0]
 8106948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810694c:	2b00      	cmp	r3, #0
 810694e:	d0ed      	beq.n	810692c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106954:	2b00      	cmp	r3, #0
 8106956:	d179      	bne.n	8106a4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106958:	4b3a      	ldr	r3, [pc, #232]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810695a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106964:	4053      	eors	r3, r2
 8106966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810696a:	2b00      	cmp	r3, #0
 810696c:	d015      	beq.n	810699a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810696e:	4b35      	ldr	r3, [pc, #212]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810697a:	4b32      	ldr	r3, [pc, #200]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810697e:	4a31      	ldr	r2, [pc, #196]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106984:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106986:	4b2f      	ldr	r3, [pc, #188]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810698a:	4a2e      	ldr	r2, [pc, #184]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810698c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106990:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106992:	4a2c      	ldr	r2, [pc, #176]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8106998:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810699e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81069a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81069a6:	d118      	bne.n	81069da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81069a8:	f7fd f8dc 	bl	8103b64 <HAL_GetTick>
 81069ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81069b0:	e00d      	b.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81069b2:	f7fd f8d7 	bl	8103b64 <HAL_GetTick>
 81069b6:	4602      	mov	r2, r0
 81069b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81069bc:	1ad2      	subs	r2, r2, r3
 81069be:	f241 3388 	movw	r3, #5000	; 0x1388
 81069c2:	429a      	cmp	r2, r3
 81069c4:	d903      	bls.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81069c6:	2303      	movs	r3, #3
 81069c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81069cc:	e005      	b.n	81069da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81069ce:	4b1d      	ldr	r3, [pc, #116]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81069d2:	f003 0302 	and.w	r3, r3, #2
 81069d6:	2b00      	cmp	r3, #0
 81069d8:	d0eb      	beq.n	81069b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81069da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069de:	2b00      	cmp	r3, #0
 81069e0:	d12b      	bne.n	8106a3a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81069ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81069ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81069f2:	d110      	bne.n	8106a16 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81069f4:	4b13      	ldr	r3, [pc, #76]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81069f6:	691b      	ldr	r3, [r3, #16]
 81069f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81069fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106a04:	091b      	lsrs	r3, r3, #4
 8106a06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106a0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106a0e:	4a0d      	ldr	r2, [pc, #52]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a10:	430b      	orrs	r3, r1
 8106a12:	6113      	str	r3, [r2, #16]
 8106a14:	e005      	b.n	8106a22 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106a16:	4b0b      	ldr	r3, [pc, #44]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a18:	691b      	ldr	r3, [r3, #16]
 8106a1a:	4a0a      	ldr	r2, [pc, #40]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106a20:	6113      	str	r3, [r2, #16]
 8106a22:	4b08      	ldr	r3, [pc, #32]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8106a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106a32:	4a04      	ldr	r2, [pc, #16]	; (8106a44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106a34:	430b      	orrs	r3, r1
 8106a36:	6713      	str	r3, [r2, #112]	; 0x70
 8106a38:	e00c      	b.n	8106a54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8106a42:	e007      	b.n	8106a54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106a44:	58024400 	.word	0x58024400
 8106a48:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a5c:	f002 0301 	and.w	r3, r2, #1
 8106a60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8106a64:	2300      	movs	r3, #0
 8106a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106a6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8106a6e:	460b      	mov	r3, r1
 8106a70:	4313      	orrs	r3, r2
 8106a72:	f000 8089 	beq.w	8106b88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106a7c:	2b28      	cmp	r3, #40	; 0x28
 8106a7e:	d86b      	bhi.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106a80:	a201      	add	r2, pc, #4	; (adr r2, 8106a88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a86:	bf00      	nop
 8106a88:	08106b61 	.word	0x08106b61
 8106a8c:	08106b59 	.word	0x08106b59
 8106a90:	08106b59 	.word	0x08106b59
 8106a94:	08106b59 	.word	0x08106b59
 8106a98:	08106b59 	.word	0x08106b59
 8106a9c:	08106b59 	.word	0x08106b59
 8106aa0:	08106b59 	.word	0x08106b59
 8106aa4:	08106b59 	.word	0x08106b59
 8106aa8:	08106b2d 	.word	0x08106b2d
 8106aac:	08106b59 	.word	0x08106b59
 8106ab0:	08106b59 	.word	0x08106b59
 8106ab4:	08106b59 	.word	0x08106b59
 8106ab8:	08106b59 	.word	0x08106b59
 8106abc:	08106b59 	.word	0x08106b59
 8106ac0:	08106b59 	.word	0x08106b59
 8106ac4:	08106b59 	.word	0x08106b59
 8106ac8:	08106b43 	.word	0x08106b43
 8106acc:	08106b59 	.word	0x08106b59
 8106ad0:	08106b59 	.word	0x08106b59
 8106ad4:	08106b59 	.word	0x08106b59
 8106ad8:	08106b59 	.word	0x08106b59
 8106adc:	08106b59 	.word	0x08106b59
 8106ae0:	08106b59 	.word	0x08106b59
 8106ae4:	08106b59 	.word	0x08106b59
 8106ae8:	08106b61 	.word	0x08106b61
 8106aec:	08106b59 	.word	0x08106b59
 8106af0:	08106b59 	.word	0x08106b59
 8106af4:	08106b59 	.word	0x08106b59
 8106af8:	08106b59 	.word	0x08106b59
 8106afc:	08106b59 	.word	0x08106b59
 8106b00:	08106b59 	.word	0x08106b59
 8106b04:	08106b59 	.word	0x08106b59
 8106b08:	08106b61 	.word	0x08106b61
 8106b0c:	08106b59 	.word	0x08106b59
 8106b10:	08106b59 	.word	0x08106b59
 8106b14:	08106b59 	.word	0x08106b59
 8106b18:	08106b59 	.word	0x08106b59
 8106b1c:	08106b59 	.word	0x08106b59
 8106b20:	08106b59 	.word	0x08106b59
 8106b24:	08106b59 	.word	0x08106b59
 8106b28:	08106b61 	.word	0x08106b61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b30:	3308      	adds	r3, #8
 8106b32:	2101      	movs	r1, #1
 8106b34:	4618      	mov	r0, r3
 8106b36:	f000 ffc3 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106b3a:	4603      	mov	r3, r0
 8106b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106b40:	e00f      	b.n	8106b62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b46:	3328      	adds	r3, #40	; 0x28
 8106b48:	2101      	movs	r1, #1
 8106b4a:	4618      	mov	r0, r3
 8106b4c:	f001 f86a 	bl	8107c24 <RCCEx_PLL3_Config>
 8106b50:	4603      	mov	r3, r0
 8106b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106b56:	e004      	b.n	8106b62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b58:	2301      	movs	r3, #1
 8106b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106b5e:	e000      	b.n	8106b62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b66:	2b00      	cmp	r3, #0
 8106b68:	d10a      	bne.n	8106b80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106b6a:	4bbf      	ldr	r3, [pc, #764]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8106b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106b78:	4abb      	ldr	r2, [pc, #748]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106b7a:	430b      	orrs	r3, r1
 8106b7c:	6553      	str	r3, [r2, #84]	; 0x54
 8106b7e:	e003      	b.n	8106b88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b90:	f002 0302 	and.w	r3, r2, #2
 8106b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8106b98:	2300      	movs	r3, #0
 8106b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8106b9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8106ba2:	460b      	mov	r3, r1
 8106ba4:	4313      	orrs	r3, r2
 8106ba6:	d041      	beq.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106bae:	2b05      	cmp	r3, #5
 8106bb0:	d824      	bhi.n	8106bfc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8106bb2:	a201      	add	r2, pc, #4	; (adr r2, 8106bb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8106bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106bb8:	08106c05 	.word	0x08106c05
 8106bbc:	08106bd1 	.word	0x08106bd1
 8106bc0:	08106be7 	.word	0x08106be7
 8106bc4:	08106c05 	.word	0x08106c05
 8106bc8:	08106c05 	.word	0x08106c05
 8106bcc:	08106c05 	.word	0x08106c05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bd4:	3308      	adds	r3, #8
 8106bd6:	2101      	movs	r1, #1
 8106bd8:	4618      	mov	r0, r3
 8106bda:	f000 ff71 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106bde:	4603      	mov	r3, r0
 8106be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106be4:	e00f      	b.n	8106c06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bea:	3328      	adds	r3, #40	; 0x28
 8106bec:	2101      	movs	r1, #1
 8106bee:	4618      	mov	r0, r3
 8106bf0:	f001 f818 	bl	8107c24 <RCCEx_PLL3_Config>
 8106bf4:	4603      	mov	r3, r0
 8106bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106bfa:	e004      	b.n	8106c06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106bfc:	2301      	movs	r3, #1
 8106bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106c02:	e000      	b.n	8106c06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106c0a:	2b00      	cmp	r3, #0
 8106c0c:	d10a      	bne.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106c0e:	4b96      	ldr	r3, [pc, #600]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c12:	f023 0107 	bic.w	r1, r3, #7
 8106c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106c1c:	4a92      	ldr	r2, [pc, #584]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106c1e:	430b      	orrs	r3, r1
 8106c20:	6553      	str	r3, [r2, #84]	; 0x54
 8106c22:	e003      	b.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106c28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c34:	f002 0304 	and.w	r3, r2, #4
 8106c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106c3c:	2300      	movs	r3, #0
 8106c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8106c42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8106c46:	460b      	mov	r3, r1
 8106c48:	4313      	orrs	r3, r2
 8106c4a:	d044      	beq.n	8106cd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106c54:	2b05      	cmp	r3, #5
 8106c56:	d825      	bhi.n	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8106c58:	a201      	add	r2, pc, #4	; (adr r2, 8106c60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8106c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c5e:	bf00      	nop
 8106c60:	08106cad 	.word	0x08106cad
 8106c64:	08106c79 	.word	0x08106c79
 8106c68:	08106c8f 	.word	0x08106c8f
 8106c6c:	08106cad 	.word	0x08106cad
 8106c70:	08106cad 	.word	0x08106cad
 8106c74:	08106cad 	.word	0x08106cad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c7c:	3308      	adds	r3, #8
 8106c7e:	2101      	movs	r1, #1
 8106c80:	4618      	mov	r0, r3
 8106c82:	f000 ff1d 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106c86:	4603      	mov	r3, r0
 8106c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106c8c:	e00f      	b.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c92:	3328      	adds	r3, #40	; 0x28
 8106c94:	2101      	movs	r1, #1
 8106c96:	4618      	mov	r0, r3
 8106c98:	f000 ffc4 	bl	8107c24 <RCCEx_PLL3_Config>
 8106c9c:	4603      	mov	r3, r0
 8106c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106ca2:	e004      	b.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ca4:	2301      	movs	r3, #1
 8106ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106caa:	e000      	b.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8106cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cb2:	2b00      	cmp	r3, #0
 8106cb4:	d10b      	bne.n	8106cce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106cb6:	4b6c      	ldr	r3, [pc, #432]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106cba:	f023 0107 	bic.w	r1, r3, #7
 8106cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106cc6:	4a68      	ldr	r2, [pc, #416]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106cc8:	430b      	orrs	r3, r1
 8106cca:	6593      	str	r3, [r2, #88]	; 0x58
 8106ccc:	e003      	b.n	8106cd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cde:	f002 0320 	and.w	r3, r2, #32
 8106ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8106ce6:	2300      	movs	r3, #0
 8106ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106cec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8106cf0:	460b      	mov	r3, r1
 8106cf2:	4313      	orrs	r3, r2
 8106cf4:	d055      	beq.n	8106da2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106d02:	d033      	beq.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106d08:	d82c      	bhi.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106d0e:	d02f      	beq.n	8106d70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106d14:	d826      	bhi.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106d1a:	d02b      	beq.n	8106d74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106d1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106d20:	d820      	bhi.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d26:	d012      	beq.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8106d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d2c:	d81a      	bhi.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106d2e:	2b00      	cmp	r3, #0
 8106d30:	d022      	beq.n	8106d78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8106d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d36:	d115      	bne.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d3c:	3308      	adds	r3, #8
 8106d3e:	2100      	movs	r1, #0
 8106d40:	4618      	mov	r0, r3
 8106d42:	f000 febd 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106d46:	4603      	mov	r3, r0
 8106d48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106d4c:	e015      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d52:	3328      	adds	r3, #40	; 0x28
 8106d54:	2102      	movs	r1, #2
 8106d56:	4618      	mov	r0, r3
 8106d58:	f000 ff64 	bl	8107c24 <RCCEx_PLL3_Config>
 8106d5c:	4603      	mov	r3, r0
 8106d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106d62:	e00a      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d64:	2301      	movs	r3, #1
 8106d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106d6a:	e006      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106d6c:	bf00      	nop
 8106d6e:	e004      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106d70:	bf00      	nop
 8106d72:	e002      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106d74:	bf00      	nop
 8106d76:	e000      	b.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d7e:	2b00      	cmp	r3, #0
 8106d80:	d10b      	bne.n	8106d9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106d82:	4b39      	ldr	r3, [pc, #228]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106d86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8106d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106d92:	4a35      	ldr	r2, [pc, #212]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106d94:	430b      	orrs	r3, r1
 8106d96:	6553      	str	r3, [r2, #84]	; 0x54
 8106d98:	e003      	b.n	8106da2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106daa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8106dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8106db2:	2300      	movs	r3, #0
 8106db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8106db8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8106dbc:	460b      	mov	r3, r1
 8106dbe:	4313      	orrs	r3, r2
 8106dc0:	d058      	beq.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106dca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106dce:	d033      	beq.n	8106e38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106dd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106dd4:	d82c      	bhi.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106dda:	d02f      	beq.n	8106e3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106de0:	d826      	bhi.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106de6:	d02b      	beq.n	8106e40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106dec:	d820      	bhi.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106df2:	d012      	beq.n	8106e1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106df8:	d81a      	bhi.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106dfa:	2b00      	cmp	r3, #0
 8106dfc:	d022      	beq.n	8106e44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106e02:	d115      	bne.n	8106e30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e08:	3308      	adds	r3, #8
 8106e0a:	2100      	movs	r1, #0
 8106e0c:	4618      	mov	r0, r3
 8106e0e:	f000 fe57 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106e12:	4603      	mov	r3, r0
 8106e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106e18:	e015      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e1e:	3328      	adds	r3, #40	; 0x28
 8106e20:	2102      	movs	r1, #2
 8106e22:	4618      	mov	r0, r3
 8106e24:	f000 fefe 	bl	8107c24 <RCCEx_PLL3_Config>
 8106e28:	4603      	mov	r3, r0
 8106e2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106e2e:	e00a      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e30:	2301      	movs	r3, #1
 8106e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106e36:	e006      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106e38:	bf00      	nop
 8106e3a:	e004      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106e3c:	bf00      	nop
 8106e3e:	e002      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106e40:	bf00      	nop
 8106e42:	e000      	b.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d10e      	bne.n	8106e6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106e4e:	4b06      	ldr	r3, [pc, #24]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106e52:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8106e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106e5e:	4a02      	ldr	r2, [pc, #8]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106e60:	430b      	orrs	r3, r1
 8106e62:	6593      	str	r3, [r2, #88]	; 0x58
 8106e64:	e006      	b.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8106e66:	bf00      	nop
 8106e68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e7c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8106e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8106e84:	2300      	movs	r3, #0
 8106e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8106e8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8106e8e:	460b      	mov	r3, r1
 8106e90:	4313      	orrs	r3, r2
 8106e92:	d055      	beq.n	8106f40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106e9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106ea0:	d033      	beq.n	8106f0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8106ea2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106ea6:	d82c      	bhi.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106eac:	d02f      	beq.n	8106f0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106eb2:	d826      	bhi.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106eb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106eb8:	d02b      	beq.n	8106f12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106eba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106ebe:	d820      	bhi.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106ec4:	d012      	beq.n	8106eec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106eca:	d81a      	bhi.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d022      	beq.n	8106f16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106ed4:	d115      	bne.n	8106f02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106eda:	3308      	adds	r3, #8
 8106edc:	2100      	movs	r1, #0
 8106ede:	4618      	mov	r0, r3
 8106ee0:	f000 fdee 	bl	8107ac0 <RCCEx_PLL2_Config>
 8106ee4:	4603      	mov	r3, r0
 8106ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106eea:	e015      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ef0:	3328      	adds	r3, #40	; 0x28
 8106ef2:	2102      	movs	r1, #2
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	f000 fe95 	bl	8107c24 <RCCEx_PLL3_Config>
 8106efa:	4603      	mov	r3, r0
 8106efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106f00:	e00a      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106f02:	2301      	movs	r3, #1
 8106f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106f08:	e006      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106f0a:	bf00      	nop
 8106f0c:	e004      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106f0e:	bf00      	nop
 8106f10:	e002      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106f12:	bf00      	nop
 8106f14:	e000      	b.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106f1c:	2b00      	cmp	r3, #0
 8106f1e:	d10b      	bne.n	8106f38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106f20:	4ba1      	ldr	r3, [pc, #644]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106f24:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8106f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106f30:	4a9d      	ldr	r2, [pc, #628]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106f32:	430b      	orrs	r3, r1
 8106f34:	6593      	str	r3, [r2, #88]	; 0x58
 8106f36:	e003      	b.n	8106f40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106f3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f48:	f002 0308 	and.w	r3, r2, #8
 8106f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8106f50:	2300      	movs	r3, #0
 8106f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8106f56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8106f5a:	460b      	mov	r3, r1
 8106f5c:	4313      	orrs	r3, r2
 8106f5e:	d01e      	beq.n	8106f9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f6c:	d10c      	bne.n	8106f88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f72:	3328      	adds	r3, #40	; 0x28
 8106f74:	2102      	movs	r1, #2
 8106f76:	4618      	mov	r0, r3
 8106f78:	f000 fe54 	bl	8107c24 <RCCEx_PLL3_Config>
 8106f7c:	4603      	mov	r3, r0
 8106f7e:	2b00      	cmp	r3, #0
 8106f80:	d002      	beq.n	8106f88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8106f82:	2301      	movs	r3, #1
 8106f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106f88:	4b87      	ldr	r3, [pc, #540]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f98:	4a83      	ldr	r2, [pc, #524]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106f9a:	430b      	orrs	r3, r1
 8106f9c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fa6:	f002 0310 	and.w	r3, r2, #16
 8106faa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8106fae:	2300      	movs	r3, #0
 8106fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8106fb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8106fb8:	460b      	mov	r3, r1
 8106fba:	4313      	orrs	r3, r2
 8106fbc:	d01e      	beq.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fca:	d10c      	bne.n	8106fe6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106fd0:	3328      	adds	r3, #40	; 0x28
 8106fd2:	2102      	movs	r1, #2
 8106fd4:	4618      	mov	r0, r3
 8106fd6:	f000 fe25 	bl	8107c24 <RCCEx_PLL3_Config>
 8106fda:	4603      	mov	r3, r0
 8106fdc:	2b00      	cmp	r3, #0
 8106fde:	d002      	beq.n	8106fe6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106fe0:	2301      	movs	r3, #1
 8106fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106fe6:	4b70      	ldr	r3, [pc, #448]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106ff6:	4a6c      	ldr	r2, [pc, #432]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106ff8:	430b      	orrs	r3, r1
 8106ffa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107004:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8107008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810700c:	2300      	movs	r3, #0
 810700e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8107012:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8107016:	460b      	mov	r3, r1
 8107018:	4313      	orrs	r3, r2
 810701a:	d03e      	beq.n	810709a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8107024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107028:	d022      	beq.n	8107070 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810702a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810702e:	d81b      	bhi.n	8107068 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8107030:	2b00      	cmp	r3, #0
 8107032:	d003      	beq.n	810703c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8107034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107038:	d00b      	beq.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810703a:	e015      	b.n	8107068 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107040:	3308      	adds	r3, #8
 8107042:	2100      	movs	r1, #0
 8107044:	4618      	mov	r0, r3
 8107046:	f000 fd3b 	bl	8107ac0 <RCCEx_PLL2_Config>
 810704a:	4603      	mov	r3, r0
 810704c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107050:	e00f      	b.n	8107072 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107056:	3328      	adds	r3, #40	; 0x28
 8107058:	2102      	movs	r1, #2
 810705a:	4618      	mov	r0, r3
 810705c:	f000 fde2 	bl	8107c24 <RCCEx_PLL3_Config>
 8107060:	4603      	mov	r3, r0
 8107062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8107066:	e004      	b.n	8107072 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107068:	2301      	movs	r3, #1
 810706a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810706e:	e000      	b.n	8107072 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8107070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107076:	2b00      	cmp	r3, #0
 8107078:	d10b      	bne.n	8107092 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810707a:	4b4b      	ldr	r3, [pc, #300]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810707c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810707e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8107082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810708a:	4a47      	ldr	r2, [pc, #284]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810708c:	430b      	orrs	r3, r1
 810708e:	6593      	str	r3, [r2, #88]	; 0x58
 8107090:	e003      	b.n	810709a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81070a6:	67bb      	str	r3, [r7, #120]	; 0x78
 81070a8:	2300      	movs	r3, #0
 81070aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 81070ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81070b0:	460b      	mov	r3, r1
 81070b2:	4313      	orrs	r3, r2
 81070b4:	d03b      	beq.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81070be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81070c2:	d01f      	beq.n	8107104 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81070c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81070c8:	d818      	bhi.n	81070fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81070ce:	d003      	beq.n	81070d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81070d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81070d4:	d007      	beq.n	81070e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81070d6:	e011      	b.n	81070fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81070d8:	4b33      	ldr	r3, [pc, #204]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070dc:	4a32      	ldr	r2, [pc, #200]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81070de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81070e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81070e4:	e00f      	b.n	8107106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070ea:	3328      	adds	r3, #40	; 0x28
 81070ec:	2101      	movs	r1, #1
 81070ee:	4618      	mov	r0, r3
 81070f0:	f000 fd98 	bl	8107c24 <RCCEx_PLL3_Config>
 81070f4:	4603      	mov	r3, r0
 81070f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81070fa:	e004      	b.n	8107106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070fc:	2301      	movs	r3, #1
 81070fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107102:	e000      	b.n	8107106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810710a:	2b00      	cmp	r3, #0
 810710c:	d10b      	bne.n	8107126 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810710e:	4b26      	ldr	r3, [pc, #152]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107112:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8107116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810711e:	4a22      	ldr	r2, [pc, #136]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107120:	430b      	orrs	r3, r1
 8107122:	6553      	str	r3, [r2, #84]	; 0x54
 8107124:	e003      	b.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810712a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107136:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 810713a:	673b      	str	r3, [r7, #112]	; 0x70
 810713c:	2300      	movs	r3, #0
 810713e:	677b      	str	r3, [r7, #116]	; 0x74
 8107140:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8107144:	460b      	mov	r3, r1
 8107146:	4313      	orrs	r3, r2
 8107148:	d034      	beq.n	81071b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107150:	2b00      	cmp	r3, #0
 8107152:	d003      	beq.n	810715c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8107154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107158:	d007      	beq.n	810716a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810715a:	e011      	b.n	8107180 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810715c:	4b12      	ldr	r3, [pc, #72]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107160:	4a11      	ldr	r2, [pc, #68]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107168:	e00e      	b.n	8107188 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810716e:	3308      	adds	r3, #8
 8107170:	2102      	movs	r1, #2
 8107172:	4618      	mov	r0, r3
 8107174:	f000 fca4 	bl	8107ac0 <RCCEx_PLL2_Config>
 8107178:	4603      	mov	r3, r0
 810717a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810717e:	e003      	b.n	8107188 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107180:	2301      	movs	r3, #1
 8107182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810718c:	2b00      	cmp	r3, #0
 810718e:	d10d      	bne.n	81071ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107190:	4b05      	ldr	r3, [pc, #20]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810719e:	4a02      	ldr	r2, [pc, #8]	; (81071a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81071a0:	430b      	orrs	r3, r1
 81071a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 81071a4:	e006      	b.n	81071b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81071a6:	bf00      	nop
 81071a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81071b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81071c0:	66bb      	str	r3, [r7, #104]	; 0x68
 81071c2:	2300      	movs	r3, #0
 81071c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 81071c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81071ca:	460b      	mov	r3, r1
 81071cc:	4313      	orrs	r3, r2
 81071ce:	d00c      	beq.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071d4:	3328      	adds	r3, #40	; 0x28
 81071d6:	2102      	movs	r1, #2
 81071d8:	4618      	mov	r0, r3
 81071da:	f000 fd23 	bl	8107c24 <RCCEx_PLL3_Config>
 81071de:	4603      	mov	r3, r0
 81071e0:	2b00      	cmp	r3, #0
 81071e2:	d002      	beq.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81071e4:	2301      	movs	r3, #1
 81071e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81071f6:	663b      	str	r3, [r7, #96]	; 0x60
 81071f8:	2300      	movs	r3, #0
 81071fa:	667b      	str	r3, [r7, #100]	; 0x64
 81071fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8107200:	460b      	mov	r3, r1
 8107202:	4313      	orrs	r3, r2
 8107204:	d038      	beq.n	8107278 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810720a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810720e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107212:	d018      	beq.n	8107246 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107218:	d811      	bhi.n	810723e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810721a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810721e:	d014      	beq.n	810724a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8107220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107224:	d80b      	bhi.n	810723e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8107226:	2b00      	cmp	r3, #0
 8107228:	d011      	beq.n	810724e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810722a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810722e:	d106      	bne.n	810723e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107230:	4bc3      	ldr	r3, [pc, #780]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107234:	4ac2      	ldr	r2, [pc, #776]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810723a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810723c:	e008      	b.n	8107250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810723e:	2301      	movs	r3, #1
 8107240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107244:	e004      	b.n	8107250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8107246:	bf00      	nop
 8107248:	e002      	b.n	8107250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810724a:	bf00      	nop
 810724c:	e000      	b.n	8107250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810724e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107254:	2b00      	cmp	r3, #0
 8107256:	d10b      	bne.n	8107270 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107258:	4bb9      	ldr	r3, [pc, #740]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810725c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8107260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107268:	4ab5      	ldr	r2, [pc, #724]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810726a:	430b      	orrs	r3, r1
 810726c:	6553      	str	r3, [r2, #84]	; 0x54
 810726e:	e003      	b.n	8107278 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107280:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8107284:	65bb      	str	r3, [r7, #88]	; 0x58
 8107286:	2300      	movs	r3, #0
 8107288:	65fb      	str	r3, [r7, #92]	; 0x5c
 810728a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810728e:	460b      	mov	r3, r1
 8107290:	4313      	orrs	r3, r2
 8107292:	d009      	beq.n	81072a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107294:	4baa      	ldr	r3, [pc, #680]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81072a2:	4aa7      	ldr	r2, [pc, #668]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072a4:	430b      	orrs	r3, r1
 81072a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81072a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81072b4:	653b      	str	r3, [r7, #80]	; 0x50
 81072b6:	2300      	movs	r3, #0
 81072b8:	657b      	str	r3, [r7, #84]	; 0x54
 81072ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81072be:	460b      	mov	r3, r1
 81072c0:	4313      	orrs	r3, r2
 81072c2:	d00a      	beq.n	81072da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81072c4:	4b9e      	ldr	r3, [pc, #632]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072c6:	691b      	ldr	r3, [r3, #16]
 81072c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81072d4:	4a9a      	ldr	r2, [pc, #616]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072d6:	430b      	orrs	r3, r1
 81072d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81072da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 81072e6:	64bb      	str	r3, [r7, #72]	; 0x48
 81072e8:	2300      	movs	r3, #0
 81072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 81072ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81072f0:	460b      	mov	r3, r1
 81072f2:	4313      	orrs	r3, r2
 81072f4:	d009      	beq.n	810730a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81072f6:	4b92      	ldr	r3, [pc, #584]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81072f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81072fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81072fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107304:	4a8e      	ldr	r2, [pc, #568]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107306:	430b      	orrs	r3, r1
 8107308:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107312:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8107316:	643b      	str	r3, [r7, #64]	; 0x40
 8107318:	2300      	movs	r3, #0
 810731a:	647b      	str	r3, [r7, #68]	; 0x44
 810731c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8107320:	460b      	mov	r3, r1
 8107322:	4313      	orrs	r3, r2
 8107324:	d00e      	beq.n	8107344 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107326:	4b86      	ldr	r3, [pc, #536]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107328:	691b      	ldr	r3, [r3, #16]
 810732a:	4a85      	ldr	r2, [pc, #532]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810732c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8107330:	6113      	str	r3, [r2, #16]
 8107332:	4b83      	ldr	r3, [pc, #524]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107334:	6919      	ldr	r1, [r3, #16]
 8107336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810733a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810733e:	4a80      	ldr	r2, [pc, #512]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107340:	430b      	orrs	r3, r1
 8107342:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107348:	e9d3 2300 	ldrd	r2, r3, [r3]
 810734c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8107350:	63bb      	str	r3, [r7, #56]	; 0x38
 8107352:	2300      	movs	r3, #0
 8107354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107356:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810735a:	460b      	mov	r3, r1
 810735c:	4313      	orrs	r3, r2
 810735e:	d009      	beq.n	8107374 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107360:	4b77      	ldr	r3, [pc, #476]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107364:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8107368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810736e:	4a74      	ldr	r2, [pc, #464]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107370:	430b      	orrs	r3, r1
 8107372:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107378:	e9d3 2300 	ldrd	r2, r3, [r3]
 810737c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8107380:	633b      	str	r3, [r7, #48]	; 0x30
 8107382:	2300      	movs	r3, #0
 8107384:	637b      	str	r3, [r7, #52]	; 0x34
 8107386:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810738a:	460b      	mov	r3, r1
 810738c:	4313      	orrs	r3, r2
 810738e:	d00a      	beq.n	81073a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107390:	4b6b      	ldr	r3, [pc, #428]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107394:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8107398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81073a0:	4a67      	ldr	r2, [pc, #412]	; (8107540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81073a2:	430b      	orrs	r3, r1
 81073a4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073ae:	2100      	movs	r1, #0
 81073b0:	62b9      	str	r1, [r7, #40]	; 0x28
 81073b2:	f003 0301 	and.w	r3, r3, #1
 81073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 81073b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81073bc:	460b      	mov	r3, r1
 81073be:	4313      	orrs	r3, r2
 81073c0:	d011      	beq.n	81073e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81073c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073c6:	3308      	adds	r3, #8
 81073c8:	2100      	movs	r1, #0
 81073ca:	4618      	mov	r0, r3
 81073cc:	f000 fb78 	bl	8107ac0 <RCCEx_PLL2_Config>
 81073d0:	4603      	mov	r3, r0
 81073d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d003      	beq.n	81073e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81073e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073ee:	2100      	movs	r1, #0
 81073f0:	6239      	str	r1, [r7, #32]
 81073f2:	f003 0302 	and.w	r3, r3, #2
 81073f6:	627b      	str	r3, [r7, #36]	; 0x24
 81073f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81073fc:	460b      	mov	r3, r1
 81073fe:	4313      	orrs	r3, r2
 8107400:	d011      	beq.n	8107426 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107406:	3308      	adds	r3, #8
 8107408:	2101      	movs	r1, #1
 810740a:	4618      	mov	r0, r3
 810740c:	f000 fb58 	bl	8107ac0 <RCCEx_PLL2_Config>
 8107410:	4603      	mov	r3, r0
 8107412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810741a:	2b00      	cmp	r3, #0
 810741c:	d003      	beq.n	8107426 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810741e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810742e:	2100      	movs	r1, #0
 8107430:	61b9      	str	r1, [r7, #24]
 8107432:	f003 0304 	and.w	r3, r3, #4
 8107436:	61fb      	str	r3, [r7, #28]
 8107438:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810743c:	460b      	mov	r3, r1
 810743e:	4313      	orrs	r3, r2
 8107440:	d011      	beq.n	8107466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107446:	3308      	adds	r3, #8
 8107448:	2102      	movs	r1, #2
 810744a:	4618      	mov	r0, r3
 810744c:	f000 fb38 	bl	8107ac0 <RCCEx_PLL2_Config>
 8107450:	4603      	mov	r3, r0
 8107452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810745a:	2b00      	cmp	r3, #0
 810745c:	d003      	beq.n	8107466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810745e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810746e:	2100      	movs	r1, #0
 8107470:	6139      	str	r1, [r7, #16]
 8107472:	f003 0308 	and.w	r3, r3, #8
 8107476:	617b      	str	r3, [r7, #20]
 8107478:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810747c:	460b      	mov	r3, r1
 810747e:	4313      	orrs	r3, r2
 8107480:	d011      	beq.n	81074a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107486:	3328      	adds	r3, #40	; 0x28
 8107488:	2100      	movs	r1, #0
 810748a:	4618      	mov	r0, r3
 810748c:	f000 fbca 	bl	8107c24 <RCCEx_PLL3_Config>
 8107490:	4603      	mov	r3, r0
 8107492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8107496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810749a:	2b00      	cmp	r3, #0
 810749c:	d003      	beq.n	81074a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810749e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81074a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074ae:	2100      	movs	r1, #0
 81074b0:	60b9      	str	r1, [r7, #8]
 81074b2:	f003 0310 	and.w	r3, r3, #16
 81074b6:	60fb      	str	r3, [r7, #12]
 81074b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81074bc:	460b      	mov	r3, r1
 81074be:	4313      	orrs	r3, r2
 81074c0:	d011      	beq.n	81074e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074c6:	3328      	adds	r3, #40	; 0x28
 81074c8:	2101      	movs	r1, #1
 81074ca:	4618      	mov	r0, r3
 81074cc:	f000 fbaa 	bl	8107c24 <RCCEx_PLL3_Config>
 81074d0:	4603      	mov	r3, r0
 81074d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81074da:	2b00      	cmp	r3, #0
 81074dc:	d003      	beq.n	81074e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81074e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074ee:	2100      	movs	r1, #0
 81074f0:	6039      	str	r1, [r7, #0]
 81074f2:	f003 0320 	and.w	r3, r3, #32
 81074f6:	607b      	str	r3, [r7, #4]
 81074f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 81074fc:	460b      	mov	r3, r1
 81074fe:	4313      	orrs	r3, r2
 8107500:	d011      	beq.n	8107526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107506:	3328      	adds	r3, #40	; 0x28
 8107508:	2102      	movs	r1, #2
 810750a:	4618      	mov	r0, r3
 810750c:	f000 fb8a 	bl	8107c24 <RCCEx_PLL3_Config>
 8107510:	4603      	mov	r3, r0
 8107512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810751a:	2b00      	cmp	r3, #0
 810751c:	d003      	beq.n	8107526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810751e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107522:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8107526:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 810752a:	2b00      	cmp	r3, #0
 810752c:	d101      	bne.n	8107532 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810752e:	2300      	movs	r3, #0
 8107530:	e000      	b.n	8107534 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107532:	2301      	movs	r3, #1
}
 8107534:	4618      	mov	r0, r3
 8107536:	f507 7794 	add.w	r7, r7, #296	; 0x128
 810753a:	46bd      	mov	sp, r7
 810753c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107540:	58024400 	.word	0x58024400

08107544 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107544:	b580      	push	{r7, lr}
 8107546:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107548:	f7fe fd94 	bl	8106074 <HAL_RCC_GetHCLKFreq>
 810754c:	4602      	mov	r2, r0
 810754e:	4b06      	ldr	r3, [pc, #24]	; (8107568 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107550:	6a1b      	ldr	r3, [r3, #32]
 8107552:	091b      	lsrs	r3, r3, #4
 8107554:	f003 0307 	and.w	r3, r3, #7
 8107558:	4904      	ldr	r1, [pc, #16]	; (810756c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810755a:	5ccb      	ldrb	r3, [r1, r3]
 810755c:	f003 031f 	and.w	r3, r3, #31
 8107560:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107564:	4618      	mov	r0, r3
 8107566:	bd80      	pop	{r7, pc}
 8107568:	58024400 	.word	0x58024400
 810756c:	0817e9a8 	.word	0x0817e9a8

08107570 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107570:	b480      	push	{r7}
 8107572:	b089      	sub	sp, #36	; 0x24
 8107574:	af00      	add	r7, sp, #0
 8107576:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107578:	4ba1      	ldr	r3, [pc, #644]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810757c:	f003 0303 	and.w	r3, r3, #3
 8107580:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107582:	4b9f      	ldr	r3, [pc, #636]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107586:	0b1b      	lsrs	r3, r3, #12
 8107588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810758c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810758e:	4b9c      	ldr	r3, [pc, #624]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107592:	091b      	lsrs	r3, r3, #4
 8107594:	f003 0301 	and.w	r3, r3, #1
 8107598:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810759a:	4b99      	ldr	r3, [pc, #612]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810759e:	08db      	lsrs	r3, r3, #3
 81075a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81075a4:	693a      	ldr	r2, [r7, #16]
 81075a6:	fb02 f303 	mul.w	r3, r2, r3
 81075aa:	ee07 3a90 	vmov	s15, r3
 81075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81075b6:	697b      	ldr	r3, [r7, #20]
 81075b8:	2b00      	cmp	r3, #0
 81075ba:	f000 8111 	beq.w	81077e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81075be:	69bb      	ldr	r3, [r7, #24]
 81075c0:	2b02      	cmp	r3, #2
 81075c2:	f000 8083 	beq.w	81076cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81075c6:	69bb      	ldr	r3, [r7, #24]
 81075c8:	2b02      	cmp	r3, #2
 81075ca:	f200 80a1 	bhi.w	8107710 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81075ce:	69bb      	ldr	r3, [r7, #24]
 81075d0:	2b00      	cmp	r3, #0
 81075d2:	d003      	beq.n	81075dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81075d4:	69bb      	ldr	r3, [r7, #24]
 81075d6:	2b01      	cmp	r3, #1
 81075d8:	d056      	beq.n	8107688 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81075da:	e099      	b.n	8107710 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81075dc:	4b88      	ldr	r3, [pc, #544]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	f003 0320 	and.w	r3, r3, #32
 81075e4:	2b00      	cmp	r3, #0
 81075e6:	d02d      	beq.n	8107644 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81075e8:	4b85      	ldr	r3, [pc, #532]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075ea:	681b      	ldr	r3, [r3, #0]
 81075ec:	08db      	lsrs	r3, r3, #3
 81075ee:	f003 0303 	and.w	r3, r3, #3
 81075f2:	4a84      	ldr	r2, [pc, #528]	; (8107804 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81075f4:	fa22 f303 	lsr.w	r3, r2, r3
 81075f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81075fa:	68bb      	ldr	r3, [r7, #8]
 81075fc:	ee07 3a90 	vmov	s15, r3
 8107600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107604:	697b      	ldr	r3, [r7, #20]
 8107606:	ee07 3a90 	vmov	s15, r3
 810760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107612:	4b7b      	ldr	r3, [pc, #492]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810761a:	ee07 3a90 	vmov	s15, r3
 810761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107622:	ed97 6a03 	vldr	s12, [r7, #12]
 8107626:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810763e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107642:	e087      	b.n	8107754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107644:	697b      	ldr	r3, [r7, #20]
 8107646:	ee07 3a90 	vmov	s15, r3
 810764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810764e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810780c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107656:	4b6a      	ldr	r3, [pc, #424]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810765e:	ee07 3a90 	vmov	s15, r3
 8107662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107666:	ed97 6a03 	vldr	s12, [r7, #12]
 810766a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107686:	e065      	b.n	8107754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107688:	697b      	ldr	r3, [r7, #20]
 810768a:	ee07 3a90 	vmov	s15, r3
 810768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107692:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810769a:	4b59      	ldr	r3, [pc, #356]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076a2:	ee07 3a90 	vmov	s15, r3
 81076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81076ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81076ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81076ca:	e043      	b.n	8107754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81076cc:	697b      	ldr	r3, [r7, #20]
 81076ce:	ee07 3a90 	vmov	s15, r3
 81076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076de:	4b48      	ldr	r3, [pc, #288]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076e6:	ee07 3a90 	vmov	s15, r3
 81076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81076f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81076fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107706:	ee67 7a27 	vmul.f32	s15, s14, s15
 810770a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810770e:	e021      	b.n	8107754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107710:	697b      	ldr	r3, [r7, #20]
 8107712:	ee07 3a90 	vmov	s15, r3
 8107716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810771a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107722:	4b37      	ldr	r3, [pc, #220]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810772a:	ee07 3a90 	vmov	s15, r3
 810772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107732:	ed97 6a03 	vldr	s12, [r7, #12]
 8107736:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810774e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107752:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107754:	4b2a      	ldr	r3, [pc, #168]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107758:	0a5b      	lsrs	r3, r3, #9
 810775a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810775e:	ee07 3a90 	vmov	s15, r3
 8107762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810776a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810776e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810777a:	ee17 2a90 	vmov	r2, s15
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107782:	4b1f      	ldr	r3, [pc, #124]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107786:	0c1b      	lsrs	r3, r3, #16
 8107788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810778c:	ee07 3a90 	vmov	s15, r3
 8107790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107798:	ee37 7a87 	vadd.f32	s14, s15, s14
 810779c:	edd7 6a07 	vldr	s13, [r7, #28]
 81077a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81077a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81077a8:	ee17 2a90 	vmov	r2, s15
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81077b0:	4b13      	ldr	r3, [pc, #76]	; (8107800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81077b4:	0e1b      	lsrs	r3, r3, #24
 81077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81077ba:	ee07 3a90 	vmov	s15, r3
 81077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81077c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81077ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81077d6:	ee17 2a90 	vmov	r2, s15
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81077de:	e008      	b.n	81077f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	2200      	movs	r2, #0
 81077e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81077e6:	687b      	ldr	r3, [r7, #4]
 81077e8:	2200      	movs	r2, #0
 81077ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81077ec:	687b      	ldr	r3, [r7, #4]
 81077ee:	2200      	movs	r2, #0
 81077f0:	609a      	str	r2, [r3, #8]
}
 81077f2:	bf00      	nop
 81077f4:	3724      	adds	r7, #36	; 0x24
 81077f6:	46bd      	mov	sp, r7
 81077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077fc:	4770      	bx	lr
 81077fe:	bf00      	nop
 8107800:	58024400 	.word	0x58024400
 8107804:	03d09000 	.word	0x03d09000
 8107808:	46000000 	.word	0x46000000
 810780c:	4c742400 	.word	0x4c742400
 8107810:	4a742400 	.word	0x4a742400
 8107814:	4bbebc20 	.word	0x4bbebc20

08107818 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107818:	b480      	push	{r7}
 810781a:	b089      	sub	sp, #36	; 0x24
 810781c:	af00      	add	r7, sp, #0
 810781e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107820:	4ba1      	ldr	r3, [pc, #644]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107824:	f003 0303 	and.w	r3, r3, #3
 8107828:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810782a:	4b9f      	ldr	r3, [pc, #636]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810782e:	0d1b      	lsrs	r3, r3, #20
 8107830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107834:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107836:	4b9c      	ldr	r3, [pc, #624]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810783a:	0a1b      	lsrs	r3, r3, #8
 810783c:	f003 0301 	and.w	r3, r3, #1
 8107840:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107842:	4b99      	ldr	r3, [pc, #612]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107846:	08db      	lsrs	r3, r3, #3
 8107848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810784c:	693a      	ldr	r2, [r7, #16]
 810784e:	fb02 f303 	mul.w	r3, r2, r3
 8107852:	ee07 3a90 	vmov	s15, r3
 8107856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810785a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810785e:	697b      	ldr	r3, [r7, #20]
 8107860:	2b00      	cmp	r3, #0
 8107862:	f000 8111 	beq.w	8107a88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107866:	69bb      	ldr	r3, [r7, #24]
 8107868:	2b02      	cmp	r3, #2
 810786a:	f000 8083 	beq.w	8107974 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810786e:	69bb      	ldr	r3, [r7, #24]
 8107870:	2b02      	cmp	r3, #2
 8107872:	f200 80a1 	bhi.w	81079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107876:	69bb      	ldr	r3, [r7, #24]
 8107878:	2b00      	cmp	r3, #0
 810787a:	d003      	beq.n	8107884 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810787c:	69bb      	ldr	r3, [r7, #24]
 810787e:	2b01      	cmp	r3, #1
 8107880:	d056      	beq.n	8107930 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107882:	e099      	b.n	81079b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107884:	4b88      	ldr	r3, [pc, #544]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107886:	681b      	ldr	r3, [r3, #0]
 8107888:	f003 0320 	and.w	r3, r3, #32
 810788c:	2b00      	cmp	r3, #0
 810788e:	d02d      	beq.n	81078ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107890:	4b85      	ldr	r3, [pc, #532]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107892:	681b      	ldr	r3, [r3, #0]
 8107894:	08db      	lsrs	r3, r3, #3
 8107896:	f003 0303 	and.w	r3, r3, #3
 810789a:	4a84      	ldr	r2, [pc, #528]	; (8107aac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810789c:	fa22 f303 	lsr.w	r3, r2, r3
 81078a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81078a2:	68bb      	ldr	r3, [r7, #8]
 81078a4:	ee07 3a90 	vmov	s15, r3
 81078a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078ac:	697b      	ldr	r3, [r7, #20]
 81078ae:	ee07 3a90 	vmov	s15, r3
 81078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078ba:	4b7b      	ldr	r3, [pc, #492]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078c2:	ee07 3a90 	vmov	s15, r3
 81078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81078ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81078d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81078ea:	e087      	b.n	81079fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81078ec:	697b      	ldr	r3, [r7, #20]
 81078ee:	ee07 3a90 	vmov	s15, r3
 81078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078fe:	4b6a      	ldr	r3, [pc, #424]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107906:	ee07 3a90 	vmov	s15, r3
 810790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810790e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107912:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810791e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107926:	ee67 7a27 	vmul.f32	s15, s14, s15
 810792a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810792e:	e065      	b.n	81079fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107930:	697b      	ldr	r3, [r7, #20]
 8107932:	ee07 3a90 	vmov	s15, r3
 8107936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810793a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107942:	4b59      	ldr	r3, [pc, #356]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810794a:	ee07 3a90 	vmov	s15, r3
 810794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107952:	ed97 6a03 	vldr	s12, [r7, #12]
 8107956:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810796e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107972:	e043      	b.n	81079fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107974:	697b      	ldr	r3, [r7, #20]
 8107976:	ee07 3a90 	vmov	s15, r3
 810797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810797e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107986:	4b48      	ldr	r3, [pc, #288]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810798e:	ee07 3a90 	vmov	s15, r3
 8107992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107996:	ed97 6a03 	vldr	s12, [r7, #12]
 810799a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81079b6:	e021      	b.n	81079fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81079b8:	697b      	ldr	r3, [r7, #20]
 81079ba:	ee07 3a90 	vmov	s15, r3
 81079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81079ca:	4b37      	ldr	r3, [pc, #220]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079d2:	ee07 3a90 	vmov	s15, r3
 81079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079da:	ed97 6a03 	vldr	s12, [r7, #12]
 81079de:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81079fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81079fc:	4b2a      	ldr	r3, [pc, #168]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107a00:	0a5b      	lsrs	r3, r3, #9
 8107a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107a06:	ee07 3a90 	vmov	s15, r3
 8107a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8107a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107a22:	ee17 2a90 	vmov	r2, s15
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107a2a:	4b1f      	ldr	r3, [pc, #124]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107a2e:	0c1b      	lsrs	r3, r3, #16
 8107a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107a34:	ee07 3a90 	vmov	s15, r3
 8107a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8107a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107a50:	ee17 2a90 	vmov	r2, s15
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107a58:	4b13      	ldr	r3, [pc, #76]	; (8107aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107a5c:	0e1b      	lsrs	r3, r3, #24
 8107a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107a62:	ee07 3a90 	vmov	s15, r3
 8107a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8107a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107a7e:	ee17 2a90 	vmov	r2, s15
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107a86:	e008      	b.n	8107a9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	2200      	movs	r2, #0
 8107a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	2200      	movs	r2, #0
 8107a92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107a94:	687b      	ldr	r3, [r7, #4]
 8107a96:	2200      	movs	r2, #0
 8107a98:	609a      	str	r2, [r3, #8]
}
 8107a9a:	bf00      	nop
 8107a9c:	3724      	adds	r7, #36	; 0x24
 8107a9e:	46bd      	mov	sp, r7
 8107aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107aa4:	4770      	bx	lr
 8107aa6:	bf00      	nop
 8107aa8:	58024400 	.word	0x58024400
 8107aac:	03d09000 	.word	0x03d09000
 8107ab0:	46000000 	.word	0x46000000
 8107ab4:	4c742400 	.word	0x4c742400
 8107ab8:	4a742400 	.word	0x4a742400
 8107abc:	4bbebc20 	.word	0x4bbebc20

08107ac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107ac0:	b580      	push	{r7, lr}
 8107ac2:	b084      	sub	sp, #16
 8107ac4:	af00      	add	r7, sp, #0
 8107ac6:	6078      	str	r0, [r7, #4]
 8107ac8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107aca:	2300      	movs	r3, #0
 8107acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107ace:	4b54      	ldr	r3, [pc, #336]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ad2:	f003 0303 	and.w	r3, r3, #3
 8107ad6:	2b03      	cmp	r3, #3
 8107ad8:	d101      	bne.n	8107ade <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107ada:	2301      	movs	r3, #1
 8107adc:	e09b      	b.n	8107c16 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107ade:	4b50      	ldr	r3, [pc, #320]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107ae0:	681b      	ldr	r3, [r3, #0]
 8107ae2:	4a4f      	ldr	r2, [pc, #316]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107ae4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107aea:	f7fc f83b 	bl	8103b64 <HAL_GetTick>
 8107aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107af0:	e008      	b.n	8107b04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107af2:	f7fc f837 	bl	8103b64 <HAL_GetTick>
 8107af6:	4602      	mov	r2, r0
 8107af8:	68bb      	ldr	r3, [r7, #8]
 8107afa:	1ad3      	subs	r3, r2, r3
 8107afc:	2b02      	cmp	r3, #2
 8107afe:	d901      	bls.n	8107b04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107b00:	2303      	movs	r3, #3
 8107b02:	e088      	b.n	8107c16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107b04:	4b46      	ldr	r3, [pc, #280]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107b0c:	2b00      	cmp	r3, #0
 8107b0e:	d1f0      	bne.n	8107af2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107b10:	4b43      	ldr	r3, [pc, #268]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	681b      	ldr	r3, [r3, #0]
 8107b1c:	031b      	lsls	r3, r3, #12
 8107b1e:	4940      	ldr	r1, [pc, #256]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b20:	4313      	orrs	r3, r2
 8107b22:	628b      	str	r3, [r1, #40]	; 0x28
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	685b      	ldr	r3, [r3, #4]
 8107b28:	3b01      	subs	r3, #1
 8107b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	689b      	ldr	r3, [r3, #8]
 8107b32:	3b01      	subs	r3, #1
 8107b34:	025b      	lsls	r3, r3, #9
 8107b36:	b29b      	uxth	r3, r3
 8107b38:	431a      	orrs	r2, r3
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	68db      	ldr	r3, [r3, #12]
 8107b3e:	3b01      	subs	r3, #1
 8107b40:	041b      	lsls	r3, r3, #16
 8107b42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107b46:	431a      	orrs	r2, r3
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	691b      	ldr	r3, [r3, #16]
 8107b4c:	3b01      	subs	r3, #1
 8107b4e:	061b      	lsls	r3, r3, #24
 8107b50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107b54:	4932      	ldr	r1, [pc, #200]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b56:	4313      	orrs	r3, r2
 8107b58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107b5a:	4b31      	ldr	r3, [pc, #196]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	695b      	ldr	r3, [r3, #20]
 8107b66:	492e      	ldr	r1, [pc, #184]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b68:	4313      	orrs	r3, r2
 8107b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107b6c:	4b2c      	ldr	r3, [pc, #176]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b70:	f023 0220 	bic.w	r2, r3, #32
 8107b74:	687b      	ldr	r3, [r7, #4]
 8107b76:	699b      	ldr	r3, [r3, #24]
 8107b78:	4929      	ldr	r1, [pc, #164]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b7a:	4313      	orrs	r3, r2
 8107b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107b7e:	4b28      	ldr	r3, [pc, #160]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b82:	4a27      	ldr	r2, [pc, #156]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b84:	f023 0310 	bic.w	r3, r3, #16
 8107b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107b8a:	4b25      	ldr	r3, [pc, #148]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107b92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107b96:	687a      	ldr	r2, [r7, #4]
 8107b98:	69d2      	ldr	r2, [r2, #28]
 8107b9a:	00d2      	lsls	r2, r2, #3
 8107b9c:	4920      	ldr	r1, [pc, #128]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107b9e:	4313      	orrs	r3, r2
 8107ba0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107ba2:	4b1f      	ldr	r3, [pc, #124]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ba6:	4a1e      	ldr	r2, [pc, #120]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107ba8:	f043 0310 	orr.w	r3, r3, #16
 8107bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107bae:	683b      	ldr	r3, [r7, #0]
 8107bb0:	2b00      	cmp	r3, #0
 8107bb2:	d106      	bne.n	8107bc2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107bb4:	4b1a      	ldr	r3, [pc, #104]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bb8:	4a19      	ldr	r2, [pc, #100]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107bc0:	e00f      	b.n	8107be2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107bc2:	683b      	ldr	r3, [r7, #0]
 8107bc4:	2b01      	cmp	r3, #1
 8107bc6:	d106      	bne.n	8107bd6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107bc8:	4b15      	ldr	r3, [pc, #84]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bcc:	4a14      	ldr	r2, [pc, #80]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107bd4:	e005      	b.n	8107be2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107bd6:	4b12      	ldr	r3, [pc, #72]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bda:	4a11      	ldr	r2, [pc, #68]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107be2:	4b0f      	ldr	r3, [pc, #60]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	4a0e      	ldr	r2, [pc, #56]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107bee:	f7fb ffb9 	bl	8103b64 <HAL_GetTick>
 8107bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107bf4:	e008      	b.n	8107c08 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107bf6:	f7fb ffb5 	bl	8103b64 <HAL_GetTick>
 8107bfa:	4602      	mov	r2, r0
 8107bfc:	68bb      	ldr	r3, [r7, #8]
 8107bfe:	1ad3      	subs	r3, r2, r3
 8107c00:	2b02      	cmp	r3, #2
 8107c02:	d901      	bls.n	8107c08 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107c04:	2303      	movs	r3, #3
 8107c06:	e006      	b.n	8107c16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107c08:	4b05      	ldr	r3, [pc, #20]	; (8107c20 <RCCEx_PLL2_Config+0x160>)
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d0f0      	beq.n	8107bf6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8107c16:	4618      	mov	r0, r3
 8107c18:	3710      	adds	r7, #16
 8107c1a:	46bd      	mov	sp, r7
 8107c1c:	bd80      	pop	{r7, pc}
 8107c1e:	bf00      	nop
 8107c20:	58024400 	.word	0x58024400

08107c24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107c24:	b580      	push	{r7, lr}
 8107c26:	b084      	sub	sp, #16
 8107c28:	af00      	add	r7, sp, #0
 8107c2a:	6078      	str	r0, [r7, #4]
 8107c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107c2e:	2300      	movs	r3, #0
 8107c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107c32:	4b54      	ldr	r3, [pc, #336]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c36:	f003 0303 	and.w	r3, r3, #3
 8107c3a:	2b03      	cmp	r3, #3
 8107c3c:	d101      	bne.n	8107c42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107c3e:	2301      	movs	r3, #1
 8107c40:	e09b      	b.n	8107d7a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107c42:	4b50      	ldr	r3, [pc, #320]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	4a4f      	ldr	r2, [pc, #316]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c4e:	f7fb ff89 	bl	8103b64 <HAL_GetTick>
 8107c52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107c54:	e008      	b.n	8107c68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107c56:	f7fb ff85 	bl	8103b64 <HAL_GetTick>
 8107c5a:	4602      	mov	r2, r0
 8107c5c:	68bb      	ldr	r3, [r7, #8]
 8107c5e:	1ad3      	subs	r3, r2, r3
 8107c60:	2b02      	cmp	r3, #2
 8107c62:	d901      	bls.n	8107c68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107c64:	2303      	movs	r3, #3
 8107c66:	e088      	b.n	8107d7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107c68:	4b46      	ldr	r3, [pc, #280]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c70:	2b00      	cmp	r3, #0
 8107c72:	d1f0      	bne.n	8107c56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107c74:	4b43      	ldr	r3, [pc, #268]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107c7c:	687b      	ldr	r3, [r7, #4]
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	051b      	lsls	r3, r3, #20
 8107c82:	4940      	ldr	r1, [pc, #256]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107c84:	4313      	orrs	r3, r2
 8107c86:	628b      	str	r3, [r1, #40]	; 0x28
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	685b      	ldr	r3, [r3, #4]
 8107c8c:	3b01      	subs	r3, #1
 8107c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	689b      	ldr	r3, [r3, #8]
 8107c96:	3b01      	subs	r3, #1
 8107c98:	025b      	lsls	r3, r3, #9
 8107c9a:	b29b      	uxth	r3, r3
 8107c9c:	431a      	orrs	r2, r3
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	68db      	ldr	r3, [r3, #12]
 8107ca2:	3b01      	subs	r3, #1
 8107ca4:	041b      	lsls	r3, r3, #16
 8107ca6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107caa:	431a      	orrs	r2, r3
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	691b      	ldr	r3, [r3, #16]
 8107cb0:	3b01      	subs	r3, #1
 8107cb2:	061b      	lsls	r3, r3, #24
 8107cb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107cb8:	4932      	ldr	r1, [pc, #200]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107cba:	4313      	orrs	r3, r2
 8107cbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107cbe:	4b31      	ldr	r3, [pc, #196]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	695b      	ldr	r3, [r3, #20]
 8107cca:	492e      	ldr	r1, [pc, #184]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107ccc:	4313      	orrs	r3, r2
 8107cce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107cd0:	4b2c      	ldr	r3, [pc, #176]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	699b      	ldr	r3, [r3, #24]
 8107cdc:	4929      	ldr	r1, [pc, #164]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107cde:	4313      	orrs	r3, r2
 8107ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107ce2:	4b28      	ldr	r3, [pc, #160]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ce6:	4a27      	ldr	r2, [pc, #156]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107cee:	4b25      	ldr	r3, [pc, #148]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107cf6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107cfa:	687a      	ldr	r2, [r7, #4]
 8107cfc:	69d2      	ldr	r2, [r2, #28]
 8107cfe:	00d2      	lsls	r2, r2, #3
 8107d00:	4920      	ldr	r1, [pc, #128]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d02:	4313      	orrs	r3, r2
 8107d04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107d06:	4b1f      	ldr	r3, [pc, #124]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d0a:	4a1e      	ldr	r2, [pc, #120]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107d12:	683b      	ldr	r3, [r7, #0]
 8107d14:	2b00      	cmp	r3, #0
 8107d16:	d106      	bne.n	8107d26 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107d18:	4b1a      	ldr	r3, [pc, #104]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d1c:	4a19      	ldr	r2, [pc, #100]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107d24:	e00f      	b.n	8107d46 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107d26:	683b      	ldr	r3, [r7, #0]
 8107d28:	2b01      	cmp	r3, #1
 8107d2a:	d106      	bne.n	8107d3a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107d2c:	4b15      	ldr	r3, [pc, #84]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d30:	4a14      	ldr	r2, [pc, #80]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107d38:	e005      	b.n	8107d46 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107d3a:	4b12      	ldr	r3, [pc, #72]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d3e:	4a11      	ldr	r2, [pc, #68]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107d44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107d46:	4b0f      	ldr	r3, [pc, #60]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d48:	681b      	ldr	r3, [r3, #0]
 8107d4a:	4a0e      	ldr	r2, [pc, #56]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107d52:	f7fb ff07 	bl	8103b64 <HAL_GetTick>
 8107d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107d58:	e008      	b.n	8107d6c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107d5a:	f7fb ff03 	bl	8103b64 <HAL_GetTick>
 8107d5e:	4602      	mov	r2, r0
 8107d60:	68bb      	ldr	r3, [r7, #8]
 8107d62:	1ad3      	subs	r3, r2, r3
 8107d64:	2b02      	cmp	r3, #2
 8107d66:	d901      	bls.n	8107d6c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107d68:	2303      	movs	r3, #3
 8107d6a:	e006      	b.n	8107d7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107d6c:	4b05      	ldr	r3, [pc, #20]	; (8107d84 <RCCEx_PLL3_Config+0x160>)
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107d74:	2b00      	cmp	r3, #0
 8107d76:	d0f0      	beq.n	8107d5a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d7a:	4618      	mov	r0, r3
 8107d7c:	3710      	adds	r7, #16
 8107d7e:	46bd      	mov	sp, r7
 8107d80:	bd80      	pop	{r7, pc}
 8107d82:	bf00      	nop
 8107d84:	58024400 	.word	0x58024400

08107d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107d88:	b580      	push	{r7, lr}
 8107d8a:	b082      	sub	sp, #8
 8107d8c:	af00      	add	r7, sp, #0
 8107d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	2b00      	cmp	r3, #0
 8107d94:	d101      	bne.n	8107d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107d96:	2301      	movs	r3, #1
 8107d98:	e042      	b.n	8107e20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107d9a:	687b      	ldr	r3, [r7, #4]
 8107d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107da0:	2b00      	cmp	r3, #0
 8107da2:	d106      	bne.n	8107db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	2200      	movs	r2, #0
 8107da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107dac:	6878      	ldr	r0, [r7, #4]
 8107dae:	f7f9 fa09 	bl	81011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	2224      	movs	r2, #36	; 0x24
 8107db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	681a      	ldr	r2, [r3, #0]
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	681b      	ldr	r3, [r3, #0]
 8107dc4:	f022 0201 	bic.w	r2, r2, #1
 8107dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107dca:	6878      	ldr	r0, [r7, #4]
 8107dcc:	f000 f8ba 	bl	8107f44 <UART_SetConfig>
 8107dd0:	4603      	mov	r3, r0
 8107dd2:	2b01      	cmp	r3, #1
 8107dd4:	d101      	bne.n	8107dda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107dd6:	2301      	movs	r3, #1
 8107dd8:	e022      	b.n	8107e20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107dde:	2b00      	cmp	r3, #0
 8107de0:	d002      	beq.n	8107de8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107de2:	6878      	ldr	r0, [r7, #4]
 8107de4:	f000 fe16 	bl	8108a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	681b      	ldr	r3, [r3, #0]
 8107dec:	685a      	ldr	r2, [r3, #4]
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	681b      	ldr	r3, [r3, #0]
 8107dfc:	689a      	ldr	r2, [r3, #8]
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	681a      	ldr	r2, [r3, #0]
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	681b      	ldr	r3, [r3, #0]
 8107e12:	f042 0201 	orr.w	r2, r2, #1
 8107e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107e18:	6878      	ldr	r0, [r7, #4]
 8107e1a:	f000 fe9d 	bl	8108b58 <UART_CheckIdleState>
 8107e1e:	4603      	mov	r3, r0
}
 8107e20:	4618      	mov	r0, r3
 8107e22:	3708      	adds	r7, #8
 8107e24:	46bd      	mov	sp, r7
 8107e26:	bd80      	pop	{r7, pc}

08107e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107e28:	b580      	push	{r7, lr}
 8107e2a:	b08a      	sub	sp, #40	; 0x28
 8107e2c:	af02      	add	r7, sp, #8
 8107e2e:	60f8      	str	r0, [r7, #12]
 8107e30:	60b9      	str	r1, [r7, #8]
 8107e32:	603b      	str	r3, [r7, #0]
 8107e34:	4613      	mov	r3, r2
 8107e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107e38:	68fb      	ldr	r3, [r7, #12]
 8107e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107e3e:	2b20      	cmp	r3, #32
 8107e40:	d17b      	bne.n	8107f3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8107e42:	68bb      	ldr	r3, [r7, #8]
 8107e44:	2b00      	cmp	r3, #0
 8107e46:	d002      	beq.n	8107e4e <HAL_UART_Transmit+0x26>
 8107e48:	88fb      	ldrh	r3, [r7, #6]
 8107e4a:	2b00      	cmp	r3, #0
 8107e4c:	d101      	bne.n	8107e52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8107e4e:	2301      	movs	r3, #1
 8107e50:	e074      	b.n	8107f3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e52:	68fb      	ldr	r3, [r7, #12]
 8107e54:	2200      	movs	r2, #0
 8107e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107e5a:	68fb      	ldr	r3, [r7, #12]
 8107e5c:	2221      	movs	r2, #33	; 0x21
 8107e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107e62:	f7fb fe7f 	bl	8103b64 <HAL_GetTick>
 8107e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107e68:	68fb      	ldr	r3, [r7, #12]
 8107e6a:	88fa      	ldrh	r2, [r7, #6]
 8107e6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	88fa      	ldrh	r2, [r7, #6]
 8107e74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107e78:	68fb      	ldr	r3, [r7, #12]
 8107e7a:	689b      	ldr	r3, [r3, #8]
 8107e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107e80:	d108      	bne.n	8107e94 <HAL_UART_Transmit+0x6c>
 8107e82:	68fb      	ldr	r3, [r7, #12]
 8107e84:	691b      	ldr	r3, [r3, #16]
 8107e86:	2b00      	cmp	r3, #0
 8107e88:	d104      	bne.n	8107e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8107e8a:	2300      	movs	r3, #0
 8107e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107e8e:	68bb      	ldr	r3, [r7, #8]
 8107e90:	61bb      	str	r3, [r7, #24]
 8107e92:	e003      	b.n	8107e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8107e94:	68bb      	ldr	r3, [r7, #8]
 8107e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107e98:	2300      	movs	r3, #0
 8107e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8107e9c:	e030      	b.n	8107f00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107e9e:	683b      	ldr	r3, [r7, #0]
 8107ea0:	9300      	str	r3, [sp, #0]
 8107ea2:	697b      	ldr	r3, [r7, #20]
 8107ea4:	2200      	movs	r2, #0
 8107ea6:	2180      	movs	r1, #128	; 0x80
 8107ea8:	68f8      	ldr	r0, [r7, #12]
 8107eaa:	f000 feff 	bl	8108cac <UART_WaitOnFlagUntilTimeout>
 8107eae:	4603      	mov	r3, r0
 8107eb0:	2b00      	cmp	r3, #0
 8107eb2:	d005      	beq.n	8107ec0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8107eb4:	68fb      	ldr	r3, [r7, #12]
 8107eb6:	2220      	movs	r2, #32
 8107eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8107ebc:	2303      	movs	r3, #3
 8107ebe:	e03d      	b.n	8107f3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8107ec0:	69fb      	ldr	r3, [r7, #28]
 8107ec2:	2b00      	cmp	r3, #0
 8107ec4:	d10b      	bne.n	8107ede <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107ec6:	69bb      	ldr	r3, [r7, #24]
 8107ec8:	881b      	ldrh	r3, [r3, #0]
 8107eca:	461a      	mov	r2, r3
 8107ecc:	68fb      	ldr	r3, [r7, #12]
 8107ece:	681b      	ldr	r3, [r3, #0]
 8107ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107ed6:	69bb      	ldr	r3, [r7, #24]
 8107ed8:	3302      	adds	r3, #2
 8107eda:	61bb      	str	r3, [r7, #24]
 8107edc:	e007      	b.n	8107eee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107ede:	69fb      	ldr	r3, [r7, #28]
 8107ee0:	781a      	ldrb	r2, [r3, #0]
 8107ee2:	68fb      	ldr	r3, [r7, #12]
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107ee8:	69fb      	ldr	r3, [r7, #28]
 8107eea:	3301      	adds	r3, #1
 8107eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107eee:	68fb      	ldr	r3, [r7, #12]
 8107ef0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107ef4:	b29b      	uxth	r3, r3
 8107ef6:	3b01      	subs	r3, #1
 8107ef8:	b29a      	uxth	r2, r3
 8107efa:	68fb      	ldr	r3, [r7, #12]
 8107efc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107f00:	68fb      	ldr	r3, [r7, #12]
 8107f02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107f06:	b29b      	uxth	r3, r3
 8107f08:	2b00      	cmp	r3, #0
 8107f0a:	d1c8      	bne.n	8107e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107f0c:	683b      	ldr	r3, [r7, #0]
 8107f0e:	9300      	str	r3, [sp, #0]
 8107f10:	697b      	ldr	r3, [r7, #20]
 8107f12:	2200      	movs	r2, #0
 8107f14:	2140      	movs	r1, #64	; 0x40
 8107f16:	68f8      	ldr	r0, [r7, #12]
 8107f18:	f000 fec8 	bl	8108cac <UART_WaitOnFlagUntilTimeout>
 8107f1c:	4603      	mov	r3, r0
 8107f1e:	2b00      	cmp	r3, #0
 8107f20:	d005      	beq.n	8107f2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8107f22:	68fb      	ldr	r3, [r7, #12]
 8107f24:	2220      	movs	r2, #32
 8107f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8107f2a:	2303      	movs	r3, #3
 8107f2c:	e006      	b.n	8107f3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107f2e:	68fb      	ldr	r3, [r7, #12]
 8107f30:	2220      	movs	r2, #32
 8107f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8107f36:	2300      	movs	r3, #0
 8107f38:	e000      	b.n	8107f3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8107f3a:	2302      	movs	r3, #2
  }
}
 8107f3c:	4618      	mov	r0, r3
 8107f3e:	3720      	adds	r7, #32
 8107f40:	46bd      	mov	sp, r7
 8107f42:	bd80      	pop	{r7, pc}

08107f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107f48:	b092      	sub	sp, #72	; 0x48
 8107f4a:	af00      	add	r7, sp, #0
 8107f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107f4e:	2300      	movs	r3, #0
 8107f50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107f54:	697b      	ldr	r3, [r7, #20]
 8107f56:	689a      	ldr	r2, [r3, #8]
 8107f58:	697b      	ldr	r3, [r7, #20]
 8107f5a:	691b      	ldr	r3, [r3, #16]
 8107f5c:	431a      	orrs	r2, r3
 8107f5e:	697b      	ldr	r3, [r7, #20]
 8107f60:	695b      	ldr	r3, [r3, #20]
 8107f62:	431a      	orrs	r2, r3
 8107f64:	697b      	ldr	r3, [r7, #20]
 8107f66:	69db      	ldr	r3, [r3, #28]
 8107f68:	4313      	orrs	r3, r2
 8107f6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107f6c:	697b      	ldr	r3, [r7, #20]
 8107f6e:	681b      	ldr	r3, [r3, #0]
 8107f70:	681a      	ldr	r2, [r3, #0]
 8107f72:	4bbd      	ldr	r3, [pc, #756]	; (8108268 <UART_SetConfig+0x324>)
 8107f74:	4013      	ands	r3, r2
 8107f76:	697a      	ldr	r2, [r7, #20]
 8107f78:	6812      	ldr	r2, [r2, #0]
 8107f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107f7c:	430b      	orrs	r3, r1
 8107f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107f80:	697b      	ldr	r3, [r7, #20]
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	685b      	ldr	r3, [r3, #4]
 8107f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107f8a:	697b      	ldr	r3, [r7, #20]
 8107f8c:	68da      	ldr	r2, [r3, #12]
 8107f8e:	697b      	ldr	r3, [r7, #20]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	430a      	orrs	r2, r1
 8107f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107f96:	697b      	ldr	r3, [r7, #20]
 8107f98:	699b      	ldr	r3, [r3, #24]
 8107f9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107f9c:	697b      	ldr	r3, [r7, #20]
 8107f9e:	681b      	ldr	r3, [r3, #0]
 8107fa0:	4ab2      	ldr	r2, [pc, #712]	; (810826c <UART_SetConfig+0x328>)
 8107fa2:	4293      	cmp	r3, r2
 8107fa4:	d004      	beq.n	8107fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107fa6:	697b      	ldr	r3, [r7, #20]
 8107fa8:	6a1b      	ldr	r3, [r3, #32]
 8107faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107fac:	4313      	orrs	r3, r2
 8107fae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107fb0:	697b      	ldr	r3, [r7, #20]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	689b      	ldr	r3, [r3, #8]
 8107fb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107fba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107fbe:	697a      	ldr	r2, [r7, #20]
 8107fc0:	6812      	ldr	r2, [r2, #0]
 8107fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107fc4:	430b      	orrs	r3, r1
 8107fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107fc8:	697b      	ldr	r3, [r7, #20]
 8107fca:	681b      	ldr	r3, [r3, #0]
 8107fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fce:	f023 010f 	bic.w	r1, r3, #15
 8107fd2:	697b      	ldr	r3, [r7, #20]
 8107fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107fd6:	697b      	ldr	r3, [r7, #20]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	430a      	orrs	r2, r1
 8107fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107fde:	697b      	ldr	r3, [r7, #20]
 8107fe0:	681b      	ldr	r3, [r3, #0]
 8107fe2:	4aa3      	ldr	r2, [pc, #652]	; (8108270 <UART_SetConfig+0x32c>)
 8107fe4:	4293      	cmp	r3, r2
 8107fe6:	d177      	bne.n	81080d8 <UART_SetConfig+0x194>
 8107fe8:	4ba2      	ldr	r3, [pc, #648]	; (8108274 <UART_SetConfig+0x330>)
 8107fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107fec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107ff0:	2b28      	cmp	r3, #40	; 0x28
 8107ff2:	d86d      	bhi.n	81080d0 <UART_SetConfig+0x18c>
 8107ff4:	a201      	add	r2, pc, #4	; (adr r2, 8107ffc <UART_SetConfig+0xb8>)
 8107ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ffa:	bf00      	nop
 8107ffc:	081080a1 	.word	0x081080a1
 8108000:	081080d1 	.word	0x081080d1
 8108004:	081080d1 	.word	0x081080d1
 8108008:	081080d1 	.word	0x081080d1
 810800c:	081080d1 	.word	0x081080d1
 8108010:	081080d1 	.word	0x081080d1
 8108014:	081080d1 	.word	0x081080d1
 8108018:	081080d1 	.word	0x081080d1
 810801c:	081080a9 	.word	0x081080a9
 8108020:	081080d1 	.word	0x081080d1
 8108024:	081080d1 	.word	0x081080d1
 8108028:	081080d1 	.word	0x081080d1
 810802c:	081080d1 	.word	0x081080d1
 8108030:	081080d1 	.word	0x081080d1
 8108034:	081080d1 	.word	0x081080d1
 8108038:	081080d1 	.word	0x081080d1
 810803c:	081080b1 	.word	0x081080b1
 8108040:	081080d1 	.word	0x081080d1
 8108044:	081080d1 	.word	0x081080d1
 8108048:	081080d1 	.word	0x081080d1
 810804c:	081080d1 	.word	0x081080d1
 8108050:	081080d1 	.word	0x081080d1
 8108054:	081080d1 	.word	0x081080d1
 8108058:	081080d1 	.word	0x081080d1
 810805c:	081080b9 	.word	0x081080b9
 8108060:	081080d1 	.word	0x081080d1
 8108064:	081080d1 	.word	0x081080d1
 8108068:	081080d1 	.word	0x081080d1
 810806c:	081080d1 	.word	0x081080d1
 8108070:	081080d1 	.word	0x081080d1
 8108074:	081080d1 	.word	0x081080d1
 8108078:	081080d1 	.word	0x081080d1
 810807c:	081080c1 	.word	0x081080c1
 8108080:	081080d1 	.word	0x081080d1
 8108084:	081080d1 	.word	0x081080d1
 8108088:	081080d1 	.word	0x081080d1
 810808c:	081080d1 	.word	0x081080d1
 8108090:	081080d1 	.word	0x081080d1
 8108094:	081080d1 	.word	0x081080d1
 8108098:	081080d1 	.word	0x081080d1
 810809c:	081080c9 	.word	0x081080c9
 81080a0:	2301      	movs	r3, #1
 81080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080a6:	e220      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080a8:	2304      	movs	r3, #4
 81080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ae:	e21c      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080b0:	2308      	movs	r3, #8
 81080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080b6:	e218      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080b8:	2310      	movs	r3, #16
 81080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080be:	e214      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080c0:	2320      	movs	r3, #32
 81080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080c6:	e210      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080c8:	2340      	movs	r3, #64	; 0x40
 81080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ce:	e20c      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080d0:	2380      	movs	r3, #128	; 0x80
 81080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080d6:	e208      	b.n	81084ea <UART_SetConfig+0x5a6>
 81080d8:	697b      	ldr	r3, [r7, #20]
 81080da:	681b      	ldr	r3, [r3, #0]
 81080dc:	4a66      	ldr	r2, [pc, #408]	; (8108278 <UART_SetConfig+0x334>)
 81080de:	4293      	cmp	r3, r2
 81080e0:	d130      	bne.n	8108144 <UART_SetConfig+0x200>
 81080e2:	4b64      	ldr	r3, [pc, #400]	; (8108274 <UART_SetConfig+0x330>)
 81080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81080e6:	f003 0307 	and.w	r3, r3, #7
 81080ea:	2b05      	cmp	r3, #5
 81080ec:	d826      	bhi.n	810813c <UART_SetConfig+0x1f8>
 81080ee:	a201      	add	r2, pc, #4	; (adr r2, 81080f4 <UART_SetConfig+0x1b0>)
 81080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81080f4:	0810810d 	.word	0x0810810d
 81080f8:	08108115 	.word	0x08108115
 81080fc:	0810811d 	.word	0x0810811d
 8108100:	08108125 	.word	0x08108125
 8108104:	0810812d 	.word	0x0810812d
 8108108:	08108135 	.word	0x08108135
 810810c:	2300      	movs	r3, #0
 810810e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108112:	e1ea      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108114:	2304      	movs	r3, #4
 8108116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810811a:	e1e6      	b.n	81084ea <UART_SetConfig+0x5a6>
 810811c:	2308      	movs	r3, #8
 810811e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108122:	e1e2      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108124:	2310      	movs	r3, #16
 8108126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810812a:	e1de      	b.n	81084ea <UART_SetConfig+0x5a6>
 810812c:	2320      	movs	r3, #32
 810812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108132:	e1da      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108134:	2340      	movs	r3, #64	; 0x40
 8108136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810813a:	e1d6      	b.n	81084ea <UART_SetConfig+0x5a6>
 810813c:	2380      	movs	r3, #128	; 0x80
 810813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108142:	e1d2      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108144:	697b      	ldr	r3, [r7, #20]
 8108146:	681b      	ldr	r3, [r3, #0]
 8108148:	4a4c      	ldr	r2, [pc, #304]	; (810827c <UART_SetConfig+0x338>)
 810814a:	4293      	cmp	r3, r2
 810814c:	d130      	bne.n	81081b0 <UART_SetConfig+0x26c>
 810814e:	4b49      	ldr	r3, [pc, #292]	; (8108274 <UART_SetConfig+0x330>)
 8108150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108152:	f003 0307 	and.w	r3, r3, #7
 8108156:	2b05      	cmp	r3, #5
 8108158:	d826      	bhi.n	81081a8 <UART_SetConfig+0x264>
 810815a:	a201      	add	r2, pc, #4	; (adr r2, 8108160 <UART_SetConfig+0x21c>)
 810815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108160:	08108179 	.word	0x08108179
 8108164:	08108181 	.word	0x08108181
 8108168:	08108189 	.word	0x08108189
 810816c:	08108191 	.word	0x08108191
 8108170:	08108199 	.word	0x08108199
 8108174:	081081a1 	.word	0x081081a1
 8108178:	2300      	movs	r3, #0
 810817a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810817e:	e1b4      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108180:	2304      	movs	r3, #4
 8108182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108186:	e1b0      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108188:	2308      	movs	r3, #8
 810818a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810818e:	e1ac      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108190:	2310      	movs	r3, #16
 8108192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108196:	e1a8      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108198:	2320      	movs	r3, #32
 810819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810819e:	e1a4      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081a0:	2340      	movs	r3, #64	; 0x40
 81081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081a6:	e1a0      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081a8:	2380      	movs	r3, #128	; 0x80
 81081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ae:	e19c      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081b0:	697b      	ldr	r3, [r7, #20]
 81081b2:	681b      	ldr	r3, [r3, #0]
 81081b4:	4a32      	ldr	r2, [pc, #200]	; (8108280 <UART_SetConfig+0x33c>)
 81081b6:	4293      	cmp	r3, r2
 81081b8:	d130      	bne.n	810821c <UART_SetConfig+0x2d8>
 81081ba:	4b2e      	ldr	r3, [pc, #184]	; (8108274 <UART_SetConfig+0x330>)
 81081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081be:	f003 0307 	and.w	r3, r3, #7
 81081c2:	2b05      	cmp	r3, #5
 81081c4:	d826      	bhi.n	8108214 <UART_SetConfig+0x2d0>
 81081c6:	a201      	add	r2, pc, #4	; (adr r2, 81081cc <UART_SetConfig+0x288>)
 81081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081cc:	081081e5 	.word	0x081081e5
 81081d0:	081081ed 	.word	0x081081ed
 81081d4:	081081f5 	.word	0x081081f5
 81081d8:	081081fd 	.word	0x081081fd
 81081dc:	08108205 	.word	0x08108205
 81081e0:	0810820d 	.word	0x0810820d
 81081e4:	2300      	movs	r3, #0
 81081e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ea:	e17e      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081ec:	2304      	movs	r3, #4
 81081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081f2:	e17a      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081f4:	2308      	movs	r3, #8
 81081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081fa:	e176      	b.n	81084ea <UART_SetConfig+0x5a6>
 81081fc:	2310      	movs	r3, #16
 81081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108202:	e172      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108204:	2320      	movs	r3, #32
 8108206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810820a:	e16e      	b.n	81084ea <UART_SetConfig+0x5a6>
 810820c:	2340      	movs	r3, #64	; 0x40
 810820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108212:	e16a      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108214:	2380      	movs	r3, #128	; 0x80
 8108216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810821a:	e166      	b.n	81084ea <UART_SetConfig+0x5a6>
 810821c:	697b      	ldr	r3, [r7, #20]
 810821e:	681b      	ldr	r3, [r3, #0]
 8108220:	4a18      	ldr	r2, [pc, #96]	; (8108284 <UART_SetConfig+0x340>)
 8108222:	4293      	cmp	r3, r2
 8108224:	d140      	bne.n	81082a8 <UART_SetConfig+0x364>
 8108226:	4b13      	ldr	r3, [pc, #76]	; (8108274 <UART_SetConfig+0x330>)
 8108228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810822a:	f003 0307 	and.w	r3, r3, #7
 810822e:	2b05      	cmp	r3, #5
 8108230:	d836      	bhi.n	81082a0 <UART_SetConfig+0x35c>
 8108232:	a201      	add	r2, pc, #4	; (adr r2, 8108238 <UART_SetConfig+0x2f4>)
 8108234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108238:	08108251 	.word	0x08108251
 810823c:	08108259 	.word	0x08108259
 8108240:	08108261 	.word	0x08108261
 8108244:	08108289 	.word	0x08108289
 8108248:	08108291 	.word	0x08108291
 810824c:	08108299 	.word	0x08108299
 8108250:	2300      	movs	r3, #0
 8108252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108256:	e148      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108258:	2304      	movs	r3, #4
 810825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810825e:	e144      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108260:	2308      	movs	r3, #8
 8108262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108266:	e140      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108268:	cfff69f3 	.word	0xcfff69f3
 810826c:	58000c00 	.word	0x58000c00
 8108270:	40011000 	.word	0x40011000
 8108274:	58024400 	.word	0x58024400
 8108278:	40004400 	.word	0x40004400
 810827c:	40004800 	.word	0x40004800
 8108280:	40004c00 	.word	0x40004c00
 8108284:	40005000 	.word	0x40005000
 8108288:	2310      	movs	r3, #16
 810828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810828e:	e12c      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108290:	2320      	movs	r3, #32
 8108292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108296:	e128      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108298:	2340      	movs	r3, #64	; 0x40
 810829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810829e:	e124      	b.n	81084ea <UART_SetConfig+0x5a6>
 81082a0:	2380      	movs	r3, #128	; 0x80
 81082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082a6:	e120      	b.n	81084ea <UART_SetConfig+0x5a6>
 81082a8:	697b      	ldr	r3, [r7, #20]
 81082aa:	681b      	ldr	r3, [r3, #0]
 81082ac:	4acb      	ldr	r2, [pc, #812]	; (81085dc <UART_SetConfig+0x698>)
 81082ae:	4293      	cmp	r3, r2
 81082b0:	d176      	bne.n	81083a0 <UART_SetConfig+0x45c>
 81082b2:	4bcb      	ldr	r3, [pc, #812]	; (81085e0 <UART_SetConfig+0x69c>)
 81082b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81082ba:	2b28      	cmp	r3, #40	; 0x28
 81082bc:	d86c      	bhi.n	8108398 <UART_SetConfig+0x454>
 81082be:	a201      	add	r2, pc, #4	; (adr r2, 81082c4 <UART_SetConfig+0x380>)
 81082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082c4:	08108369 	.word	0x08108369
 81082c8:	08108399 	.word	0x08108399
 81082cc:	08108399 	.word	0x08108399
 81082d0:	08108399 	.word	0x08108399
 81082d4:	08108399 	.word	0x08108399
 81082d8:	08108399 	.word	0x08108399
 81082dc:	08108399 	.word	0x08108399
 81082e0:	08108399 	.word	0x08108399
 81082e4:	08108371 	.word	0x08108371
 81082e8:	08108399 	.word	0x08108399
 81082ec:	08108399 	.word	0x08108399
 81082f0:	08108399 	.word	0x08108399
 81082f4:	08108399 	.word	0x08108399
 81082f8:	08108399 	.word	0x08108399
 81082fc:	08108399 	.word	0x08108399
 8108300:	08108399 	.word	0x08108399
 8108304:	08108379 	.word	0x08108379
 8108308:	08108399 	.word	0x08108399
 810830c:	08108399 	.word	0x08108399
 8108310:	08108399 	.word	0x08108399
 8108314:	08108399 	.word	0x08108399
 8108318:	08108399 	.word	0x08108399
 810831c:	08108399 	.word	0x08108399
 8108320:	08108399 	.word	0x08108399
 8108324:	08108381 	.word	0x08108381
 8108328:	08108399 	.word	0x08108399
 810832c:	08108399 	.word	0x08108399
 8108330:	08108399 	.word	0x08108399
 8108334:	08108399 	.word	0x08108399
 8108338:	08108399 	.word	0x08108399
 810833c:	08108399 	.word	0x08108399
 8108340:	08108399 	.word	0x08108399
 8108344:	08108389 	.word	0x08108389
 8108348:	08108399 	.word	0x08108399
 810834c:	08108399 	.word	0x08108399
 8108350:	08108399 	.word	0x08108399
 8108354:	08108399 	.word	0x08108399
 8108358:	08108399 	.word	0x08108399
 810835c:	08108399 	.word	0x08108399
 8108360:	08108399 	.word	0x08108399
 8108364:	08108391 	.word	0x08108391
 8108368:	2301      	movs	r3, #1
 810836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810836e:	e0bc      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108370:	2304      	movs	r3, #4
 8108372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108376:	e0b8      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108378:	2308      	movs	r3, #8
 810837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810837e:	e0b4      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108380:	2310      	movs	r3, #16
 8108382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108386:	e0b0      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108388:	2320      	movs	r3, #32
 810838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810838e:	e0ac      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108390:	2340      	movs	r3, #64	; 0x40
 8108392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108396:	e0a8      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108398:	2380      	movs	r3, #128	; 0x80
 810839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810839e:	e0a4      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083a0:	697b      	ldr	r3, [r7, #20]
 81083a2:	681b      	ldr	r3, [r3, #0]
 81083a4:	4a8f      	ldr	r2, [pc, #572]	; (81085e4 <UART_SetConfig+0x6a0>)
 81083a6:	4293      	cmp	r3, r2
 81083a8:	d130      	bne.n	810840c <UART_SetConfig+0x4c8>
 81083aa:	4b8d      	ldr	r3, [pc, #564]	; (81085e0 <UART_SetConfig+0x69c>)
 81083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083ae:	f003 0307 	and.w	r3, r3, #7
 81083b2:	2b05      	cmp	r3, #5
 81083b4:	d826      	bhi.n	8108404 <UART_SetConfig+0x4c0>
 81083b6:	a201      	add	r2, pc, #4	; (adr r2, 81083bc <UART_SetConfig+0x478>)
 81083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083bc:	081083d5 	.word	0x081083d5
 81083c0:	081083dd 	.word	0x081083dd
 81083c4:	081083e5 	.word	0x081083e5
 81083c8:	081083ed 	.word	0x081083ed
 81083cc:	081083f5 	.word	0x081083f5
 81083d0:	081083fd 	.word	0x081083fd
 81083d4:	2300      	movs	r3, #0
 81083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083da:	e086      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083dc:	2304      	movs	r3, #4
 81083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083e2:	e082      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083e4:	2308      	movs	r3, #8
 81083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083ea:	e07e      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083ec:	2310      	movs	r3, #16
 81083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083f2:	e07a      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083f4:	2320      	movs	r3, #32
 81083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083fa:	e076      	b.n	81084ea <UART_SetConfig+0x5a6>
 81083fc:	2340      	movs	r3, #64	; 0x40
 81083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108402:	e072      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108404:	2380      	movs	r3, #128	; 0x80
 8108406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810840a:	e06e      	b.n	81084ea <UART_SetConfig+0x5a6>
 810840c:	697b      	ldr	r3, [r7, #20]
 810840e:	681b      	ldr	r3, [r3, #0]
 8108410:	4a75      	ldr	r2, [pc, #468]	; (81085e8 <UART_SetConfig+0x6a4>)
 8108412:	4293      	cmp	r3, r2
 8108414:	d130      	bne.n	8108478 <UART_SetConfig+0x534>
 8108416:	4b72      	ldr	r3, [pc, #456]	; (81085e0 <UART_SetConfig+0x69c>)
 8108418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810841a:	f003 0307 	and.w	r3, r3, #7
 810841e:	2b05      	cmp	r3, #5
 8108420:	d826      	bhi.n	8108470 <UART_SetConfig+0x52c>
 8108422:	a201      	add	r2, pc, #4	; (adr r2, 8108428 <UART_SetConfig+0x4e4>)
 8108424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108428:	08108441 	.word	0x08108441
 810842c:	08108449 	.word	0x08108449
 8108430:	08108451 	.word	0x08108451
 8108434:	08108459 	.word	0x08108459
 8108438:	08108461 	.word	0x08108461
 810843c:	08108469 	.word	0x08108469
 8108440:	2300      	movs	r3, #0
 8108442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108446:	e050      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108448:	2304      	movs	r3, #4
 810844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810844e:	e04c      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108450:	2308      	movs	r3, #8
 8108452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108456:	e048      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108458:	2310      	movs	r3, #16
 810845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810845e:	e044      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108460:	2320      	movs	r3, #32
 8108462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108466:	e040      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108468:	2340      	movs	r3, #64	; 0x40
 810846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810846e:	e03c      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108470:	2380      	movs	r3, #128	; 0x80
 8108472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108476:	e038      	b.n	81084ea <UART_SetConfig+0x5a6>
 8108478:	697b      	ldr	r3, [r7, #20]
 810847a:	681b      	ldr	r3, [r3, #0]
 810847c:	4a5b      	ldr	r2, [pc, #364]	; (81085ec <UART_SetConfig+0x6a8>)
 810847e:	4293      	cmp	r3, r2
 8108480:	d130      	bne.n	81084e4 <UART_SetConfig+0x5a0>
 8108482:	4b57      	ldr	r3, [pc, #348]	; (81085e0 <UART_SetConfig+0x69c>)
 8108484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108486:	f003 0307 	and.w	r3, r3, #7
 810848a:	2b05      	cmp	r3, #5
 810848c:	d826      	bhi.n	81084dc <UART_SetConfig+0x598>
 810848e:	a201      	add	r2, pc, #4	; (adr r2, 8108494 <UART_SetConfig+0x550>)
 8108490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108494:	081084ad 	.word	0x081084ad
 8108498:	081084b5 	.word	0x081084b5
 810849c:	081084bd 	.word	0x081084bd
 81084a0:	081084c5 	.word	0x081084c5
 81084a4:	081084cd 	.word	0x081084cd
 81084a8:	081084d5 	.word	0x081084d5
 81084ac:	2302      	movs	r3, #2
 81084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084b2:	e01a      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084b4:	2304      	movs	r3, #4
 81084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ba:	e016      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084bc:	2308      	movs	r3, #8
 81084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084c2:	e012      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084c4:	2310      	movs	r3, #16
 81084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ca:	e00e      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084cc:	2320      	movs	r3, #32
 81084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084d2:	e00a      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084d4:	2340      	movs	r3, #64	; 0x40
 81084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084da:	e006      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084dc:	2380      	movs	r3, #128	; 0x80
 81084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084e2:	e002      	b.n	81084ea <UART_SetConfig+0x5a6>
 81084e4:	2380      	movs	r3, #128	; 0x80
 81084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81084ea:	697b      	ldr	r3, [r7, #20]
 81084ec:	681b      	ldr	r3, [r3, #0]
 81084ee:	4a3f      	ldr	r2, [pc, #252]	; (81085ec <UART_SetConfig+0x6a8>)
 81084f0:	4293      	cmp	r3, r2
 81084f2:	f040 80f8 	bne.w	81086e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81084f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81084fa:	2b20      	cmp	r3, #32
 81084fc:	dc46      	bgt.n	810858c <UART_SetConfig+0x648>
 81084fe:	2b02      	cmp	r3, #2
 8108500:	f2c0 8082 	blt.w	8108608 <UART_SetConfig+0x6c4>
 8108504:	3b02      	subs	r3, #2
 8108506:	2b1e      	cmp	r3, #30
 8108508:	d87e      	bhi.n	8108608 <UART_SetConfig+0x6c4>
 810850a:	a201      	add	r2, pc, #4	; (adr r2, 8108510 <UART_SetConfig+0x5cc>)
 810850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108510:	08108593 	.word	0x08108593
 8108514:	08108609 	.word	0x08108609
 8108518:	0810859b 	.word	0x0810859b
 810851c:	08108609 	.word	0x08108609
 8108520:	08108609 	.word	0x08108609
 8108524:	08108609 	.word	0x08108609
 8108528:	081085ab 	.word	0x081085ab
 810852c:	08108609 	.word	0x08108609
 8108530:	08108609 	.word	0x08108609
 8108534:	08108609 	.word	0x08108609
 8108538:	08108609 	.word	0x08108609
 810853c:	08108609 	.word	0x08108609
 8108540:	08108609 	.word	0x08108609
 8108544:	08108609 	.word	0x08108609
 8108548:	081085bb 	.word	0x081085bb
 810854c:	08108609 	.word	0x08108609
 8108550:	08108609 	.word	0x08108609
 8108554:	08108609 	.word	0x08108609
 8108558:	08108609 	.word	0x08108609
 810855c:	08108609 	.word	0x08108609
 8108560:	08108609 	.word	0x08108609
 8108564:	08108609 	.word	0x08108609
 8108568:	08108609 	.word	0x08108609
 810856c:	08108609 	.word	0x08108609
 8108570:	08108609 	.word	0x08108609
 8108574:	08108609 	.word	0x08108609
 8108578:	08108609 	.word	0x08108609
 810857c:	08108609 	.word	0x08108609
 8108580:	08108609 	.word	0x08108609
 8108584:	08108609 	.word	0x08108609
 8108588:	081085fb 	.word	0x081085fb
 810858c:	2b40      	cmp	r3, #64	; 0x40
 810858e:	d037      	beq.n	8108600 <UART_SetConfig+0x6bc>
 8108590:	e03a      	b.n	8108608 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108592:	f7fe ffd7 	bl	8107544 <HAL_RCCEx_GetD3PCLK1Freq>
 8108596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108598:	e03c      	b.n	8108614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810859a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810859e:	4618      	mov	r0, r3
 81085a0:	f7fe ffe6 	bl	8107570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085a8:	e034      	b.n	8108614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085aa:	f107 0318 	add.w	r3, r7, #24
 81085ae:	4618      	mov	r0, r3
 81085b0:	f7ff f932 	bl	8107818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81085b4:	69fb      	ldr	r3, [r7, #28]
 81085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085b8:	e02c      	b.n	8108614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81085ba:	4b09      	ldr	r3, [pc, #36]	; (81085e0 <UART_SetConfig+0x69c>)
 81085bc:	681b      	ldr	r3, [r3, #0]
 81085be:	f003 0320 	and.w	r3, r3, #32
 81085c2:	2b00      	cmp	r3, #0
 81085c4:	d016      	beq.n	81085f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81085c6:	4b06      	ldr	r3, [pc, #24]	; (81085e0 <UART_SetConfig+0x69c>)
 81085c8:	681b      	ldr	r3, [r3, #0]
 81085ca:	08db      	lsrs	r3, r3, #3
 81085cc:	f003 0303 	and.w	r3, r3, #3
 81085d0:	4a07      	ldr	r2, [pc, #28]	; (81085f0 <UART_SetConfig+0x6ac>)
 81085d2:	fa22 f303 	lsr.w	r3, r2, r3
 81085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81085d8:	e01c      	b.n	8108614 <UART_SetConfig+0x6d0>
 81085da:	bf00      	nop
 81085dc:	40011400 	.word	0x40011400
 81085e0:	58024400 	.word	0x58024400
 81085e4:	40007800 	.word	0x40007800
 81085e8:	40007c00 	.word	0x40007c00
 81085ec:	58000c00 	.word	0x58000c00
 81085f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81085f4:	4b9d      	ldr	r3, [pc, #628]	; (810886c <UART_SetConfig+0x928>)
 81085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085f8:	e00c      	b.n	8108614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81085fa:	4b9d      	ldr	r3, [pc, #628]	; (8108870 <UART_SetConfig+0x92c>)
 81085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085fe:	e009      	b.n	8108614 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108606:	e005      	b.n	8108614 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108608:	2300      	movs	r3, #0
 810860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810860c:	2301      	movs	r3, #1
 810860e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108612:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108616:	2b00      	cmp	r3, #0
 8108618:	f000 81de 	beq.w	81089d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810861c:	697b      	ldr	r3, [r7, #20]
 810861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108620:	4a94      	ldr	r2, [pc, #592]	; (8108874 <UART_SetConfig+0x930>)
 8108622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108626:	461a      	mov	r2, r3
 8108628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810862a:	fbb3 f3f2 	udiv	r3, r3, r2
 810862e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108630:	697b      	ldr	r3, [r7, #20]
 8108632:	685a      	ldr	r2, [r3, #4]
 8108634:	4613      	mov	r3, r2
 8108636:	005b      	lsls	r3, r3, #1
 8108638:	4413      	add	r3, r2
 810863a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810863c:	429a      	cmp	r2, r3
 810863e:	d305      	bcc.n	810864c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108640:	697b      	ldr	r3, [r7, #20]
 8108642:	685b      	ldr	r3, [r3, #4]
 8108644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108648:	429a      	cmp	r2, r3
 810864a:	d903      	bls.n	8108654 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810864c:	2301      	movs	r3, #1
 810864e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108652:	e1c1      	b.n	81089d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108656:	2200      	movs	r2, #0
 8108658:	60bb      	str	r3, [r7, #8]
 810865a:	60fa      	str	r2, [r7, #12]
 810865c:	697b      	ldr	r3, [r7, #20]
 810865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108660:	4a84      	ldr	r2, [pc, #528]	; (8108874 <UART_SetConfig+0x930>)
 8108662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108666:	b29b      	uxth	r3, r3
 8108668:	2200      	movs	r2, #0
 810866a:	603b      	str	r3, [r7, #0]
 810866c:	607a      	str	r2, [r7, #4]
 810866e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108676:	f7f8 fa01 	bl	8100a7c <__aeabi_uldivmod>
 810867a:	4602      	mov	r2, r0
 810867c:	460b      	mov	r3, r1
 810867e:	4610      	mov	r0, r2
 8108680:	4619      	mov	r1, r3
 8108682:	f04f 0200 	mov.w	r2, #0
 8108686:	f04f 0300 	mov.w	r3, #0
 810868a:	020b      	lsls	r3, r1, #8
 810868c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108690:	0202      	lsls	r2, r0, #8
 8108692:	6979      	ldr	r1, [r7, #20]
 8108694:	6849      	ldr	r1, [r1, #4]
 8108696:	0849      	lsrs	r1, r1, #1
 8108698:	2000      	movs	r0, #0
 810869a:	460c      	mov	r4, r1
 810869c:	4605      	mov	r5, r0
 810869e:	eb12 0804 	adds.w	r8, r2, r4
 81086a2:	eb43 0905 	adc.w	r9, r3, r5
 81086a6:	697b      	ldr	r3, [r7, #20]
 81086a8:	685b      	ldr	r3, [r3, #4]
 81086aa:	2200      	movs	r2, #0
 81086ac:	469a      	mov	sl, r3
 81086ae:	4693      	mov	fp, r2
 81086b0:	4652      	mov	r2, sl
 81086b2:	465b      	mov	r3, fp
 81086b4:	4640      	mov	r0, r8
 81086b6:	4649      	mov	r1, r9
 81086b8:	f7f8 f9e0 	bl	8100a7c <__aeabi_uldivmod>
 81086bc:	4602      	mov	r2, r0
 81086be:	460b      	mov	r3, r1
 81086c0:	4613      	mov	r3, r2
 81086c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81086ca:	d308      	bcc.n	81086de <UART_SetConfig+0x79a>
 81086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81086d2:	d204      	bcs.n	81086de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81086d4:	697b      	ldr	r3, [r7, #20]
 81086d6:	681b      	ldr	r3, [r3, #0]
 81086d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81086da:	60da      	str	r2, [r3, #12]
 81086dc:	e17c      	b.n	81089d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81086de:	2301      	movs	r3, #1
 81086e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81086e4:	e178      	b.n	81089d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81086e6:	697b      	ldr	r3, [r7, #20]
 81086e8:	69db      	ldr	r3, [r3, #28]
 81086ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81086ee:	f040 80c5 	bne.w	810887c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81086f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81086f6:	2b20      	cmp	r3, #32
 81086f8:	dc48      	bgt.n	810878c <UART_SetConfig+0x848>
 81086fa:	2b00      	cmp	r3, #0
 81086fc:	db7b      	blt.n	81087f6 <UART_SetConfig+0x8b2>
 81086fe:	2b20      	cmp	r3, #32
 8108700:	d879      	bhi.n	81087f6 <UART_SetConfig+0x8b2>
 8108702:	a201      	add	r2, pc, #4	; (adr r2, 8108708 <UART_SetConfig+0x7c4>)
 8108704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108708:	08108793 	.word	0x08108793
 810870c:	0810879b 	.word	0x0810879b
 8108710:	081087f7 	.word	0x081087f7
 8108714:	081087f7 	.word	0x081087f7
 8108718:	081087a3 	.word	0x081087a3
 810871c:	081087f7 	.word	0x081087f7
 8108720:	081087f7 	.word	0x081087f7
 8108724:	081087f7 	.word	0x081087f7
 8108728:	081087b3 	.word	0x081087b3
 810872c:	081087f7 	.word	0x081087f7
 8108730:	081087f7 	.word	0x081087f7
 8108734:	081087f7 	.word	0x081087f7
 8108738:	081087f7 	.word	0x081087f7
 810873c:	081087f7 	.word	0x081087f7
 8108740:	081087f7 	.word	0x081087f7
 8108744:	081087f7 	.word	0x081087f7
 8108748:	081087c3 	.word	0x081087c3
 810874c:	081087f7 	.word	0x081087f7
 8108750:	081087f7 	.word	0x081087f7
 8108754:	081087f7 	.word	0x081087f7
 8108758:	081087f7 	.word	0x081087f7
 810875c:	081087f7 	.word	0x081087f7
 8108760:	081087f7 	.word	0x081087f7
 8108764:	081087f7 	.word	0x081087f7
 8108768:	081087f7 	.word	0x081087f7
 810876c:	081087f7 	.word	0x081087f7
 8108770:	081087f7 	.word	0x081087f7
 8108774:	081087f7 	.word	0x081087f7
 8108778:	081087f7 	.word	0x081087f7
 810877c:	081087f7 	.word	0x081087f7
 8108780:	081087f7 	.word	0x081087f7
 8108784:	081087f7 	.word	0x081087f7
 8108788:	081087e9 	.word	0x081087e9
 810878c:	2b40      	cmp	r3, #64	; 0x40
 810878e:	d02e      	beq.n	81087ee <UART_SetConfig+0x8aa>
 8108790:	e031      	b.n	81087f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108792:	f7fd fca1 	bl	81060d8 <HAL_RCC_GetPCLK1Freq>
 8108796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108798:	e033      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810879a:	f7fd fcb3 	bl	8106104 <HAL_RCC_GetPCLK2Freq>
 810879e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81087a0:	e02f      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81087a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81087a6:	4618      	mov	r0, r3
 81087a8:	f7fe fee2 	bl	8107570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087b0:	e027      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81087b2:	f107 0318 	add.w	r3, r7, #24
 81087b6:	4618      	mov	r0, r3
 81087b8:	f7ff f82e 	bl	8107818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81087bc:	69fb      	ldr	r3, [r7, #28]
 81087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087c0:	e01f      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087c2:	4b2d      	ldr	r3, [pc, #180]	; (8108878 <UART_SetConfig+0x934>)
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	f003 0320 	and.w	r3, r3, #32
 81087ca:	2b00      	cmp	r3, #0
 81087cc:	d009      	beq.n	81087e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81087ce:	4b2a      	ldr	r3, [pc, #168]	; (8108878 <UART_SetConfig+0x934>)
 81087d0:	681b      	ldr	r3, [r3, #0]
 81087d2:	08db      	lsrs	r3, r3, #3
 81087d4:	f003 0303 	and.w	r3, r3, #3
 81087d8:	4a24      	ldr	r2, [pc, #144]	; (810886c <UART_SetConfig+0x928>)
 81087da:	fa22 f303 	lsr.w	r3, r2, r3
 81087de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81087e0:	e00f      	b.n	8108802 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81087e2:	4b22      	ldr	r3, [pc, #136]	; (810886c <UART_SetConfig+0x928>)
 81087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087e6:	e00c      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81087e8:	4b21      	ldr	r3, [pc, #132]	; (8108870 <UART_SetConfig+0x92c>)
 81087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087ec:	e009      	b.n	8108802 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81087ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087f4:	e005      	b.n	8108802 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81087f6:	2300      	movs	r3, #0
 81087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81087fa:	2301      	movs	r3, #1
 81087fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108804:	2b00      	cmp	r3, #0
 8108806:	f000 80e7 	beq.w	81089d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810880a:	697b      	ldr	r3, [r7, #20]
 810880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810880e:	4a19      	ldr	r2, [pc, #100]	; (8108874 <UART_SetConfig+0x930>)
 8108810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108814:	461a      	mov	r2, r3
 8108816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108818:	fbb3 f3f2 	udiv	r3, r3, r2
 810881c:	005a      	lsls	r2, r3, #1
 810881e:	697b      	ldr	r3, [r7, #20]
 8108820:	685b      	ldr	r3, [r3, #4]
 8108822:	085b      	lsrs	r3, r3, #1
 8108824:	441a      	add	r2, r3
 8108826:	697b      	ldr	r3, [r7, #20]
 8108828:	685b      	ldr	r3, [r3, #4]
 810882a:	fbb2 f3f3 	udiv	r3, r2, r3
 810882e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108832:	2b0f      	cmp	r3, #15
 8108834:	d916      	bls.n	8108864 <UART_SetConfig+0x920>
 8108836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810883c:	d212      	bcs.n	8108864 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108840:	b29b      	uxth	r3, r3
 8108842:	f023 030f 	bic.w	r3, r3, #15
 8108846:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810884a:	085b      	lsrs	r3, r3, #1
 810884c:	b29b      	uxth	r3, r3
 810884e:	f003 0307 	and.w	r3, r3, #7
 8108852:	b29a      	uxth	r2, r3
 8108854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108856:	4313      	orrs	r3, r2
 8108858:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810885a:	697b      	ldr	r3, [r7, #20]
 810885c:	681b      	ldr	r3, [r3, #0]
 810885e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108860:	60da      	str	r2, [r3, #12]
 8108862:	e0b9      	b.n	81089d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108864:	2301      	movs	r3, #1
 8108866:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810886a:	e0b5      	b.n	81089d8 <UART_SetConfig+0xa94>
 810886c:	03d09000 	.word	0x03d09000
 8108870:	003d0900 	.word	0x003d0900
 8108874:	0817e9c0 	.word	0x0817e9c0
 8108878:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810887c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108880:	2b20      	cmp	r3, #32
 8108882:	dc49      	bgt.n	8108918 <UART_SetConfig+0x9d4>
 8108884:	2b00      	cmp	r3, #0
 8108886:	db7c      	blt.n	8108982 <UART_SetConfig+0xa3e>
 8108888:	2b20      	cmp	r3, #32
 810888a:	d87a      	bhi.n	8108982 <UART_SetConfig+0xa3e>
 810888c:	a201      	add	r2, pc, #4	; (adr r2, 8108894 <UART_SetConfig+0x950>)
 810888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108892:	bf00      	nop
 8108894:	0810891f 	.word	0x0810891f
 8108898:	08108927 	.word	0x08108927
 810889c:	08108983 	.word	0x08108983
 81088a0:	08108983 	.word	0x08108983
 81088a4:	0810892f 	.word	0x0810892f
 81088a8:	08108983 	.word	0x08108983
 81088ac:	08108983 	.word	0x08108983
 81088b0:	08108983 	.word	0x08108983
 81088b4:	0810893f 	.word	0x0810893f
 81088b8:	08108983 	.word	0x08108983
 81088bc:	08108983 	.word	0x08108983
 81088c0:	08108983 	.word	0x08108983
 81088c4:	08108983 	.word	0x08108983
 81088c8:	08108983 	.word	0x08108983
 81088cc:	08108983 	.word	0x08108983
 81088d0:	08108983 	.word	0x08108983
 81088d4:	0810894f 	.word	0x0810894f
 81088d8:	08108983 	.word	0x08108983
 81088dc:	08108983 	.word	0x08108983
 81088e0:	08108983 	.word	0x08108983
 81088e4:	08108983 	.word	0x08108983
 81088e8:	08108983 	.word	0x08108983
 81088ec:	08108983 	.word	0x08108983
 81088f0:	08108983 	.word	0x08108983
 81088f4:	08108983 	.word	0x08108983
 81088f8:	08108983 	.word	0x08108983
 81088fc:	08108983 	.word	0x08108983
 8108900:	08108983 	.word	0x08108983
 8108904:	08108983 	.word	0x08108983
 8108908:	08108983 	.word	0x08108983
 810890c:	08108983 	.word	0x08108983
 8108910:	08108983 	.word	0x08108983
 8108914:	08108975 	.word	0x08108975
 8108918:	2b40      	cmp	r3, #64	; 0x40
 810891a:	d02e      	beq.n	810897a <UART_SetConfig+0xa36>
 810891c:	e031      	b.n	8108982 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810891e:	f7fd fbdb 	bl	81060d8 <HAL_RCC_GetPCLK1Freq>
 8108922:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108924:	e033      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108926:	f7fd fbed 	bl	8106104 <HAL_RCC_GetPCLK2Freq>
 810892a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810892c:	e02f      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810892e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108932:	4618      	mov	r0, r3
 8108934:	f7fe fe1c 	bl	8107570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810893c:	e027      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810893e:	f107 0318 	add.w	r3, r7, #24
 8108942:	4618      	mov	r0, r3
 8108944:	f7fe ff68 	bl	8107818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108948:	69fb      	ldr	r3, [r7, #28]
 810894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810894c:	e01f      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810894e:	4b2d      	ldr	r3, [pc, #180]	; (8108a04 <UART_SetConfig+0xac0>)
 8108950:	681b      	ldr	r3, [r3, #0]
 8108952:	f003 0320 	and.w	r3, r3, #32
 8108956:	2b00      	cmp	r3, #0
 8108958:	d009      	beq.n	810896e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810895a:	4b2a      	ldr	r3, [pc, #168]	; (8108a04 <UART_SetConfig+0xac0>)
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	08db      	lsrs	r3, r3, #3
 8108960:	f003 0303 	and.w	r3, r3, #3
 8108964:	4a28      	ldr	r2, [pc, #160]	; (8108a08 <UART_SetConfig+0xac4>)
 8108966:	fa22 f303 	lsr.w	r3, r2, r3
 810896a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810896c:	e00f      	b.n	810898e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810896e:	4b26      	ldr	r3, [pc, #152]	; (8108a08 <UART_SetConfig+0xac4>)
 8108970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108972:	e00c      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108974:	4b25      	ldr	r3, [pc, #148]	; (8108a0c <UART_SetConfig+0xac8>)
 8108976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108978:	e009      	b.n	810898e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810897a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810897e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108980:	e005      	b.n	810898e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108982:	2300      	movs	r3, #0
 8108984:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108986:	2301      	movs	r3, #1
 8108988:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810898c:	bf00      	nop
    }

    if (pclk != 0U)
 810898e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108990:	2b00      	cmp	r3, #0
 8108992:	d021      	beq.n	81089d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108994:	697b      	ldr	r3, [r7, #20]
 8108996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108998:	4a1d      	ldr	r2, [pc, #116]	; (8108a10 <UART_SetConfig+0xacc>)
 810899a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810899e:	461a      	mov	r2, r3
 81089a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089a2:	fbb3 f2f2 	udiv	r2, r3, r2
 81089a6:	697b      	ldr	r3, [r7, #20]
 81089a8:	685b      	ldr	r3, [r3, #4]
 81089aa:	085b      	lsrs	r3, r3, #1
 81089ac:	441a      	add	r2, r3
 81089ae:	697b      	ldr	r3, [r7, #20]
 81089b0:	685b      	ldr	r3, [r3, #4]
 81089b2:	fbb2 f3f3 	udiv	r3, r2, r3
 81089b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089ba:	2b0f      	cmp	r3, #15
 81089bc:	d909      	bls.n	81089d2 <UART_SetConfig+0xa8e>
 81089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81089c4:	d205      	bcs.n	81089d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81089c8:	b29a      	uxth	r2, r3
 81089ca:	697b      	ldr	r3, [r7, #20]
 81089cc:	681b      	ldr	r3, [r3, #0]
 81089ce:	60da      	str	r2, [r3, #12]
 81089d0:	e002      	b.n	81089d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81089d2:	2301      	movs	r3, #1
 81089d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81089d8:	697b      	ldr	r3, [r7, #20]
 81089da:	2201      	movs	r2, #1
 81089dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81089e0:	697b      	ldr	r3, [r7, #20]
 81089e2:	2201      	movs	r2, #1
 81089e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81089e8:	697b      	ldr	r3, [r7, #20]
 81089ea:	2200      	movs	r2, #0
 81089ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 81089ee:	697b      	ldr	r3, [r7, #20]
 81089f0:	2200      	movs	r2, #0
 81089f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 81089f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81089f8:	4618      	mov	r0, r3
 81089fa:	3748      	adds	r7, #72	; 0x48
 81089fc:	46bd      	mov	sp, r7
 81089fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108a02:	bf00      	nop
 8108a04:	58024400 	.word	0x58024400
 8108a08:	03d09000 	.word	0x03d09000
 8108a0c:	003d0900 	.word	0x003d0900
 8108a10:	0817e9c0 	.word	0x0817e9c0

08108a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108a14:	b480      	push	{r7}
 8108a16:	b083      	sub	sp, #12
 8108a18:	af00      	add	r7, sp, #0
 8108a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a20:	f003 0301 	and.w	r3, r3, #1
 8108a24:	2b00      	cmp	r3, #0
 8108a26:	d00a      	beq.n	8108a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	681b      	ldr	r3, [r3, #0]
 8108a2c:	685b      	ldr	r3, [r3, #4]
 8108a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	430a      	orrs	r2, r1
 8108a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108a3e:	687b      	ldr	r3, [r7, #4]
 8108a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a42:	f003 0302 	and.w	r3, r3, #2
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	d00a      	beq.n	8108a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	685b      	ldr	r3, [r3, #4]
 8108a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	681b      	ldr	r3, [r3, #0]
 8108a5c:	430a      	orrs	r2, r1
 8108a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a64:	f003 0304 	and.w	r3, r3, #4
 8108a68:	2b00      	cmp	r3, #0
 8108a6a:	d00a      	beq.n	8108a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	681b      	ldr	r3, [r3, #0]
 8108a70:	685b      	ldr	r3, [r3, #4]
 8108a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	681b      	ldr	r3, [r3, #0]
 8108a7e:	430a      	orrs	r2, r1
 8108a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a86:	f003 0308 	and.w	r3, r3, #8
 8108a8a:	2b00      	cmp	r3, #0
 8108a8c:	d00a      	beq.n	8108aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	681b      	ldr	r3, [r3, #0]
 8108a92:	685b      	ldr	r3, [r3, #4]
 8108a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108a9c:	687b      	ldr	r3, [r7, #4]
 8108a9e:	681b      	ldr	r3, [r3, #0]
 8108aa0:	430a      	orrs	r2, r1
 8108aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108aa4:	687b      	ldr	r3, [r7, #4]
 8108aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108aa8:	f003 0310 	and.w	r3, r3, #16
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d00a      	beq.n	8108ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	689b      	ldr	r3, [r3, #8]
 8108ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108aba:	687b      	ldr	r3, [r7, #4]
 8108abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	430a      	orrs	r2, r1
 8108ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108aca:	f003 0320 	and.w	r3, r3, #32
 8108ace:	2b00      	cmp	r3, #0
 8108ad0:	d00a      	beq.n	8108ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	681b      	ldr	r3, [r3, #0]
 8108ad6:	689b      	ldr	r3, [r3, #8]
 8108ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108adc:	687b      	ldr	r3, [r7, #4]
 8108ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	681b      	ldr	r3, [r3, #0]
 8108ae4:	430a      	orrs	r2, r1
 8108ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108af0:	2b00      	cmp	r3, #0
 8108af2:	d01a      	beq.n	8108b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	681b      	ldr	r3, [r3, #0]
 8108af8:	685b      	ldr	r3, [r3, #4]
 8108afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108afe:	687b      	ldr	r3, [r7, #4]
 8108b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	681b      	ldr	r3, [r3, #0]
 8108b06:	430a      	orrs	r2, r1
 8108b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108b12:	d10a      	bne.n	8108b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108b14:	687b      	ldr	r3, [r7, #4]
 8108b16:	681b      	ldr	r3, [r3, #0]
 8108b18:	685b      	ldr	r3, [r3, #4]
 8108b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108b1e:	687b      	ldr	r3, [r7, #4]
 8108b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	430a      	orrs	r2, r1
 8108b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108b32:	2b00      	cmp	r3, #0
 8108b34:	d00a      	beq.n	8108b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	681b      	ldr	r3, [r3, #0]
 8108b3a:	685b      	ldr	r3, [r3, #4]
 8108b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	681b      	ldr	r3, [r3, #0]
 8108b48:	430a      	orrs	r2, r1
 8108b4a:	605a      	str	r2, [r3, #4]
  }
}
 8108b4c:	bf00      	nop
 8108b4e:	370c      	adds	r7, #12
 8108b50:	46bd      	mov	sp, r7
 8108b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b56:	4770      	bx	lr

08108b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108b58:	b580      	push	{r7, lr}
 8108b5a:	b098      	sub	sp, #96	; 0x60
 8108b5c:	af02      	add	r7, sp, #8
 8108b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	2200      	movs	r2, #0
 8108b64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108b68:	f7fa fffc 	bl	8103b64 <HAL_GetTick>
 8108b6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108b6e:	687b      	ldr	r3, [r7, #4]
 8108b70:	681b      	ldr	r3, [r3, #0]
 8108b72:	681b      	ldr	r3, [r3, #0]
 8108b74:	f003 0308 	and.w	r3, r3, #8
 8108b78:	2b08      	cmp	r3, #8
 8108b7a:	d12f      	bne.n	8108bdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108b80:	9300      	str	r3, [sp, #0]
 8108b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108b84:	2200      	movs	r2, #0
 8108b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108b8a:	6878      	ldr	r0, [r7, #4]
 8108b8c:	f000 f88e 	bl	8108cac <UART_WaitOnFlagUntilTimeout>
 8108b90:	4603      	mov	r3, r0
 8108b92:	2b00      	cmp	r3, #0
 8108b94:	d022      	beq.n	8108bdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	681b      	ldr	r3, [r3, #0]
 8108b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b9e:	e853 3f00 	ldrex	r3, [r3]
 8108ba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108baa:	653b      	str	r3, [r7, #80]	; 0x50
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	681b      	ldr	r3, [r3, #0]
 8108bb0:	461a      	mov	r2, r3
 8108bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8108bb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108bbc:	e841 2300 	strex	r3, r2, [r1]
 8108bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108bc4:	2b00      	cmp	r3, #0
 8108bc6:	d1e6      	bne.n	8108b96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	2220      	movs	r2, #32
 8108bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	2200      	movs	r2, #0
 8108bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108bd8:	2303      	movs	r3, #3
 8108bda:	e063      	b.n	8108ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	681b      	ldr	r3, [r3, #0]
 8108be0:	681b      	ldr	r3, [r3, #0]
 8108be2:	f003 0304 	and.w	r3, r3, #4
 8108be6:	2b04      	cmp	r3, #4
 8108be8:	d149      	bne.n	8108c7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108bee:	9300      	str	r3, [sp, #0]
 8108bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108bf2:	2200      	movs	r2, #0
 8108bf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108bf8:	6878      	ldr	r0, [r7, #4]
 8108bfa:	f000 f857 	bl	8108cac <UART_WaitOnFlagUntilTimeout>
 8108bfe:	4603      	mov	r3, r0
 8108c00:	2b00      	cmp	r3, #0
 8108c02:	d03c      	beq.n	8108c7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108c0c:	e853 3f00 	ldrex	r3, [r3]
 8108c10:	623b      	str	r3, [r7, #32]
   return(result);
 8108c12:	6a3b      	ldr	r3, [r7, #32]
 8108c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	461a      	mov	r2, r3
 8108c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108c22:	633b      	str	r3, [r7, #48]	; 0x30
 8108c24:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108c2a:	e841 2300 	strex	r3, r2, [r1]
 8108c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c32:	2b00      	cmp	r3, #0
 8108c34:	d1e6      	bne.n	8108c04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	3308      	adds	r3, #8
 8108c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c3e:	693b      	ldr	r3, [r7, #16]
 8108c40:	e853 3f00 	ldrex	r3, [r3]
 8108c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8108c46:	68fb      	ldr	r3, [r7, #12]
 8108c48:	f023 0301 	bic.w	r3, r3, #1
 8108c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	681b      	ldr	r3, [r3, #0]
 8108c52:	3308      	adds	r3, #8
 8108c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108c56:	61fa      	str	r2, [r7, #28]
 8108c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108c5a:	69b9      	ldr	r1, [r7, #24]
 8108c5c:	69fa      	ldr	r2, [r7, #28]
 8108c5e:	e841 2300 	strex	r3, r2, [r1]
 8108c62:	617b      	str	r3, [r7, #20]
   return(result);
 8108c64:	697b      	ldr	r3, [r7, #20]
 8108c66:	2b00      	cmp	r3, #0
 8108c68:	d1e5      	bne.n	8108c36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	2220      	movs	r2, #32
 8108c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	2200      	movs	r2, #0
 8108c76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108c7a:	2303      	movs	r3, #3
 8108c7c:	e012      	b.n	8108ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	2220      	movs	r2, #32
 8108c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	2220      	movs	r2, #32
 8108c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	2200      	movs	r2, #0
 8108c92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	2200      	movs	r2, #0
 8108c98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	2200      	movs	r2, #0
 8108c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108ca2:	2300      	movs	r3, #0
}
 8108ca4:	4618      	mov	r0, r3
 8108ca6:	3758      	adds	r7, #88	; 0x58
 8108ca8:	46bd      	mov	sp, r7
 8108caa:	bd80      	pop	{r7, pc}

08108cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108cac:	b580      	push	{r7, lr}
 8108cae:	b084      	sub	sp, #16
 8108cb0:	af00      	add	r7, sp, #0
 8108cb2:	60f8      	str	r0, [r7, #12]
 8108cb4:	60b9      	str	r1, [r7, #8]
 8108cb6:	603b      	str	r3, [r7, #0]
 8108cb8:	4613      	mov	r3, r2
 8108cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108cbc:	e049      	b.n	8108d52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108cbe:	69bb      	ldr	r3, [r7, #24]
 8108cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108cc4:	d045      	beq.n	8108d52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108cc6:	f7fa ff4d 	bl	8103b64 <HAL_GetTick>
 8108cca:	4602      	mov	r2, r0
 8108ccc:	683b      	ldr	r3, [r7, #0]
 8108cce:	1ad3      	subs	r3, r2, r3
 8108cd0:	69ba      	ldr	r2, [r7, #24]
 8108cd2:	429a      	cmp	r2, r3
 8108cd4:	d302      	bcc.n	8108cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8108cd6:	69bb      	ldr	r3, [r7, #24]
 8108cd8:	2b00      	cmp	r3, #0
 8108cda:	d101      	bne.n	8108ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108cdc:	2303      	movs	r3, #3
 8108cde:	e048      	b.n	8108d72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108ce0:	68fb      	ldr	r3, [r7, #12]
 8108ce2:	681b      	ldr	r3, [r3, #0]
 8108ce4:	681b      	ldr	r3, [r3, #0]
 8108ce6:	f003 0304 	and.w	r3, r3, #4
 8108cea:	2b00      	cmp	r3, #0
 8108cec:	d031      	beq.n	8108d52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108cee:	68fb      	ldr	r3, [r7, #12]
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	69db      	ldr	r3, [r3, #28]
 8108cf4:	f003 0308 	and.w	r3, r3, #8
 8108cf8:	2b08      	cmp	r3, #8
 8108cfa:	d110      	bne.n	8108d1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108cfc:	68fb      	ldr	r3, [r7, #12]
 8108cfe:	681b      	ldr	r3, [r3, #0]
 8108d00:	2208      	movs	r2, #8
 8108d02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8108d04:	68f8      	ldr	r0, [r7, #12]
 8108d06:	f000 f838 	bl	8108d7a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108d0a:	68fb      	ldr	r3, [r7, #12]
 8108d0c:	2208      	movs	r2, #8
 8108d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8108d12:	68fb      	ldr	r3, [r7, #12]
 8108d14:	2200      	movs	r2, #0
 8108d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8108d1a:	2301      	movs	r3, #1
 8108d1c:	e029      	b.n	8108d72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108d1e:	68fb      	ldr	r3, [r7, #12]
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	69db      	ldr	r3, [r3, #28]
 8108d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108d2c:	d111      	bne.n	8108d52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108d2e:	68fb      	ldr	r3, [r7, #12]
 8108d30:	681b      	ldr	r3, [r3, #0]
 8108d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108d38:	68f8      	ldr	r0, [r7, #12]
 8108d3a:	f000 f81e 	bl	8108d7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108d3e:	68fb      	ldr	r3, [r7, #12]
 8108d40:	2220      	movs	r2, #32
 8108d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108d46:	68fb      	ldr	r3, [r7, #12]
 8108d48:	2200      	movs	r2, #0
 8108d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8108d4e:	2303      	movs	r3, #3
 8108d50:	e00f      	b.n	8108d72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108d52:	68fb      	ldr	r3, [r7, #12]
 8108d54:	681b      	ldr	r3, [r3, #0]
 8108d56:	69da      	ldr	r2, [r3, #28]
 8108d58:	68bb      	ldr	r3, [r7, #8]
 8108d5a:	4013      	ands	r3, r2
 8108d5c:	68ba      	ldr	r2, [r7, #8]
 8108d5e:	429a      	cmp	r2, r3
 8108d60:	bf0c      	ite	eq
 8108d62:	2301      	moveq	r3, #1
 8108d64:	2300      	movne	r3, #0
 8108d66:	b2db      	uxtb	r3, r3
 8108d68:	461a      	mov	r2, r3
 8108d6a:	79fb      	ldrb	r3, [r7, #7]
 8108d6c:	429a      	cmp	r2, r3
 8108d6e:	d0a6      	beq.n	8108cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108d70:	2300      	movs	r3, #0
}
 8108d72:	4618      	mov	r0, r3
 8108d74:	3710      	adds	r7, #16
 8108d76:	46bd      	mov	sp, r7
 8108d78:	bd80      	pop	{r7, pc}

08108d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108d7a:	b480      	push	{r7}
 8108d7c:	b095      	sub	sp, #84	; 0x54
 8108d7e:	af00      	add	r7, sp, #0
 8108d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108d82:	687b      	ldr	r3, [r7, #4]
 8108d84:	681b      	ldr	r3, [r3, #0]
 8108d86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108d8a:	e853 3f00 	ldrex	r3, [r3]
 8108d8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	461a      	mov	r2, r3
 8108d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108da0:	643b      	str	r3, [r7, #64]	; 0x40
 8108da2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108da8:	e841 2300 	strex	r3, r2, [r1]
 8108dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108db0:	2b00      	cmp	r3, #0
 8108db2:	d1e6      	bne.n	8108d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	681b      	ldr	r3, [r3, #0]
 8108db8:	3308      	adds	r3, #8
 8108dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108dbc:	6a3b      	ldr	r3, [r7, #32]
 8108dbe:	e853 3f00 	ldrex	r3, [r3]
 8108dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8108dc4:	69fb      	ldr	r3, [r7, #28]
 8108dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108dca:	f023 0301 	bic.w	r3, r3, #1
 8108dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8108dd0:	687b      	ldr	r3, [r7, #4]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	3308      	adds	r3, #8
 8108dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108de0:	e841 2300 	strex	r3, r2, [r1]
 8108de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108de8:	2b00      	cmp	r3, #0
 8108dea:	d1e3      	bne.n	8108db4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108df0:	2b01      	cmp	r3, #1
 8108df2:	d118      	bne.n	8108e26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108dfa:	68fb      	ldr	r3, [r7, #12]
 8108dfc:	e853 3f00 	ldrex	r3, [r3]
 8108e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8108e02:	68bb      	ldr	r3, [r7, #8]
 8108e04:	f023 0310 	bic.w	r3, r3, #16
 8108e08:	647b      	str	r3, [r7, #68]	; 0x44
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	681b      	ldr	r3, [r3, #0]
 8108e0e:	461a      	mov	r2, r3
 8108e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108e12:	61bb      	str	r3, [r7, #24]
 8108e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e16:	6979      	ldr	r1, [r7, #20]
 8108e18:	69ba      	ldr	r2, [r7, #24]
 8108e1a:	e841 2300 	strex	r3, r2, [r1]
 8108e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8108e20:	693b      	ldr	r3, [r7, #16]
 8108e22:	2b00      	cmp	r3, #0
 8108e24:	d1e6      	bne.n	8108df4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	2220      	movs	r2, #32
 8108e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	2200      	movs	r2, #0
 8108e32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	2200      	movs	r2, #0
 8108e38:	675a      	str	r2, [r3, #116]	; 0x74
}
 8108e3a:	bf00      	nop
 8108e3c:	3754      	adds	r7, #84	; 0x54
 8108e3e:	46bd      	mov	sp, r7
 8108e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e44:	4770      	bx	lr

08108e46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108e46:	b480      	push	{r7}
 8108e48:	b085      	sub	sp, #20
 8108e4a:	af00      	add	r7, sp, #0
 8108e4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108e4e:	687b      	ldr	r3, [r7, #4]
 8108e50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108e54:	2b01      	cmp	r3, #1
 8108e56:	d101      	bne.n	8108e5c <HAL_UARTEx_DisableFifoMode+0x16>
 8108e58:	2302      	movs	r3, #2
 8108e5a:	e027      	b.n	8108eac <HAL_UARTEx_DisableFifoMode+0x66>
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	2201      	movs	r2, #1
 8108e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	2224      	movs	r2, #36	; 0x24
 8108e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	681b      	ldr	r3, [r3, #0]
 8108e70:	681b      	ldr	r3, [r3, #0]
 8108e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108e74:	687b      	ldr	r3, [r7, #4]
 8108e76:	681b      	ldr	r3, [r3, #0]
 8108e78:	681a      	ldr	r2, [r3, #0]
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	681b      	ldr	r3, [r3, #0]
 8108e7e:	f022 0201 	bic.w	r2, r2, #1
 8108e82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108e84:	68fb      	ldr	r3, [r7, #12]
 8108e86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108e8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108e8c:	687b      	ldr	r3, [r7, #4]
 8108e8e:	2200      	movs	r2, #0
 8108e90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	681b      	ldr	r3, [r3, #0]
 8108e96:	68fa      	ldr	r2, [r7, #12]
 8108e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	2220      	movs	r2, #32
 8108e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	2200      	movs	r2, #0
 8108ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108eaa:	2300      	movs	r3, #0
}
 8108eac:	4618      	mov	r0, r3
 8108eae:	3714      	adds	r7, #20
 8108eb0:	46bd      	mov	sp, r7
 8108eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eb6:	4770      	bx	lr

08108eb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108eb8:	b580      	push	{r7, lr}
 8108eba:	b084      	sub	sp, #16
 8108ebc:	af00      	add	r7, sp, #0
 8108ebe:	6078      	str	r0, [r7, #4]
 8108ec0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108ec2:	687b      	ldr	r3, [r7, #4]
 8108ec4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108ec8:	2b01      	cmp	r3, #1
 8108eca:	d101      	bne.n	8108ed0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108ecc:	2302      	movs	r3, #2
 8108ece:	e02d      	b.n	8108f2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108ed0:	687b      	ldr	r3, [r7, #4]
 8108ed2:	2201      	movs	r2, #1
 8108ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	2224      	movs	r2, #36	; 0x24
 8108edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	681b      	ldr	r3, [r3, #0]
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	681a      	ldr	r2, [r3, #0]
 8108eee:	687b      	ldr	r3, [r7, #4]
 8108ef0:	681b      	ldr	r3, [r3, #0]
 8108ef2:	f022 0201 	bic.w	r2, r2, #1
 8108ef6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	689b      	ldr	r3, [r3, #8]
 8108efe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108f02:	687b      	ldr	r3, [r7, #4]
 8108f04:	681b      	ldr	r3, [r3, #0]
 8108f06:	683a      	ldr	r2, [r7, #0]
 8108f08:	430a      	orrs	r2, r1
 8108f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108f0c:	6878      	ldr	r0, [r7, #4]
 8108f0e:	f000 f84f 	bl	8108fb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	681b      	ldr	r3, [r3, #0]
 8108f16:	68fa      	ldr	r2, [r7, #12]
 8108f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f1a:	687b      	ldr	r3, [r7, #4]
 8108f1c:	2220      	movs	r2, #32
 8108f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	2200      	movs	r2, #0
 8108f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108f2a:	2300      	movs	r3, #0
}
 8108f2c:	4618      	mov	r0, r3
 8108f2e:	3710      	adds	r7, #16
 8108f30:	46bd      	mov	sp, r7
 8108f32:	bd80      	pop	{r7, pc}

08108f34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108f34:	b580      	push	{r7, lr}
 8108f36:	b084      	sub	sp, #16
 8108f38:	af00      	add	r7, sp, #0
 8108f3a:	6078      	str	r0, [r7, #4]
 8108f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108f44:	2b01      	cmp	r3, #1
 8108f46:	d101      	bne.n	8108f4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108f48:	2302      	movs	r3, #2
 8108f4a:	e02d      	b.n	8108fa8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	2201      	movs	r2, #1
 8108f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	2224      	movs	r2, #36	; 0x24
 8108f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	681b      	ldr	r3, [r3, #0]
 8108f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	681b      	ldr	r3, [r3, #0]
 8108f68:	681a      	ldr	r2, [r3, #0]
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	681b      	ldr	r3, [r3, #0]
 8108f6e:	f022 0201 	bic.w	r2, r2, #1
 8108f72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	681b      	ldr	r3, [r3, #0]
 8108f78:	689b      	ldr	r3, [r3, #8]
 8108f7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	683a      	ldr	r2, [r7, #0]
 8108f84:	430a      	orrs	r2, r1
 8108f86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108f88:	6878      	ldr	r0, [r7, #4]
 8108f8a:	f000 f811 	bl	8108fb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108f8e:	687b      	ldr	r3, [r7, #4]
 8108f90:	681b      	ldr	r3, [r3, #0]
 8108f92:	68fa      	ldr	r2, [r7, #12]
 8108f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	2220      	movs	r2, #32
 8108f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	2200      	movs	r2, #0
 8108fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108fa6:	2300      	movs	r3, #0
}
 8108fa8:	4618      	mov	r0, r3
 8108faa:	3710      	adds	r7, #16
 8108fac:	46bd      	mov	sp, r7
 8108fae:	bd80      	pop	{r7, pc}

08108fb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108fb0:	b480      	push	{r7}
 8108fb2:	b085      	sub	sp, #20
 8108fb4:	af00      	add	r7, sp, #0
 8108fb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108fbc:	2b00      	cmp	r3, #0
 8108fbe:	d108      	bne.n	8108fd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	2201      	movs	r2, #1
 8108fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	2201      	movs	r2, #1
 8108fcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108fd0:	e031      	b.n	8109036 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108fd2:	2310      	movs	r3, #16
 8108fd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108fd6:	2310      	movs	r3, #16
 8108fd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	681b      	ldr	r3, [r3, #0]
 8108fde:	689b      	ldr	r3, [r3, #8]
 8108fe0:	0e5b      	lsrs	r3, r3, #25
 8108fe2:	b2db      	uxtb	r3, r3
 8108fe4:	f003 0307 	and.w	r3, r3, #7
 8108fe8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	681b      	ldr	r3, [r3, #0]
 8108fee:	689b      	ldr	r3, [r3, #8]
 8108ff0:	0f5b      	lsrs	r3, r3, #29
 8108ff2:	b2db      	uxtb	r3, r3
 8108ff4:	f003 0307 	and.w	r3, r3, #7
 8108ff8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108ffa:	7bbb      	ldrb	r3, [r7, #14]
 8108ffc:	7b3a      	ldrb	r2, [r7, #12]
 8108ffe:	4911      	ldr	r1, [pc, #68]	; (8109044 <UARTEx_SetNbDataToProcess+0x94>)
 8109000:	5c8a      	ldrb	r2, [r1, r2]
 8109002:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109006:	7b3a      	ldrb	r2, [r7, #12]
 8109008:	490f      	ldr	r1, [pc, #60]	; (8109048 <UARTEx_SetNbDataToProcess+0x98>)
 810900a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810900c:	fb93 f3f2 	sdiv	r3, r3, r2
 8109010:	b29a      	uxth	r2, r3
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109018:	7bfb      	ldrb	r3, [r7, #15]
 810901a:	7b7a      	ldrb	r2, [r7, #13]
 810901c:	4909      	ldr	r1, [pc, #36]	; (8109044 <UARTEx_SetNbDataToProcess+0x94>)
 810901e:	5c8a      	ldrb	r2, [r1, r2]
 8109020:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109024:	7b7a      	ldrb	r2, [r7, #13]
 8109026:	4908      	ldr	r1, [pc, #32]	; (8109048 <UARTEx_SetNbDataToProcess+0x98>)
 8109028:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810902a:	fb93 f3f2 	sdiv	r3, r3, r2
 810902e:	b29a      	uxth	r2, r3
 8109030:	687b      	ldr	r3, [r7, #4]
 8109032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109036:	bf00      	nop
 8109038:	3714      	adds	r7, #20
 810903a:	46bd      	mov	sp, r7
 810903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109040:	4770      	bx	lr
 8109042:	bf00      	nop
 8109044:	0817e9d8 	.word	0x0817e9d8
 8109048:	0817e9e0 	.word	0x0817e9e0

0810904c <ai_buffer_get_size>:
 810904c:	b378      	cbz	r0, 81090ae <ai_buffer_get_size+0x62>
 810904e:	b410      	push	{r4}
 8109050:	6803      	ldr	r3, [r0, #0]
 8109052:	4a17      	ldr	r2, [pc, #92]	; (81090b0 <ai_buffer_get_size+0x64>)
 8109054:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8109058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810905c:	4293      	cmp	r3, r2
 810905e:	d01e      	beq.n	810909e <ai_buffer_get_size+0x52>
 8109060:	6984      	ldr	r4, [r0, #24]
 8109062:	6862      	ldr	r2, [r4, #4]
 8109064:	7d03      	ldrb	r3, [r0, #20]
 8109066:	6941      	ldr	r1, [r0, #20]
 8109068:	f1a3 0301 	sub.w	r3, r3, #1
 810906c:	fab3 f383 	clz	r3, r3
 8109070:	095b      	lsrs	r3, r3, #5
 8109072:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8109076:	f3c1 2017 	ubfx	r0, r1, #8, #24
 810907a:	da0b      	bge.n	8109094 <ai_buffer_get_size+0x48>
 810907c:	2b01      	cmp	r3, #1
 810907e:	d102      	bne.n	8109086 <ai_buffer_get_size+0x3a>
 8109080:	2802      	cmp	r0, #2
 8109082:	d007      	beq.n	8109094 <ai_buffer_get_size+0x48>
 8109084:	2302      	movs	r3, #2
 8109086:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 810908a:	3301      	adds	r3, #1
 810908c:	4298      	cmp	r0, r3
 810908e:	fb01 f202 	mul.w	r2, r1, r2
 8109092:	d1f3      	bne.n	810907c <ai_buffer_get_size+0x30>
 8109094:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8109098:	f85d 4b04 	ldr.w	r4, [sp], #4
 810909c:	4770      	bx	lr
 810909e:	2900      	cmp	r1, #0
 81090a0:	d0de      	beq.n	8109060 <ai_buffer_get_size+0x14>
 81090a2:	6984      	ldr	r4, [r0, #24]
 81090a4:	6862      	ldr	r2, [r4, #4]
 81090a6:	321f      	adds	r2, #31
 81090a8:	f022 021f 	bic.w	r2, r2, #31
 81090ac:	e7da      	b.n	8109064 <ai_buffer_get_size+0x18>
 81090ae:	4770      	bx	lr
 81090b0:	000400c0 	.word	0x000400c0

081090b4 <ai_buffer_array_sane>:
 81090b4:	b138      	cbz	r0, 81090c6 <ai_buffer_array_sane+0x12>
 81090b6:	6843      	ldr	r3, [r0, #4]
 81090b8:	b123      	cbz	r3, 81090c4 <ai_buffer_array_sane+0x10>
 81090ba:	8840      	ldrh	r0, [r0, #2]
 81090bc:	3800      	subs	r0, #0
 81090be:	bf18      	it	ne
 81090c0:	2001      	movne	r0, #1
 81090c2:	4770      	bx	lr
 81090c4:	4618      	mov	r0, r3
 81090c6:	4770      	bx	lr

081090c8 <ai_buffer_array_item_set_address>:
 81090c8:	b150      	cbz	r0, 81090e0 <ai_buffer_array_item_set_address+0x18>
 81090ca:	6843      	ldr	r3, [r0, #4]
 81090cc:	b14b      	cbz	r3, 81090e2 <ai_buffer_array_item_set_address+0x1a>
 81090ce:	8840      	ldrh	r0, [r0, #2]
 81090d0:	b900      	cbnz	r0, 81090d4 <ai_buffer_array_item_set_address+0xc>
 81090d2:	4770      	bx	lr
 81090d4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 81090d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 81090dc:	2001      	movs	r0, #1
 81090de:	605a      	str	r2, [r3, #4]
 81090e0:	4770      	bx	lr
 81090e2:	4618      	mov	r0, r3
 81090e4:	4770      	bx	lr
 81090e6:	bf00      	nop

081090e8 <ai_platform_get_weights_map>:
 81090e8:	2a00      	cmp	r2, #0
 81090ea:	d037      	beq.n	810915c <ai_platform_get_weights_map+0x74>
 81090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81090ee:	4604      	mov	r4, r0
 81090f0:	b1a0      	cbz	r0, 810911c <ai_platform_get_weights_map+0x34>
 81090f2:	460f      	mov	r7, r1
 81090f4:	b191      	cbz	r1, 810911c <ai_platform_get_weights_map+0x34>
 81090f6:	4b25      	ldr	r3, [pc, #148]	; (810918c <ai_platform_get_weights_map+0xa4>)
 81090f8:	6810      	ldr	r0, [r2, #0]
 81090fa:	4298      	cmp	r0, r3
 81090fc:	4615      	mov	r5, r2
 81090fe:	d00f      	beq.n	8109120 <ai_platform_get_weights_map+0x38>
 8109100:	6855      	ldr	r5, [r2, #4]
 8109102:	b15d      	cbz	r5, 810911c <ai_platform_get_weights_map+0x34>
 8109104:	682e      	ldr	r6, [r5, #0]
 8109106:	429e      	cmp	r6, r3
 8109108:	d02a      	beq.n	8109160 <ai_platform_get_weights_map+0x78>
 810910a:	f1a1 0001 	sub.w	r0, r1, #1
 810910e:	6025      	str	r5, [r4, #0]
 8109110:	fab0 f080 	clz	r0, r0
 8109114:	0940      	lsrs	r0, r0, #5
 8109116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109118:	42a7      	cmp	r7, r4
 810911a:	d034      	beq.n	8109186 <ai_platform_get_weights_map+0x9e>
 810911c:	2000      	movs	r0, #0
 810911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109120:	1d10      	adds	r0, r2, #4
 8109122:	f7ff ffc7 	bl	81090b4 <ai_buffer_array_sane>
 8109126:	2800      	cmp	r0, #0
 8109128:	d0f8      	beq.n	810911c <ai_platform_get_weights_map+0x34>
 810912a:	88eb      	ldrh	r3, [r5, #6]
 810912c:	429f      	cmp	r7, r3
 810912e:	d1f5      	bne.n	810911c <ai_platform_get_weights_map+0x34>
 8109130:	f04f 0c00 	mov.w	ip, #0
 8109134:	1f20      	subs	r0, r4, #4
 8109136:	46e6      	mov	lr, ip
 8109138:	68ab      	ldr	r3, [r5, #8]
 810913a:	4463      	add	r3, ip
 810913c:	f10c 0c1c 	add.w	ip, ip, #28
 8109140:	685b      	ldr	r3, [r3, #4]
 8109142:	b12b      	cbz	r3, 8109150 <ai_platform_get_weights_map+0x68>
 8109144:	f10e 0e01 	add.w	lr, lr, #1
 8109148:	4577      	cmp	r7, lr
 810914a:	f840 3f04 	str.w	r3, [r0, #4]!
 810914e:	d1f3      	bne.n	8109138 <ai_platform_get_weights_map+0x50>
 8109150:	eba7 000e 	sub.w	r0, r7, lr
 8109154:	fab0 f080 	clz	r0, r0
 8109158:	0940      	lsrs	r0, r0, #5
 810915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810915c:	2000      	movs	r0, #0
 810915e:	4770      	bx	lr
 8109160:	1f20      	subs	r0, r4, #4
 8109162:	462a      	mov	r2, r5
 8109164:	2400      	movs	r4, #0
 8109166:	e000      	b.n	810916a <ai_platform_get_weights_map+0x82>
 8109168:	461c      	mov	r4, r3
 810916a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 810916e:	42b3      	cmp	r3, r6
 8109170:	d0d2      	beq.n	8109118 <ai_platform_get_weights_map+0x30>
 8109172:	f840 3f04 	str.w	r3, [r0, #4]!
 8109176:	1c63      	adds	r3, r4, #1
 8109178:	429f      	cmp	r7, r3
 810917a:	d1f5      	bne.n	8109168 <ai_platform_get_weights_map+0x80>
 810917c:	3402      	adds	r4, #2
 810917e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8109182:	42b3      	cmp	r3, r6
 8109184:	d1ca      	bne.n	810911c <ai_platform_get_weights_map+0x34>
 8109186:	2001      	movs	r0, #1
 8109188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810918a:	bf00      	nop
 810918c:	a1facade 	.word	0xa1facade

08109190 <ai_platform_get_activations_map>:
 8109190:	2a00      	cmp	r2, #0
 8109192:	d038      	beq.n	8109206 <ai_platform_get_activations_map+0x76>
 8109194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109196:	4604      	mov	r4, r0
 8109198:	b1a0      	cbz	r0, 81091c4 <ai_platform_get_activations_map+0x34>
 810919a:	460f      	mov	r7, r1
 810919c:	b191      	cbz	r1, 81091c4 <ai_platform_get_activations_map+0x34>
 810919e:	4b25      	ldr	r3, [pc, #148]	; (8109234 <ai_platform_get_activations_map+0xa4>)
 81091a0:	6810      	ldr	r0, [r2, #0]
 81091a2:	4298      	cmp	r0, r3
 81091a4:	4615      	mov	r5, r2
 81091a6:	d00f      	beq.n	81091c8 <ai_platform_get_activations_map+0x38>
 81091a8:	6a15      	ldr	r5, [r2, #32]
 81091aa:	b15d      	cbz	r5, 81091c4 <ai_platform_get_activations_map+0x34>
 81091ac:	682e      	ldr	r6, [r5, #0]
 81091ae:	429e      	cmp	r6, r3
 81091b0:	d02b      	beq.n	810920a <ai_platform_get_activations_map+0x7a>
 81091b2:	f1a1 0001 	sub.w	r0, r1, #1
 81091b6:	6025      	str	r5, [r4, #0]
 81091b8:	fab0 f080 	clz	r0, r0
 81091bc:	0940      	lsrs	r0, r0, #5
 81091be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81091c0:	42a7      	cmp	r7, r4
 81091c2:	d035      	beq.n	8109230 <ai_platform_get_activations_map+0xa0>
 81091c4:	2000      	movs	r0, #0
 81091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81091c8:	f102 000c 	add.w	r0, r2, #12
 81091cc:	f7ff ff72 	bl	81090b4 <ai_buffer_array_sane>
 81091d0:	2800      	cmp	r0, #0
 81091d2:	d0f7      	beq.n	81091c4 <ai_platform_get_activations_map+0x34>
 81091d4:	89eb      	ldrh	r3, [r5, #14]
 81091d6:	429f      	cmp	r7, r3
 81091d8:	d1f4      	bne.n	81091c4 <ai_platform_get_activations_map+0x34>
 81091da:	f04f 0c00 	mov.w	ip, #0
 81091de:	1f20      	subs	r0, r4, #4
 81091e0:	46e6      	mov	lr, ip
 81091e2:	692b      	ldr	r3, [r5, #16]
 81091e4:	4463      	add	r3, ip
 81091e6:	f10c 0c1c 	add.w	ip, ip, #28
 81091ea:	685b      	ldr	r3, [r3, #4]
 81091ec:	b12b      	cbz	r3, 81091fa <ai_platform_get_activations_map+0x6a>
 81091ee:	f10e 0e01 	add.w	lr, lr, #1
 81091f2:	4577      	cmp	r7, lr
 81091f4:	f840 3f04 	str.w	r3, [r0, #4]!
 81091f8:	d1f3      	bne.n	81091e2 <ai_platform_get_activations_map+0x52>
 81091fa:	eba7 000e 	sub.w	r0, r7, lr
 81091fe:	fab0 f080 	clz	r0, r0
 8109202:	0940      	lsrs	r0, r0, #5
 8109204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109206:	2000      	movs	r0, #0
 8109208:	4770      	bx	lr
 810920a:	1f20      	subs	r0, r4, #4
 810920c:	462a      	mov	r2, r5
 810920e:	2400      	movs	r4, #0
 8109210:	e000      	b.n	8109214 <ai_platform_get_activations_map+0x84>
 8109212:	461c      	mov	r4, r3
 8109214:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8109218:	42b3      	cmp	r3, r6
 810921a:	d0d1      	beq.n	81091c0 <ai_platform_get_activations_map+0x30>
 810921c:	f840 3f04 	str.w	r3, [r0, #4]!
 8109220:	1c63      	adds	r3, r4, #1
 8109222:	429f      	cmp	r7, r3
 8109224:	d1f5      	bne.n	8109212 <ai_platform_get_activations_map+0x82>
 8109226:	3402      	adds	r4, #2
 8109228:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 810922c:	42b3      	cmp	r3, r6
 810922e:	d1c9      	bne.n	81091c4 <ai_platform_get_activations_map+0x34>
 8109230:	2001      	movs	r0, #1
 8109232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109234:	a1facade 	.word	0xa1facade

08109238 <ai_platform_bind_network_params>:
 8109238:	b1a0      	cbz	r0, 8109264 <ai_platform_bind_network_params+0x2c>
 810923a:	b1b1      	cbz	r1, 810926a <ai_platform_bind_network_params+0x32>
 810923c:	b1c2      	cbz	r2, 8109270 <ai_platform_bind_network_params+0x38>
 810923e:	b410      	push	{r4}
 8109240:	4603      	mov	r3, r0
 8109242:	4c0d      	ldr	r4, [pc, #52]	; (8109278 <ai_platform_bind_network_params+0x40>)
 8109244:	f843 4b04 	str.w	r4, [r3], #4
 8109248:	f100 0c0c 	add.w	ip, r0, #12
 810924c:	c903      	ldmia	r1, {r0, r1}
 810924e:	e883 0003 	stmia.w	r3, {r0, r1}
 8109252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109256:	e88c 0003 	stmia.w	ip, {r0, r1}
 810925a:	2301      	movs	r3, #1
 810925c:	4618      	mov	r0, r3
 810925e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109262:	4770      	bx	lr
 8109264:	4603      	mov	r3, r0
 8109266:	4618      	mov	r0, r3
 8109268:	4770      	bx	lr
 810926a:	460b      	mov	r3, r1
 810926c:	4618      	mov	r0, r3
 810926e:	4770      	bx	lr
 8109270:	4613      	mov	r3, r2
 8109272:	4618      	mov	r0, r3
 8109274:	4770      	bx	lr
 8109276:	bf00      	nop
 8109278:	a1facade 	.word	0xa1facade

0810927c <ai_platform_network_get_error>:
 810927c:	4b04      	ldr	r3, [pc, #16]	; (8109290 <ai_platform_network_get_error+0x14>)
 810927e:	6802      	ldr	r2, [r0, #0]
 8109280:	4393      	bics	r3, r2
 8109282:	d102      	bne.n	810928a <ai_platform_network_get_error+0xe>
 8109284:	300c      	adds	r0, #12
 8109286:	f000 b94d 	b.w	8109524 <core_get_error>
 810928a:	f241 0010 	movw	r0, #4112	; 0x1010
 810928e:	4770      	bx	lr
 8109290:	a1c00100 	.word	0xa1c00100

08109294 <ai_platform_network_set_error>:
 8109294:	b110      	cbz	r0, 810929c <ai_platform_network_set_error+0x8>
 8109296:	300c      	adds	r0, #12
 8109298:	f000 b94a 	b.w	8109530 <core_set_error>
 810929c:	4770      	bx	lr
 810929e:	bf00      	nop

081092a0 <ai_platform_network_create>:
 81092a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81092a4:	b083      	sub	sp, #12
 81092a6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 81092aa:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 81092ae:	b320      	cbz	r0, 81092fa <ai_platform_network_create+0x5a>
 81092b0:	6002      	str	r2, [r0, #0]
 81092b2:	4616      	mov	r6, r2
 81092b4:	461f      	mov	r7, r3
 81092b6:	4604      	mov	r4, r0
 81092b8:	f000 f932 	bl	8109520 <core_init>
 81092bc:	b970      	cbnz	r0, 81092dc <ai_platform_network_create+0x3c>
 81092be:	2530      	movs	r5, #48	; 0x30
 81092c0:	2300      	movs	r3, #0
 81092c2:	6023      	str	r3, [r4, #0]
 81092c4:	2410      	movs	r4, #16
 81092c6:	4642      	mov	r2, r8
 81092c8:	4649      	mov	r1, r9
 81092ca:	4638      	mov	r0, r7
 81092cc:	f006 f88a 	bl	810f3e4 <ai_version_get>
 81092d0:	60b0      	str	r0, [r6, #8]
 81092d2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 81092d6:	b003      	add	sp, #12
 81092d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81092dc:	2200      	movs	r2, #0
 81092de:	4649      	mov	r1, r9
 81092e0:	4638      	mov	r0, r7
 81092e2:	f006 f87f 	bl	810f3e4 <ai_version_get>
 81092e6:	2200      	movs	r2, #0
 81092e8:	4605      	mov	r5, r0
 81092ea:	2105      	movs	r1, #5
 81092ec:	2001      	movs	r0, #1
 81092ee:	f006 f879 	bl	810f3e4 <ai_version_get>
 81092f2:	4285      	cmp	r5, r0
 81092f4:	d008      	beq.n	8109308 <ai_platform_network_create+0x68>
 81092f6:	2501      	movs	r5, #1
 81092f8:	e7e2      	b.n	81092c0 <ai_platform_network_create+0x20>
 81092fa:	2510      	movs	r5, #16
 81092fc:	462c      	mov	r4, r5
 81092fe:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8109302:	b003      	add	sp, #12
 8109304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109308:	4b05      	ldr	r3, [pc, #20]	; (8109320 <ai_platform_network_create+0x80>)
 810930a:	9301      	str	r3, [sp, #4]
 810930c:	a801      	add	r0, sp, #4
 810930e:	f000 faed 	bl	81098ec <ai_check_custom_types>
 8109312:	b110      	cbz	r0, 810931a <ai_platform_network_create+0x7a>
 8109314:	2400      	movs	r4, #0
 8109316:	4625      	mov	r5, r4
 8109318:	e7d5      	b.n	81092c6 <ai_platform_network_create+0x26>
 810931a:	2502      	movs	r5, #2
 810931c:	e7d0      	b.n	81092c0 <ai_platform_network_create+0x20>
 810931e:	bf00      	nop
 8109320:	84048403 	.word	0x84048403

08109324 <ai_platform_network_init>:
 8109324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109328:	4b63      	ldr	r3, [pc, #396]	; (81094b8 <ai_platform_network_init+0x194>)
 810932a:	6802      	ldr	r2, [r0, #0]
 810932c:	4393      	bics	r3, r2
 810932e:	b083      	sub	sp, #12
 8109330:	d156      	bne.n	81093e0 <ai_platform_network_init+0xbc>
 8109332:	4604      	mov	r4, r0
 8109334:	460f      	mov	r7, r1
 8109336:	2900      	cmp	r1, #0
 8109338:	f000 80a9 	beq.w	810948e <ai_platform_network_init+0x16a>
 810933c:	680b      	ldr	r3, [r1, #0]
 810933e:	495f      	ldr	r1, [pc, #380]	; (81094bc <ai_platform_network_init+0x198>)
 8109340:	428b      	cmp	r3, r1
 8109342:	d113      	bne.n	810936c <ai_platform_network_init+0x48>
 8109344:	495c      	ldr	r1, [pc, #368]	; (81094b8 <ai_platform_network_init+0x194>)
 8109346:	89bd      	ldrh	r5, [r7, #12]
 8109348:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 810934c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8109350:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8109354:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8109358:	68be      	ldr	r6, [r7, #8]
 810935a:	428a      	cmp	r2, r1
 810935c:	d02c      	beq.n	81093b8 <ai_platform_network_init+0x94>
 810935e:	2303      	movs	r3, #3
 8109360:	6123      	str	r3, [r4, #16]
 8109362:	4627      	mov	r7, r4
 8109364:	4638      	mov	r0, r7
 8109366:	b003      	add	sp, #12
 8109368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810936c:	2101      	movs	r1, #1
 810936e:	4638      	mov	r0, r7
 8109370:	9301      	str	r3, [sp, #4]
 8109372:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8109376:	f7ff fe69 	bl	810904c <ai_buffer_get_size>
 810937a:	f107 081c 	add.w	r8, r7, #28
 810937e:	4605      	mov	r5, r0
 8109380:	2101      	movs	r1, #1
 8109382:	4640      	mov	r0, r8
 8109384:	463e      	mov	r6, r7
 8109386:	6a3f      	ldr	r7, [r7, #32]
 8109388:	f7ff fe60 	bl	810904c <ai_buffer_get_size>
 810938c:	2d00      	cmp	r5, #0
 810938e:	9b01      	ldr	r3, [sp, #4]
 8109390:	bf0a      	itet	eq
 8109392:	46a9      	moveq	r9, r5
 8109394:	f04f 0901 	movne.w	r9, #1
 8109398:	462e      	moveq	r6, r5
 810939a:	b330      	cbz	r0, 81093ea <ai_platform_network_init+0xc6>
 810939c:	2f00      	cmp	r7, #0
 810939e:	f000 8084 	beq.w	81094aa <ai_platform_network_init+0x186>
 81093a2:	f04f 0a01 	mov.w	sl, #1
 81093a6:	f1bb 0f00 	cmp.w	fp, #0
 81093aa:	d021      	beq.n	81093f0 <ai_platform_network_init+0xcc>
 81093ac:	2500      	movs	r5, #0
 81093ae:	6822      	ldr	r2, [r4, #0]
 81093b0:	4941      	ldr	r1, [pc, #260]	; (81094b8 <ai_platform_network_init+0x194>)
 81093b2:	428a      	cmp	r2, r1
 81093b4:	46ab      	mov	fp, r5
 81093b6:	d1d2      	bne.n	810935e <ai_platform_network_init+0x3a>
 81093b8:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 81093ba:	454a      	cmp	r2, r9
 81093bc:	4a3f      	ldr	r2, [pc, #252]	; (81094bc <ai_platform_network_init+0x198>)
 81093be:	d221      	bcs.n	8109404 <ai_platform_network_init+0xe0>
 81093c0:	4293      	cmp	r3, r2
 81093c2:	d15c      	bne.n	810947e <ai_platform_network_init+0x15a>
 81093c4:	6266      	str	r6, [r4, #36]	; 0x24
 81093c6:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 81093ca:	f8a4 b020 	strh.w	fp, [r4, #32]
 81093ce:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 81093d2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
 81093d6:	8525      	strh	r5, [r4, #40]	; 0x28
 81093d8:	4620      	mov	r0, r4
 81093da:	f000 fab1 	bl	8109940 <ai_layers_init_all>
 81093de:	e7be      	b.n	810935e <ai_platform_network_init+0x3a>
 81093e0:	2700      	movs	r7, #0
 81093e2:	4638      	mov	r0, r7
 81093e4:	b003      	add	sp, #12
 81093e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81093ea:	4680      	mov	r8, r0
 81093ec:	4682      	mov	sl, r0
 81093ee:	e7da      	b.n	81093a6 <ai_platform_network_init+0x82>
 81093f0:	2d00      	cmp	r5, #0
 81093f2:	d0dc      	beq.n	81093ae <ai_platform_network_init+0x8a>
 81093f4:	2212      	movs	r2, #18
 81093f6:	2110      	movs	r1, #16
 81093f8:	f104 000c 	add.w	r0, r4, #12
 81093fc:	f000 f898 	bl	8109530 <core_set_error>
 8109400:	465f      	mov	r7, fp
 8109402:	e7af      	b.n	8109364 <ai_platform_network_init+0x40>
 8109404:	4293      	cmp	r3, r2
 8109406:	d0dd      	beq.n	81093c4 <ai_platform_network_init+0xa0>
 8109408:	f1b9 0f00 	cmp.w	r9, #0
 810940c:	d018      	beq.n	8109440 <ai_platform_network_init+0x11c>
 810940e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8109412:	009b      	lsls	r3, r3, #2
 8109414:	f8cd 9004 	str.w	r9, [sp, #4]
 8109418:	2700      	movs	r7, #0
 810941a:	4699      	mov	r9, r3
 810941c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810941e:	eb06 0e07 	add.w	lr, r6, r7
 8109422:	eb03 0c07 	add.w	ip, r3, r7
 8109426:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 810942a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 810942e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8109432:	371c      	adds	r7, #28
 8109434:	45b9      	cmp	r9, r7
 8109436:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 810943a:	d1ef      	bne.n	810941c <ai_platform_network_init+0xf8>
 810943c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8109442:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 8109446:	4553      	cmp	r3, sl
 8109448:	f8a4 b020 	strh.w	fp, [r4, #32]
 810944c:	d325      	bcc.n	810949a <ai_platform_network_init+0x176>
 810944e:	f1ba 0f00 	cmp.w	sl, #0
 8109452:	d0be      	beq.n	81093d2 <ai_platform_network_init+0xae>
 8109454:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8109458:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 810945c:	f04f 0c00 	mov.w	ip, #0
 8109460:	eb08 070c 	add.w	r7, r8, ip
 8109464:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8109466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8109468:	4466      	add	r6, ip
 810946a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 810946c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8109470:	f10c 0c1c 	add.w	ip, ip, #28
 8109474:	45f4      	cmp	ip, lr
 8109476:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 810947a:	d1f1      	bne.n	8109460 <ai_platform_network_init+0x13c>
 810947c:	e7a9      	b.n	81093d2 <ai_platform_network_init+0xae>
 810947e:	2212      	movs	r2, #18
 8109480:	2116      	movs	r1, #22
 8109482:	f104 000c 	add.w	r0, r4, #12
 8109486:	f000 f853 	bl	8109530 <core_set_error>
 810948a:	2700      	movs	r7, #0
 810948c:	e76a      	b.n	8109364 <ai_platform_network_init+0x40>
 810948e:	2211      	movs	r2, #17
 8109490:	2110      	movs	r1, #16
 8109492:	300c      	adds	r0, #12
 8109494:	f000 f84c 	bl	8109530 <core_set_error>
 8109498:	e764      	b.n	8109364 <ai_platform_network_init+0x40>
 810949a:	2213      	movs	r2, #19
 810949c:	2116      	movs	r1, #22
 810949e:	f104 000c 	add.w	r0, r4, #12
 81094a2:	f000 f845 	bl	8109530 <core_set_error>
 81094a6:	2700      	movs	r7, #0
 81094a8:	e75c      	b.n	8109364 <ai_platform_network_init+0x40>
 81094aa:	2213      	movs	r2, #19
 81094ac:	2110      	movs	r1, #16
 81094ae:	f104 000c 	add.w	r0, r4, #12
 81094b2:	f000 f83d 	bl	8109530 <core_set_error>
 81094b6:	e755      	b.n	8109364 <ai_platform_network_init+0x40>
 81094b8:	a1c00100 	.word	0xa1c00100
 81094bc:	a1facade 	.word	0xa1facade

081094c0 <ai_platform_network_post_init>:
 81094c0:	b538      	push	{r3, r4, r5, lr}
 81094c2:	4b16      	ldr	r3, [pc, #88]	; (810951c <ai_platform_network_post_init+0x5c>)
 81094c4:	6802      	ldr	r2, [r0, #0]
 81094c6:	ea02 0103 	and.w	r1, r2, r3
 81094ca:	4393      	bics	r3, r2
 81094cc:	d108      	bne.n	81094e0 <ai_platform_network_post_init+0x20>
 81094ce:	6903      	ldr	r3, [r0, #16]
 81094d0:	f013 0502 	ands.w	r5, r3, #2
 81094d4:	4604      	mov	r4, r0
 81094d6:	d005      	beq.n	81094e4 <ai_platform_network_post_init+0x24>
 81094d8:	428a      	cmp	r2, r1
 81094da:	d00a      	beq.n	81094f2 <ai_platform_network_post_init+0x32>
 81094dc:	2001      	movs	r0, #1
 81094de:	bd38      	pop	{r3, r4, r5, pc}
 81094e0:	2000      	movs	r0, #0
 81094e2:	bd38      	pop	{r3, r4, r5, pc}
 81094e4:	2210      	movs	r2, #16
 81094e6:	2111      	movs	r1, #17
 81094e8:	300c      	adds	r0, #12
 81094ea:	f000 f821 	bl	8109530 <core_set_error>
 81094ee:	4628      	mov	r0, r5
 81094f0:	bd38      	pop	{r3, r4, r5, pc}
 81094f2:	f000 fa33 	bl	810995c <ai_layers_post_init_all>
 81094f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81094f8:	2b00      	cmp	r3, #0
 81094fa:	d0ef      	beq.n	81094dc <ai_platform_network_post_init+0x1c>
 81094fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 81094fe:	e008      	b.n	8109512 <ai_platform_network_post_init+0x52>
 8109500:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8109504:	4798      	blx	r3
 8109506:	692b      	ldr	r3, [r5, #16]
 8109508:	42ab      	cmp	r3, r5
 810950a:	d0e7      	beq.n	81094dc <ai_platform_network_post_init+0x1c>
 810950c:	2b00      	cmp	r3, #0
 810950e:	d0e5      	beq.n	81094dc <ai_platform_network_post_init+0x1c>
 8109510:	461d      	mov	r5, r3
 8109512:	4629      	mov	r1, r5
 8109514:	2000      	movs	r0, #0
 8109516:	2d00      	cmp	r5, #0
 8109518:	d1f2      	bne.n	8109500 <ai_platform_network_post_init+0x40>
 810951a:	e7df      	b.n	81094dc <ai_platform_network_post_init+0x1c>
 810951c:	a1c00100 	.word	0xa1c00100

08109520 <core_init>:
 8109520:	2001      	movs	r0, #1
 8109522:	4770      	bx	lr

08109524 <core_get_error>:
 8109524:	4603      	mov	r3, r0
 8109526:	2200      	movs	r2, #0
 8109528:	6800      	ldr	r0, [r0, #0]
 810952a:	601a      	str	r2, [r3, #0]
 810952c:	4770      	bx	lr
 810952e:	bf00      	nop

08109530 <core_set_error>:
 8109530:	4603      	mov	r3, r0
 8109532:	7800      	ldrb	r0, [r0, #0]
 8109534:	b108      	cbz	r0, 810953a <core_set_error+0xa>
 8109536:	2000      	movs	r0, #0
 8109538:	4770      	bx	lr
 810953a:	7019      	strb	r1, [r3, #0]
 810953c:	6819      	ldr	r1, [r3, #0]
 810953e:	f362 211f 	bfi	r1, r2, #8, #24
 8109542:	2001      	movs	r0, #1
 8109544:	6019      	str	r1, [r3, #0]
 8109546:	4770      	bx	lr

08109548 <node_convert>:
 8109548:	6982      	ldr	r2, [r0, #24]
 810954a:	8813      	ldrh	r3, [r2, #0]
 810954c:	2b00      	cmp	r3, #0
 810954e:	d038      	beq.n	81095c2 <node_convert+0x7a>
 8109550:	6852      	ldr	r2, [r2, #4]
 8109552:	6850      	ldr	r0, [r2, #4]
 8109554:	b100      	cbz	r0, 8109558 <node_convert+0x10>
 8109556:	6800      	ldr	r0, [r0, #0]
 8109558:	2b01      	cmp	r3, #1
 810955a:	f000 80e5 	beq.w	8109728 <node_convert+0x1e0>
 810955e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8109560:	6915      	ldr	r5, [r2, #16]
 8109562:	b083      	sub	sp, #12
 8109564:	b105      	cbz	r5, 8109568 <node_convert+0x20>
 8109566:	682d      	ldr	r5, [r5, #0]
 8109568:	6883      	ldr	r3, [r0, #8]
 810956a:	0a1b      	lsrs	r3, r3, #8
 810956c:	f000 809a 	beq.w	81096a4 <node_convert+0x15c>
 8109570:	68c1      	ldr	r1, [r0, #12]
 8109572:	2401      	movs	r4, #1
 8109574:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8109578:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810957c:	4299      	cmp	r1, r3
 810957e:	fb02 f404 	mul.w	r4, r2, r4
 8109582:	d1f9      	bne.n	8109578 <node_convert+0x30>
 8109584:	6982      	ldr	r2, [r0, #24]
 8109586:	69ae      	ldr	r6, [r5, #24]
 8109588:	6813      	ldr	r3, [r2, #0]
 810958a:	f3c3 4143 	ubfx	r1, r3, #17, #4
 810958e:	2901      	cmp	r1, #1
 8109590:	d019      	beq.n	81095c6 <node_convert+0x7e>
 8109592:	6801      	ldr	r1, [r0, #0]
 8109594:	68b5      	ldr	r5, [r6, #8]
 8109596:	2900      	cmp	r1, #0
 8109598:	d032      	beq.n	8109600 <node_convert+0xb8>
 810959a:	684e      	ldr	r6, [r1, #4]
 810959c:	6890      	ldr	r0, [r2, #8]
 810959e:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 81095a2:	2e00      	cmp	r6, #0
 81095a4:	d06a      	beq.n	810967c <node_convert+0x134>
 81095a6:	884b      	ldrh	r3, [r1, #2]
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d150      	bne.n	810964e <node_convert+0x106>
 81095ac:	2a00      	cmp	r2, #0
 81095ae:	d067      	beq.n	8109680 <node_convert+0x138>
 81095b0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8109730 <node_convert+0x1e8>
 81095b4:	4622      	mov	r2, r4
 81095b6:	4629      	mov	r1, r5
 81095b8:	b003      	add	sp, #12
 81095ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81095be:	f001 b9c1 	b.w	810a944 <forward_lite_node_convert_integer_is8of32>
 81095c2:	685b      	ldr	r3, [r3, #4]
 81095c4:	deff      	udf	#255	; 0xff
 81095c6:	682d      	ldr	r5, [r5, #0]
 81095c8:	6890      	ldr	r0, [r2, #8]
 81095ca:	2d00      	cmp	r5, #0
 81095cc:	d06c      	beq.n	81096a8 <node_convert+0x160>
 81095ce:	6833      	ldr	r3, [r6, #0]
 81095d0:	686a      	ldr	r2, [r5, #4]
 81095d2:	68b1      	ldr	r1, [r6, #8]
 81095d4:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 81095d8:	2a00      	cmp	r2, #0
 81095da:	d040      	beq.n	810965e <node_convert+0x116>
 81095dc:	886d      	ldrh	r5, [r5, #2]
 81095de:	2d00      	cmp	r5, #0
 81095e0:	d042      	beq.n	8109668 <node_convert+0x120>
 81095e2:	6815      	ldr	r5, [r2, #0]
 81095e4:	ed95 0a00 	vldr	s0, [r5]
 81095e8:	2b00      	cmp	r3, #0
 81095ea:	f000 8096 	beq.w	810971a <node_convert+0x1d2>
 81095ee:	6853      	ldr	r3, [r2, #4]
 81095f0:	f993 3000 	ldrsb.w	r3, [r3]
 81095f4:	4622      	mov	r2, r4
 81095f6:	b003      	add	sp, #12
 81095f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81095fc:	f001 b9a6 	b.w	810a94c <forward_lite_node_convert_integer_if32os8>
 8109600:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 8109604:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 8109608:	1b8e      	subs	r6, r1, r6
 810960a:	3640      	adds	r6, #64	; 0x40
 810960c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8109610:	2908      	cmp	r1, #8
 8109612:	6890      	ldr	r0, [r2, #8]
 8109614:	eba6 0603 	sub.w	r6, r6, r3
 8109618:	4622      	mov	r2, r4
 810961a:	4629      	mov	r1, r5
 810961c:	d06f      	beq.n	81096fe <node_convert+0x1b6>
 810961e:	f003 fcbb 	bl	810cf98 <st_int16_to_f32>
 8109622:	b196      	cbz	r6, 810964a <node_convert+0x102>
 8109624:	ee07 6a90 	vmov	s15, r6
 8109628:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 810962c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8109630:	f006 f886 	bl	810f740 <powf>
 8109634:	b14c      	cbz	r4, 810964a <node_convert+0x102>
 8109636:	2300      	movs	r3, #0
 8109638:	ecf5 7a01 	vldmia	r5!, {s15}
 810963c:	3301      	adds	r3, #1
 810963e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8109642:	42a3      	cmp	r3, r4
 8109644:	ed45 7a01 	vstr	s15, [r5, #-4]
 8109648:	d1f6      	bne.n	8109638 <node_convert+0xf0>
 810964a:	b003      	add	sp, #12
 810964c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810964e:	6833      	ldr	r3, [r6, #0]
 8109650:	ed93 0a00 	vldr	s0, [r3]
 8109654:	6873      	ldr	r3, [r6, #4]
 8109656:	b1ea      	cbz	r2, 8109694 <node_convert+0x14c>
 8109658:	f993 3000 	ldrsb.w	r3, [r3]
 810965c:	e7aa      	b.n	81095b4 <node_convert+0x6c>
 810965e:	b12b      	cbz	r3, 810966c <node_convert+0x124>
 8109660:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8109730 <node_convert+0x1e8>
 8109664:	4613      	mov	r3, r2
 8109666:	e7c5      	b.n	81095f4 <node_convert+0xac>
 8109668:	2b00      	cmp	r3, #0
 810966a:	d159      	bne.n	8109720 <node_convert+0x1d8>
 810966c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8109730 <node_convert+0x1e8>
 8109670:	4622      	mov	r2, r4
 8109672:	b003      	add	sp, #12
 8109674:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8109678:	f001 b96a 	b.w	810a950 <forward_lite_node_convert_integer_if32ou8>
 810967c:	2a00      	cmp	r2, #0
 810967e:	d141      	bne.n	8109704 <node_convert+0x1bc>
 8109680:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8109730 <node_convert+0x1e8>
 8109684:	2300      	movs	r3, #0
 8109686:	4622      	mov	r2, r4
 8109688:	4629      	mov	r1, r5
 810968a:	b003      	add	sp, #12
 810968c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8109690:	f001 b95a 	b.w	810a948 <forward_lite_node_convert_integer_iu8of32>
 8109694:	781b      	ldrb	r3, [r3, #0]
 8109696:	4622      	mov	r2, r4
 8109698:	4629      	mov	r1, r5
 810969a:	b003      	add	sp, #12
 810969c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81096a0:	f001 b952 	b.w	810a948 <forward_lite_node_convert_integer_iu8of32>
 81096a4:	2401      	movs	r4, #1
 81096a6:	e76d      	b.n	8109584 <node_convert+0x3c>
 81096a8:	6832      	ldr	r2, [r6, #0]
 81096aa:	f3c2 17c6 	ubfx	r7, r2, #7, #7
 81096ae:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 81096b2:	1afb      	subs	r3, r7, r3
 81096b4:	3340      	adds	r3, #64	; 0x40
 81096b6:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 81096ba:	1a9b      	subs	r3, r3, r2
 81096bc:	d016      	beq.n	81096ec <node_convert+0x1a4>
 81096be:	425b      	negs	r3, r3
 81096c0:	ee00 3a90 	vmov	s1, r3
 81096c4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 81096c8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 81096cc:	9001      	str	r0, [sp, #4]
 81096ce:	f006 f837 	bl	810f740 <powf>
 81096d2:	9801      	ldr	r0, [sp, #4]
 81096d4:	b154      	cbz	r4, 81096ec <node_convert+0x1a4>
 81096d6:	462b      	mov	r3, r5
 81096d8:	4602      	mov	r2, r0
 81096da:	ecf2 7a01 	vldmia	r2!, {s15}
 81096de:	3301      	adds	r3, #1
 81096e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 81096e4:	42a3      	cmp	r3, r4
 81096e6:	ed42 7a01 	vstr	s15, [r2, #-4]
 81096ea:	d1f6      	bne.n	81096da <node_convert+0x192>
 81096ec:	2f08      	cmp	r7, #8
 81096ee:	d00d      	beq.n	810970c <node_convert+0x1c4>
 81096f0:	68b1      	ldr	r1, [r6, #8]
 81096f2:	4622      	mov	r2, r4
 81096f4:	b003      	add	sp, #12
 81096f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81096fa:	f003 baa9 	b.w	810cc50 <st_f32_to_int16>
 81096fe:	f004 faa7 	bl	810dc50 <st_int8_to_f32>
 8109702:	e78e      	b.n	8109622 <node_convert+0xda>
 8109704:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8109730 <node_convert+0x1e8>
 8109708:	4633      	mov	r3, r6
 810970a:	e753      	b.n	81095b4 <node_convert+0x6c>
 810970c:	68b1      	ldr	r1, [r6, #8]
 810970e:	4622      	mov	r2, r4
 8109710:	b003      	add	sp, #12
 8109712:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8109716:	f003 bb61 	b.w	810cddc <st_f32_to_int8>
 810971a:	6853      	ldr	r3, [r2, #4]
 810971c:	781b      	ldrb	r3, [r3, #0]
 810971e:	e7a7      	b.n	8109670 <node_convert+0x128>
 8109720:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8109730 <node_convert+0x1e8>
 8109724:	462b      	mov	r3, r5
 8109726:	e765      	b.n	81095f4 <node_convert+0xac>
 8109728:	2300      	movs	r3, #0
 810972a:	685b      	ldr	r3, [r3, #4]
 810972c:	deff      	udf	#255	; 0xff
 810972e:	bf00      	nop
 8109730:	00000000 	.word	0x00000000

08109734 <node_convert_integer>:
 8109734:	6982      	ldr	r2, [r0, #24]
 8109736:	8813      	ldrh	r3, [r2, #0]
 8109738:	2b00      	cmp	r3, #0
 810973a:	d056      	beq.n	81097ea <node_convert_integer+0xb6>
 810973c:	b570      	push	{r4, r5, r6, lr}
 810973e:	6852      	ldr	r2, [r2, #4]
 8109740:	6855      	ldr	r5, [r2, #4]
 8109742:	b082      	sub	sp, #8
 8109744:	b105      	cbz	r5, 8109748 <node_convert_integer+0x14>
 8109746:	682d      	ldr	r5, [r5, #0]
 8109748:	2b01      	cmp	r3, #1
 810974a:	f000 80ca 	beq.w	81098e2 <node_convert_integer+0x1ae>
 810974e:	6916      	ldr	r6, [r2, #16]
 8109750:	b106      	cbz	r6, 8109754 <node_convert_integer+0x20>
 8109752:	6836      	ldr	r6, [r6, #0]
 8109754:	68ab      	ldr	r3, [r5, #8]
 8109756:	0a1b      	lsrs	r3, r3, #8
 8109758:	f000 80a2 	beq.w	81098a0 <node_convert_integer+0x16c>
 810975c:	68e8      	ldr	r0, [r5, #12]
 810975e:	2201      	movs	r2, #1
 8109760:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8109764:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109768:	4298      	cmp	r0, r3
 810976a:	fb01 f202 	mul.w	r2, r1, r2
 810976e:	d1f9      	bne.n	8109764 <node_convert_integer+0x30>
 8109770:	682b      	ldr	r3, [r5, #0]
 8109772:	6834      	ldr	r4, [r6, #0]
 8109774:	b17b      	cbz	r3, 8109796 <node_convert_integer+0x62>
 8109776:	6859      	ldr	r1, [r3, #4]
 8109778:	b169      	cbz	r1, 8109796 <node_convert_integer+0x62>
 810977a:	8858      	ldrh	r0, [r3, #2]
 810977c:	b158      	cbz	r0, 8109796 <node_convert_integer+0x62>
 810977e:	6809      	ldr	r1, [r1, #0]
 8109780:	ed91 7a00 	vldr	s14, [r1]
 8109784:	b15c      	cbz	r4, 810979e <node_convert_integer+0x6a>
 8109786:	6861      	ldr	r1, [r4, #4]
 8109788:	b149      	cbz	r1, 810979e <node_convert_integer+0x6a>
 810978a:	8860      	ldrh	r0, [r4, #2]
 810978c:	b138      	cbz	r0, 810979e <node_convert_integer+0x6a>
 810978e:	6809      	ldr	r1, [r1, #0]
 8109790:	edd1 7a00 	vldr	s15, [r1]
 8109794:	e005      	b.n	81097a2 <node_convert_integer+0x6e>
 8109796:	ed9f 7a54 	vldr	s14, [pc, #336]	; 81098e8 <node_convert_integer+0x1b4>
 810979a:	2c00      	cmp	r4, #0
 810979c:	d1f3      	bne.n	8109786 <node_convert_integer+0x52>
 810979e:	eddf 7a52 	vldr	s15, [pc, #328]	; 81098e8 <node_convert_integer+0x1b4>
 81097a2:	69a8      	ldr	r0, [r5, #24]
 81097a4:	69b5      	ldr	r5, [r6, #24]
 81097a6:	6806      	ldr	r6, [r0, #0]
 81097a8:	6829      	ldr	r1, [r5, #0]
 81097aa:	0236      	lsls	r6, r6, #8
 81097ac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 81097b0:	f3c1 51c0 	ubfx	r1, r1, #23, #1
 81097b4:	d41b      	bmi.n	81097ee <node_convert_integer+0xba>
 81097b6:	2900      	cmp	r1, #0
 81097b8:	d153      	bne.n	8109862 <node_convert_integer+0x12e>
 81097ba:	6880      	ldr	r0, [r0, #8]
 81097bc:	68a9      	ldr	r1, [r5, #8]
 81097be:	b13b      	cbz	r3, 81097d0 <node_convert_integer+0x9c>
 81097c0:	685d      	ldr	r5, [r3, #4]
 81097c2:	2d00      	cmp	r5, #0
 81097c4:	f000 8082 	beq.w	81098cc <node_convert_integer+0x198>
 81097c8:	885b      	ldrh	r3, [r3, #2]
 81097ca:	b10b      	cbz	r3, 81097d0 <node_convert_integer+0x9c>
 81097cc:	686b      	ldr	r3, [r5, #4]
 81097ce:	781b      	ldrb	r3, [r3, #0]
 81097d0:	b134      	cbz	r4, 81097e0 <node_convert_integer+0xac>
 81097d2:	6865      	ldr	r5, [r4, #4]
 81097d4:	2d00      	cmp	r5, #0
 81097d6:	d06d      	beq.n	81098b4 <node_convert_integer+0x180>
 81097d8:	8864      	ldrh	r4, [r4, #2]
 81097da:	b10c      	cbz	r4, 81097e0 <node_convert_integer+0xac>
 81097dc:	686c      	ldr	r4, [r5, #4]
 81097de:	7824      	ldrb	r4, [r4, #0]
 81097e0:	9400      	str	r4, [sp, #0]
 81097e2:	f001 f8bf 	bl	810a964 <forward_lite_node_convert_integer_iu8ou8>
 81097e6:	b002      	add	sp, #8
 81097e8:	bd70      	pop	{r4, r5, r6, pc}
 81097ea:	685b      	ldr	r3, [r3, #4]
 81097ec:	deff      	udf	#255	; 0xff
 81097ee:	6880      	ldr	r0, [r0, #8]
 81097f0:	b1b9      	cbz	r1, 8109822 <node_convert_integer+0xee>
 81097f2:	68a9      	ldr	r1, [r5, #8]
 81097f4:	b13b      	cbz	r3, 8109806 <node_convert_integer+0xd2>
 81097f6:	685d      	ldr	r5, [r3, #4]
 81097f8:	2d00      	cmp	r5, #0
 81097fa:	d057      	beq.n	81098ac <node_convert_integer+0x178>
 81097fc:	885b      	ldrh	r3, [r3, #2]
 81097fe:	b113      	cbz	r3, 8109806 <node_convert_integer+0xd2>
 8109800:	686b      	ldr	r3, [r5, #4]
 8109802:	f993 3000 	ldrsb.w	r3, [r3]
 8109806:	b13c      	cbz	r4, 8109818 <node_convert_integer+0xe4>
 8109808:	6865      	ldr	r5, [r4, #4]
 810980a:	2d00      	cmp	r5, #0
 810980c:	d04c      	beq.n	81098a8 <node_convert_integer+0x174>
 810980e:	8864      	ldrh	r4, [r4, #2]
 8109810:	b114      	cbz	r4, 8109818 <node_convert_integer+0xe4>
 8109812:	686c      	ldr	r4, [r5, #4]
 8109814:	f994 4000 	ldrsb.w	r4, [r4]
 8109818:	9400      	str	r4, [sp, #0]
 810981a:	f001 f89b 	bl	810a954 <forward_lite_node_convert_integer_is8os8>
 810981e:	b002      	add	sp, #8
 8109820:	bd70      	pop	{r4, r5, r6, pc}
 8109822:	68a9      	ldr	r1, [r5, #8]
 8109824:	b13b      	cbz	r3, 8109836 <node_convert_integer+0x102>
 8109826:	685d      	ldr	r5, [r3, #4]
 8109828:	2d00      	cmp	r5, #0
 810982a:	d04b      	beq.n	81098c4 <node_convert_integer+0x190>
 810982c:	885b      	ldrh	r3, [r3, #2]
 810982e:	b113      	cbz	r3, 8109836 <node_convert_integer+0x102>
 8109830:	686b      	ldr	r3, [r5, #4]
 8109832:	f993 3000 	ldrsb.w	r3, [r3]
 8109836:	b134      	cbz	r4, 8109846 <node_convert_integer+0x112>
 8109838:	6865      	ldr	r5, [r4, #4]
 810983a:	2d00      	cmp	r5, #0
 810983c:	d03c      	beq.n	81098b8 <node_convert_integer+0x184>
 810983e:	8864      	ldrh	r4, [r4, #2]
 8109840:	b10c      	cbz	r4, 8109846 <node_convert_integer+0x112>
 8109842:	686c      	ldr	r4, [r5, #4]
 8109844:	7824      	ldrb	r4, [r4, #0]
 8109846:	9400      	str	r4, [sp, #0]
 8109848:	eeb4 7a67 	vcmp.f32	s14, s15
 810984c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109850:	d103      	bne.n	810985a <node_convert_integer+0x126>
 8109852:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8109856:	42a5      	cmp	r5, r4
 8109858:	d040      	beq.n	81098dc <node_convert_integer+0x1a8>
 810985a:	f001 f895 	bl	810a988 <forward_lite_node_convert_integer_is8ou8>
 810985e:	b002      	add	sp, #8
 8109860:	bd70      	pop	{r4, r5, r6, pc}
 8109862:	b12b      	cbz	r3, 8109870 <node_convert_integer+0x13c>
 8109864:	6859      	ldr	r1, [r3, #4]
 8109866:	b349      	cbz	r1, 81098bc <node_convert_integer+0x188>
 8109868:	885b      	ldrh	r3, [r3, #2]
 810986a:	b10b      	cbz	r3, 8109870 <node_convert_integer+0x13c>
 810986c:	684b      	ldr	r3, [r1, #4]
 810986e:	781b      	ldrb	r3, [r3, #0]
 8109870:	b134      	cbz	r4, 8109880 <node_convert_integer+0x14c>
 8109872:	6861      	ldr	r1, [r4, #4]
 8109874:	b1b1      	cbz	r1, 81098a4 <node_convert_integer+0x170>
 8109876:	8864      	ldrh	r4, [r4, #2]
 8109878:	b114      	cbz	r4, 8109880 <node_convert_integer+0x14c>
 810987a:	6849      	ldr	r1, [r1, #4]
 810987c:	f991 4000 	ldrsb.w	r4, [r1]
 8109880:	6880      	ldr	r0, [r0, #8]
 8109882:	68a9      	ldr	r1, [r5, #8]
 8109884:	9400      	str	r4, [sp, #0]
 8109886:	eeb4 7a67 	vcmp.f32	s14, s15
 810988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810988e:	d103      	bne.n	8109898 <node_convert_integer+0x164>
 8109890:	f104 0580 	add.w	r5, r4, #128	; 0x80
 8109894:	42ab      	cmp	r3, r5
 8109896:	d01e      	beq.n	81098d6 <node_convert_integer+0x1a2>
 8109898:	f001 f86c 	bl	810a974 <forward_lite_node_convert_integer_iu8os8>
 810989c:	b002      	add	sp, #8
 810989e:	bd70      	pop	{r4, r5, r6, pc}
 81098a0:	2201      	movs	r2, #1
 81098a2:	e765      	b.n	8109770 <node_convert_integer+0x3c>
 81098a4:	460c      	mov	r4, r1
 81098a6:	e7eb      	b.n	8109880 <node_convert_integer+0x14c>
 81098a8:	462c      	mov	r4, r5
 81098aa:	e7b5      	b.n	8109818 <node_convert_integer+0xe4>
 81098ac:	462b      	mov	r3, r5
 81098ae:	2c00      	cmp	r4, #0
 81098b0:	d1aa      	bne.n	8109808 <node_convert_integer+0xd4>
 81098b2:	e7b1      	b.n	8109818 <node_convert_integer+0xe4>
 81098b4:	462c      	mov	r4, r5
 81098b6:	e793      	b.n	81097e0 <node_convert_integer+0xac>
 81098b8:	462c      	mov	r4, r5
 81098ba:	e7c4      	b.n	8109846 <node_convert_integer+0x112>
 81098bc:	460b      	mov	r3, r1
 81098be:	2c00      	cmp	r4, #0
 81098c0:	d1d7      	bne.n	8109872 <node_convert_integer+0x13e>
 81098c2:	e7dd      	b.n	8109880 <node_convert_integer+0x14c>
 81098c4:	462b      	mov	r3, r5
 81098c6:	2c00      	cmp	r4, #0
 81098c8:	d1b6      	bne.n	8109838 <node_convert_integer+0x104>
 81098ca:	e7bc      	b.n	8109846 <node_convert_integer+0x112>
 81098cc:	462b      	mov	r3, r5
 81098ce:	2c00      	cmp	r4, #0
 81098d0:	f47f af7f 	bne.w	81097d2 <node_convert_integer+0x9e>
 81098d4:	e784      	b.n	81097e0 <node_convert_integer+0xac>
 81098d6:	f001 f855 	bl	810a984 <forward_lite_node_convert_integer_iu8os8_fast>
 81098da:	e784      	b.n	81097e6 <node_convert_integer+0xb2>
 81098dc:	f001 f85c 	bl	810a998 <forward_lite_node_convert_integer_is8ou8_fast>
 81098e0:	e781      	b.n	81097e6 <node_convert_integer+0xb2>
 81098e2:	2300      	movs	r3, #0
 81098e4:	685b      	ldr	r3, [r3, #4]
 81098e6:	deff      	udf	#255	; 0xff
 81098e8:	00000000 	.word	0x00000000

081098ec <ai_check_custom_types>:
 81098ec:	b082      	sub	sp, #8
 81098ee:	4b13      	ldr	r3, [pc, #76]	; (810993c <ai_check_custom_types+0x50>)
 81098f0:	9301      	str	r3, [sp, #4]
 81098f2:	b118      	cbz	r0, 81098fc <ai_check_custom_types+0x10>
 81098f4:	7803      	ldrb	r3, [r0, #0]
 81098f6:	2b03      	cmp	r3, #3
 81098f8:	d002      	beq.n	8109900 <ai_check_custom_types+0x14>
 81098fa:	2000      	movs	r0, #0
 81098fc:	b002      	add	sp, #8
 81098fe:	4770      	bx	lr
 8109900:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8109904:	4293      	cmp	r3, r2
 8109906:	d004      	beq.n	8109912 <ai_check_custom_types+0x26>
 8109908:	2001      	movs	r0, #1
 810990a:	f080 0001 	eor.w	r0, r0, #1
 810990e:	b002      	add	sp, #8
 8109910:	4770      	bx	lr
 8109912:	7842      	ldrb	r2, [r0, #1]
 8109914:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8109918:	429a      	cmp	r2, r3
 810991a:	f100 0001 	add.w	r0, r0, #1
 810991e:	d1f3      	bne.n	8109908 <ai_check_custom_types+0x1c>
 8109920:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8109924:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8109928:	429a      	cmp	r2, r3
 810992a:	d1ed      	bne.n	8109908 <ai_check_custom_types+0x1c>
 810992c:	7842      	ldrb	r2, [r0, #1]
 810992e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8109932:	429a      	cmp	r2, r3
 8109934:	d1e8      	bne.n	8109908 <ai_check_custom_types+0x1c>
 8109936:	2000      	movs	r0, #0
 8109938:	e7e7      	b.n	810990a <ai_check_custom_types+0x1e>
 810993a:	bf00      	nop
 810993c:	84048403 	.word	0x84048403

08109940 <ai_layers_init_all>:
 8109940:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8109942:	2100      	movs	r1, #0
 8109944:	b143      	cbz	r3, 8109958 <ai_layers_init_all+0x18>
 8109946:	691a      	ldr	r2, [r3, #16]
 8109948:	60d8      	str	r0, [r3, #12]
 810994a:	429a      	cmp	r2, r3
 810994c:	f101 0101 	add.w	r1, r1, #1
 8109950:	d002      	beq.n	8109958 <ai_layers_init_all+0x18>
 8109952:	b10a      	cbz	r2, 8109958 <ai_layers_init_all+0x18>
 8109954:	4613      	mov	r3, r2
 8109956:	e7f5      	b.n	8109944 <ai_layers_init_all+0x4>
 8109958:	4608      	mov	r0, r1
 810995a:	4770      	bx	lr

0810995c <ai_layers_post_init_all>:
 810995c:	b538      	push	{r3, r4, r5, lr}
 810995e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8109960:	2500      	movs	r5, #0
 8109962:	b16c      	cbz	r4, 8109980 <ai_layers_post_init_all+0x24>
 8109964:	6863      	ldr	r3, [r4, #4]
 8109966:	07db      	lsls	r3, r3, #31
 8109968:	d504      	bpl.n	8109974 <ai_layers_post_init_all+0x18>
 810996a:	6a23      	ldr	r3, [r4, #32]
 810996c:	4620      	mov	r0, r4
 810996e:	b10b      	cbz	r3, 8109974 <ai_layers_post_init_all+0x18>
 8109970:	4798      	blx	r3
 8109972:	3501      	adds	r5, #1
 8109974:	6923      	ldr	r3, [r4, #16]
 8109976:	42a3      	cmp	r3, r4
 8109978:	d002      	beq.n	8109980 <ai_layers_post_init_all+0x24>
 810997a:	b10b      	cbz	r3, 8109980 <ai_layers_post_init_all+0x24>
 810997c:	461c      	mov	r4, r3
 810997e:	e7f0      	b.n	8109962 <ai_layers_post_init_all+0x6>
 8109980:	4628      	mov	r0, r5
 8109982:	bd38      	pop	{r3, r4, r5, pc}

08109984 <forward_conv2d_rgb_sssa8_ch>:
 8109984:	6982      	ldr	r2, [r0, #24]
 8109986:	8813      	ldrh	r3, [r2, #0]
 8109988:	2b00      	cmp	r3, #0
 810998a:	f000 80a8 	beq.w	8109ade <forward_conv2d_rgb_sssa8_ch+0x15a>
 810998e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109992:	6854      	ldr	r4, [r2, #4]
 8109994:	6861      	ldr	r1, [r4, #4]
 8109996:	b097      	sub	sp, #92	; 0x5c
 8109998:	b101      	cbz	r1, 810999c <forward_conv2d_rgb_sssa8_ch+0x18>
 810999a:	6809      	ldr	r1, [r1, #0]
 810999c:	2b01      	cmp	r3, #1
 810999e:	f000 80b7 	beq.w	8109b10 <forward_conv2d_rgb_sssa8_ch+0x18c>
 81099a2:	6922      	ldr	r2, [r4, #16]
 81099a4:	b102      	cbz	r2, 81099a8 <forward_conv2d_rgb_sssa8_ch+0x24>
 81099a6:	6812      	ldr	r2, [r2, #0]
 81099a8:	2b02      	cmp	r3, #2
 81099aa:	f000 80ac 	beq.w	8109b06 <forward_conv2d_rgb_sssa8_ch+0x182>
 81099ae:	69e5      	ldr	r5, [r4, #28]
 81099b0:	2d00      	cmp	r5, #0
 81099b2:	f000 80a0 	beq.w	8109af6 <forward_conv2d_rgb_sssa8_ch+0x172>
 81099b6:	8b26      	ldrh	r6, [r4, #24]
 81099b8:	f8d5 e000 	ldr.w	lr, [r5]
 81099bc:	2e01      	cmp	r6, #1
 81099be:	f240 809c 	bls.w	8109afa <forward_conv2d_rgb_sssa8_ch+0x176>
 81099c2:	686d      	ldr	r5, [r5, #4]
 81099c4:	2b03      	cmp	r3, #3
 81099c6:	f000 80a6 	beq.w	8109b16 <forward_conv2d_rgb_sssa8_ch+0x192>
 81099ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81099cc:	2b00      	cmp	r3, #0
 81099ce:	f000 8096 	beq.w	8109afe <forward_conv2d_rgb_sssa8_ch+0x17a>
 81099d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 81099d4:	b104      	cbz	r4, 81099d8 <forward_conv2d_rgb_sssa8_ch+0x54>
 81099d6:	685a      	ldr	r2, [r3, #4]
 81099d8:	681c      	ldr	r4, [r3, #0]
 81099da:	69ab      	ldr	r3, [r5, #24]
 81099dc:	f8d4 c018 	ldr.w	ip, [r4, #24]
 81099e0:	689b      	ldr	r3, [r3, #8]
 81099e2:	9314      	str	r3, [sp, #80]	; 0x50
 81099e4:	68cb      	ldr	r3, [r1, #12]
 81099e6:	68d4      	ldr	r4, [r2, #12]
 81099e8:	f8d3 9008 	ldr.w	r9, [r3, #8]
 81099ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 81099ee:	680d      	ldr	r5, [r1, #0]
 81099f0:	889b      	ldrh	r3, [r3, #4]
 81099f2:	9313      	str	r3, [sp, #76]	; 0x4c
 81099f4:	f8de 300c 	ldr.w	r3, [lr, #12]
 81099f8:	f8de 6000 	ldr.w	r6, [lr]
 81099fc:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8109a00:	88a3      	ldrh	r3, [r4, #4]
 8109a02:	68a4      	ldr	r4, [r4, #8]
 8109a04:	9411      	str	r4, [sp, #68]	; 0x44
 8109a06:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8109a08:	9412      	str	r4, [sp, #72]	; 0x48
 8109a0a:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8109a0e:	9415      	str	r4, [sp, #84]	; 0x54
 8109a10:	6814      	ldr	r4, [r2, #0]
 8109a12:	2d00      	cmp	r5, #0
 8109a14:	d068      	beq.n	8109ae8 <forward_conv2d_rgb_sssa8_ch+0x164>
 8109a16:	686f      	ldr	r7, [r5, #4]
 8109a18:	2f00      	cmp	r7, #0
 8109a1a:	d065      	beq.n	8109ae8 <forward_conv2d_rgb_sssa8_ch+0x164>
 8109a1c:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8109a20:	f1b8 0f00 	cmp.w	r8, #0
 8109a24:	d060      	beq.n	8109ae8 <forward_conv2d_rgb_sssa8_ch+0x164>
 8109a26:	683f      	ldr	r7, [r7, #0]
 8109a28:	ed97 0a00 	vldr	s0, [r7]
 8109a2c:	2c00      	cmp	r4, #0
 8109a2e:	d058      	beq.n	8109ae2 <forward_conv2d_rgb_sssa8_ch+0x15e>
 8109a30:	6867      	ldr	r7, [r4, #4]
 8109a32:	2f00      	cmp	r7, #0
 8109a34:	d055      	beq.n	8109ae2 <forward_conv2d_rgb_sssa8_ch+0x15e>
 8109a36:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8109a3a:	f1b8 0f00 	cmp.w	r8, #0
 8109a3e:	d050      	beq.n	8109ae2 <forward_conv2d_rgb_sssa8_ch+0x15e>
 8109a40:	683f      	ldr	r7, [r7, #0]
 8109a42:	edd7 0a00 	vldr	s1, [r7]
 8109a46:	6997      	ldr	r7, [r2, #24]
 8109a48:	6989      	ldr	r1, [r1, #24]
 8109a4a:	f8de 2018 	ldr.w	r2, [lr, #24]
 8109a4e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8109a52:	f890 8041 	ldrb.w	r8, [r0, #65]	; 0x41
 8109a56:	688f      	ldr	r7, [r1, #8]
 8109a58:	6892      	ldr	r2, [r2, #8]
 8109a5a:	b116      	cbz	r6, 8109a62 <forward_conv2d_rgb_sssa8_ch+0xde>
 8109a5c:	6876      	ldr	r6, [r6, #4]
 8109a5e:	b106      	cbz	r6, 8109a62 <forward_conv2d_rgb_sssa8_ch+0xde>
 8109a60:	6836      	ldr	r6, [r6, #0]
 8109a62:	b13d      	cbz	r5, 8109a74 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8109a64:	6869      	ldr	r1, [r5, #4]
 8109a66:	2900      	cmp	r1, #0
 8109a68:	d041      	beq.n	8109aee <forward_conv2d_rgb_sssa8_ch+0x16a>
 8109a6a:	886d      	ldrh	r5, [r5, #2]
 8109a6c:	b115      	cbz	r5, 8109a74 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8109a6e:	6849      	ldr	r1, [r1, #4]
 8109a70:	f991 5000 	ldrsb.w	r5, [r1]
 8109a74:	b13c      	cbz	r4, 8109a86 <forward_conv2d_rgb_sssa8_ch+0x102>
 8109a76:	6861      	ldr	r1, [r4, #4]
 8109a78:	2900      	cmp	r1, #0
 8109a7a:	d03a      	beq.n	8109af2 <forward_conv2d_rgb_sssa8_ch+0x16e>
 8109a7c:	8864      	ldrh	r4, [r4, #2]
 8109a7e:	b114      	cbz	r4, 8109a86 <forward_conv2d_rgb_sssa8_ch+0x102>
 8109a80:	6849      	ldr	r1, [r1, #4]
 8109a82:	f991 4000 	ldrsb.w	r4, [r1]
 8109a86:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8109a8a:	e9dc 0100 	ldrd	r0, r1, [ip]
 8109a8e:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8109a92:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8109a96:	f005 fc7d 	bl	810f394 <ai_array_get_byte_size>
 8109a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109a9c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8109aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8109aa2:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
 8109aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109aa8:	9303      	str	r3, [sp, #12]
 8109aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109aac:	9302      	str	r3, [sp, #8]
 8109aae:	fa1f f18a 	uxth.w	r1, sl
 8109ab2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109ab4:	9301      	str	r3, [sp, #4]
 8109ab6:	9100      	str	r1, [sp, #0]
 8109ab8:	e9cd 8b07 	strd	r8, fp, [sp, #28]
 8109abc:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8109ac0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8109ac4:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
 8109ac8:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8109acc:	9504      	str	r5, [sp, #16]
 8109ace:	fa1f f189 	uxth.w	r1, r9
 8109ad2:	4638      	mov	r0, r7
 8109ad4:	f002 f8c4 	bl	810bc60 <forward_lite_conv2d_rgb_sssa8_ch>
 8109ad8:	b017      	add	sp, #92	; 0x5c
 8109ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109ade:	685b      	ldr	r3, [r3, #4]
 8109ae0:	deff      	udf	#255	; 0xff
 8109ae2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8109b1c <forward_conv2d_rgb_sssa8_ch+0x198>
 8109ae6:	e7ae      	b.n	8109a46 <forward_conv2d_rgb_sssa8_ch+0xc2>
 8109ae8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8109b1c <forward_conv2d_rgb_sssa8_ch+0x198>
 8109aec:	e79e      	b.n	8109a2c <forward_conv2d_rgb_sssa8_ch+0xa8>
 8109aee:	460d      	mov	r5, r1
 8109af0:	e7c0      	b.n	8109a74 <forward_conv2d_rgb_sssa8_ch+0xf0>
 8109af2:	460c      	mov	r4, r1
 8109af4:	e7c7      	b.n	8109a86 <forward_conv2d_rgb_sssa8_ch+0x102>
 8109af6:	46ae      	mov	lr, r5
 8109af8:	e764      	b.n	81099c4 <forward_conv2d_rgb_sssa8_ch+0x40>
 8109afa:	2500      	movs	r5, #0
 8109afc:	e762      	b.n	81099c4 <forward_conv2d_rgb_sssa8_ch+0x40>
 8109afe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8109b00:	b922      	cbnz	r2, 8109b0c <forward_conv2d_rgb_sssa8_ch+0x188>
 8109b02:	6993      	ldr	r3, [r2, #24]
 8109b04:	deff      	udf	#255	; 0xff
 8109b06:	2300      	movs	r3, #0
 8109b08:	685b      	ldr	r3, [r3, #4]
 8109b0a:	deff      	udf	#255	; 0xff
 8109b0c:	68db      	ldr	r3, [r3, #12]
 8109b0e:	deff      	udf	#255	; 0xff
 8109b10:	2300      	movs	r3, #0
 8109b12:	685b      	ldr	r3, [r3, #4]
 8109b14:	deff      	udf	#255	; 0xff
 8109b16:	2300      	movs	r3, #0
 8109b18:	685b      	ldr	r3, [r3, #4]
 8109b1a:	deff      	udf	#255	; 0xff
 8109b1c:	00000000 	.word	0x00000000

08109b20 <forward_dense_integer_SSSA>:
 8109b20:	6983      	ldr	r3, [r0, #24]
 8109b22:	8819      	ldrh	r1, [r3, #0]
 8109b24:	2900      	cmp	r1, #0
 8109b26:	f000 8085 	beq.w	8109c34 <forward_dense_integer_SSSA+0x114>
 8109b2a:	6858      	ldr	r0, [r3, #4]
 8109b2c:	6842      	ldr	r2, [r0, #4]
 8109b2e:	b102      	cbz	r2, 8109b32 <forward_dense_integer_SSSA+0x12>
 8109b30:	6812      	ldr	r2, [r2, #0]
 8109b32:	2901      	cmp	r1, #1
 8109b34:	f000 8106 	beq.w	8109d44 <forward_dense_integer_SSSA+0x224>
 8109b38:	6903      	ldr	r3, [r0, #16]
 8109b3a:	b103      	cbz	r3, 8109b3e <forward_dense_integer_SSSA+0x1e>
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	2902      	cmp	r1, #2
 8109b40:	f000 8103 	beq.w	8109d4a <forward_dense_integer_SSSA+0x22a>
 8109b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b48:	69c5      	ldr	r5, [r0, #28]
 8109b4a:	b089      	sub	sp, #36	; 0x24
 8109b4c:	2d00      	cmp	r5, #0
 8109b4e:	f000 80b4 	beq.w	8109cba <forward_dense_integer_SSSA+0x19a>
 8109b52:	8b04      	ldrh	r4, [r0, #24]
 8109b54:	682f      	ldr	r7, [r5, #0]
 8109b56:	2c01      	cmp	r4, #1
 8109b58:	f240 80d6 	bls.w	8109d08 <forward_dense_integer_SSSA+0x1e8>
 8109b5c:	686d      	ldr	r5, [r5, #4]
 8109b5e:	2903      	cmp	r1, #3
 8109b60:	f000 80f6 	beq.w	8109d50 <forward_dense_integer_SSSA+0x230>
 8109b64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8109b66:	69a9      	ldr	r1, [r5, #24]
 8109b68:	2c00      	cmp	r4, #0
 8109b6a:	f000 80bd 	beq.w	8109ce8 <forward_dense_integer_SSSA+0x1c8>
 8109b6e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8109b72:	68d1      	ldr	r1, [r2, #12]
 8109b74:	68dd      	ldr	r5, [r3, #12]
 8109b76:	8889      	ldrh	r1, [r1, #4]
 8109b78:	9107      	str	r1, [sp, #28]
 8109b7a:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
 8109b7e:	6824      	ldr	r4, [r4, #0]
 8109b80:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8109b84:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8109b88:	fb00 fa01 	mul.w	sl, r0, r1
 8109b8c:	6998      	ldr	r0, [r3, #24]
 8109b8e:	b10c      	cbz	r4, 8109b94 <forward_dense_integer_SSSA+0x74>
 8109b90:	69a1      	ldr	r1, [r4, #24]
 8109b92:	688c      	ldr	r4, [r1, #8]
 8109b94:	6815      	ldr	r5, [r2, #0]
 8109b96:	681e      	ldr	r6, [r3, #0]
 8109b98:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8109b9c:	683b      	ldr	r3, [r7, #0]
 8109b9e:	2d00      	cmp	r5, #0
 8109ba0:	d04a      	beq.n	8109c38 <forward_dense_integer_SSSA+0x118>
 8109ba2:	686a      	ldr	r2, [r5, #4]
 8109ba4:	2a00      	cmp	r2, #0
 8109ba6:	d06f      	beq.n	8109c88 <forward_dense_integer_SSSA+0x168>
 8109ba8:	886f      	ldrh	r7, [r5, #2]
 8109baa:	2f00      	cmp	r7, #0
 8109bac:	d05d      	beq.n	8109c6a <forward_dense_integer_SSSA+0x14a>
 8109bae:	6811      	ldr	r1, [r2, #0]
 8109bb0:	ed91 0a00 	vldr	s0, [r1]
 8109bb4:	2e00      	cmp	r6, #0
 8109bb6:	d05c      	beq.n	8109c72 <forward_dense_integer_SSSA+0x152>
 8109bb8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8109bbc:	f1b8 0f00 	cmp.w	r8, #0
 8109bc0:	d06a      	beq.n	8109c98 <forward_dense_integer_SSSA+0x178>
 8109bc2:	8877      	ldrh	r7, [r6, #2]
 8109bc4:	2f00      	cmp	r7, #0
 8109bc6:	d043      	beq.n	8109c50 <forward_dense_integer_SSSA+0x130>
 8109bc8:	f8d8 1000 	ldr.w	r1, [r8]
 8109bcc:	6880      	ldr	r0, [r0, #8]
 8109bce:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109bd2:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109bd6:	edd1 0a00 	vldr	s1, [r1]
 8109bda:	2a00      	cmp	r2, #0
 8109bdc:	d043      	beq.n	8109c66 <forward_dense_integer_SSSA+0x146>
 8109bde:	886d      	ldrh	r5, [r5, #2]
 8109be0:	2d00      	cmp	r5, #0
 8109be2:	d064      	beq.n	8109cae <forward_dense_integer_SSSA+0x18e>
 8109be4:	6852      	ldr	r2, [r2, #4]
 8109be6:	f992 5000 	ldrsb.w	r5, [r2]
 8109bea:	2e00      	cmp	r6, #0
 8109bec:	d063      	beq.n	8109cb6 <forward_dense_integer_SSSA+0x196>
 8109bee:	f1b8 0f00 	cmp.w	r8, #0
 8109bf2:	d060      	beq.n	8109cb6 <forward_dense_integer_SSSA+0x196>
 8109bf4:	8877      	ldrh	r7, [r6, #2]
 8109bf6:	b11f      	cbz	r7, 8109c00 <forward_dense_integer_SSSA+0xe0>
 8109bf8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8109bfc:	f992 7000 	ldrsb.w	r7, [r2]
 8109c00:	2b00      	cmp	r3, #0
 8109c02:	f000 809c 	beq.w	8109d3e <forward_dense_integer_SSSA+0x21e>
 8109c06:	685b      	ldr	r3, [r3, #4]
 8109c08:	2b00      	cmp	r3, #0
 8109c0a:	f000 8098 	beq.w	8109d3e <forward_dense_integer_SSSA+0x21e>
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	ed93 1a00 	vldr	s2, [r3]
 8109c14:	9b07      	ldr	r3, [sp, #28]
 8109c16:	f8cd b00c 	str.w	fp, [sp, #12]
 8109c1a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8109c1e:	e9cd a404 	strd	sl, r4, [sp, #16]
 8109c22:	9500      	str	r5, [sp, #0]
 8109c24:	4673      	mov	r3, lr
 8109c26:	4662      	mov	r2, ip
 8109c28:	4649      	mov	r1, r9
 8109c2a:	f000 feb7 	bl	810a99c <forward_lite_dense_is8os8ws8>
 8109c2e:	b009      	add	sp, #36	; 0x24
 8109c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c34:	684b      	ldr	r3, [r1, #4]
 8109c36:	deff      	udf	#255	; 0xff
 8109c38:	2e00      	cmp	r6, #0
 8109c3a:	d045      	beq.n	8109cc8 <forward_dense_integer_SSSA+0x1a8>
 8109c3c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8109c40:	f1b8 0f00 	cmp.w	r8, #0
 8109c44:	d04c      	beq.n	8109ce0 <forward_dense_integer_SSSA+0x1c0>
 8109c46:	8877      	ldrh	r7, [r6, #2]
 8109c48:	2f00      	cmp	r7, #0
 8109c4a:	d15f      	bne.n	8109d0c <forward_dense_integer_SSSA+0x1ec>
 8109c4c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109c50:	6880      	ldr	r0, [r0, #8]
 8109c52:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109c56:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109c5a:	b38d      	cbz	r5, 8109cc0 <forward_dense_integer_SSSA+0x1a0>
 8109c5c:	686a      	ldr	r2, [r5, #4]
 8109c5e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109c62:	2a00      	cmp	r2, #0
 8109c64:	d1bb      	bne.n	8109bde <forward_dense_integer_SSSA+0xbe>
 8109c66:	4615      	mov	r5, r2
 8109c68:	e7c5      	b.n	8109bf6 <forward_dense_integer_SSSA+0xd6>
 8109c6a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109c6e:	2e00      	cmp	r6, #0
 8109c70:	d1a2      	bne.n	8109bb8 <forward_dense_integer_SSSA+0x98>
 8109c72:	6880      	ldr	r0, [r0, #8]
 8109c74:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109c78:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109c7c:	2f00      	cmp	r7, #0
 8109c7e:	d151      	bne.n	8109d24 <forward_dense_integer_SSSA+0x204>
 8109c80:	eddf 0a35 	vldr	s1, [pc, #212]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109c84:	463d      	mov	r5, r7
 8109c86:	e7bb      	b.n	8109c00 <forward_dense_integer_SSSA+0xe0>
 8109c88:	b1f6      	cbz	r6, 8109cc8 <forward_dense_integer_SSSA+0x1a8>
 8109c8a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8109c8e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109c92:	f1b8 0f00 	cmp.w	r8, #0
 8109c96:	d194      	bne.n	8109bc2 <forward_dense_integer_SSSA+0xa2>
 8109c98:	6880      	ldr	r0, [r0, #8]
 8109c9a:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109c9e:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109ca2:	b162      	cbz	r2, 8109cbe <forward_dense_integer_SSSA+0x19e>
 8109ca4:	886d      	ldrh	r5, [r5, #2]
 8109ca6:	2d00      	cmp	r5, #0
 8109ca8:	d143      	bne.n	8109d32 <forward_dense_integer_SSSA+0x212>
 8109caa:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109cae:	2500      	movs	r5, #0
 8109cb0:	f1b8 0f00 	cmp.w	r8, #0
 8109cb4:	d19e      	bne.n	8109bf4 <forward_dense_integer_SSSA+0xd4>
 8109cb6:	2700      	movs	r7, #0
 8109cb8:	e7a2      	b.n	8109c00 <forward_dense_integer_SSSA+0xe0>
 8109cba:	462f      	mov	r7, r5
 8109cbc:	e74f      	b.n	8109b5e <forward_dense_integer_SSSA+0x3e>
 8109cbe:	4615      	mov	r5, r2
 8109cc0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109cc4:	462f      	mov	r7, r5
 8109cc6:	e79b      	b.n	8109c00 <forward_dense_integer_SSSA+0xe0>
 8109cc8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109ccc:	4635      	mov	r5, r6
 8109cce:	6880      	ldr	r0, [r0, #8]
 8109cd0:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109cd4:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109cd8:	eef0 0a40 	vmov.f32	s1, s0
 8109cdc:	462f      	mov	r7, r5
 8109cde:	e78f      	b.n	8109c00 <forward_dense_integer_SSSA+0xe0>
 8109ce0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109ce4:	4645      	mov	r5, r8
 8109ce6:	e7f2      	b.n	8109cce <forward_dense_integer_SSSA+0x1ae>
 8109ce8:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8109cec:	68d1      	ldr	r1, [r2, #12]
 8109cee:	68dd      	ldr	r5, [r3, #12]
 8109cf0:	8889      	ldrh	r1, [r1, #4]
 8109cf2:	9107      	str	r1, [sp, #28]
 8109cf4:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
 8109cf8:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8109cfc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8109d00:	fb00 fa01 	mul.w	sl, r0, r1
 8109d04:	6998      	ldr	r0, [r3, #24]
 8109d06:	e745      	b.n	8109b94 <forward_dense_integer_SSSA+0x74>
 8109d08:	2500      	movs	r5, #0
 8109d0a:	e728      	b.n	8109b5e <forward_dense_integer_SSSA+0x3e>
 8109d0c:	f8d8 2000 	ldr.w	r2, [r8]
 8109d10:	6880      	ldr	r0, [r0, #8]
 8109d12:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8109d16:	f8dc c008 	ldr.w	ip, [ip, #8]
 8109d1a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109d1e:	edd2 0a00 	vldr	s1, [r2]
 8109d22:	e769      	b.n	8109bf8 <forward_dense_integer_SSSA+0xd8>
 8109d24:	6852      	ldr	r2, [r2, #4]
 8109d26:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109d2a:	f992 5000 	ldrsb.w	r5, [r2]
 8109d2e:	4637      	mov	r7, r6
 8109d30:	e766      	b.n	8109c00 <forward_dense_integer_SSSA+0xe0>
 8109d32:	6852      	ldr	r2, [r2, #4]
 8109d34:	eddf 0a08 	vldr	s1, [pc, #32]	; 8109d58 <forward_dense_integer_SSSA+0x238>
 8109d38:	f992 5000 	ldrsb.w	r5, [r2]
 8109d3c:	e7bb      	b.n	8109cb6 <forward_dense_integer_SSSA+0x196>
 8109d3e:	2300      	movs	r3, #0
 8109d40:	681b      	ldr	r3, [r3, #0]
 8109d42:	deff      	udf	#255	; 0xff
 8109d44:	2300      	movs	r3, #0
 8109d46:	685b      	ldr	r3, [r3, #4]
 8109d48:	deff      	udf	#255	; 0xff
 8109d4a:	2300      	movs	r3, #0
 8109d4c:	685b      	ldr	r3, [r3, #4]
 8109d4e:	deff      	udf	#255	; 0xff
 8109d50:	2300      	movs	r3, #0
 8109d52:	685b      	ldr	r3, [r3, #4]
 8109d54:	deff      	udf	#255	; 0xff
 8109d56:	bf00      	nop
 8109d58:	00000000 	.word	0x00000000

08109d5c <forward_dw_3x3_sssa8_ch>:
 8109d5c:	6982      	ldr	r2, [r0, #24]
 8109d5e:	8813      	ldrh	r3, [r2, #0]
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	f000 80a6 	beq.w	8109eb2 <forward_dw_3x3_sssa8_ch+0x156>
 8109d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109d6a:	6854      	ldr	r4, [r2, #4]
 8109d6c:	6861      	ldr	r1, [r4, #4]
 8109d6e:	b099      	sub	sp, #100	; 0x64
 8109d70:	b101      	cbz	r1, 8109d74 <forward_dw_3x3_sssa8_ch+0x18>
 8109d72:	6809      	ldr	r1, [r1, #0]
 8109d74:	2b01      	cmp	r3, #1
 8109d76:	f000 80b5 	beq.w	8109ee4 <forward_dw_3x3_sssa8_ch+0x188>
 8109d7a:	6922      	ldr	r2, [r4, #16]
 8109d7c:	b102      	cbz	r2, 8109d80 <forward_dw_3x3_sssa8_ch+0x24>
 8109d7e:	6812      	ldr	r2, [r2, #0]
 8109d80:	2b02      	cmp	r3, #2
 8109d82:	f000 80aa 	beq.w	8109eda <forward_dw_3x3_sssa8_ch+0x17e>
 8109d86:	69e5      	ldr	r5, [r4, #28]
 8109d88:	2d00      	cmp	r5, #0
 8109d8a:	f000 809e 	beq.w	8109eca <forward_dw_3x3_sssa8_ch+0x16e>
 8109d8e:	8b26      	ldrh	r6, [r4, #24]
 8109d90:	682f      	ldr	r7, [r5, #0]
 8109d92:	2e01      	cmp	r6, #1
 8109d94:	f240 809b 	bls.w	8109ece <forward_dw_3x3_sssa8_ch+0x172>
 8109d98:	686d      	ldr	r5, [r5, #4]
 8109d9a:	2b03      	cmp	r3, #3
 8109d9c:	f000 80a5 	beq.w	8109eea <forward_dw_3x3_sssa8_ch+0x18e>
 8109da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8109da2:	2b00      	cmp	r3, #0
 8109da4:	f000 8095 	beq.w	8109ed2 <forward_dw_3x3_sssa8_ch+0x176>
 8109da8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8109daa:	b104      	cbz	r4, 8109dae <forward_dw_3x3_sssa8_ch+0x52>
 8109dac:	685a      	ldr	r2, [r3, #4]
 8109dae:	681c      	ldr	r4, [r3, #0]
 8109db0:	68d6      	ldr	r6, [r2, #12]
 8109db2:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8109db6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8109dba:	68f4      	ldr	r4, [r6, #12]
 8109dbc:	9412      	str	r4, [sp, #72]	; 0x48
 8109dbe:	e9de 4a02 	ldrd	r4, sl, [lr, #8]
 8109dc2:	69ab      	ldr	r3, [r5, #24]
 8109dc4:	9413      	str	r4, [sp, #76]	; 0x4c
 8109dc6:	680d      	ldr	r5, [r1, #0]
 8109dc8:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8109dca:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8109dcc:	689b      	ldr	r3, [r3, #8]
 8109dce:	9015      	str	r0, [sp, #84]	; 0x54
 8109dd0:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8109dd4:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8109dd8:	9316      	str	r3, [sp, #88]	; 0x58
 8109dda:	9414      	str	r4, [sp, #80]	; 0x50
 8109ddc:	f8be 3004 	ldrh.w	r3, [lr, #4]
 8109de0:	6814      	ldr	r4, [r2, #0]
 8109de2:	683e      	ldr	r6, [r7, #0]
 8109de4:	9017      	str	r0, [sp, #92]	; 0x5c
 8109de6:	2d00      	cmp	r5, #0
 8109de8:	d068      	beq.n	8109ebc <forward_dw_3x3_sssa8_ch+0x160>
 8109dea:	6868      	ldr	r0, [r5, #4]
 8109dec:	2800      	cmp	r0, #0
 8109dee:	d065      	beq.n	8109ebc <forward_dw_3x3_sssa8_ch+0x160>
 8109df0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 8109df4:	f1be 0f00 	cmp.w	lr, #0
 8109df8:	d060      	beq.n	8109ebc <forward_dw_3x3_sssa8_ch+0x160>
 8109dfa:	6800      	ldr	r0, [r0, #0]
 8109dfc:	ed90 0a00 	vldr	s0, [r0]
 8109e00:	2c00      	cmp	r4, #0
 8109e02:	d058      	beq.n	8109eb6 <forward_dw_3x3_sssa8_ch+0x15a>
 8109e04:	6860      	ldr	r0, [r4, #4]
 8109e06:	2800      	cmp	r0, #0
 8109e08:	d055      	beq.n	8109eb6 <forward_dw_3x3_sssa8_ch+0x15a>
 8109e0a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8109e0e:	f1be 0f00 	cmp.w	lr, #0
 8109e12:	d050      	beq.n	8109eb6 <forward_dw_3x3_sssa8_ch+0x15a>
 8109e14:	6800      	ldr	r0, [r0, #0]
 8109e16:	edd0 0a00 	vldr	s1, [r0]
 8109e1a:	6988      	ldr	r0, [r1, #24]
 8109e1c:	6992      	ldr	r2, [r2, #24]
 8109e1e:	69b9      	ldr	r1, [r7, #24]
 8109e20:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8109e24:	6887      	ldr	r7, [r0, #8]
 8109e26:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8109e2a:	b116      	cbz	r6, 8109e32 <forward_dw_3x3_sssa8_ch+0xd6>
 8109e2c:	6876      	ldr	r6, [r6, #4]
 8109e2e:	b106      	cbz	r6, 8109e32 <forward_dw_3x3_sssa8_ch+0xd6>
 8109e30:	6836      	ldr	r6, [r6, #0]
 8109e32:	b13d      	cbz	r5, 8109e44 <forward_dw_3x3_sssa8_ch+0xe8>
 8109e34:	6869      	ldr	r1, [r5, #4]
 8109e36:	2900      	cmp	r1, #0
 8109e38:	d043      	beq.n	8109ec2 <forward_dw_3x3_sssa8_ch+0x166>
 8109e3a:	886d      	ldrh	r5, [r5, #2]
 8109e3c:	b115      	cbz	r5, 8109e44 <forward_dw_3x3_sssa8_ch+0xe8>
 8109e3e:	6849      	ldr	r1, [r1, #4]
 8109e40:	f991 5000 	ldrsb.w	r5, [r1]
 8109e44:	b13c      	cbz	r4, 8109e56 <forward_dw_3x3_sssa8_ch+0xfa>
 8109e46:	6861      	ldr	r1, [r4, #4]
 8109e48:	2900      	cmp	r1, #0
 8109e4a:	d03c      	beq.n	8109ec6 <forward_dw_3x3_sssa8_ch+0x16a>
 8109e4c:	8864      	ldrh	r4, [r4, #2]
 8109e4e:	b114      	cbz	r4, 8109e56 <forward_dw_3x3_sssa8_ch+0xfa>
 8109e50:	6849      	ldr	r1, [r1, #4]
 8109e52:	f991 4000 	ldrsb.w	r4, [r1]
 8109e56:	9311      	str	r3, [sp, #68]	; 0x44
 8109e58:	e9dc 0100 	ldrd	r0, r1, [ip]
 8109e5c:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 8109e60:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 8109e64:	f005 fa96 	bl	810f394 <ai_array_get_byte_size>
 8109e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109e6a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8109e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8109e70:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
 8109e74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8109e76:	9303      	str	r3, [sp, #12]
 8109e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e7a:	9302      	str	r3, [sp, #8]
 8109e7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109e7e:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
 8109e82:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 8109e86:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8109e8a:	fa1f f28b 	uxth.w	r2, fp
 8109e8e:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8109e92:	e9cd 8300 	strd	r8, r3, [sp]
 8109e96:	9208      	str	r2, [sp, #32]
 8109e98:	e9cd 6906 	strd	r6, r9, [sp, #24]
 8109e9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109e9e:	fa1f f28a 	uxth.w	r2, sl
 8109ea2:	4638      	mov	r0, r7
 8109ea4:	2400      	movs	r4, #0
 8109ea6:	940a      	str	r4, [sp, #40]	; 0x28
 8109ea8:	f000 ff98 	bl	810addc <forward_lite_dw_3x3_sssa8_ch>
 8109eac:	b019      	add	sp, #100	; 0x64
 8109eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109eb2:	685b      	ldr	r3, [r3, #4]
 8109eb4:	deff      	udf	#255	; 0xff
 8109eb6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8109ef0 <forward_dw_3x3_sssa8_ch+0x194>
 8109eba:	e7ae      	b.n	8109e1a <forward_dw_3x3_sssa8_ch+0xbe>
 8109ebc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8109ef0 <forward_dw_3x3_sssa8_ch+0x194>
 8109ec0:	e79e      	b.n	8109e00 <forward_dw_3x3_sssa8_ch+0xa4>
 8109ec2:	460d      	mov	r5, r1
 8109ec4:	e7be      	b.n	8109e44 <forward_dw_3x3_sssa8_ch+0xe8>
 8109ec6:	460c      	mov	r4, r1
 8109ec8:	e7c5      	b.n	8109e56 <forward_dw_3x3_sssa8_ch+0xfa>
 8109eca:	462f      	mov	r7, r5
 8109ecc:	e765      	b.n	8109d9a <forward_dw_3x3_sssa8_ch+0x3e>
 8109ece:	2500      	movs	r5, #0
 8109ed0:	e763      	b.n	8109d9a <forward_dw_3x3_sssa8_ch+0x3e>
 8109ed2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8109ed4:	b922      	cbnz	r2, 8109ee0 <forward_dw_3x3_sssa8_ch+0x184>
 8109ed6:	6993      	ldr	r3, [r2, #24]
 8109ed8:	deff      	udf	#255	; 0xff
 8109eda:	2300      	movs	r3, #0
 8109edc:	685b      	ldr	r3, [r3, #4]
 8109ede:	deff      	udf	#255	; 0xff
 8109ee0:	68db      	ldr	r3, [r3, #12]
 8109ee2:	deff      	udf	#255	; 0xff
 8109ee4:	2300      	movs	r3, #0
 8109ee6:	685b      	ldr	r3, [r3, #4]
 8109ee8:	deff      	udf	#255	; 0xff
 8109eea:	2300      	movs	r3, #0
 8109eec:	685b      	ldr	r3, [r3, #4]
 8109eee:	deff      	udf	#255	; 0xff
 8109ef0:	00000000 	.word	0x00000000

08109ef4 <forward_pad>:
 8109ef4:	7f03      	ldrb	r3, [r0, #28]
 8109ef6:	2b03      	cmp	r3, #3
 8109ef8:	d80b      	bhi.n	8109f12 <forward_pad+0x1e>
 8109efa:	e8df f003 	tbb	[pc, r3]
 8109efe:	0608      	.short	0x0608
 8109f00:	0204      	.short	0x0204
 8109f02:	f000 b85f 	b.w	8109fc4 <forward_pad_8bit_ch1st_3x3_constant>
 8109f06:	f000 b8ed 	b.w	810a0e4 <forward_pad_edge>
 8109f0a:	f000 b92d 	b.w	810a168 <forward_pad_reflect>
 8109f0e:	f000 b8a1 	b.w	810a054 <forward_pad_constant>
 8109f12:	4770      	bx	lr

08109f14 <forward_nl_integer>:
 8109f14:	6982      	ldr	r2, [r0, #24]
 8109f16:	8813      	ldrh	r3, [r2, #0]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	d02f      	beq.n	8109f7c <forward_nl_integer+0x68>
 8109f1c:	b470      	push	{r4, r5, r6}
 8109f1e:	6852      	ldr	r2, [r2, #4]
 8109f20:	6855      	ldr	r5, [r2, #4]
 8109f22:	b105      	cbz	r5, 8109f26 <forward_nl_integer+0x12>
 8109f24:	682d      	ldr	r5, [r5, #0]
 8109f26:	2b01      	cmp	r3, #1
 8109f28:	d048      	beq.n	8109fbc <forward_nl_integer+0xa8>
 8109f2a:	6916      	ldr	r6, [r2, #16]
 8109f2c:	b106      	cbz	r6, 8109f30 <forward_nl_integer+0x1c>
 8109f2e:	6836      	ldr	r6, [r6, #0]
 8109f30:	68ab      	ldr	r3, [r5, #8]
 8109f32:	0a1b      	lsrs	r3, r3, #8
 8109f34:	d033      	beq.n	8109f9e <forward_nl_integer+0x8a>
 8109f36:	68ec      	ldr	r4, [r5, #12]
 8109f38:	2201      	movs	r2, #1
 8109f3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8109f3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109f42:	429c      	cmp	r4, r3
 8109f44:	fb01 f202 	mul.w	r2, r1, r2
 8109f48:	d1f9      	bne.n	8109f3e <forward_nl_integer+0x2a>
 8109f4a:	69ab      	ldr	r3, [r5, #24]
 8109f4c:	69c0      	ldr	r0, [r0, #28]
 8109f4e:	6819      	ldr	r1, [r3, #0]
 8109f50:	6884      	ldr	r4, [r0, #8]
 8109f52:	69b0      	ldr	r0, [r6, #24]
 8109f54:	020d      	lsls	r5, r1, #8
 8109f56:	d513      	bpl.n	8109f80 <forward_nl_integer+0x6c>
 8109f58:	689e      	ldr	r6, [r3, #8]
 8109f5a:	6885      	ldr	r5, [r0, #8]
 8109f5c:	b162      	cbz	r2, 8109f78 <forward_nl_integer+0x64>
 8109f5e:	1e70      	subs	r0, r6, #1
 8109f60:	4603      	mov	r3, r0
 8109f62:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8109f66:	3302      	adds	r3, #2
 8109f68:	f081 0180 	eor.w	r1, r1, #128	; 0x80
 8109f6c:	1b9b      	subs	r3, r3, r6
 8109f6e:	5c61      	ldrb	r1, [r4, r1]
 8109f70:	f805 1b01 	strb.w	r1, [r5], #1
 8109f74:	429a      	cmp	r2, r3
 8109f76:	d8f3      	bhi.n	8109f60 <forward_nl_integer+0x4c>
 8109f78:	bc70      	pop	{r4, r5, r6}
 8109f7a:	4770      	bx	lr
 8109f7c:	685b      	ldr	r3, [r3, #4]
 8109f7e:	deff      	udf	#255	; 0xff
 8109f80:	6899      	ldr	r1, [r3, #8]
 8109f82:	6883      	ldr	r3, [r0, #8]
 8109f84:	2a00      	cmp	r2, #0
 8109f86:	d0f7      	beq.n	8109f78 <forward_nl_integer+0x64>
 8109f88:	3901      	subs	r1, #1
 8109f8a:	441a      	add	r2, r3
 8109f8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8109f90:	5c20      	ldrb	r0, [r4, r0]
 8109f92:	f803 0b01 	strb.w	r0, [r3], #1
 8109f96:	4293      	cmp	r3, r2
 8109f98:	d1f8      	bne.n	8109f8c <forward_nl_integer+0x78>
 8109f9a:	bc70      	pop	{r4, r5, r6}
 8109f9c:	4770      	bx	lr
 8109f9e:	69ab      	ldr	r3, [r5, #24]
 8109fa0:	69c2      	ldr	r2, [r0, #28]
 8109fa2:	6819      	ldr	r1, [r3, #0]
 8109fa4:	6894      	ldr	r4, [r2, #8]
 8109fa6:	69b2      	ldr	r2, [r6, #24]
 8109fa8:	0209      	lsls	r1, r1, #8
 8109faa:	d503      	bpl.n	8109fb4 <forward_nl_integer+0xa0>
 8109fac:	6895      	ldr	r5, [r2, #8]
 8109fae:	689e      	ldr	r6, [r3, #8]
 8109fb0:	2201      	movs	r2, #1
 8109fb2:	e7d4      	b.n	8109f5e <forward_nl_integer+0x4a>
 8109fb4:	6899      	ldr	r1, [r3, #8]
 8109fb6:	6893      	ldr	r3, [r2, #8]
 8109fb8:	2201      	movs	r2, #1
 8109fba:	e7e5      	b.n	8109f88 <forward_nl_integer+0x74>
 8109fbc:	2300      	movs	r3, #0
 8109fbe:	685b      	ldr	r3, [r3, #4]
 8109fc0:	deff      	udf	#255	; 0xff
 8109fc2:	bf00      	nop

08109fc4 <forward_pad_8bit_ch1st_3x3_constant>:
 8109fc4:	6982      	ldr	r2, [r0, #24]
 8109fc6:	8813      	ldrh	r3, [r2, #0]
 8109fc8:	b36b      	cbz	r3, 810a026 <forward_pad_8bit_ch1st_3x3_constant+0x62>
 8109fca:	6852      	ldr	r2, [r2, #4]
 8109fcc:	6851      	ldr	r1, [r2, #4]
 8109fce:	b101      	cbz	r1, 8109fd2 <forward_pad_8bit_ch1st_3x3_constant+0xe>
 8109fd0:	6809      	ldr	r1, [r1, #0]
 8109fd2:	2b01      	cmp	r3, #1
 8109fd4:	d03b      	beq.n	810a04e <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8109fd6:	6913      	ldr	r3, [r2, #16]
 8109fd8:	2b00      	cmp	r3, #0
 8109fda:	d036      	beq.n	810a04a <forward_pad_8bit_ch1st_3x3_constant+0x86>
 8109fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109fe0:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	; 0x24
 8109fe4:	e9d5 0400 	ldrd	r0, r4, [r5]
 8109fe8:	681f      	ldr	r7, [r3, #0]
 8109fea:	68cb      	ldr	r3, [r1, #12]
 8109fec:	6892      	ldr	r2, [r2, #8]
 8109fee:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8109ff2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8109ff6:	68db      	ldr	r3, [r3, #12]
 8109ff8:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 8109ffc:	4320      	orrs	r0, r4
 8109ffe:	b204      	sxth	r4, r0
 810a000:	6888      	ldr	r0, [r1, #8]
 810a002:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 810a006:	b084      	sub	sp, #16
 810a008:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 810a00c:	6889      	ldr	r1, [r1, #8]
 810a00e:	68f7      	ldr	r7, [r6, #12]
 810a010:	6876      	ldr	r6, [r6, #4]
 810a012:	b154      	cbz	r4, 810a02a <forward_pad_8bit_ch1st_3x3_constant+0x66>
 810a014:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 810a018:	e9cd c600 	strd	ip, r6, [sp]
 810a01c:	f002 f8cc 	bl	810c1b8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 810a020:	b004      	add	sp, #16
 810a022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a026:	685b      	ldr	r3, [r3, #4]
 810a028:	deff      	udf	#255	; 0xff
 810a02a:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 810a02e:	2c02      	cmp	r4, #2
 810a030:	d1f0      	bne.n	810a014 <forward_pad_8bit_ch1st_3x3_constant+0x50>
 810a032:	fa0f f888 	sxth.w	r8, r8
 810a036:	f1b8 0f02 	cmp.w	r8, #2
 810a03a:	d1eb      	bne.n	810a014 <forward_pad_8bit_ch1st_3x3_constant+0x50>
 810a03c:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 810a040:	e9cd c600 	strd	ip, r6, [sp]
 810a044:	f002 f884 	bl	810c150 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 810a048:	e7ea      	b.n	810a020 <forward_pad_8bit_ch1st_3x3_constant+0x5c>
 810a04a:	699b      	ldr	r3, [r3, #24]
 810a04c:	deff      	udf	#255	; 0xff
 810a04e:	2300      	movs	r3, #0
 810a050:	685b      	ldr	r3, [r3, #4]
 810a052:	deff      	udf	#255	; 0xff

0810a054 <forward_pad_constant>:
 810a054:	6982      	ldr	r2, [r0, #24]
 810a056:	8813      	ldrh	r3, [r2, #0]
 810a058:	2b00      	cmp	r3, #0
 810a05a:	d03b      	beq.n	810a0d4 <forward_pad_constant+0x80>
 810a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a060:	6852      	ldr	r2, [r2, #4]
 810a062:	6854      	ldr	r4, [r2, #4]
 810a064:	b088      	sub	sp, #32
 810a066:	b104      	cbz	r4, 810a06a <forward_pad_constant+0x16>
 810a068:	6824      	ldr	r4, [r4, #0]
 810a06a:	2b01      	cmp	r3, #1
 810a06c:	d034      	beq.n	810a0d8 <forward_pad_constant+0x84>
 810a06e:	6913      	ldr	r3, [r2, #16]
 810a070:	2b00      	cmp	r3, #0
 810a072:	d034      	beq.n	810a0de <forward_pad_constant+0x8a>
 810a074:	6819      	ldr	r1, [r3, #0]
 810a076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a078:	6a82      	ldr	r2, [r0, #40]	; 0x28
 810a07a:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 810a07e:	69a3      	ldr	r3, [r4, #24]
 810a080:	6967      	ldr	r7, [r4, #20]
 810a082:	f8d3 8000 	ldr.w	r8, [r3]
 810a086:	6892      	ldr	r2, [r2, #8]
 810a088:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 810a08c:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 810a090:	fb0e f606 	mul.w	r6, lr, r6
 810a094:	6898      	ldr	r0, [r3, #8]
 810a096:	6889      	ldr	r1, [r1, #8]
 810a098:	9606      	str	r6, [sp, #24]
 810a09a:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 810a09e:	fb0e f606 	mul.w	r6, lr, r6
 810a0a2:	9605      	str	r6, [sp, #20]
 810a0a4:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 810a0a8:	fb0c f606 	mul.w	r6, ip, r6
 810a0ac:	9604      	str	r6, [sp, #16]
 810a0ae:	f9b5 5000 	ldrsh.w	r5, [r5]
 810a0b2:	fb0c f505 	mul.w	r5, ip, r5
 810a0b6:	9503      	str	r5, [sp, #12]
 810a0b8:	68fd      	ldr	r5, [r7, #12]
 810a0ba:	9502      	str	r5, [sp, #8]
 810a0bc:	687d      	ldr	r5, [r7, #4]
 810a0be:	9501      	str	r5, [sp, #4]
 810a0c0:	68e4      	ldr	r4, [r4, #12]
 810a0c2:	68e4      	ldr	r4, [r4, #12]
 810a0c4:	9400      	str	r4, [sp, #0]
 810a0c6:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 810a0ca:	f002 f92d 	bl	810c328 <forward_lite_pad_constant>
 810a0ce:	b008      	add	sp, #32
 810a0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a0d4:	685b      	ldr	r3, [r3, #4]
 810a0d6:	deff      	udf	#255	; 0xff
 810a0d8:	2300      	movs	r3, #0
 810a0da:	685b      	ldr	r3, [r3, #4]
 810a0dc:	deff      	udf	#255	; 0xff
 810a0de:	699b      	ldr	r3, [r3, #24]
 810a0e0:	deff      	udf	#255	; 0xff
 810a0e2:	bf00      	nop

0810a0e4 <forward_pad_edge>:
 810a0e4:	6982      	ldr	r2, [r0, #24]
 810a0e6:	8813      	ldrh	r3, [r2, #0]
 810a0e8:	2b00      	cmp	r3, #0
 810a0ea:	d035      	beq.n	810a158 <forward_pad_edge+0x74>
 810a0ec:	6851      	ldr	r1, [r2, #4]
 810a0ee:	684a      	ldr	r2, [r1, #4]
 810a0f0:	b102      	cbz	r2, 810a0f4 <forward_pad_edge+0x10>
 810a0f2:	6812      	ldr	r2, [r2, #0]
 810a0f4:	2b01      	cmp	r3, #1
 810a0f6:	d031      	beq.n	810a15c <forward_pad_edge+0x78>
 810a0f8:	690b      	ldr	r3, [r1, #16]
 810a0fa:	2b00      	cmp	r3, #0
 810a0fc:	d031      	beq.n	810a162 <forward_pad_edge+0x7e>
 810a0fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 810a100:	681b      	ldr	r3, [r3, #0]
 810a102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a104:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 810a108:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 810a10c:	6990      	ldr	r0, [r2, #24]
 810a10e:	6957      	ldr	r7, [r2, #20]
 810a110:	6880      	ldr	r0, [r0, #8]
 810a112:	f8de 200c 	ldr.w	r2, [lr, #12]
 810a116:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 810a11a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 810a11e:	f9b5 3000 	ldrsh.w	r3, [r5]
 810a122:	6889      	ldr	r1, [r1, #8]
 810a124:	b089      	sub	sp, #36	; 0x24
 810a126:	fb04 f606 	mul.w	r6, r4, r6
 810a12a:	9606      	str	r6, [sp, #24]
 810a12c:	f8dc c008 	ldr.w	ip, [ip, #8]
 810a130:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 810a134:	9403      	str	r4, [sp, #12]
 810a136:	fb0c f606 	mul.w	r6, ip, r6
 810a13a:	fb03 f404 	mul.w	r4, r3, r4
 810a13e:	9605      	str	r6, [sp, #20]
 810a140:	9404      	str	r4, [sp, #16]
 810a142:	68bc      	ldr	r4, [r7, #8]
 810a144:	9402      	str	r4, [sp, #8]
 810a146:	68fc      	ldr	r4, [r7, #12]
 810a148:	9401      	str	r4, [sp, #4]
 810a14a:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 810a14e:	9400      	str	r4, [sp, #0]
 810a150:	f002 f988 	bl	810c464 <forward_lite_pad_edge>
 810a154:	b009      	add	sp, #36	; 0x24
 810a156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a158:	685b      	ldr	r3, [r3, #4]
 810a15a:	deff      	udf	#255	; 0xff
 810a15c:	2300      	movs	r3, #0
 810a15e:	685b      	ldr	r3, [r3, #4]
 810a160:	deff      	udf	#255	; 0xff
 810a162:	699b      	ldr	r3, [r3, #24]
 810a164:	deff      	udf	#255	; 0xff
 810a166:	bf00      	nop

0810a168 <forward_pad_reflect>:
 810a168:	6982      	ldr	r2, [r0, #24]
 810a16a:	8813      	ldrh	r3, [r2, #0]
 810a16c:	2b00      	cmp	r3, #0
 810a16e:	d045      	beq.n	810a1fc <forward_pad_reflect+0x94>
 810a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a174:	6852      	ldr	r2, [r2, #4]
 810a176:	6857      	ldr	r7, [r2, #4]
 810a178:	b08f      	sub	sp, #60	; 0x3c
 810a17a:	b107      	cbz	r7, 810a17e <forward_pad_reflect+0x16>
 810a17c:	683f      	ldr	r7, [r7, #0]
 810a17e:	2b01      	cmp	r3, #1
 810a180:	d03e      	beq.n	810a200 <forward_pad_reflect+0x98>
 810a182:	6913      	ldr	r3, [r2, #16]
 810a184:	2b00      	cmp	r3, #0
 810a186:	d03e      	beq.n	810a206 <forward_pad_reflect+0x9e>
 810a188:	6819      	ldr	r1, [r3, #0]
 810a18a:	68fa      	ldr	r2, [r7, #12]
 810a18c:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 810a190:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 810a194:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 810a198:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810a19a:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 810a19e:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 810a1a2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 810a1a6:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 810a1aa:	f9b4 b000 	ldrsh.w	fp, [r4]
 810a1ae:	6889      	ldr	r1, [r1, #8]
 810a1b0:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 810a1b4:	fb05 f606 	mul.w	r6, r5, r6
 810a1b8:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 810a1bc:	6880      	ldr	r0, [r0, #8]
 810a1be:	bf28      	it	cs
 810a1c0:	6912      	ldrcs	r2, [r2, #16]
 810a1c2:	960c      	str	r6, [sp, #48]	; 0x30
 810a1c4:	fb05 f60e 	mul.w	r6, r5, lr
 810a1c8:	960b      	str	r6, [sp, #44]	; 0x2c
 810a1ca:	fb0c f60b 	mul.w	r6, ip, fp
 810a1ce:	960a      	str	r6, [sp, #40]	; 0x28
 810a1d0:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 810a1d4:	f8cd c014 	str.w	ip, [sp, #20]
 810a1d8:	e9cd 5e06 	strd	r5, lr, [sp, #24]
 810a1dc:	e9cd b408 	strd	fp, r4, [sp, #32]
 810a1e0:	68bc      	ldr	r4, [r7, #8]
 810a1e2:	9404      	str	r4, [sp, #16]
 810a1e4:	68fc      	ldr	r4, [r7, #12]
 810a1e6:	bf38      	it	cc
 810a1e8:	2201      	movcc	r2, #1
 810a1ea:	e9cd a402 	strd	sl, r4, [sp, #8]
 810a1ee:	e9cd 8900 	strd	r8, r9, [sp]
 810a1f2:	f002 f9ab 	bl	810c54c <forward_lite_pad_reflect>
 810a1f6:	b00f      	add	sp, #60	; 0x3c
 810a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a1fc:	685b      	ldr	r3, [r3, #4]
 810a1fe:	deff      	udf	#255	; 0xff
 810a200:	2300      	movs	r3, #0
 810a202:	685b      	ldr	r3, [r3, #4]
 810a204:	deff      	udf	#255	; 0xff
 810a206:	68db      	ldr	r3, [r3, #12]
 810a208:	deff      	udf	#255	; 0xff
 810a20a:	bf00      	nop

0810a20c <forward_ap_integer_INT8>:
 810a20c:	6983      	ldr	r3, [r0, #24]
 810a20e:	881a      	ldrh	r2, [r3, #0]
 810a210:	2a00      	cmp	r2, #0
 810a212:	d074      	beq.n	810a2fe <forward_ap_integer_INT8+0xf2>
 810a214:	6859      	ldr	r1, [r3, #4]
 810a216:	684b      	ldr	r3, [r1, #4]
 810a218:	b103      	cbz	r3, 810a21c <forward_ap_integer_INT8+0x10>
 810a21a:	681b      	ldr	r3, [r3, #0]
 810a21c:	2a01      	cmp	r2, #1
 810a21e:	f000 80e0 	beq.w	810a3e2 <forward_ap_integer_INT8+0x1d6>
 810a222:	690a      	ldr	r2, [r1, #16]
 810a224:	2a00      	cmp	r2, #0
 810a226:	f000 80df 	beq.w	810a3e8 <forward_ap_integer_INT8+0x1dc>
 810a22a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a22e:	68de      	ldr	r6, [r3, #12]
 810a230:	6811      	ldr	r1, [r2, #0]
 810a232:	6b07      	ldr	r7, [r0, #48]	; 0x30
 810a234:	681c      	ldr	r4, [r3, #0]
 810a236:	f8d3 b018 	ldr.w	fp, [r3, #24]
 810a23a:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 810a23e:	8932      	ldrh	r2, [r6, #8]
 810a240:	89b3      	ldrh	r3, [r6, #12]
 810a242:	8b86      	ldrh	r6, [r0, #28]
 810a244:	68cd      	ldr	r5, [r1, #12]
 810a246:	f8d1 a018 	ldr.w	sl, [r1, #24]
 810a24a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 810a24e:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
 810a252:	b095      	sub	sp, #84	; 0x54
 810a254:	960d      	str	r6, [sp, #52]	; 0x34
 810a256:	8c06      	ldrh	r6, [r0, #32]
 810a258:	960e      	str	r6, [sp, #56]	; 0x38
 810a25a:	88be      	ldrh	r6, [r7, #4]
 810a25c:	960f      	str	r6, [sp, #60]	; 0x3c
 810a25e:	883e      	ldrh	r6, [r7, #0]
 810a260:	9610      	str	r6, [sp, #64]	; 0x40
 810a262:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 810a264:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 810a266:	9611      	str	r6, [sp, #68]	; 0x44
 810a268:	9012      	str	r0, [sp, #72]	; 0x48
 810a26a:	680e      	ldr	r6, [r1, #0]
 810a26c:	2c00      	cmp	r4, #0
 810a26e:	d060      	beq.n	810a332 <forward_ap_integer_INT8+0x126>
 810a270:	f8d4 9004 	ldr.w	r9, [r4, #4]
 810a274:	f1b9 0f00 	cmp.w	r9, #0
 810a278:	d043      	beq.n	810a302 <forward_ap_integer_INT8+0xf6>
 810a27a:	8865      	ldrh	r5, [r4, #2]
 810a27c:	2d00      	cmp	r5, #0
 810a27e:	d06e      	beq.n	810a35e <forward_ap_integer_INT8+0x152>
 810a280:	f8d9 1000 	ldr.w	r1, [r9]
 810a284:	ed91 0a00 	vldr	s0, [r1]
 810a288:	2e00      	cmp	r6, #0
 810a28a:	d06c      	beq.n	810a366 <forward_ap_integer_INT8+0x15a>
 810a28c:	6877      	ldr	r7, [r6, #4]
 810a28e:	2f00      	cmp	r7, #0
 810a290:	d03e      	beq.n	810a310 <forward_ap_integer_INT8+0x104>
 810a292:	8871      	ldrh	r1, [r6, #2]
 810a294:	9113      	str	r1, [sp, #76]	; 0x4c
 810a296:	2900      	cmp	r1, #0
 810a298:	d053      	beq.n	810a342 <forward_ap_integer_INT8+0x136>
 810a29a:	683d      	ldr	r5, [r7, #0]
 810a29c:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a2a0:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a2a4:	edd5 0a00 	vldr	s1, [r5]
 810a2a8:	f1b9 0f00 	cmp.w	r9, #0
 810a2ac:	d055      	beq.n	810a35a <forward_ap_integer_INT8+0x14e>
 810a2ae:	8864      	ldrh	r4, [r4, #2]
 810a2b0:	2c00      	cmp	r4, #0
 810a2b2:	d039      	beq.n	810a328 <forward_ap_integer_INT8+0x11c>
 810a2b4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 810a2b8:	f994 4000 	ldrsb.w	r4, [r4]
 810a2bc:	2e00      	cmp	r6, #0
 810a2be:	d036      	beq.n	810a32e <forward_ap_integer_INT8+0x122>
 810a2c0:	2f00      	cmp	r7, #0
 810a2c2:	d034      	beq.n	810a32e <forward_ap_integer_INT8+0x122>
 810a2c4:	8875      	ldrh	r5, [r6, #2]
 810a2c6:	9513      	str	r5, [sp, #76]	; 0x4c
 810a2c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 810a2ca:	b115      	cbz	r5, 810a2d2 <forward_ap_integer_INT8+0xc6>
 810a2cc:	687d      	ldr	r5, [r7, #4]
 810a2ce:	f995 5000 	ldrsb.w	r5, [r5]
 810a2d2:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 810a2d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 810a2d8:	9406      	str	r4, [sp, #24]
 810a2da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 810a2dc:	9405      	str	r4, [sp, #20]
 810a2de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 810a2e0:	9404      	str	r4, [sp, #16]
 810a2e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 810a2e4:	9403      	str	r4, [sp, #12]
 810a2e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 810a2e8:	9402      	str	r4, [sp, #8]
 810a2ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 810a2ec:	e9cd ce07 	strd	ip, lr, [sp, #28]
 810a2f0:	e9cd 8400 	strd	r8, r4, [sp]
 810a2f4:	f000 fb92 	bl	810aa1c <forward_lite_avepool_is8os8>
 810a2f8:	b015      	add	sp, #84	; 0x54
 810a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a2fe:	6853      	ldr	r3, [r2, #4]
 810a300:	deff      	udf	#255	; 0xff
 810a302:	2e00      	cmp	r6, #0
 810a304:	d039      	beq.n	810a37a <forward_ap_integer_INT8+0x16e>
 810a306:	6877      	ldr	r7, [r6, #4]
 810a308:	ed9f 0a38 	vldr	s0, [pc, #224]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a30c:	2f00      	cmp	r7, #0
 810a30e:	d1c0      	bne.n	810a292 <forward_ap_integer_INT8+0x86>
 810a310:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a314:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a318:	f1b9 0f00 	cmp.w	r9, #0
 810a31c:	d05c      	beq.n	810a3d8 <forward_ap_integer_INT8+0x1cc>
 810a31e:	8864      	ldrh	r4, [r4, #2]
 810a320:	2c00      	cmp	r4, #0
 810a322:	d152      	bne.n	810a3ca <forward_ap_integer_INT8+0x1be>
 810a324:	eddf 0a31 	vldr	s1, [pc, #196]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a328:	2400      	movs	r4, #0
 810a32a:	2f00      	cmp	r7, #0
 810a32c:	d1ca      	bne.n	810a2c4 <forward_ap_integer_INT8+0xb8>
 810a32e:	2500      	movs	r5, #0
 810a330:	e7cf      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a332:	b316      	cbz	r6, 810a37a <forward_ap_integer_INT8+0x16e>
 810a334:	6877      	ldr	r7, [r6, #4]
 810a336:	b35f      	cbz	r7, 810a390 <forward_ap_integer_INT8+0x184>
 810a338:	8871      	ldrh	r1, [r6, #2]
 810a33a:	9113      	str	r1, [sp, #76]	; 0x4c
 810a33c:	bb99      	cbnz	r1, 810a3a6 <forward_ap_integer_INT8+0x19a>
 810a33e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a342:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a346:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a34a:	b194      	cbz	r4, 810a372 <forward_ap_integer_INT8+0x166>
 810a34c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 810a350:	eddf 0a26 	vldr	s1, [pc, #152]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a354:	f1b9 0f00 	cmp.w	r9, #0
 810a358:	d1a9      	bne.n	810a2ae <forward_ap_integer_INT8+0xa2>
 810a35a:	464c      	mov	r4, r9
 810a35c:	e7b4      	b.n	810a2c8 <forward_ap_integer_INT8+0xbc>
 810a35e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a362:	2e00      	cmp	r6, #0
 810a364:	d192      	bne.n	810a28c <forward_ap_integer_INT8+0x80>
 810a366:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a36a:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a36e:	bb25      	cbnz	r5, 810a3ba <forward_ap_integer_INT8+0x1ae>
 810a370:	462c      	mov	r4, r5
 810a372:	eddf 0a1e 	vldr	s1, [pc, #120]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a376:	4625      	mov	r5, r4
 810a378:	e7ab      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a37a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a37e:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a382:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a386:	4634      	mov	r4, r6
 810a388:	eef0 0a40 	vmov.f32	s1, s0
 810a38c:	4635      	mov	r5, r6
 810a38e:	e7a0      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a390:	ed9f 0a16 	vldr	s0, [pc, #88]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a394:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a398:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a39c:	463c      	mov	r4, r7
 810a39e:	eef0 0a40 	vmov.f32	s1, s0
 810a3a2:	463d      	mov	r5, r7
 810a3a4:	e795      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a3a6:	683d      	ldr	r5, [r7, #0]
 810a3a8:	f8db 0008 	ldr.w	r0, [fp, #8]
 810a3ac:	f8da 1008 	ldr.w	r1, [sl, #8]
 810a3b0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a3b4:	edd5 0a00 	vldr	s1, [r5]
 810a3b8:	e788      	b.n	810a2cc <forward_ap_integer_INT8+0xc0>
 810a3ba:	f8d9 4004 	ldr.w	r4, [r9, #4]
 810a3be:	eddf 0a0b 	vldr	s1, [pc, #44]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a3c2:	f994 4000 	ldrsb.w	r4, [r4]
 810a3c6:	4635      	mov	r5, r6
 810a3c8:	e783      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a3ca:	f8d9 4004 	ldr.w	r4, [r9, #4]
 810a3ce:	eddf 0a07 	vldr	s1, [pc, #28]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a3d2:	f994 4000 	ldrsb.w	r4, [r4]
 810a3d6:	e7aa      	b.n	810a32e <forward_ap_integer_INT8+0x122>
 810a3d8:	eddf 0a04 	vldr	s1, [pc, #16]	; 810a3ec <forward_ap_integer_INT8+0x1e0>
 810a3dc:	464c      	mov	r4, r9
 810a3de:	464d      	mov	r5, r9
 810a3e0:	e777      	b.n	810a2d2 <forward_ap_integer_INT8+0xc6>
 810a3e2:	2300      	movs	r3, #0
 810a3e4:	685b      	ldr	r3, [r3, #4]
 810a3e6:	deff      	udf	#255	; 0xff
 810a3e8:	68d3      	ldr	r3, [r2, #12]
 810a3ea:	deff      	udf	#255	; 0xff
 810a3ec:	00000000 	.word	0x00000000

0810a3f0 <forward_pw_sssa8_ch>:
 810a3f0:	6982      	ldr	r2, [r0, #24]
 810a3f2:	8813      	ldrh	r3, [r2, #0]
 810a3f4:	2b00      	cmp	r3, #0
 810a3f6:	f000 80a4 	beq.w	810a542 <forward_pw_sssa8_ch+0x152>
 810a3fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a3fe:	6854      	ldr	r4, [r2, #4]
 810a400:	6861      	ldr	r1, [r4, #4]
 810a402:	b099      	sub	sp, #100	; 0x64
 810a404:	b101      	cbz	r1, 810a408 <forward_pw_sssa8_ch+0x18>
 810a406:	6809      	ldr	r1, [r1, #0]
 810a408:	2b01      	cmp	r3, #1
 810a40a:	f000 80b3 	beq.w	810a574 <forward_pw_sssa8_ch+0x184>
 810a40e:	6922      	ldr	r2, [r4, #16]
 810a410:	b102      	cbz	r2, 810a414 <forward_pw_sssa8_ch+0x24>
 810a412:	6812      	ldr	r2, [r2, #0]
 810a414:	2b02      	cmp	r3, #2
 810a416:	f000 80a8 	beq.w	810a56a <forward_pw_sssa8_ch+0x17a>
 810a41a:	69e5      	ldr	r5, [r4, #28]
 810a41c:	2d00      	cmp	r5, #0
 810a41e:	f000 809c 	beq.w	810a55a <forward_pw_sssa8_ch+0x16a>
 810a422:	8b26      	ldrh	r6, [r4, #24]
 810a424:	f8d5 e000 	ldr.w	lr, [r5]
 810a428:	2e01      	cmp	r6, #1
 810a42a:	f240 8098 	bls.w	810a55e <forward_pw_sssa8_ch+0x16e>
 810a42e:	686d      	ldr	r5, [r5, #4]
 810a430:	2b03      	cmp	r3, #3
 810a432:	f000 80a2 	beq.w	810a57a <forward_pw_sssa8_ch+0x18a>
 810a436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810a438:	2b00      	cmp	r3, #0
 810a43a:	f000 8092 	beq.w	810a562 <forward_pw_sssa8_ch+0x172>
 810a43e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810a440:	b104      	cbz	r4, 810a444 <forward_pw_sssa8_ch+0x54>
 810a442:	685a      	ldr	r2, [r3, #4]
 810a444:	681c      	ldr	r4, [r3, #0]
 810a446:	69ab      	ldr	r3, [r5, #24]
 810a448:	f8d4 c018 	ldr.w	ip, [r4, #24]
 810a44c:	689b      	ldr	r3, [r3, #8]
 810a44e:	68d4      	ldr	r4, [r2, #12]
 810a450:	9316      	str	r3, [sp, #88]	; 0x58
 810a452:	68cb      	ldr	r3, [r1, #12]
 810a454:	88a4      	ldrh	r4, [r4, #4]
 810a456:	9413      	str	r4, [sp, #76]	; 0x4c
 810a458:	889c      	ldrh	r4, [r3, #4]
 810a45a:	9412      	str	r4, [sp, #72]	; 0x48
 810a45c:	e9d3 3b02 	ldrd	r3, fp, [r3, #8]
 810a460:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
 810a462:	680d      	ldr	r5, [r1, #0]
 810a464:	9415      	str	r4, [sp, #84]	; 0x54
 810a466:	f8dc 4008 	ldr.w	r4, [ip, #8]
 810a46a:	9314      	str	r3, [sp, #80]	; 0x50
 810a46c:	9417      	str	r4, [sp, #92]	; 0x5c
 810a46e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 810a470:	6814      	ldr	r4, [r2, #0]
 810a472:	f8de 6000 	ldr.w	r6, [lr]
 810a476:	2d00      	cmp	r5, #0
 810a478:	d068      	beq.n	810a54c <forward_pw_sssa8_ch+0x15c>
 810a47a:	686f      	ldr	r7, [r5, #4]
 810a47c:	2f00      	cmp	r7, #0
 810a47e:	d065      	beq.n	810a54c <forward_pw_sssa8_ch+0x15c>
 810a480:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 810a484:	f1b8 0f00 	cmp.w	r8, #0
 810a488:	d060      	beq.n	810a54c <forward_pw_sssa8_ch+0x15c>
 810a48a:	683f      	ldr	r7, [r7, #0]
 810a48c:	ed97 0a00 	vldr	s0, [r7]
 810a490:	2c00      	cmp	r4, #0
 810a492:	d058      	beq.n	810a546 <forward_pw_sssa8_ch+0x156>
 810a494:	6867      	ldr	r7, [r4, #4]
 810a496:	2f00      	cmp	r7, #0
 810a498:	d055      	beq.n	810a546 <forward_pw_sssa8_ch+0x156>
 810a49a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 810a49e:	f1b8 0f00 	cmp.w	r8, #0
 810a4a2:	d050      	beq.n	810a546 <forward_pw_sssa8_ch+0x156>
 810a4a4:	683f      	ldr	r7, [r7, #0]
 810a4a6:	edd7 0a00 	vldr	s1, [r7]
 810a4aa:	698f      	ldr	r7, [r1, #24]
 810a4ac:	6992      	ldr	r2, [r2, #24]
 810a4ae:	f8de 1018 	ldr.w	r1, [lr, #24]
 810a4b2:	f890 9041 	ldrb.w	r9, [r0, #65]	; 0x41
 810a4b6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 810a4ba:	68bf      	ldr	r7, [r7, #8]
 810a4bc:	f8d1 8008 	ldr.w	r8, [r1, #8]
 810a4c0:	b116      	cbz	r6, 810a4c8 <forward_pw_sssa8_ch+0xd8>
 810a4c2:	6876      	ldr	r6, [r6, #4]
 810a4c4:	b106      	cbz	r6, 810a4c8 <forward_pw_sssa8_ch+0xd8>
 810a4c6:	6836      	ldr	r6, [r6, #0]
 810a4c8:	b13d      	cbz	r5, 810a4da <forward_pw_sssa8_ch+0xea>
 810a4ca:	6869      	ldr	r1, [r5, #4]
 810a4cc:	2900      	cmp	r1, #0
 810a4ce:	d040      	beq.n	810a552 <forward_pw_sssa8_ch+0x162>
 810a4d0:	886d      	ldrh	r5, [r5, #2]
 810a4d2:	b115      	cbz	r5, 810a4da <forward_pw_sssa8_ch+0xea>
 810a4d4:	6849      	ldr	r1, [r1, #4]
 810a4d6:	f991 5000 	ldrsb.w	r5, [r1]
 810a4da:	b13c      	cbz	r4, 810a4ec <forward_pw_sssa8_ch+0xfc>
 810a4dc:	6861      	ldr	r1, [r4, #4]
 810a4de:	2900      	cmp	r1, #0
 810a4e0:	d039      	beq.n	810a556 <forward_pw_sssa8_ch+0x166>
 810a4e2:	8864      	ldrh	r4, [r4, #2]
 810a4e4:	b114      	cbz	r4, 810a4ec <forward_pw_sssa8_ch+0xfc>
 810a4e6:	6849      	ldr	r1, [r1, #4]
 810a4e8:	f991 4000 	ldrsb.w	r4, [r1]
 810a4ec:	9311      	str	r3, [sp, #68]	; 0x44
 810a4ee:	e9dc 0100 	ldrd	r0, r1, [ip]
 810a4f2:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 810a4f6:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 810a4fa:	f004 ff4b 	bl	810f394 <ai_array_get_byte_size>
 810a4fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a500:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
 810a504:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 810a508:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 810a50c:	9505      	str	r5, [sp, #20]
 810a50e:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
 810a512:	9b16      	ldr	r3, [sp, #88]	; 0x58
 810a514:	9304      	str	r3, [sp, #16]
 810a516:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a518:	e9cd 8302 	strd	r8, r3, [sp, #8]
 810a51c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810a51e:	9301      	str	r3, [sp, #4]
 810a520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a522:	9300      	str	r3, [sp, #0]
 810a524:	e9cd 4606 	strd	r4, r6, [sp, #24]
 810a528:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 810a52c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a52e:	fa1f f28b 	uxth.w	r2, fp
 810a532:	4638      	mov	r0, r7
 810a534:	2401      	movs	r4, #1
 810a536:	940a      	str	r4, [sp, #40]	; 0x28
 810a538:	f001 f9e6 	bl	810b908 <forward_lite_pw_sssa8_ch>
 810a53c:	b019      	add	sp, #100	; 0x64
 810a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a542:	685b      	ldr	r3, [r3, #4]
 810a544:	deff      	udf	#255	; 0xff
 810a546:	eddf 0a0e 	vldr	s1, [pc, #56]	; 810a580 <forward_pw_sssa8_ch+0x190>
 810a54a:	e7ae      	b.n	810a4aa <forward_pw_sssa8_ch+0xba>
 810a54c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 810a580 <forward_pw_sssa8_ch+0x190>
 810a550:	e79e      	b.n	810a490 <forward_pw_sssa8_ch+0xa0>
 810a552:	460d      	mov	r5, r1
 810a554:	e7c1      	b.n	810a4da <forward_pw_sssa8_ch+0xea>
 810a556:	460c      	mov	r4, r1
 810a558:	e7c8      	b.n	810a4ec <forward_pw_sssa8_ch+0xfc>
 810a55a:	46ae      	mov	lr, r5
 810a55c:	e768      	b.n	810a430 <forward_pw_sssa8_ch+0x40>
 810a55e:	2500      	movs	r5, #0
 810a560:	e766      	b.n	810a430 <forward_pw_sssa8_ch+0x40>
 810a562:	6a42      	ldr	r2, [r0, #36]	; 0x24
 810a564:	b922      	cbnz	r2, 810a570 <forward_pw_sssa8_ch+0x180>
 810a566:	6993      	ldr	r3, [r2, #24]
 810a568:	deff      	udf	#255	; 0xff
 810a56a:	2300      	movs	r3, #0
 810a56c:	685b      	ldr	r3, [r3, #4]
 810a56e:	deff      	udf	#255	; 0xff
 810a570:	68db      	ldr	r3, [r3, #12]
 810a572:	deff      	udf	#255	; 0xff
 810a574:	2300      	movs	r3, #0
 810a576:	685b      	ldr	r3, [r3, #4]
 810a578:	deff      	udf	#255	; 0xff
 810a57a:	2300      	movs	r3, #0
 810a57c:	685b      	ldr	r3, [r3, #4]
 810a57e:	deff      	udf	#255	; 0xff
 810a580:	00000000 	.word	0x00000000

0810a584 <forward_eltwise_integer_INT8>:
 810a584:	6982      	ldr	r2, [r0, #24]
 810a586:	8813      	ldrh	r3, [r2, #0]
 810a588:	2b00      	cmp	r3, #0
 810a58a:	f000 8104 	beq.w	810a796 <forward_eltwise_integer_INT8+0x212>
 810a58e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a592:	ed2d 8b02 	vpush	{d8}
 810a596:	6852      	ldr	r2, [r2, #4]
 810a598:	6854      	ldr	r4, [r2, #4]
 810a59a:	b0ab      	sub	sp, #172	; 0xac
 810a59c:	2c00      	cmp	r4, #0
 810a59e:	f000 8109 	beq.w	810a7b4 <forward_eltwise_integer_INT8+0x230>
 810a5a2:	e9d4 5400 	ldrd	r5, r4, [r4]
 810a5a6:	2b01      	cmp	r3, #1
 810a5a8:	f000 81c6 	beq.w	810a938 <forward_eltwise_integer_INT8+0x3b4>
 810a5ac:	6916      	ldr	r6, [r2, #16]
 810a5ae:	b106      	cbz	r6, 810a5b2 <forward_eltwise_integer_INT8+0x2e>
 810a5b0:	6836      	ldr	r6, [r6, #0]
 810a5b2:	e9d0 7307 	ldrd	r7, r3, [r0, #28]
 810a5b6:	68a0      	ldr	r0, [r4, #8]
 810a5b8:	930d      	str	r3, [sp, #52]	; 0x34
 810a5ba:	68ab      	ldr	r3, [r5, #8]
 810a5bc:	ea83 0200 	eor.w	r2, r3, r0
 810a5c0:	f032 02ff 	bics.w	r2, r2, #255	; 0xff
 810a5c4:	f105 0108 	add.w	r1, r5, #8
 810a5c8:	f104 0b08 	add.w	fp, r4, #8
 810a5cc:	f3c3 2c17 	ubfx	ip, r3, #8, #24
 810a5d0:	d10e      	bne.n	810a5f0 <forward_eltwise_integer_INT8+0x6c>
 810a5d2:	4663      	mov	r3, ip
 810a5d4:	4686      	mov	lr, r0
 810a5d6:	2b00      	cmp	r3, #0
 810a5d8:	f000 80e8 	beq.w	810a7ac <forward_eltwise_integer_INT8+0x228>
 810a5dc:	3b01      	subs	r3, #1
 810a5de:	68e2      	ldr	r2, [r4, #12]
 810a5e0:	68e8      	ldr	r0, [r5, #12]
 810a5e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810a5e6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 810a5ea:	4290      	cmp	r0, r2
 810a5ec:	d0f3      	beq.n	810a5d6 <forward_eltwise_integer_INT8+0x52>
 810a5ee:	4670      	mov	r0, lr
 810a5f0:	f04f 0900 	mov.w	r9, #0
 810a5f4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 810a5f8:	009b      	lsls	r3, r3, #2
 810a5fa:	e006      	b.n	810a60a <forward_eltwise_integer_INT8+0x86>
 810a5fc:	68ea      	ldr	r2, [r5, #12]
 810a5fe:	58d2      	ldr	r2, [r2, r3]
 810a600:	2a01      	cmp	r2, #1
 810a602:	f1a3 0304 	sub.w	r3, r3, #4
 810a606:	f040 80ce 	bne.w	810a7a6 <forward_eltwise_integer_INT8+0x222>
 810a60a:	1d1a      	adds	r2, r3, #4
 810a60c:	d1f6      	bne.n	810a5fc <forward_eltwise_integer_INT8+0x78>
 810a60e:	f04f 0a01 	mov.w	sl, #1
 810a612:	f3c0 2017 	ubfx	r0, r0, #8, #24
 810a616:	b140      	cbz	r0, 810a62a <forward_eltwise_integer_INT8+0xa6>
 810a618:	68e3      	ldr	r3, [r4, #12]
 810a61a:	3801      	subs	r0, #1
 810a61c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 810a620:	2b01      	cmp	r3, #1
 810a622:	d0f8      	beq.n	810a616 <forward_eltwise_integer_INT8+0x92>
 810a624:	2300      	movs	r3, #0
 810a626:	930a      	str	r3, [sp, #40]	; 0x28
 810a628:	e001      	b.n	810a62e <forward_eltwise_integer_INT8+0xaa>
 810a62a:	2301      	movs	r3, #1
 810a62c:	930a      	str	r3, [sp, #40]	; 0x28
 810a62e:	6972      	ldr	r2, [r6, #20]
 810a630:	696b      	ldr	r3, [r5, #20]
 810a632:	f8d2 8004 	ldr.w	r8, [r2, #4]
 810a636:	685b      	ldr	r3, [r3, #4]
 810a638:	930c      	str	r3, [sp, #48]	; 0x30
 810a63a:	aa1b      	add	r2, sp, #108	; 0x6c
 810a63c:	2000      	movs	r0, #0
 810a63e:	9216      	str	r2, [sp, #88]	; 0x58
 810a640:	f240 5201 	movw	r2, #1281	; 0x501
 810a644:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 810a648:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 810a64c:	901f      	str	r0, [sp, #124]	; 0x7c
 810a64e:	9215      	str	r2, [sp, #84]	; 0x54
 810a650:	a815      	add	r0, sp, #84	; 0x54
 810a652:	465a      	mov	r2, fp
 810a654:	910b      	str	r1, [sp, #44]	; 0x2c
 810a656:	f004 fecb 	bl	810f3f0 <core_get_broadcasted_shape>
 810a65a:	f8d5 c000 	ldr.w	ip, [r5]
 810a65e:	69ab      	ldr	r3, [r5, #24]
 810a660:	9309      	str	r3, [sp, #36]	; 0x24
 810a662:	6832      	ldr	r2, [r6, #0]
 810a664:	6820      	ldr	r0, [r4, #0]
 810a666:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 810a66a:	f1bc 0f00 	cmp.w	ip, #0
 810a66e:	d018      	beq.n	810a6a2 <forward_eltwise_integer_INT8+0x11e>
 810a670:	f8dc 5004 	ldr.w	r5, [ip, #4]
 810a674:	b1ad      	cbz	r5, 810a6a2 <forward_eltwise_integer_INT8+0x11e>
 810a676:	f8bc e002 	ldrh.w	lr, [ip, #2]
 810a67a:	f1be 0f00 	cmp.w	lr, #0
 810a67e:	d010      	beq.n	810a6a2 <forward_eltwise_integer_INT8+0x11e>
 810a680:	682d      	ldr	r5, [r5, #0]
 810a682:	682d      	ldr	r5, [r5, #0]
 810a684:	950f      	str	r5, [sp, #60]	; 0x3c
 810a686:	b980      	cbnz	r0, 810a6aa <forward_eltwise_integer_INT8+0x126>
 810a688:	2500      	movs	r5, #0
 810a68a:	9510      	str	r5, [sp, #64]	; 0x40
 810a68c:	b1d2      	cbz	r2, 810a6c4 <forward_eltwise_integer_INT8+0x140>
 810a68e:	6855      	ldr	r5, [r2, #4]
 810a690:	b1c5      	cbz	r5, 810a6c4 <forward_eltwise_integer_INT8+0x140>
 810a692:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 810a696:	f1be 0f00 	cmp.w	lr, #0
 810a69a:	d013      	beq.n	810a6c4 <forward_eltwise_integer_INT8+0x140>
 810a69c:	682d      	ldr	r5, [r5, #0]
 810a69e:	682d      	ldr	r5, [r5, #0]
 810a6a0:	e011      	b.n	810a6c6 <forward_eltwise_integer_INT8+0x142>
 810a6a2:	2500      	movs	r5, #0
 810a6a4:	950f      	str	r5, [sp, #60]	; 0x3c
 810a6a6:	2800      	cmp	r0, #0
 810a6a8:	d0ee      	beq.n	810a688 <forward_eltwise_integer_INT8+0x104>
 810a6aa:	6845      	ldr	r5, [r0, #4]
 810a6ac:	2d00      	cmp	r5, #0
 810a6ae:	d0eb      	beq.n	810a688 <forward_eltwise_integer_INT8+0x104>
 810a6b0:	f8b0 e002 	ldrh.w	lr, [r0, #2]
 810a6b4:	f1be 0f00 	cmp.w	lr, #0
 810a6b8:	d0e6      	beq.n	810a688 <forward_eltwise_integer_INT8+0x104>
 810a6ba:	682d      	ldr	r5, [r5, #0]
 810a6bc:	682d      	ldr	r5, [r5, #0]
 810a6be:	9510      	str	r5, [sp, #64]	; 0x40
 810a6c0:	2a00      	cmp	r2, #0
 810a6c2:	d1e4      	bne.n	810a68e <forward_eltwise_integer_INT8+0x10a>
 810a6c4:	2500      	movs	r5, #0
 810a6c6:	69b6      	ldr	r6, [r6, #24]
 810a6c8:	9511      	str	r5, [sp, #68]	; 0x44
 810a6ca:	69a5      	ldr	r5, [r4, #24]
 810a6cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 810a6ce:	68ad      	ldr	r5, [r5, #8]
 810a6d0:	68a4      	ldr	r4, [r4, #8]
 810a6d2:	68b6      	ldr	r6, [r6, #8]
 810a6d4:	f1bc 0f00 	cmp.w	ip, #0
 810a6d8:	d00d      	beq.n	810a6f6 <forward_eltwise_integer_INT8+0x172>
 810a6da:	f8dc e004 	ldr.w	lr, [ip, #4]
 810a6de:	f1be 0f00 	cmp.w	lr, #0
 810a6e2:	d05c      	beq.n	810a79e <forward_eltwise_integer_INT8+0x21a>
 810a6e4:	f8bc c002 	ldrh.w	ip, [ip, #2]
 810a6e8:	f1bc 0f00 	cmp.w	ip, #0
 810a6ec:	d003      	beq.n	810a6f6 <forward_eltwise_integer_INT8+0x172>
 810a6ee:	f8de c004 	ldr.w	ip, [lr, #4]
 810a6f2:	f99c c000 	ldrsb.w	ip, [ip]
 810a6f6:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 810a6fa:	b150      	cbz	r0, 810a712 <forward_eltwise_integer_INT8+0x18e>
 810a6fc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810a700:	f1bc 0f00 	cmp.w	ip, #0
 810a704:	d049      	beq.n	810a79a <forward_eltwise_integer_INT8+0x216>
 810a706:	8840      	ldrh	r0, [r0, #2]
 810a708:	b118      	cbz	r0, 810a712 <forward_eltwise_integer_INT8+0x18e>
 810a70a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 810a70e:	f990 0000 	ldrsb.w	r0, [r0]
 810a712:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
 810a716:	b13a      	cbz	r2, 810a728 <forward_eltwise_integer_INT8+0x1a4>
 810a718:	6850      	ldr	r0, [r2, #4]
 810a71a:	2800      	cmp	r0, #0
 810a71c:	d041      	beq.n	810a7a2 <forward_eltwise_integer_INT8+0x21e>
 810a71e:	8852      	ldrh	r2, [r2, #2]
 810a720:	b112      	cbz	r2, 810a728 <forward_eltwise_integer_INT8+0x1a4>
 810a722:	6842      	ldr	r2, [r0, #4]
 810a724:	f992 2000 	ldrsb.w	r2, [r2]
 810a728:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 810a72c:	f1b9 0f00 	cmp.w	r9, #0
 810a730:	d12c      	bne.n	810a78c <forward_eltwise_integer_INT8+0x208>
 810a732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a734:	4552      	cmp	r2, sl
 810a736:	d03f      	beq.n	810a7b8 <forward_eltwise_integer_INT8+0x234>
 810a738:	f1ca 0702 	rsb	r7, sl, #2
 810a73c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a73e:	0a1b      	lsrs	r3, r3, #8
 810a740:	f000 80f8 	beq.w	810a934 <forward_eltwise_integer_INT8+0x3b0>
 810a744:	9816      	ldr	r0, [sp, #88]	; 0x58
 810a746:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 810a74a:	2301      	movs	r3, #1
 810a74c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 810a750:	4290      	cmp	r0, r2
 810a752:	fb01 f303 	mul.w	r3, r1, r3
 810a756:	d1f9      	bne.n	810a74c <forward_eltwise_integer_INT8+0x1c8>
 810a758:	4621      	mov	r1, r4
 810a75a:	f10d 043b 	add.w	r4, sp, #59	; 0x3b
 810a75e:	9405      	str	r4, [sp, #20]
 810a760:	ac11      	add	r4, sp, #68	; 0x44
 810a762:	9404      	str	r4, [sp, #16]
 810a764:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 810a768:	9403      	str	r4, [sp, #12]
 810a76a:	ac10      	add	r4, sp, #64	; 0x40
 810a76c:	9402      	str	r4, [sp, #8]
 810a76e:	f10d 0439 	add.w	r4, sp, #57	; 0x39
 810a772:	9401      	str	r4, [sp, #4]
 810a774:	ac0f      	add	r4, sp, #60	; 0x3c
 810a776:	9400      	str	r4, [sp, #0]
 810a778:	9706      	str	r7, [sp, #24]
 810a77a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 810a77c:	462a      	mov	r2, r5
 810a77e:	4630      	mov	r0, r6
 810a780:	47a0      	blx	r4
 810a782:	b02b      	add	sp, #172	; 0xac
 810a784:	ecbd 8b02 	vpop	{d8}
 810a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a78e:	4553      	cmp	r3, sl
 810a790:	d1d2      	bne.n	810a738 <forward_eltwise_integer_INT8+0x1b4>
 810a792:	2700      	movs	r7, #0
 810a794:	e7d2      	b.n	810a73c <forward_eltwise_integer_INT8+0x1b8>
 810a796:	685b      	ldr	r3, [r3, #4]
 810a798:	deff      	udf	#255	; 0xff
 810a79a:	4660      	mov	r0, ip
 810a79c:	e7b9      	b.n	810a712 <forward_eltwise_integer_INT8+0x18e>
 810a79e:	46f4      	mov	ip, lr
 810a7a0:	e7a9      	b.n	810a6f6 <forward_eltwise_integer_INT8+0x172>
 810a7a2:	4602      	mov	r2, r0
 810a7a4:	e7c0      	b.n	810a728 <forward_eltwise_integer_INT8+0x1a4>
 810a7a6:	f04f 0a00 	mov.w	sl, #0
 810a7aa:	e732      	b.n	810a612 <forward_eltwise_integer_INT8+0x8e>
 810a7ac:	4670      	mov	r0, lr
 810a7ae:	f04f 0901 	mov.w	r9, #1
 810a7b2:	e71f      	b.n	810a5f4 <forward_eltwise_integer_INT8+0x70>
 810a7b4:	4625      	mov	r5, r4
 810a7b6:	e6f6      	b.n	810a5a6 <forward_eltwise_integer_INT8+0x22>
 810a7b8:	aa20      	add	r2, sp, #128	; 0x80
 810a7ba:	9218      	str	r2, [sp, #96]	; 0x60
 810a7bc:	aa25      	add	r2, sp, #148	; 0x94
 810a7be:	921a      	str	r2, [sp, #104]	; 0x68
 810a7c0:	f240 5202 	movw	r2, #1282	; 0x502
 810a7c4:	9217      	str	r2, [sp, #92]	; 0x5c
 810a7c6:	9219      	str	r2, [sp, #100]	; 0x64
 810a7c8:	a817      	add	r0, sp, #92	; 0x5c
 810a7ca:	aa15      	add	r2, sp, #84	; 0x54
 810a7cc:	9309      	str	r3, [sp, #36]	; 0x24
 810a7ce:	e9cd 9921 	strd	r9, r9, [sp, #132]	; 0x84
 810a7d2:	e9cd 9923 	strd	r9, r9, [sp, #140]	; 0x8c
 810a7d6:	e9cd 9926 	strd	r9, r9, [sp, #152]	; 0x98
 810a7da:	e9cd 9928 	strd	r9, r9, [sp, #160]	; 0xa0
 810a7de:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 810a7e2:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
 810a7e6:	f004 fe2f 	bl	810f448 <core_compute_offsets>
 810a7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a7ec:	aa15      	add	r2, sp, #84	; 0x54
 810a7ee:	4659      	mov	r1, fp
 810a7f0:	a819      	add	r0, sp, #100	; 0x64
 810a7f2:	f004 fe29 	bl	810f448 <core_compute_offsets>
 810a7f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a7f8:	68d3      	ldr	r3, [r2, #12]
 810a7fa:	2b00      	cmp	r3, #0
 810a7fc:	d0c1      	beq.n	810a782 <forward_eltwise_integer_INT8+0x1fe>
 810a7fe:	eddf 8a50 	vldr	s17, [pc, #320]	; 810a940 <forward_eltwise_integer_INT8+0x3bc>
 810a802:	6891      	ldr	r1, [r2, #8]
 810a804:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 810a808:	2900      	cmp	r1, #0
 810a80a:	d0ba      	beq.n	810a782 <forward_eltwise_integer_INT8+0x1fe>
 810a80c:	9815      	ldr	r0, [sp, #84]	; 0x54
 810a80e:	f04f 0b00 	mov.w	fp, #0
 810a812:	f3c0 2017 	ubfx	r0, r0, #8, #24
 810a816:	f04f 0a00 	mov.w	sl, #0
 810a81a:	2804      	cmp	r0, #4
 810a81c:	bf8c      	ite	hi
 810a81e:	6911      	ldrhi	r1, [r2, #16]
 810a820:	2101      	movls	r1, #1
 810a822:	458a      	cmp	sl, r1
 810a824:	d26b      	bcs.n	810a8fe <forward_eltwise_integer_INT8+0x37a>
 810a826:	6851      	ldr	r1, [r2, #4]
 810a828:	2900      	cmp	r1, #0
 810a82a:	d057      	beq.n	810a8dc <forward_eltwise_integer_INT8+0x358>
 810a82c:	f04f 0900 	mov.w	r9, #0
 810a830:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 810a834:	f994 2000 	ldrsb.w	r2, [r4]
 810a838:	f99d 1039 	ldrsb.w	r1, [sp, #57]	; 0x39
 810a83c:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 810a840:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 810a844:	1a53      	subs	r3, r2, r1
 810a846:	ee07 3a90 	vmov	s15, r3
 810a84a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810a84e:	f99d 103a 	ldrsb.w	r1, [sp, #58]	; 0x3a
 810a852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810a856:	a814      	add	r0, sp, #80	; 0x50
 810a858:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 810a85c:	f995 2000 	ldrsb.w	r2, [r5]
 810a860:	1a53      	subs	r3, r2, r1
 810a862:	ee07 3a90 	vmov	s15, r3
 810a866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810a86a:	aa13      	add	r2, sp, #76	; 0x4c
 810a86c:	ee67 7a87 	vmul.f32	s15, s15, s14
 810a870:	a912      	add	r1, sp, #72	; 0x48
 810a872:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 810a876:	47b8      	blx	r7
 810a878:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 810a87c:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 810a880:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 810a884:	eec6 7a26 	vdiv.f32	s15, s12, s13
 810a888:	ee07 3a10 	vmov	s14, r3
 810a88c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810a890:	ee77 7a87 	vadd.f32	s15, s15, s14
 810a894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a89c:	bfd4      	ite	le
 810a89e:	eeb0 7a68 	vmovle.f32	s14, s17
 810a8a2:	eeb0 7a48 	vmovgt.f32	s14, s16
 810a8a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 810a8aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810a8ae:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 810a8b2:	ee17 2a10 	vmov	r2, s14
 810a8b6:	f302 0207 	ssat	r2, #8, r2
 810a8ba:	7032      	strb	r2, [r6, #0]
 810a8bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a8be:	6852      	ldr	r2, [r2, #4]
 810a8c0:	4414      	add	r4, r2
 810a8c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810a8c4:	6852      	ldr	r2, [r2, #4]
 810a8c6:	4415      	add	r5, r2
 810a8c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810a8ca:	6851      	ldr	r1, [r2, #4]
 810a8cc:	f109 0901 	add.w	r9, r9, #1
 810a8d0:	4549      	cmp	r1, r9
 810a8d2:	4446      	add	r6, r8
 810a8d4:	d8ae      	bhi.n	810a834 <forward_eltwise_integer_INT8+0x2b0>
 810a8d6:	9815      	ldr	r0, [sp, #84]	; 0x54
 810a8d8:	f3c0 2017 	ubfx	r0, r0, #8, #24
 810a8dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 810a8de:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 810a8e2:	d302      	bcc.n	810a8ea <forward_eltwise_integer_INT8+0x366>
 810a8e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a8e6:	6909      	ldr	r1, [r1, #16]
 810a8e8:	440c      	add	r4, r1
 810a8ea:	9919      	ldr	r1, [sp, #100]	; 0x64
 810a8ec:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 810a8f0:	d302      	bcc.n	810a8f8 <forward_eltwise_integer_INT8+0x374>
 810a8f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 810a8f4:	6909      	ldr	r1, [r1, #16]
 810a8f6:	440d      	add	r5, r1
 810a8f8:	f10a 0a01 	add.w	sl, sl, #1
 810a8fc:	e78d      	b.n	810a81a <forward_eltwise_integer_INT8+0x296>
 810a8fe:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 810a902:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810a904:	f8de 1008 	ldr.w	r1, [lr, #8]
 810a908:	440c      	add	r4, r1
 810a90a:	6899      	ldr	r1, [r3, #8]
 810a90c:	440d      	add	r5, r1
 810a90e:	6891      	ldr	r1, [r2, #8]
 810a910:	f10b 0b01 	add.w	fp, fp, #1
 810a914:	4559      	cmp	r1, fp
 810a916:	f63f af7e 	bhi.w	810a816 <forward_eltwise_integer_INT8+0x292>
 810a91a:	f8de 000c 	ldr.w	r0, [lr, #12]
 810a91e:	4404      	add	r4, r0
 810a920:	68d8      	ldr	r0, [r3, #12]
 810a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a924:	4405      	add	r5, r0
 810a926:	68d0      	ldr	r0, [r2, #12]
 810a928:	3301      	adds	r3, #1
 810a92a:	4298      	cmp	r0, r3
 810a92c:	9309      	str	r3, [sp, #36]	; 0x24
 810a92e:	f63f af6b 	bhi.w	810a808 <forward_eltwise_integer_INT8+0x284>
 810a932:	e726      	b.n	810a782 <forward_eltwise_integer_INT8+0x1fe>
 810a934:	2301      	movs	r3, #1
 810a936:	e70f      	b.n	810a758 <forward_eltwise_integer_INT8+0x1d4>
 810a938:	2300      	movs	r3, #0
 810a93a:	685b      	ldr	r3, [r3, #4]
 810a93c:	deff      	udf	#255	; 0xff
 810a93e:	bf00      	nop
 810a940:	befffffc 	.word	0xbefffffc

0810a944 <forward_lite_node_convert_integer_is8of32>:
 810a944:	f000 b890 	b.w	810aa68 <lite_convert_is8of32>

0810a948 <forward_lite_node_convert_integer_iu8of32>:
 810a948:	f000 b8a0 	b.w	810aa8c <lite_convert_iu8of32>

0810a94c <forward_lite_node_convert_integer_if32os8>:
 810a94c:	f000 b8b0 	b.w	810aab0 <lite_convert_if32os8>

0810a950 <forward_lite_node_convert_integer_if32ou8>:
 810a950:	f000 b8e4 	b.w	810ab1c <lite_convert_if32ou8>

0810a954 <forward_lite_node_convert_integer_is8os8>:
 810a954:	b410      	push	{r4}
 810a956:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 810a95a:	9401      	str	r4, [sp, #4]
 810a95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a960:	f000 b8fc 	b.w	810ab5c <lite_convert_is8os8>

0810a964 <forward_lite_node_convert_integer_iu8ou8>:
 810a964:	b410      	push	{r4}
 810a966:	f89d 4004 	ldrb.w	r4, [sp, #4]
 810a96a:	9401      	str	r4, [sp, #4]
 810a96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a970:	f000 b934 	b.w	810abdc <lite_convert_iu8ou8>

0810a974 <forward_lite_node_convert_integer_iu8os8>:
 810a974:	b410      	push	{r4}
 810a976:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 810a97a:	9401      	str	r4, [sp, #4]
 810a97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a980:	f000 b956 	b.w	810ac30 <lite_convert_iu8os8>

0810a984 <forward_lite_node_convert_integer_iu8os8_fast>:
 810a984:	f000 b994 	b.w	810acb0 <lite_convert_iu8os8_fast>

0810a988 <forward_lite_node_convert_integer_is8ou8>:
 810a988:	b410      	push	{r4}
 810a98a:	f89d 4004 	ldrb.w	r4, [sp, #4]
 810a98e:	9401      	str	r4, [sp, #4]
 810a990:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a994:	f000 b9c4 	b.w	810ad20 <lite_convert_is8ou8>

0810a998 <forward_lite_node_convert_integer_is8ou8_fast>:
 810a998:	f000 b9ec 	b.w	810ad74 <lite_convert_is8ou8_fast>

0810a99c <forward_lite_dense_is8os8ws8>:
 810a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a9a0:	b08f      	sub	sp, #60	; 0x3c
 810a9a2:	ee21 0a00 	vmul.f32	s0, s2, s0
 810a9a6:	f99d 4060 	ldrsb.w	r4, [sp, #96]	; 0x60
 810a9aa:	940a      	str	r4, [sp, #40]	; 0x28
 810a9ac:	f10d 0932 	add.w	r9, sp, #50	; 0x32
 810a9b0:	2400      	movs	r4, #0
 810a9b2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 810a9b6:	4605      	mov	r5, r0
 810a9b8:	469b      	mov	fp, r3
 810a9ba:	4648      	mov	r0, r9
 810a9bc:	f99d 3064 	ldrsb.w	r3, [sp, #100]	; 0x64
 810a9c0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 810a9c4:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 810a9c8:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 810a9cc:	9209      	str	r2, [sp, #36]	; 0x24
 810a9ce:	460e      	mov	r6, r1
 810a9d0:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 810a9d4:	940d      	str	r4, [sp, #52]	; 0x34
 810a9d6:	930b      	str	r3, [sp, #44]	; 0x2c
 810a9d8:	f001 fe5e 	bl	810c698 <align_factor>
 810a9dc:	900d      	str	r0, [sp, #52]	; 0x34
 810a9de:	f1ba 0f00 	cmp.w	sl, #0
 810a9e2:	d018      	beq.n	810aa16 <forward_lite_dense_is8os8ws8+0x7a>
 810a9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a9e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810a9e8:	9306      	str	r3, [sp, #24]
 810a9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a9ec:	9303      	str	r3, [sp, #12]
 810a9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a9f0:	9505      	str	r5, [sp, #20]
 810a9f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 810a9f6:	ab0d      	add	r3, sp, #52	; 0x34
 810a9f8:	9300      	str	r3, [sp, #0]
 810a9fa:	4630      	mov	r0, r6
 810a9fc:	f8cd b010 	str.w	fp, [sp, #16]
 810aa00:	3401      	adds	r4, #1
 810aa02:	4643      	mov	r3, r8
 810aa04:	463a      	mov	r2, r7
 810aa06:	9109      	str	r1, [sp, #36]	; 0x24
 810aa08:	f002 fbba 	bl	810d180 <st_sssa8_fully_connected>
 810aa0c:	45a2      	cmp	sl, r4
 810aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810aa10:	4445      	add	r5, r8
 810aa12:	443e      	add	r6, r7
 810aa14:	d1e7      	bne.n	810a9e6 <forward_lite_dense_is8os8ws8+0x4a>
 810aa16:	b00f      	add	sp, #60	; 0x3c
 810aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810aa1c <forward_lite_avepool_is8os8>:
 810aa1c:	b410      	push	{r4}
 810aa1e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 810aa22:	9401      	str	r4, [sp, #4]
 810aa24:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 810aa28:	9402      	str	r4, [sp, #8]
 810aa2a:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 810aa2e:	9403      	str	r4, [sp, #12]
 810aa30:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 810aa34:	9404      	str	r4, [sp, #16]
 810aa36:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 810aa3a:	9405      	str	r4, [sp, #20]
 810aa3c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 810aa40:	9406      	str	r4, [sp, #24]
 810aa42:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 810aa46:	9407      	str	r4, [sp, #28]
 810aa48:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 810aa4c:	9408      	str	r4, [sp, #32]
 810aa4e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 810aa52:	9409      	str	r4, [sp, #36]	; 0x24
 810aa54:	f99d 4028 	ldrsb.w	r4, [sp, #40]	; 0x28
 810aa58:	940a      	str	r4, [sp, #40]	; 0x28
 810aa5a:	f99d 402c 	ldrsb.w	r4, [sp, #44]	; 0x2c
 810aa5e:	940b      	str	r4, [sp, #44]	; 0x2c
 810aa60:	f85d 4b04 	ldr.w	r4, [sp], #4
 810aa64:	f001 bff8 	b.w	810ca58 <st_int8_avepool>

0810aa68 <lite_convert_is8of32>:
 810aa68:	2a00      	cmp	r2, #0
 810aa6a:	dd0e      	ble.n	810aa8a <lite_convert_is8of32+0x22>
 810aa6c:	4402      	add	r2, r0
 810aa6e:	f910 cb01 	ldrsb.w	ip, [r0], #1
 810aa72:	ebac 0c03 	sub.w	ip, ip, r3
 810aa76:	ee07 ca90 	vmov	s15, ip
 810aa7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810aa7e:	4290      	cmp	r0, r2
 810aa80:	ee67 7a80 	vmul.f32	s15, s15, s0
 810aa84:	ece1 7a01 	vstmia	r1!, {s15}
 810aa88:	d1f1      	bne.n	810aa6e <lite_convert_is8of32+0x6>
 810aa8a:	4770      	bx	lr

0810aa8c <lite_convert_iu8of32>:
 810aa8c:	2a00      	cmp	r2, #0
 810aa8e:	dd0e      	ble.n	810aaae <lite_convert_iu8of32+0x22>
 810aa90:	4402      	add	r2, r0
 810aa92:	f810 cb01 	ldrb.w	ip, [r0], #1
 810aa96:	ebac 0c03 	sub.w	ip, ip, r3
 810aa9a:	ee07 ca90 	vmov	s15, ip
 810aa9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810aaa2:	4290      	cmp	r0, r2
 810aaa4:	ee67 7a80 	vmul.f32	s15, s15, s0
 810aaa8:	ece1 7a01 	vstmia	r1!, {s15}
 810aaac:	d1f1      	bne.n	810aa92 <lite_convert_iu8of32+0x6>
 810aaae:	4770      	bx	lr

0810aab0 <lite_convert_if32os8>:
 810aab0:	ee07 3a90 	vmov	s15, r3
 810aab4:	2a00      	cmp	r2, #0
 810aab6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 810aaba:	dd2c      	ble.n	810ab16 <lite_convert_if32os8+0x66>
 810aabc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810aac0:	eec7 4a80 	vdiv.f32	s9, s15, s0
 810aac4:	440a      	add	r2, r1
 810aac6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 810ab18 <lite_convert_if32os8+0x68>
 810aaca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 810aace:	ecf0 7a01 	vldmia	r0!, {s15}
 810aad2:	eef0 6a46 	vmov.f32	s13, s12
 810aad6:	eee7 6aa4 	vfma.f32	s13, s15, s9
 810aada:	ee76 7aa5 	vadd.f32	s15, s13, s11
 810aade:	ee36 7ac5 	vsub.f32	s14, s13, s10
 810aae2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810aae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810aaea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810aaee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 810aaf2:	db08      	blt.n	810ab06 <lite_convert_if32os8+0x56>
 810aaf4:	ee17 3a90 	vmov	r3, s15
 810aaf8:	f303 0307 	ssat	r3, #8, r3
 810aafc:	f801 3b01 	strb.w	r3, [r1], #1
 810ab00:	428a      	cmp	r2, r1
 810ab02:	d1e4      	bne.n	810aace <lite_convert_if32os8+0x1e>
 810ab04:	4770      	bx	lr
 810ab06:	ee17 3a10 	vmov	r3, s14
 810ab0a:	f303 0307 	ssat	r3, #8, r3
 810ab0e:	f801 3b01 	strb.w	r3, [r1], #1
 810ab12:	4291      	cmp	r1, r2
 810ab14:	d1db      	bne.n	810aace <lite_convert_if32os8+0x1e>
 810ab16:	4770      	bx	lr
 810ab18:	3efffffc 	.word	0x3efffffc

0810ab1c <lite_convert_if32ou8>:
 810ab1c:	ee07 3a90 	vmov	s15, r3
 810ab20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ab24:	2a00      	cmp	r2, #0
 810ab26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810ab2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 810ab2e:	dd14      	ble.n	810ab5a <lite_convert_if32ou8+0x3e>
 810ab30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810ab34:	ee87 6a80 	vdiv.f32	s12, s15, s0
 810ab38:	440a      	add	r2, r1
 810ab3a:	ecb0 7a01 	vldmia	r0!, {s14}
 810ab3e:	eef0 7a66 	vmov.f32	s15, s13
 810ab42:	eee7 7a06 	vfma.f32	s15, s14, s12
 810ab46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ab4a:	ee17 3a90 	vmov	r3, s15
 810ab4e:	f383 0308 	usat	r3, #8, r3
 810ab52:	f801 3b01 	strb.w	r3, [r1], #1
 810ab56:	4291      	cmp	r1, r2
 810ab58:	d1ef      	bne.n	810ab3a <lite_convert_if32ou8+0x1e>
 810ab5a:	4770      	bx	lr

0810ab5c <lite_convert_is8os8>:
 810ab5c:	b500      	push	{lr}
 810ab5e:	eb00 0e02 	add.w	lr, r0, r2
 810ab62:	4570      	cmp	r0, lr
 810ab64:	f9bd c004 	ldrsh.w	ip, [sp, #4]
 810ab68:	d22a      	bcs.n	810abc0 <lite_convert_is8os8+0x64>
 810ab6a:	ee07 ca90 	vmov	s15, ip
 810ab6e:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 810abd8 <lite_convert_is8os8+0x7c>
 810ab72:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 810ab76:	3801      	subs	r0, #1
 810ab78:	440a      	add	r2, r1
 810ab7a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 810ab7e:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
 810ab82:	ebac 0c03 	sub.w	ip, ip, r3
 810ab86:	ee07 ca90 	vmov	s15, ip
 810ab8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ab8e:	eef0 6a46 	vmov.f32	s13, s12
 810ab92:	eee7 6a80 	vfma.f32	s13, s15, s0
 810ab96:	ee76 7aa5 	vadd.f32	s15, s13, s11
 810ab9a:	ee36 7ac5 	vsub.f32	s14, s13, s10
 810ab9e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810aba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810abaa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 810abae:	dd09      	ble.n	810abc4 <lite_convert_is8os8+0x68>
 810abb0:	ee17 ca90 	vmov	ip, s15
 810abb4:	f30c 0c07 	ssat	ip, #8, ip
 810abb8:	f801 cb01 	strb.w	ip, [r1], #1
 810abbc:	4291      	cmp	r1, r2
 810abbe:	d1de      	bne.n	810ab7e <lite_convert_is8os8+0x22>
 810abc0:	f85d fb04 	ldr.w	pc, [sp], #4
 810abc4:	ee17 ca10 	vmov	ip, s14
 810abc8:	f30c 0c07 	ssat	ip, #8, ip
 810abcc:	f801 cb01 	strb.w	ip, [r1], #1
 810abd0:	4291      	cmp	r1, r2
 810abd2:	d1d4      	bne.n	810ab7e <lite_convert_is8os8+0x22>
 810abd4:	f85d fb04 	ldr.w	pc, [sp], #4
 810abd8:	3efffffc 	.word	0x3efffffc

0810abdc <lite_convert_iu8ou8>:
 810abdc:	f89d c000 	ldrb.w	ip, [sp]
 810abe0:	ee06 ca90 	vmov	s13, ip
 810abe4:	ee07 3a90 	vmov	s15, r3
 810abe8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 810abec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810abf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810abf4:	ee76 6a87 	vadd.f32	s13, s13, s14
 810abf8:	1883      	adds	r3, r0, r2
 810abfa:	4298      	cmp	r0, r3
 810abfc:	eee7 6ac0 	vfms.f32	s13, s15, s0
 810ac00:	d215      	bcs.n	810ac2e <lite_convert_iu8ou8+0x52>
 810ac02:	3801      	subs	r0, #1
 810ac04:	440a      	add	r2, r1
 810ac06:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 810ac0a:	ee07 3a10 	vmov	s14, r3
 810ac0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810ac12:	eef0 7a66 	vmov.f32	s15, s13
 810ac16:	eee7 7a00 	vfma.f32	s15, s14, s0
 810ac1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ac1e:	ee17 3a90 	vmov	r3, s15
 810ac22:	f383 0308 	usat	r3, #8, r3
 810ac26:	f801 3b01 	strb.w	r3, [r1], #1
 810ac2a:	4291      	cmp	r1, r2
 810ac2c:	d1eb      	bne.n	810ac06 <lite_convert_iu8ou8+0x2a>
 810ac2e:	4770      	bx	lr

0810ac30 <lite_convert_iu8os8>:
 810ac30:	f99d c000 	ldrsb.w	ip, [sp]
 810ac34:	ee07 3a90 	vmov	s15, r3
 810ac38:	ee06 ca10 	vmov	s12, ip
 810ac3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ac40:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 810ac44:	1883      	adds	r3, r0, r2
 810ac46:	4298      	cmp	r0, r3
 810ac48:	eea7 6ac0 	vfms.f32	s12, s15, s0
 810ac4c:	d22d      	bcs.n	810acaa <lite_convert_iu8os8+0x7a>
 810ac4e:	ed9f 5a17 	vldr	s10, [pc, #92]	; 810acac <lite_convert_iu8os8+0x7c>
 810ac52:	3801      	subs	r0, #1
 810ac54:	440a      	add	r2, r1
 810ac56:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 810ac5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 810ac5e:	ee07 3a90 	vmov	s15, r3
 810ac62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ac66:	eef0 6a46 	vmov.f32	s13, s12
 810ac6a:	eee7 6a80 	vfma.f32	s13, s15, s0
 810ac6e:	ee76 7aa5 	vadd.f32	s15, s13, s11
 810ac72:	ee36 7ac5 	vsub.f32	s14, s13, s10
 810ac76:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810ac7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ac7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ac82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 810ac86:	dd08      	ble.n	810ac9a <lite_convert_iu8os8+0x6a>
 810ac88:	ee17 3a90 	vmov	r3, s15
 810ac8c:	f303 0307 	ssat	r3, #8, r3
 810ac90:	f801 3b01 	strb.w	r3, [r1], #1
 810ac94:	4291      	cmp	r1, r2
 810ac96:	d1e0      	bne.n	810ac5a <lite_convert_iu8os8+0x2a>
 810ac98:	4770      	bx	lr
 810ac9a:	ee17 3a10 	vmov	r3, s14
 810ac9e:	f303 0307 	ssat	r3, #8, r3
 810aca2:	f801 3b01 	strb.w	r3, [r1], #1
 810aca6:	4291      	cmp	r1, r2
 810aca8:	d1d7      	bne.n	810ac5a <lite_convert_iu8os8+0x2a>
 810acaa:	4770      	bx	lr
 810acac:	3efffffc 	.word	0x3efffffc

0810acb0 <lite_convert_iu8os8_fast>:
 810acb0:	b570      	push	{r4, r5, r6, lr}
 810acb2:	1095      	asrs	r5, r2, #2
 810acb4:	2d00      	cmp	r5, #0
 810acb6:	dd31      	ble.n	810ad1c <lite_convert_iu8os8_fast+0x6c>
 810acb8:	00ae      	lsls	r6, r5, #2
 810acba:	460c      	mov	r4, r1
 810acbc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 810acc0:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 810acc4:	f850 3b04 	ldr.w	r3, [r0], #4
 810acc8:	ea4f 2c33 	mov.w	ip, r3, ror #8
 810accc:	fa3f fc8c 	uxtb16	ip, ip
 810acd0:	fadc fc0e 	ssub16	ip, ip, lr
 810acd4:	fa3f f383 	uxtb16	r3, r3
 810acd8:	fad3 f30e 	ssub16	r3, r3, lr
 810acdc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 810ace0:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 810ace4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 810ace8:	ea43 030c 	orr.w	r3, r3, ip
 810acec:	42a8      	cmp	r0, r5
 810acee:	f844 3b04 	str.w	r3, [r4], #4
 810acf2:	d1e7      	bne.n	810acc4 <lite_convert_iu8os8_fast+0x14>
 810acf4:	4431      	add	r1, r6
 810acf6:	f012 0203 	ands.w	r2, r2, #3
 810acfa:	d00e      	beq.n	810ad1a <lite_convert_iu8os8_fast+0x6a>
 810acfc:	782b      	ldrb	r3, [r5, #0]
 810acfe:	3a01      	subs	r2, #1
 810ad00:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 810ad04:	700b      	strb	r3, [r1, #0]
 810ad06:	d008      	beq.n	810ad1a <lite_convert_iu8os8_fast+0x6a>
 810ad08:	786b      	ldrb	r3, [r5, #1]
 810ad0a:	2a01      	cmp	r2, #1
 810ad0c:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 810ad10:	704b      	strb	r3, [r1, #1]
 810ad12:	d002      	beq.n	810ad1a <lite_convert_iu8os8_fast+0x6a>
 810ad14:	78ab      	ldrb	r3, [r5, #2]
 810ad16:	3b80      	subs	r3, #128	; 0x80
 810ad18:	708b      	strb	r3, [r1, #2]
 810ad1a:	bd70      	pop	{r4, r5, r6, pc}
 810ad1c:	4605      	mov	r5, r0
 810ad1e:	e7ea      	b.n	810acf6 <lite_convert_iu8os8_fast+0x46>

0810ad20 <lite_convert_is8ou8>:
 810ad20:	ee07 3a90 	vmov	s15, r3
 810ad24:	f89d 3000 	ldrb.w	r3, [sp]
 810ad28:	ee06 3a90 	vmov	s13, r3
 810ad2c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 810ad30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810ad34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ad38:	ee76 6a87 	vadd.f32	s13, s13, s14
 810ad3c:	1883      	adds	r3, r0, r2
 810ad3e:	4298      	cmp	r0, r3
 810ad40:	eee7 6ac0 	vfms.f32	s13, s15, s0
 810ad44:	d215      	bcs.n	810ad72 <lite_convert_is8ou8+0x52>
 810ad46:	3801      	subs	r0, #1
 810ad48:	440a      	add	r2, r1
 810ad4a:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 810ad4e:	ee07 3a10 	vmov	s14, r3
 810ad52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810ad56:	eef0 7a66 	vmov.f32	s15, s13
 810ad5a:	eee7 7a00 	vfma.f32	s15, s14, s0
 810ad5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ad62:	ee17 3a90 	vmov	r3, s15
 810ad66:	f383 0308 	usat	r3, #8, r3
 810ad6a:	f801 3b01 	strb.w	r3, [r1], #1
 810ad6e:	4291      	cmp	r1, r2
 810ad70:	d1eb      	bne.n	810ad4a <lite_convert_is8ou8+0x2a>
 810ad72:	4770      	bx	lr

0810ad74 <lite_convert_is8ou8_fast>:
 810ad74:	b570      	push	{r4, r5, r6, lr}
 810ad76:	1095      	asrs	r5, r2, #2
 810ad78:	2d00      	cmp	r5, #0
 810ad7a:	dd2d      	ble.n	810add8 <lite_convert_is8ou8_fast+0x64>
 810ad7c:	00ae      	lsls	r6, r5, #2
 810ad7e:	460c      	mov	r4, r1
 810ad80:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 810ad84:	f04f 1e80 	mov.w	lr, #8388736	; 0x800080
 810ad88:	f850 3b04 	ldr.w	r3, [r0], #4
 810ad8c:	ea4f 2c33 	mov.w	ip, r3, ror #8
 810ad90:	fa2f fc8c 	sxtb16	ip, ip
 810ad94:	fa9c fc0e 	sadd16	ip, ip, lr
 810ad98:	fa2f f383 	sxtb16	r3, r3
 810ad9c:	fa93 f30e 	sadd16	r3, r3, lr
 810ada0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 810ada4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 810ada8:	42a8      	cmp	r0, r5
 810adaa:	f844 3b04 	str.w	r3, [r4], #4
 810adae:	d1eb      	bne.n	810ad88 <lite_convert_is8ou8_fast+0x14>
 810adb0:	4431      	add	r1, r6
 810adb2:	f012 0203 	ands.w	r2, r2, #3
 810adb6:	d00e      	beq.n	810add6 <lite_convert_is8ou8_fast+0x62>
 810adb8:	782b      	ldrb	r3, [r5, #0]
 810adba:	3a01      	subs	r2, #1
 810adbc:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 810adc0:	700b      	strb	r3, [r1, #0]
 810adc2:	d008      	beq.n	810add6 <lite_convert_is8ou8_fast+0x62>
 810adc4:	786b      	ldrb	r3, [r5, #1]
 810adc6:	2a01      	cmp	r2, #1
 810adc8:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 810adcc:	704b      	strb	r3, [r1, #1]
 810adce:	d002      	beq.n	810add6 <lite_convert_is8ou8_fast+0x62>
 810add0:	78ab      	ldrb	r3, [r5, #2]
 810add2:	3b80      	subs	r3, #128	; 0x80
 810add4:	708b      	strb	r3, [r1, #2]
 810add6:	bd70      	pop	{r4, r5, r6, pc}
 810add8:	4605      	mov	r5, r0
 810adda:	e7ea      	b.n	810adb2 <lite_convert_is8ou8_fast+0x3e>

0810addc <forward_lite_dw_3x3_sssa8_ch>:
 810addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ade0:	b09d      	sub	sp, #116	; 0x74
 810ade2:	461e      	mov	r6, r3
 810ade4:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 810ade8:	9206      	str	r2, [sp, #24]
 810adea:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 810adee:	9207      	str	r2, [sp, #28]
 810adf0:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	; 0xa8
 810adf4:	920f      	str	r2, [sp, #60]	; 0x3c
 810adf6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 810adf8:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 810adfc:	9213      	str	r2, [sp, #76]	; 0x4c
 810adfe:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 810ae02:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 810ae06:	f99d 70ac 	ldrsb.w	r7, [sp, #172]	; 0xac
 810ae0a:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 810ae0e:	9019      	str	r0, [sp, #100]	; 0x64
 810ae10:	9105      	str	r1, [sp, #20]
 810ae12:	9217      	str	r2, [sp, #92]	; 0x5c
 810ae14:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 810ae18:	2b00      	cmp	r3, #0
 810ae1a:	f000 8430 	beq.w	810b67e <forward_lite_dw_3x3_sssa8_ch+0x8a2>
 810ae1e:	ea4f 0846 	mov.w	r8, r6, lsl #1
 810ae22:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 810ae24:	982c      	ldr	r0, [sp, #176]	; 0xb0
 810ae26:	eb03 0209 	add.w	r2, r3, r9
 810ae2a:	eb09 0306 	add.w	r3, r9, r6
 810ae2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 810ae32:	9210      	str	r2, [sp, #64]	; 0x40
 810ae34:	4631      	mov	r1, r6
 810ae36:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 810ae38:	9312      	str	r3, [sp, #72]	; 0x48
 810ae3a:	461c      	mov	r4, r3
 810ae3c:	f001 fc80 	bl	810c740 <align_factor_ch>
 810ae40:	f06f 0315 	mvn.w	r3, #21
 810ae44:	fb03 4306 	mla	r3, r3, r6, r4
 810ae48:	9311      	str	r3, [sp, #68]	; 0x44
 810ae4a:	b1de      	cbz	r6, 810ae84 <forward_lite_dw_3x3_sssa8_ch+0xa8>
 810ae4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810ae4e:	1e9c      	subs	r4, r3, #2
 810ae50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810ae52:	2100      	movs	r1, #0
 810ae54:	1d18      	adds	r0, r3, #4
 810ae56:	f04f 0c01 	mov.w	ip, #1
 810ae5a:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 810ae5e:	1e5a      	subs	r2, r3, #1
 810ae60:	b292      	uxth	r2, r2
 810ae62:	fa0c f503 	lsl.w	r5, ip, r3
 810ae66:	2a14      	cmp	r2, #20
 810ae68:	fa07 f303 	lsl.w	r3, r7, r3
 810ae6c:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 810ae70:	f101 0101 	add.w	r1, r1, #1
 810ae74:	f200 83fb 	bhi.w	810b66e <forward_lite_dw_3x3_sssa8_ch+0x892>
 810ae78:	428e      	cmp	r6, r1
 810ae7a:	f840 3c04 	str.w	r3, [r0, #-4]
 810ae7e:	f100 0004 	add.w	r0, r0, #4
 810ae82:	dcea      	bgt.n	810ae5a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 810ae84:	9b05      	ldr	r3, [sp, #20]
 810ae86:	9a07      	ldr	r2, [sp, #28]
 810ae88:	fb06 f303 	mul.w	r3, r6, r3
 810ae8c:	fb03 f202 	mul.w	r2, r3, r2
 810ae90:	eba3 0308 	sub.w	r3, r3, r8
 810ae94:	9307      	str	r3, [sp, #28]
 810ae96:	9b06      	ldr	r3, [sp, #24]
 810ae98:	9218      	str	r2, [sp, #96]	; 0x60
 810ae9a:	fb06 f303 	mul.w	r3, r6, r3
 810ae9e:	9314      	str	r3, [sp, #80]	; 0x50
 810aea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aea2:	2e03      	cmp	r6, #3
 810aea4:	f1c3 0300 	rsb	r3, r3, #0
 810aea8:	eac3 4503 	pkhbt	r5, r3, r3, lsl #16
 810aeac:	bf8c      	ite	hi
 810aeae:	1ef3      	subhi	r3, r6, #3
 810aeb0:	2300      	movls	r3, #0
 810aeb2:	930b      	str	r3, [sp, #44]	; 0x2c
 810aeb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810aeb6:	2b00      	cmp	r3, #0
 810aeb8:	f000 82b2 	beq.w	810b420 <forward_lite_dw_3x3_sssa8_ch+0x644>
 810aebc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810aebe:	f006 0303 	and.w	r3, r6, #3
 810aec2:	930d      	str	r3, [sp, #52]	; 0x34
 810aec4:	2a00      	cmp	r2, #0
 810aec6:	f000 82ab 	beq.w	810b420 <forward_lite_dw_3x3_sssa8_ch+0x644>
 810aeca:	3b01      	subs	r3, #1
 810aecc:	b29b      	uxth	r3, r3
 810aece:	9315      	str	r3, [sp, #84]	; 0x54
 810aed0:	2300      	movs	r3, #0
 810aed2:	9316      	str	r3, [sp, #88]	; 0x58
 810aed4:	46a8      	mov	r8, r5
 810aed6:	46b6      	mov	lr, r6
 810aed8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 810aedc:	fb03 2301 	mla	r3, r3, r1, r2
 810aee0:	9308      	str	r3, [sp, #32]
 810aee2:	2300      	movs	r3, #0
 810aee4:	46d9      	mov	r9, fp
 810aee6:	930e      	str	r3, [sp, #56]	; 0x38
 810aee8:	46f3      	mov	fp, lr
 810aeea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	f000 83a1 	beq.w	810b634 <forward_lite_dw_3x3_sssa8_ch+0x858>
 810aef2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 810aef6:	930c      	str	r3, [sp, #48]	; 0x30
 810aef8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 810aefa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 810aefc:	9912      	ldr	r1, [sp, #72]	; 0x48
 810aefe:	9204      	str	r2, [sp, #16]
 810af00:	f103 0010 	add.w	r0, r3, #16
 810af04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810af06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810af08:	f8cd 9004 	str.w	r9, [sp, #4]
 810af0c:	2400      	movs	r4, #0
 810af0e:	9406      	str	r4, [sp, #24]
 810af10:	3348      	adds	r3, #72	; 0x48
 810af12:	9203      	str	r2, [sp, #12]
 810af14:	9005      	str	r0, [sp, #20]
 810af16:	9102      	str	r1, [sp, #8]
 810af18:	9908      	ldr	r1, [sp, #32]
 810af1a:	9805      	ldr	r0, [sp, #20]
 810af1c:	f853 5c48 	ldr.w	r5, [r3, #-72]
 810af20:	900a      	str	r0, [sp, #40]	; 0x28
 810af22:	190a      	adds	r2, r1, r4
 810af24:	eb02 070b 	add.w	r7, r2, fp
 810af28:	590c      	ldr	r4, [r1, r4]
 810af2a:	f852 e00b 	ldr.w	lr, [r2, fp]
 810af2e:	9309      	str	r3, [sp, #36]	; 0x24
 810af30:	eac4 410e 	pkhbt	r1, r4, lr, lsl #16
 810af34:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 810af38:	eace 4e24 	pkhtb	lr, lr, r4, asr #16
 810af3c:	fa28 f681 	sxtab16	r6, r8, r1
 810af40:	f850 4c10 	ldr.w	r4, [r0, #-16]
 810af44:	fb25 4606 	smlad	r6, r5, r6, r4
 810af48:	fa28 f191 	sxtab16	r1, r8, r1, ror #8
 810af4c:	f853 4c44 	ldr.w	r4, [r3, #-68]
 810af50:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 810af54:	fb24 5101 	smlad	r1, r4, r1, r5
 810af58:	f853 4c40 	ldr.w	r4, [r3, #-64]
 810af5c:	f850 5c08 	ldr.w	r5, [r0, #-8]
 810af60:	fa28 fc8e 	sxtab16	ip, r8, lr
 810af64:	fb24 5c0c 	smlad	ip, r4, ip, r5
 810af68:	fa28 fe9e 	sxtab16	lr, r8, lr, ror #8
 810af6c:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 810af70:	f850 5c04 	ldr.w	r5, [r0, #-4]
 810af74:	fb24 550e 	smlad	r5, r4, lr, r5
 810af78:	9807      	ldr	r0, [sp, #28]
 810af7a:	f857 e00b 	ldr.w	lr, [r7, fp]
 810af7e:	f853 4c38 	ldr.w	r4, [r3, #-56]
 810af82:	1817      	adds	r7, r2, r0
 810af84:	5812      	ldr	r2, [r2, r0]
 810af86:	eace 4902 	pkhbt	r9, lr, r2, lsl #16
 810af8a:	eac2 422e 	pkhtb	r2, r2, lr, asr #16
 810af8e:	fa28 fa89 	sxtab16	sl, r8, r9
 810af92:	eb07 0e0b 	add.w	lr, r7, fp
 810af96:	fb24 660a 	smlad	r6, r4, sl, r6
 810af9a:	fa28 f999 	sxtab16	r9, r8, r9, ror #8
 810af9e:	f853 4c34 	ldr.w	r4, [r3, #-52]
 810afa2:	fb24 1409 	smlad	r4, r4, r9, r1
 810afa6:	f853 1c30 	ldr.w	r1, [r3, #-48]
 810afaa:	fa28 f982 	sxtab16	r9, r8, r2
 810afae:	fb21 cc09 	smlad	ip, r1, r9, ip
 810afb2:	fa28 f292 	sxtab16	r2, r8, r2, ror #8
 810afb6:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 810afba:	fb21 5202 	smlad	r2, r1, r2, r5
 810afbe:	f857 a00b 	ldr.w	sl, [r7, fp]
 810afc2:	f85e 100b 	ldr.w	r1, [lr, fp]
 810afc6:	f853 5c28 	ldr.w	r5, [r3, #-40]
 810afca:	eaca 4901 	pkhbt	r9, sl, r1, lsl #16
 810afce:	eb0e 070b 	add.w	r7, lr, fp
 810afd2:	eac1 412a 	pkhtb	r1, r1, sl, asr #16
 810afd6:	eb07 0e00 	add.w	lr, r7, r0
 810afda:	fa28 fa89 	sxtab16	sl, r8, r9
 810afde:	fb25 660a 	smlad	r6, r5, sl, r6
 810afe2:	fa28 f999 	sxtab16	r9, r8, r9, ror #8
 810afe6:	f853 5c24 	ldr.w	r5, [r3, #-36]
 810afea:	fb25 4909 	smlad	r9, r5, r9, r4
 810afee:	f853 4c20 	ldr.w	r4, [r3, #-32]
 810aff2:	fa28 f581 	sxtab16	r5, r8, r1
 810aff6:	fb24 c505 	smlad	r5, r4, r5, ip
 810affa:	fa28 f191 	sxtab16	r1, r8, r1, ror #8
 810affe:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 810b002:	fb24 2101 	smlad	r1, r4, r1, r2
 810b006:	583a      	ldr	r2, [r7, r0]
 810b008:	f85e 400b 	ldr.w	r4, [lr, fp]
 810b00c:	eac2 4704 	pkhbt	r7, r2, r4, lsl #16
 810b010:	44de      	add	lr, fp
 810b012:	eac4 4422 	pkhtb	r4, r4, r2, asr #16
 810b016:	fa28 fc87 	sxtab16	ip, r8, r7
 810b01a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 810b01e:	fb22 660c 	smlad	r6, r2, ip, r6
 810b022:	fa28 f797 	sxtab16	r7, r8, r7, ror #8
 810b026:	f853 2c14 	ldr.w	r2, [r3, #-20]
 810b02a:	fb22 9707 	smlad	r7, r2, r7, r9
 810b02e:	f853 2c10 	ldr.w	r2, [r3, #-16]
 810b032:	fa28 fc84 	sxtab16	ip, r8, r4
 810b036:	fb22 5c0c 	smlad	ip, r2, ip, r5
 810b03a:	fa28 f494 	sxtab16	r4, r8, r4, ror #8
 810b03e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 810b042:	fb22 1404 	smlad	r4, r2, r4, r1
 810b046:	f85e 200b 	ldr.w	r2, [lr, fp]
 810b04a:	980c      	ldr	r0, [sp, #48]	; 0x30
 810b04c:	f833 5c08 	ldrh.w	r5, [r3, #-8]
 810b050:	f833 9c04 	ldrh.w	r9, [r3, #-4]
 810b054:	f833 ec06 	ldrh.w	lr, [r3, #-6]
 810b058:	f833 ac02 	ldrh.w	sl, [r3, #-2]
 810b05c:	b251      	sxtb	r1, r2
 810b05e:	1a09      	subs	r1, r1, r0
 810b060:	fb15 6601 	smlabb	r6, r5, r1, r6
 810b064:	f342 2507 	sbfx	r5, r2, #8, #8
 810b068:	f342 4107 	sbfx	r1, r2, #16, #8
 810b06c:	1a09      	subs	r1, r1, r0
 810b06e:	1a2d      	subs	r5, r5, r0
 810b070:	ebc0 6222 	rsb	r2, r0, r2, asr #24
 810b074:	9802      	ldr	r0, [sp, #8]
 810b076:	fb19 c901 	smlabb	r9, r9, r1, ip
 810b07a:	f9b0 1000 	ldrsh.w	r1, [r0]
 810b07e:	2915      	cmp	r1, #21
 810b080:	fb1e 7505 	smlabb	r5, lr, r5, r7
 810b084:	fb1a 4a02 	smlabb	sl, sl, r2, r4
 810b088:	f340 8214 	ble.w	810b4b4 <forward_lite_dw_3x3_sssa8_ch+0x6d8>
 810b08c:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 810b090:	f1a1 0c02 	sub.w	ip, r1, #2
 810b094:	f854 eb04 	ldr.w	lr, [r4], #4
 810b098:	3901      	subs	r1, #1
 810b09a:	2201      	movs	r2, #1
 810b09c:	fa02 fc0c 	lsl.w	ip, r2, ip
 810b0a0:	f857 2b04 	ldr.w	r2, [r7], #4
 810b0a4:	fb56 c202 	smmla	r2, r6, r2, ip
 810b0a8:	410a      	asrs	r2, r1
 810b0aa:	4472      	add	r2, lr
 810b0ac:	1c86      	adds	r6, r0, #2
 810b0ae:	f302 0207 	ssat	r2, #8, r2
 810b0b2:	9901      	ldr	r1, [sp, #4]
 810b0b4:	b252      	sxtb	r2, r2
 810b0b6:	3101      	adds	r1, #1
 810b0b8:	9801      	ldr	r0, [sp, #4]
 810b0ba:	7002      	strb	r2, [r0, #0]
 810b0bc:	f9b6 6000 	ldrsh.w	r6, [r6]
 810b0c0:	2e15      	cmp	r6, #21
 810b0c2:	f340 81e2 	ble.w	810b48a <forward_lite_dw_3x3_sssa8_ch+0x6ae>
 810b0c6:	683a      	ldr	r2, [r7, #0]
 810b0c8:	6824      	ldr	r4, [r4, #0]
 810b0ca:	1eb7      	subs	r7, r6, #2
 810b0cc:	f04f 0c01 	mov.w	ip, #1
 810b0d0:	3e01      	subs	r6, #1
 810b0d2:	fa0c f707 	lsl.w	r7, ip, r7
 810b0d6:	fb55 7202 	smmla	r2, r5, r2, r7
 810b0da:	fa42 f706 	asr.w	r7, r2, r6
 810b0de:	9a04      	ldr	r2, [sp, #16]
 810b0e0:	4427      	add	r7, r4
 810b0e2:	f102 0608 	add.w	r6, r2, #8
 810b0e6:	9c03      	ldr	r4, [sp, #12]
 810b0e8:	9a02      	ldr	r2, [sp, #8]
 810b0ea:	f104 0508 	add.w	r5, r4, #8
 810b0ee:	3204      	adds	r2, #4
 810b0f0:	f307 0707 	ssat	r7, #8, r7
 810b0f4:	b27f      	sxtb	r7, r7
 810b0f6:	1c84      	adds	r4, r0, #2
 810b0f8:	700f      	strb	r7, [r1, #0]
 810b0fa:	f9b2 1000 	ldrsh.w	r1, [r2]
 810b0fe:	2915      	cmp	r1, #21
 810b100:	f340 8191 	ble.w	810b426 <forward_lite_dw_3x3_sssa8_ch+0x64a>
 810b104:	6832      	ldr	r2, [r6, #0]
 810b106:	682d      	ldr	r5, [r5, #0]
 810b108:	1e8e      	subs	r6, r1, #2
 810b10a:	2001      	movs	r0, #1
 810b10c:	3901      	subs	r1, #1
 810b10e:	fa00 f606 	lsl.w	r6, r0, r6
 810b112:	fb59 6202 	smmla	r2, r9, r2, r6
 810b116:	fa42 f601 	asr.w	r6, r2, r1
 810b11a:	9a04      	ldr	r2, [sp, #16]
 810b11c:	f102 0c0c 	add.w	ip, r2, #12
 810b120:	9a02      	ldr	r2, [sp, #8]
 810b122:	442e      	add	r6, r5
 810b124:	3206      	adds	r2, #6
 810b126:	9903      	ldr	r1, [sp, #12]
 810b128:	310c      	adds	r1, #12
 810b12a:	f306 0607 	ssat	r6, #8, r6
 810b12e:	b276      	sxtb	r6, r6
 810b130:	7026      	strb	r6, [r4, #0]
 810b132:	f9b2 6000 	ldrsh.w	r6, [r2]
 810b136:	9801      	ldr	r0, [sp, #4]
 810b138:	2e15      	cmp	r6, #21
 810b13a:	f100 0503 	add.w	r5, r0, #3
 810b13e:	f340 818f 	ble.w	810b460 <forward_lite_dw_3x3_sssa8_ch+0x684>
 810b142:	9c04      	ldr	r4, [sp, #16]
 810b144:	9f02      	ldr	r7, [sp, #8]
 810b146:	6809      	ldr	r1, [r1, #0]
 810b148:	9a03      	ldr	r2, [sp, #12]
 810b14a:	f8dc c000 	ldr.w	ip, [ip]
 810b14e:	f1a6 0e02 	sub.w	lr, r6, #2
 810b152:	2001      	movs	r0, #1
 810b154:	3e01      	subs	r6, #1
 810b156:	3410      	adds	r4, #16
 810b158:	3708      	adds	r7, #8
 810b15a:	fa00 fe0e 	lsl.w	lr, r0, lr
 810b15e:	fb5a ec0c 	smmla	ip, sl, ip, lr
 810b162:	fa4c fc06 	asr.w	ip, ip, r6
 810b166:	3210      	adds	r2, #16
 810b168:	448c      	add	ip, r1
 810b16a:	46a2      	mov	sl, r4
 810b16c:	463e      	mov	r6, r7
 810b16e:	4696      	mov	lr, r2
 810b170:	f30c 0c07 	ssat	ip, #8, ip
 810b174:	fa4f fc8c 	sxtb.w	ip, ip
 810b178:	f885 c000 	strb.w	ip, [r5]
 810b17c:	9d06      	ldr	r5, [sp, #24]
 810b17e:	9901      	ldr	r1, [sp, #4]
 810b180:	9203      	str	r2, [sp, #12]
 810b182:	3504      	adds	r5, #4
 810b184:	b2a8      	uxth	r0, r5
 810b186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810b188:	9d05      	ldr	r5, [sp, #20]
 810b18a:	9404      	str	r4, [sp, #16]
 810b18c:	3104      	adds	r1, #4
 810b18e:	3510      	adds	r5, #16
 810b190:	4290      	cmp	r0, r2
 810b192:	4689      	mov	r9, r1
 810b194:	9006      	str	r0, [sp, #24]
 810b196:	9505      	str	r5, [sp, #20]
 810b198:	f103 0348 	add.w	r3, r3, #72	; 0x48
 810b19c:	9702      	str	r7, [sp, #8]
 810b19e:	9101      	str	r1, [sp, #4]
 810b1a0:	4604      	mov	r4, r0
 810b1a2:	f4ff aeb9 	bcc.w	810af18 <forward_lite_dw_3x3_sssa8_ch+0x13c>
 810b1a6:	46b4      	mov	ip, r6
 810b1a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	f000 8122 	beq.w	810b3f4 <forward_lite_dw_3x3_sssa8_ch+0x618>
 810b1b0:	9908      	ldr	r1, [sp, #32]
 810b1b2:	9b06      	ldr	r3, [sp, #24]
 810b1b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b1b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 810b1b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 810b1ba:	56c8      	ldrsb	r0, [r1, r3]
 810b1bc:	9d07      	ldr	r5, [sp, #28]
 810b1be:	18ca      	adds	r2, r1, r3
 810b1c0:	6823      	ldr	r3, [r4, #0]
 810b1c2:	883c      	ldrh	r4, [r7, #0]
 810b1c4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
 810b1c8:	1b80      	subs	r0, r0, r6
 810b1ca:	fb14 3400 	smlabb	r4, r4, r0, r3
 810b1ce:	f912 300b 	ldrsb.w	r3, [r2, fp]
 810b1d2:	f912 201b 	ldrsb.w	r2, [r2, fp, lsl #1]
 810b1d6:	1948      	adds	r0, r1, r5
 810b1d8:	5749      	ldrsb	r1, [r1, r5]
 810b1da:	887d      	ldrh	r5, [r7, #2]
 810b1dc:	1b9b      	subs	r3, r3, r6
 810b1de:	fb13 4305 	smlabb	r3, r3, r5, r4
 810b1e2:	88bc      	ldrh	r4, [r7, #4]
 810b1e4:	1b92      	subs	r2, r2, r6
 810b1e6:	fb12 3304 	smlabb	r3, r2, r4, r3
 810b1ea:	88fa      	ldrh	r2, [r7, #6]
 810b1ec:	1b89      	subs	r1, r1, r6
 810b1ee:	eb00 044b 	add.w	r4, r0, fp, lsl #1
 810b1f2:	fb11 3102 	smlabb	r1, r1, r2, r3
 810b1f6:	f910 200b 	ldrsb.w	r2, [r0, fp]
 810b1fa:	f910 301b 	ldrsb.w	r3, [r0, fp, lsl #1]
 810b1fe:	9807      	ldr	r0, [sp, #28]
 810b200:	1825      	adds	r5, r4, r0
 810b202:	5620      	ldrsb	r0, [r4, r0]
 810b204:	893c      	ldrh	r4, [r7, #8]
 810b206:	1b92      	subs	r2, r2, r6
 810b208:	fb12 1204 	smlabb	r2, r2, r4, r1
 810b20c:	8979      	ldrh	r1, [r7, #10]
 810b20e:	f9bc 4000 	ldrsh.w	r4, [ip]
 810b212:	1b9b      	subs	r3, r3, r6
 810b214:	fb13 2301 	smlabb	r3, r3, r1, r2
 810b218:	89b9      	ldrh	r1, [r7, #12]
 810b21a:	f915 201b 	ldrsb.w	r2, [r5, fp, lsl #1]
 810b21e:	1b80      	subs	r0, r0, r6
 810b220:	fb10 3101 	smlabb	r1, r0, r1, r3
 810b224:	f915 300b 	ldrsb.w	r3, [r5, fp]
 810b228:	89f8      	ldrh	r0, [r7, #14]
 810b22a:	1b9b      	subs	r3, r3, r6
 810b22c:	fb13 1300 	smlabb	r3, r3, r0, r1
 810b230:	8a39      	ldrh	r1, [r7, #16]
 810b232:	1b92      	subs	r2, r2, r6
 810b234:	fb12 3201 	smlabb	r2, r2, r1, r3
 810b238:	9b06      	ldr	r3, [sp, #24]
 810b23a:	2c15      	cmp	r4, #21
 810b23c:	f103 0301 	add.w	r3, r3, #1
 810b240:	b29d      	uxth	r5, r3
 810b242:	b231      	sxth	r1, r6
 810b244:	f300 819e 	bgt.w	810b584 <forward_lite_dw_3x3_sssa8_ch+0x7a8>
 810b248:	2c00      	cmp	r4, #0
 810b24a:	f340 81d3 	ble.w	810b5f4 <forward_lite_dw_3x3_sssa8_ch+0x818>
 810b24e:	0050      	lsls	r0, r2, #1
 810b250:	f8da 3000 	ldr.w	r3, [sl]
 810b254:	f8de 2000 	ldr.w	r2, [lr]
 810b258:	fb50 2003 	smmla	r0, r0, r3, r2
 810b25c:	4120      	asrs	r0, r4
 810b25e:	f300 0307 	ssat	r3, #8, r0
 810b262:	f109 0201 	add.w	r2, r9, #1
 810b266:	b25b      	sxtb	r3, r3
 810b268:	9201      	str	r2, [sp, #4]
 810b26a:	f889 3000 	strb.w	r3, [r9]
 810b26e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b270:	2b00      	cmp	r3, #0
 810b272:	f000 80bd 	beq.w	810b3f0 <forward_lite_dw_3x3_sssa8_ch+0x614>
 810b276:	9b06      	ldr	r3, [sp, #24]
 810b278:	9e09      	ldr	r6, [sp, #36]	; 0x24
 810b27a:	9f07      	ldr	r7, [sp, #28]
 810b27c:	3302      	adds	r3, #2
 810b27e:	b29b      	uxth	r3, r3
 810b280:	9302      	str	r3, [sp, #8]
 810b282:	9b08      	ldr	r3, [sp, #32]
 810b284:	195c      	adds	r4, r3, r5
 810b286:	575a      	ldrsb	r2, [r3, r5]
 810b288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b28a:	8a75      	ldrh	r5, [r6, #18]
 810b28c:	685b      	ldr	r3, [r3, #4]
 810b28e:	eb04 004b 	add.w	r0, r4, fp, lsl #1
 810b292:	1a52      	subs	r2, r2, r1
 810b294:	fb12 3205 	smlabb	r2, r2, r5, r3
 810b298:	f914 300b 	ldrsb.w	r3, [r4, fp]
 810b29c:	f914 501b 	ldrsb.w	r5, [r4, fp, lsl #1]
 810b2a0:	19c4      	adds	r4, r0, r7
 810b2a2:	57c0      	ldrsb	r0, [r0, r7]
 810b2a4:	4637      	mov	r7, r6
 810b2a6:	8ab6      	ldrh	r6, [r6, #20]
 810b2a8:	1a5b      	subs	r3, r3, r1
 810b2aa:	fb13 2306 	smlabb	r3, r3, r6, r2
 810b2ae:	8afa      	ldrh	r2, [r7, #22]
 810b2b0:	1a6d      	subs	r5, r5, r1
 810b2b2:	fb15 3302 	smlabb	r3, r5, r2, r3
 810b2b6:	8b3a      	ldrh	r2, [r7, #24]
 810b2b8:	1a40      	subs	r0, r0, r1
 810b2ba:	eb04 054b 	add.w	r5, r4, fp, lsl #1
 810b2be:	fb10 3002 	smlabb	r0, r0, r2, r3
 810b2c2:	f914 200b 	ldrsb.w	r2, [r4, fp]
 810b2c6:	f914 301b 	ldrsb.w	r3, [r4, fp, lsl #1]
 810b2ca:	9c07      	ldr	r4, [sp, #28]
 810b2cc:	192e      	adds	r6, r5, r4
 810b2ce:	572c      	ldrsb	r4, [r5, r4]
 810b2d0:	8b7d      	ldrh	r5, [r7, #26]
 810b2d2:	1a52      	subs	r2, r2, r1
 810b2d4:	fb12 0205 	smlabb	r2, r2, r5, r0
 810b2d8:	8bb8      	ldrh	r0, [r7, #28]
 810b2da:	1a5b      	subs	r3, r3, r1
 810b2dc:	fb13 2300 	smlabb	r3, r3, r0, r2
 810b2e0:	8bf8      	ldrh	r0, [r7, #30]
 810b2e2:	f916 201b 	ldrsb.w	r2, [r6, fp, lsl #1]
 810b2e6:	1a64      	subs	r4, r4, r1
 810b2e8:	fb14 3000 	smlabb	r0, r4, r0, r3
 810b2ec:	f916 300b 	ldrsb.w	r3, [r6, fp]
 810b2f0:	8c3c      	ldrh	r4, [r7, #32]
 810b2f2:	1a5b      	subs	r3, r3, r1
 810b2f4:	fb13 0304 	smlabb	r3, r3, r4, r0
 810b2f8:	f9bc 4002 	ldrsh.w	r4, [ip, #2]
 810b2fc:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 810b2fe:	1a52      	subs	r2, r2, r1
 810b300:	2c15      	cmp	r4, #21
 810b302:	fb12 3200 	smlabb	r2, r2, r0, r3
 810b306:	f300 8151 	bgt.w	810b5ac <forward_lite_dw_3x3_sssa8_ch+0x7d0>
 810b30a:	2c00      	cmp	r4, #0
 810b30c:	f340 8185 	ble.w	810b61a <forward_lite_dw_3x3_sssa8_ch+0x83e>
 810b310:	0050      	lsls	r0, r2, #1
 810b312:	f8da 3004 	ldr.w	r3, [sl, #4]
 810b316:	f8de 2004 	ldr.w	r2, [lr, #4]
 810b31a:	fb50 2003 	smmla	r0, r0, r3, r2
 810b31e:	4120      	asrs	r0, r4
 810b320:	f300 0307 	ssat	r3, #8, r0
 810b324:	9a01      	ldr	r2, [sp, #4]
 810b326:	3201      	adds	r2, #1
 810b328:	b25b      	sxtb	r3, r3
 810b32a:	9203      	str	r2, [sp, #12]
 810b32c:	9a01      	ldr	r2, [sp, #4]
 810b32e:	7013      	strb	r3, [r2, #0]
 810b330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b332:	2b02      	cmp	r3, #2
 810b334:	d05c      	beq.n	810b3f0 <forward_lite_dw_3x3_sssa8_ch+0x614>
 810b336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b338:	9802      	ldr	r0, [sp, #8]
 810b33a:	689c      	ldr	r4, [r3, #8]
 810b33c:	9b08      	ldr	r3, [sp, #32]
 810b33e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b340:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 810b344:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 810b346:	181a      	adds	r2, r3, r0
 810b348:	5618      	ldrsb	r0, [r3, r0]
 810b34a:	f912 600b 	ldrsb.w	r6, [r2, fp]
 810b34e:	1a40      	subs	r0, r0, r1
 810b350:	fb15 4500 	smlabb	r5, r5, r0, r4
 810b354:	eb02 034b 	add.w	r3, r2, fp, lsl #1
 810b358:	9807      	ldr	r0, [sp, #28]
 810b35a:	f912 401b 	ldrsb.w	r4, [r2, fp, lsl #1]
 810b35e:	181a      	adds	r2, r3, r0
 810b360:	5618      	ldrsb	r0, [r3, r0]
 810b362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b364:	1a76      	subs	r6, r6, r1
 810b366:	fb13 5306 	smlabb	r3, r3, r6, r5
 810b36a:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 810b36c:	463e      	mov	r6, r7
 810b36e:	1a64      	subs	r4, r4, r1
 810b370:	fb15 3304 	smlabb	r3, r5, r4, r3
 810b374:	8d74      	ldrh	r4, [r6, #42]	; 0x2a
 810b376:	f912 500b 	ldrsb.w	r5, [r2, fp]
 810b37a:	1a40      	subs	r0, r0, r1
 810b37c:	eb02 074b 	add.w	r7, r2, fp, lsl #1
 810b380:	fb14 3400 	smlabb	r4, r4, r0, r3
 810b384:	9b07      	ldr	r3, [sp, #28]
 810b386:	f912 001b 	ldrsb.w	r0, [r2, fp, lsl #1]
 810b38a:	18fe      	adds	r6, r7, r3
 810b38c:	56fb      	ldrsb	r3, [r7, r3]
 810b38e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b390:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 810b392:	1a6d      	subs	r5, r5, r1
 810b394:	fb12 4205 	smlabb	r2, r2, r5, r4
 810b398:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 810b39a:	1a40      	subs	r0, r0, r1
 810b39c:	fb14 2400 	smlabb	r4, r4, r0, r2
 810b3a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 810b3a2:	1a5b      	subs	r3, r3, r1
 810b3a4:	fb12 4403 	smlabb	r4, r2, r3, r4
 810b3a8:	f916 300b 	ldrsb.w	r3, [r6, fp]
 810b3ac:	f916 201b 	ldrsb.w	r2, [r6, fp, lsl #1]
 810b3b0:	1a5b      	subs	r3, r3, r1
 810b3b2:	1a52      	subs	r2, r2, r1
 810b3b4:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 810b3b6:	fb11 4103 	smlabb	r1, r1, r3, r4
 810b3ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 810b3bc:	f1bc 0f15 	cmp.w	ip, #21
 810b3c0:	fb13 1302 	smlabb	r3, r3, r2, r1
 810b3c4:	f340 8106 	ble.w	810b5d4 <forward_lite_dw_3x3_sssa8_ch+0x7f8>
 810b3c8:	f8de 1008 	ldr.w	r1, [lr, #8]
 810b3cc:	f8da 2008 	ldr.w	r2, [sl, #8]
 810b3d0:	f1ac 0002 	sub.w	r0, ip, #2
 810b3d4:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 810b3d8:	2501      	movs	r5, #1
 810b3da:	fa05 f000 	lsl.w	r0, r5, r0
 810b3de:	fb53 0202 	smmla	r2, r3, r2, r0
 810b3e2:	4122      	asrs	r2, r4
 810b3e4:	440a      	add	r2, r1
 810b3e6:	f302 0307 	ssat	r3, #8, r2
 810b3ea:	b25b      	sxtb	r3, r3
 810b3ec:	9a03      	ldr	r2, [sp, #12]
 810b3ee:	7013      	strb	r3, [r2, #0]
 810b3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b3f2:	4499      	add	r9, r3
 810b3f4:	9a08      	ldr	r2, [sp, #32]
 810b3f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 810b3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b3fa:	440a      	add	r2, r1
 810b3fc:	3301      	adds	r3, #1
 810b3fe:	9208      	str	r2, [sp, #32]
 810b400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810b402:	b21b      	sxth	r3, r3
 810b404:	429a      	cmp	r2, r3
 810b406:	930e      	str	r3, [sp, #56]	; 0x38
 810b408:	f73f ad6f 	bgt.w	810aeea <forward_lite_dw_3x3_sssa8_ch+0x10e>
 810b40c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 810b40e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 810b410:	3301      	adds	r3, #1
 810b412:	b21b      	sxth	r3, r3
 810b414:	428b      	cmp	r3, r1
 810b416:	46de      	mov	lr, fp
 810b418:	9316      	str	r3, [sp, #88]	; 0x58
 810b41a:	46cb      	mov	fp, r9
 810b41c:	f6ff ad5c 	blt.w	810aed8 <forward_lite_dw_3x3_sssa8_ch+0xfc>
 810b420:	b01d      	add	sp, #116	; 0x74
 810b422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b426:	2900      	cmp	r1, #0
 810b428:	dd58      	ble.n	810b4dc <forward_lite_dw_3x3_sssa8_ch+0x700>
 810b42a:	6832      	ldr	r2, [r6, #0]
 810b42c:	682d      	ldr	r5, [r5, #0]
 810b42e:	ea4f 0649 	mov.w	r6, r9, lsl #1
 810b432:	fb56 5602 	smmla	r6, r6, r2, r5
 810b436:	9a04      	ldr	r2, [sp, #16]
 810b438:	f102 0c0c 	add.w	ip, r2, #12
 810b43c:	9a03      	ldr	r2, [sp, #12]
 810b43e:	410e      	asrs	r6, r1
 810b440:	f102 010c 	add.w	r1, r2, #12
 810b444:	9a02      	ldr	r2, [sp, #8]
 810b446:	3206      	adds	r2, #6
 810b448:	f306 0607 	ssat	r6, #8, r6
 810b44c:	b276      	sxtb	r6, r6
 810b44e:	7026      	strb	r6, [r4, #0]
 810b450:	f9b2 6000 	ldrsh.w	r6, [r2]
 810b454:	9801      	ldr	r0, [sp, #4]
 810b456:	2e15      	cmp	r6, #21
 810b458:	f100 0503 	add.w	r5, r0, #3
 810b45c:	f73f ae71 	bgt.w	810b142 <forward_lite_dw_3x3_sssa8_ch+0x366>
 810b460:	2e00      	cmp	r6, #0
 810b462:	dd7a      	ble.n	810b55a <forward_lite_dw_3x3_sssa8_ch+0x77e>
 810b464:	9c04      	ldr	r4, [sp, #16]
 810b466:	9a03      	ldr	r2, [sp, #12]
 810b468:	9f02      	ldr	r7, [sp, #8]
 810b46a:	f8dc e000 	ldr.w	lr, [ip]
 810b46e:	6809      	ldr	r1, [r1, #0]
 810b470:	3410      	adds	r4, #16
 810b472:	3210      	adds	r2, #16
 810b474:	3708      	adds	r7, #8
 810b476:	ea4f 0c4a 	mov.w	ip, sl, lsl #1
 810b47a:	46a2      	mov	sl, r4
 810b47c:	fb5c 1c0e 	smmla	ip, ip, lr, r1
 810b480:	4696      	mov	lr, r2
 810b482:	fa4c fc06 	asr.w	ip, ip, r6
 810b486:	463e      	mov	r6, r7
 810b488:	e672      	b.n	810b170 <forward_lite_dw_3x3_sssa8_ch+0x394>
 810b48a:	2e00      	cmp	r6, #0
 810b48c:	dd4d      	ble.n	810b52a <forward_lite_dw_3x3_sssa8_ch+0x74e>
 810b48e:	683a      	ldr	r2, [r7, #0]
 810b490:	6824      	ldr	r4, [r4, #0]
 810b492:	006f      	lsls	r7, r5, #1
 810b494:	fb57 4702 	smmla	r7, r7, r2, r4
 810b498:	9a04      	ldr	r2, [sp, #16]
 810b49a:	4137      	asrs	r7, r6
 810b49c:	f102 0608 	add.w	r6, r2, #8
 810b4a0:	9a03      	ldr	r2, [sp, #12]
 810b4a2:	f102 0508 	add.w	r5, r2, #8
 810b4a6:	9a02      	ldr	r2, [sp, #8]
 810b4a8:	3204      	adds	r2, #4
 810b4aa:	f307 0707 	ssat	r7, #8, r7
 810b4ae:	b27f      	sxtb	r7, r7
 810b4b0:	1c84      	adds	r4, r0, #2
 810b4b2:	e621      	b.n	810b0f8 <forward_lite_dw_3x3_sssa8_ch+0x31c>
 810b4b4:	2900      	cmp	r1, #0
 810b4b6:	dd22      	ble.n	810b4fe <forward_lite_dw_3x3_sssa8_ch+0x722>
 810b4b8:	e9dd 4703 	ldrd	r4, r7, [sp, #12]
 810b4bc:	0072      	lsls	r2, r6, #1
 810b4be:	f854 cb04 	ldr.w	ip, [r4], #4
 810b4c2:	f857 6b04 	ldr.w	r6, [r7], #4
 810b4c6:	fb52 c206 	smmla	r2, r2, r6, ip
 810b4ca:	410a      	asrs	r2, r1
 810b4cc:	9902      	ldr	r1, [sp, #8]
 810b4ce:	1c8e      	adds	r6, r1, #2
 810b4d0:	f302 0207 	ssat	r2, #8, r2
 810b4d4:	9901      	ldr	r1, [sp, #4]
 810b4d6:	b252      	sxtb	r2, r2
 810b4d8:	3101      	adds	r1, #1
 810b4da:	e5ed      	b.n	810b0b8 <forward_lite_dw_3x3_sssa8_ch+0x2dc>
 810b4dc:	9a02      	ldr	r2, [sp, #8]
 810b4de:	f1c1 0101 	rsb	r1, r1, #1
 810b4e2:	fa09 f101 	lsl.w	r1, r9, r1
 810b4e6:	3206      	adds	r2, #6
 810b4e8:	f301 011f 	ssat	r1, #32, r1
 810b4ec:	9804      	ldr	r0, [sp, #16]
 810b4ee:	6836      	ldr	r6, [r6, #0]
 810b4f0:	f100 0c0c 	add.w	ip, r0, #12
 810b4f4:	fb51 f116 	smmulr	r1, r1, r6
 810b4f8:	682e      	ldr	r6, [r5, #0]
 810b4fa:	440e      	add	r6, r1
 810b4fc:	e613      	b.n	810b126 <forward_lite_dw_3x3_sssa8_ch+0x34a>
 810b4fe:	f1c1 0101 	rsb	r1, r1, #1
 810b502:	fa06 f101 	lsl.w	r1, r6, r1
 810b506:	1c86      	adds	r6, r0, #2
 810b508:	f301 011f 	ssat	r1, #32, r1
 810b50c:	9f04      	ldr	r7, [sp, #16]
 810b50e:	f857 2b04 	ldr.w	r2, [r7], #4
 810b512:	fb51 f212 	smmulr	r2, r1, r2
 810b516:	9c03      	ldr	r4, [sp, #12]
 810b518:	f854 1b04 	ldr.w	r1, [r4], #4
 810b51c:	440a      	add	r2, r1
 810b51e:	f302 0207 	ssat	r2, #8, r2
 810b522:	9901      	ldr	r1, [sp, #4]
 810b524:	b252      	sxtb	r2, r2
 810b526:	3101      	adds	r1, #1
 810b528:	e5c6      	b.n	810b0b8 <forward_lite_dw_3x3_sssa8_ch+0x2dc>
 810b52a:	9a02      	ldr	r2, [sp, #8]
 810b52c:	f1c6 0601 	rsb	r6, r6, #1
 810b530:	40b5      	lsls	r5, r6
 810b532:	3204      	adds	r2, #4
 810b534:	f305 051f 	ssat	r5, #32, r5
 810b538:	9804      	ldr	r0, [sp, #16]
 810b53a:	683f      	ldr	r7, [r7, #0]
 810b53c:	f100 0608 	add.w	r6, r0, #8
 810b540:	fb55 f517 	smmulr	r5, r5, r7
 810b544:	6827      	ldr	r7, [r4, #0]
 810b546:	9803      	ldr	r0, [sp, #12]
 810b548:	442f      	add	r7, r5
 810b54a:	f100 0508 	add.w	r5, r0, #8
 810b54e:	f307 0707 	ssat	r7, #8, r7
 810b552:	9801      	ldr	r0, [sp, #4]
 810b554:	b27f      	sxtb	r7, r7
 810b556:	1c84      	adds	r4, r0, #2
 810b558:	e5ce      	b.n	810b0f8 <forward_lite_dw_3x3_sssa8_ch+0x31c>
 810b55a:	9f02      	ldr	r7, [sp, #8]
 810b55c:	f1c6 0201 	rsb	r2, r6, #1
 810b560:	3708      	adds	r7, #8
 810b562:	fa0a f202 	lsl.w	r2, sl, r2
 810b566:	463e      	mov	r6, r7
 810b568:	f302 021f 	ssat	r2, #32, r2
 810b56c:	9c04      	ldr	r4, [sp, #16]
 810b56e:	f8dc c000 	ldr.w	ip, [ip]
 810b572:	3410      	adds	r4, #16
 810b574:	46a2      	mov	sl, r4
 810b576:	fb52 fc1c 	smmulr	ip, r2, ip
 810b57a:	680a      	ldr	r2, [r1, #0]
 810b57c:	4494      	add	ip, r2
 810b57e:	9a03      	ldr	r2, [sp, #12]
 810b580:	3210      	adds	r2, #16
 810b582:	e5f4      	b.n	810b16e <forward_lite_dw_3x3_sssa8_ch+0x392>
 810b584:	f8de 6000 	ldr.w	r6, [lr]
 810b588:	1ea0      	subs	r0, r4, #2
 810b58a:	2301      	movs	r3, #1
 810b58c:	3c01      	subs	r4, #1
 810b58e:	fa03 f000 	lsl.w	r0, r3, r0
 810b592:	f8da 3000 	ldr.w	r3, [sl]
 810b596:	fb52 0303 	smmla	r3, r2, r3, r0
 810b59a:	4123      	asrs	r3, r4
 810b59c:	4433      	add	r3, r6
 810b59e:	f303 0307 	ssat	r3, #8, r3
 810b5a2:	f109 0201 	add.w	r2, r9, #1
 810b5a6:	b25b      	sxtb	r3, r3
 810b5a8:	9201      	str	r2, [sp, #4]
 810b5aa:	e65e      	b.n	810b26a <forward_lite_dw_3x3_sssa8_ch+0x48e>
 810b5ac:	1ea0      	subs	r0, r4, #2
 810b5ae:	2301      	movs	r3, #1
 810b5b0:	f8de 5004 	ldr.w	r5, [lr, #4]
 810b5b4:	3c01      	subs	r4, #1
 810b5b6:	fa03 f000 	lsl.w	r0, r3, r0
 810b5ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 810b5be:	fb52 0303 	smmla	r3, r2, r3, r0
 810b5c2:	4123      	asrs	r3, r4
 810b5c4:	442b      	add	r3, r5
 810b5c6:	f303 0307 	ssat	r3, #8, r3
 810b5ca:	9a01      	ldr	r2, [sp, #4]
 810b5cc:	3201      	adds	r2, #1
 810b5ce:	b25b      	sxtb	r3, r3
 810b5d0:	9203      	str	r2, [sp, #12]
 810b5d2:	e6ab      	b.n	810b32c <forward_lite_dw_3x3_sssa8_ch+0x550>
 810b5d4:	f1bc 0f00 	cmp.w	ip, #0
 810b5d8:	dd38      	ble.n	810b64c <forward_lite_dw_3x3_sssa8_ch+0x870>
 810b5da:	f8da 2008 	ldr.w	r2, [sl, #8]
 810b5de:	f8de 1008 	ldr.w	r1, [lr, #8]
 810b5e2:	005b      	lsls	r3, r3, #1
 810b5e4:	fb53 1302 	smmla	r3, r3, r2, r1
 810b5e8:	fa43 f30c 	asr.w	r3, r3, ip
 810b5ec:	f303 0307 	ssat	r3, #8, r3
 810b5f0:	b25b      	sxtb	r3, r3
 810b5f2:	e6fb      	b.n	810b3ec <forward_lite_dw_3x3_sssa8_ch+0x610>
 810b5f4:	f1c4 0301 	rsb	r3, r4, #1
 810b5f8:	409a      	lsls	r2, r3
 810b5fa:	f302 021f 	ssat	r2, #32, r2
 810b5fe:	f8da 3000 	ldr.w	r3, [sl]
 810b602:	fb52 f213 	smmulr	r2, r2, r3
 810b606:	f8de 3000 	ldr.w	r3, [lr]
 810b60a:	4413      	add	r3, r2
 810b60c:	f303 0307 	ssat	r3, #8, r3
 810b610:	f109 0201 	add.w	r2, r9, #1
 810b614:	b25b      	sxtb	r3, r3
 810b616:	9201      	str	r2, [sp, #4]
 810b618:	e627      	b.n	810b26a <forward_lite_dw_3x3_sssa8_ch+0x48e>
 810b61a:	f1c4 0301 	rsb	r3, r4, #1
 810b61e:	409a      	lsls	r2, r3
 810b620:	f302 021f 	ssat	r2, #32, r2
 810b624:	f8da 3004 	ldr.w	r3, [sl, #4]
 810b628:	fb52 f213 	smmulr	r2, r2, r3
 810b62c:	f8de 3004 	ldr.w	r3, [lr, #4]
 810b630:	4413      	add	r3, r2
 810b632:	e7c8      	b.n	810b5c6 <forward_lite_dw_3x3_sssa8_ch+0x7ea>
 810b634:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 810b636:	930a      	str	r3, [sp, #40]	; 0x28
 810b638:	e9dd 3e10 	ldrd	r3, lr, [sp, #64]	; 0x40
 810b63c:	9309      	str	r3, [sp, #36]	; 0x24
 810b63e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810b640:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 810b644:	469c      	mov	ip, r3
 810b646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b648:	9306      	str	r3, [sp, #24]
 810b64a:	e5ad      	b.n	810b1a8 <forward_lite_dw_3x3_sssa8_ch+0x3cc>
 810b64c:	f1cc 0c01 	rsb	ip, ip, #1
 810b650:	fa03 f30c 	lsl.w	r3, r3, ip
 810b654:	f303 031f 	ssat	r3, #32, r3
 810b658:	f8da 2008 	ldr.w	r2, [sl, #8]
 810b65c:	fb53 f212 	smmulr	r2, r3, r2
 810b660:	f8de 3008 	ldr.w	r3, [lr, #8]
 810b664:	4413      	add	r3, r2
 810b666:	f303 0307 	ssat	r3, #8, r3
 810b66a:	b25b      	sxtb	r3, r3
 810b66c:	e6be      	b.n	810b3ec <forward_lite_dw_3x3_sssa8_ch+0x610>
 810b66e:	42b1      	cmp	r1, r6
 810b670:	f840 7c04 	str.w	r7, [r0, #-4]
 810b674:	f100 0004 	add.w	r0, r0, #4
 810b678:	f6ff abef 	blt.w	810ae5a <forward_lite_dw_3x3_sssa8_ch+0x7e>
 810b67c:	e402      	b.n	810ae84 <forward_lite_dw_3x3_sssa8_ch+0xa8>
 810b67e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 810b680:	ea5f 0c96 	movs.w	ip, r6, lsr #2
 810b684:	eb03 00c6 	add.w	r0, r3, r6, lsl #3
 810b688:	9010      	str	r0, [sp, #64]	; 0x40
 810b68a:	f000 8138 	beq.w	810b8fe <forward_lite_dw_3x3_sssa8_ch+0xb22>
 810b68e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 810b692:	f10e 0204 	add.w	r2, lr, #4
 810b696:	b29b      	uxth	r3, r3
 810b698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b69c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 810b6a0:	9204      	str	r2, [sp, #16]
 810b6a2:	00b2      	lsls	r2, r6, #2
 810b6a4:	9203      	str	r2, [sp, #12]
 810b6a6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 810b6aa:	9301      	str	r3, [sp, #4]
 810b6ac:	4671      	mov	r1, lr
 810b6ae:	eb0e 0306 	add.w	r3, lr, r6
 810b6b2:	ea4f 0846 	mov.w	r8, r6, lsl #1
 810b6b6:	9202      	str	r2, [sp, #8]
 810b6b8:	eba9 0a06 	sub.w	sl, r9, r6
 810b6bc:	901b      	str	r0, [sp, #108]	; 0x6c
 810b6be:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b6c0:	680d      	ldr	r5, [r1, #0]
 810b6c2:	1d22      	adds	r2, r4, #4
 810b6c4:	921b      	str	r2, [sp, #108]	; 0x6c
 810b6c6:	681a      	ldr	r2, [r3, #0]
 810b6c8:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 810b6cc:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 810b6d0:	fa2f f580 	sxtb16	r5, r0
 810b6d4:	6025      	str	r5, [r4, #0]
 810b6d6:	fa2f f090 	sxtb16	r0, r0, ror #8
 810b6da:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b6dc:	6020      	str	r0, [r4, #0]
 810b6de:	3404      	adds	r4, #4
 810b6e0:	941b      	str	r4, [sp, #108]	; 0x6c
 810b6e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b6e4:	fa2f f482 	sxtb16	r4, r2
 810b6e8:	3004      	adds	r0, #4
 810b6ea:	f840 4c04 	str.w	r4, [r0, #-4]
 810b6ee:	901b      	str	r0, [sp, #108]	; 0x6c
 810b6f0:	fa2f f292 	sxtb16	r2, r2, ror #8
 810b6f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b6f6:	6002      	str	r2, [r0, #0]
 810b6f8:	3004      	adds	r0, #4
 810b6fa:	901b      	str	r0, [sp, #108]	; 0x6c
 810b6fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b6fe:	f858 5001 	ldr.w	r5, [r8, r1]
 810b702:	1d22      	adds	r2, r4, #4
 810b704:	921b      	str	r2, [sp, #108]	; 0x6c
 810b706:	f858 2003 	ldr.w	r2, [r8, r3]
 810b70a:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 810b70e:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 810b712:	fa2f f580 	sxtb16	r5, r0
 810b716:	6025      	str	r5, [r4, #0]
 810b718:	fa2f f090 	sxtb16	r0, r0, ror #8
 810b71c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b71e:	6020      	str	r0, [r4, #0]
 810b720:	3404      	adds	r4, #4
 810b722:	941b      	str	r4, [sp, #108]	; 0x6c
 810b724:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b726:	fa2f f482 	sxtb16	r4, r2
 810b72a:	3004      	adds	r0, #4
 810b72c:	f840 4c04 	str.w	r4, [r0, #-4]
 810b730:	901b      	str	r0, [sp, #108]	; 0x6c
 810b732:	fa2f f292 	sxtb16	r2, r2, ror #8
 810b736:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b738:	6002      	str	r2, [r0, #0]
 810b73a:	3004      	adds	r0, #4
 810b73c:	901b      	str	r0, [sp, #108]	; 0x6c
 810b73e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b740:	9a04      	ldr	r2, [sp, #16]
 810b742:	58d5      	ldr	r5, [r2, r3]
 810b744:	1d22      	adds	r2, r4, #4
 810b746:	921b      	str	r2, [sp, #108]	; 0x6c
 810b748:	9a03      	ldr	r2, [sp, #12]
 810b74a:	58d2      	ldr	r2, [r2, r3]
 810b74c:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 810b750:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 810b754:	fa2f f580 	sxtb16	r5, r0
 810b758:	6025      	str	r5, [r4, #0]
 810b75a:	fa2f f090 	sxtb16	r0, r0, ror #8
 810b75e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b760:	6020      	str	r0, [r4, #0]
 810b762:	3404      	adds	r4, #4
 810b764:	941b      	str	r4, [sp, #108]	; 0x6c
 810b766:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b768:	fa2f f482 	sxtb16	r4, r2
 810b76c:	3004      	adds	r0, #4
 810b76e:	f840 4c04 	str.w	r4, [r0, #-4]
 810b772:	901b      	str	r0, [sp, #108]	; 0x6c
 810b774:	fa2f f292 	sxtb16	r2, r2, ror #8
 810b778:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b77a:	6002      	str	r2, [r0, #0]
 810b77c:	3004      	adds	r0, #4
 810b77e:	901b      	str	r0, [sp, #108]	; 0x6c
 810b780:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b782:	9a02      	ldr	r2, [sp, #8]
 810b784:	58d5      	ldr	r5, [r2, r3]
 810b786:	1d22      	adds	r2, r4, #4
 810b788:	921b      	str	r2, [sp, #108]	; 0x6c
 810b78a:	f85a 2001 	ldr.w	r2, [sl, r1]
 810b78e:	eac5 4002 	pkhbt	r0, r5, r2, lsl #16
 810b792:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
 810b796:	fa2f f580 	sxtb16	r5, r0
 810b79a:	6025      	str	r5, [r4, #0]
 810b79c:	fa2f f090 	sxtb16	r0, r0, ror #8
 810b7a0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 810b7a2:	6020      	str	r0, [r4, #0]
 810b7a4:	3404      	adds	r4, #4
 810b7a6:	941b      	str	r4, [sp, #108]	; 0x6c
 810b7a8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b7aa:	fa2f f482 	sxtb16	r4, r2
 810b7ae:	3004      	adds	r0, #4
 810b7b0:	f840 4c04 	str.w	r4, [r0, #-4]
 810b7b4:	901b      	str	r0, [sp, #108]	; 0x6c
 810b7b6:	fa2f f292 	sxtb16	r2, r2, ror #8
 810b7ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b7bc:	6002      	str	r2, [r0, #0]
 810b7be:	3004      	adds	r0, #4
 810b7c0:	901b      	str	r0, [sp, #108]	; 0x6c
 810b7c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810b7c4:	f85a 2003 	ldr.w	r2, [sl, r3]
 810b7c8:	eac2 2402 	pkhbt	r4, r2, r2, lsl #8
 810b7cc:	fa2f f484 	sxtb16	r4, r4
 810b7d0:	8004      	strh	r4, [r0, #0]
 810b7d2:	0c24      	lsrs	r4, r4, #16
 810b7d4:	8044      	strh	r4, [r0, #2]
 810b7d6:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 810b7da:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 810b7de:	8082      	strh	r2, [r0, #4]
 810b7e0:	0c12      	lsrs	r2, r2, #16
 810b7e2:	80c2      	strh	r2, [r0, #6]
 810b7e4:	9a01      	ldr	r2, [sp, #4]
 810b7e6:	3104      	adds	r1, #4
 810b7e8:	428a      	cmp	r2, r1
 810b7ea:	f100 0008 	add.w	r0, r0, #8
 810b7ee:	f103 0304 	add.w	r3, r3, #4
 810b7f2:	f47f af63 	bne.w	810b6bc <forward_lite_dw_3x3_sssa8_ch+0x8e0>
 810b7f6:	ea4f 038c 	mov.w	r3, ip, lsl #2
 810b7fa:	4602      	mov	r2, r0
 810b7fc:	fa1f fc83 	uxth.w	ip, r3
 810b800:	f016 0303 	ands.w	r3, r6, #3
 810b804:	f43f ab0d 	beq.w	810ae22 <forward_lite_dw_3x3_sssa8_ch+0x46>
 810b808:	3b01      	subs	r3, #1
 810b80a:	eb0e 010c 	add.w	r1, lr, ip
 810b80e:	b29c      	uxth	r4, r3
 810b810:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 810b814:	8013      	strh	r3, [r2, #0]
 810b816:	5788      	ldrsb	r0, [r1, r6]
 810b818:	8050      	strh	r0, [r2, #2]
 810b81a:	eb01 0346 	add.w	r3, r1, r6, lsl #1
 810b81e:	f911 1016 	ldrsb.w	r1, [r1, r6, lsl #1]
 810b822:	8091      	strh	r1, [r2, #4]
 810b824:	5799      	ldrsb	r1, [r3, r6]
 810b826:	80d1      	strh	r1, [r2, #6]
 810b828:	f913 1016 	ldrsb.w	r1, [r3, r6, lsl #1]
 810b82c:	8111      	strh	r1, [r2, #8]
 810b82e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 810b832:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 810b836:	5798      	ldrsb	r0, [r3, r6]
 810b838:	8150      	strh	r0, [r2, #10]
 810b83a:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 810b83e:	8193      	strh	r3, [r2, #12]
 810b840:	578b      	ldrsb	r3, [r1, r6]
 810b842:	81d3      	strh	r3, [r2, #14]
 810b844:	f911 3016 	ldrsb.w	r3, [r1, r6, lsl #1]
 810b848:	8213      	strh	r3, [r2, #16]
 810b84a:	f10c 0301 	add.w	r3, ip, #1
 810b84e:	b29b      	uxth	r3, r3
 810b850:	2c00      	cmp	r4, #0
 810b852:	d042      	beq.n	810b8da <forward_lite_dw_3x3_sssa8_ch+0xafe>
 810b854:	f91e 1003 	ldrsb.w	r1, [lr, r3]
 810b858:	8251      	strh	r1, [r2, #18]
 810b85a:	4473      	add	r3, lr
 810b85c:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 810b860:	5798      	ldrsb	r0, [r3, r6]
 810b862:	8290      	strh	r0, [r2, #20]
 810b864:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 810b868:	82d3      	strh	r3, [r2, #22]
 810b86a:	578b      	ldrsb	r3, [r1, r6]
 810b86c:	8313      	strh	r3, [r2, #24]
 810b86e:	f911 3016 	ldrsb.w	r3, [r1, r6, lsl #1]
 810b872:	8353      	strh	r3, [r2, #26]
 810b874:	eb01 0346 	add.w	r3, r1, r6, lsl #1
 810b878:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 810b87c:	5798      	ldrsb	r0, [r3, r6]
 810b87e:	8390      	strh	r0, [r2, #28]
 810b880:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 810b884:	83d3      	strh	r3, [r2, #30]
 810b886:	578b      	ldrsb	r3, [r1, r6]
 810b888:	8413      	strh	r3, [r2, #32]
 810b88a:	f911 3016 	ldrsb.w	r3, [r1, r6, lsl #1]
 810b88e:	8453      	strh	r3, [r2, #34]	; 0x22
 810b890:	f10c 0c02 	add.w	ip, ip, #2
 810b894:	2c01      	cmp	r4, #1
 810b896:	fa1f f58c 	uxth.w	r5, ip
 810b89a:	d01e      	beq.n	810b8da <forward_lite_dw_3x3_sssa8_ch+0xafe>
 810b89c:	f91e 1005 	ldrsb.w	r1, [lr, r5]
 810b8a0:	8491      	strh	r1, [r2, #36]	; 0x24
 810b8a2:	eb0e 0305 	add.w	r3, lr, r5
 810b8a6:	5799      	ldrsb	r1, [r3, r6]
 810b8a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 810b8aa:	f913 1016 	ldrsb.w	r1, [r3, r6, lsl #1]
 810b8ae:	8511      	strh	r1, [r2, #40]	; 0x28
 810b8b0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 810b8b4:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 810b8b8:	5798      	ldrsb	r0, [r3, r6]
 810b8ba:	8550      	strh	r0, [r2, #42]	; 0x2a
 810b8bc:	f913 3016 	ldrsb.w	r3, [r3, r6, lsl #1]
 810b8c0:	8593      	strh	r3, [r2, #44]	; 0x2c
 810b8c2:	578b      	ldrsb	r3, [r1, r6]
 810b8c4:	85d3      	strh	r3, [r2, #46]	; 0x2e
 810b8c6:	f911 3016 	ldrsb.w	r3, [r1, r6, lsl #1]
 810b8ca:	8613      	strh	r3, [r2, #48]	; 0x30
 810b8cc:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 810b8d0:	578b      	ldrsb	r3, [r1, r6]
 810b8d2:	8653      	strh	r3, [r2, #50]	; 0x32
 810b8d4:	f911 3016 	ldrsb.w	r3, [r1, r6, lsl #1]
 810b8d8:	8693      	strh	r3, [r2, #52]	; 0x34
 810b8da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b8dc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 810b8de:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 810b8e0:	44b1      	add	r9, r6
 810b8e2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 810b8e6:	4631      	mov	r1, r6
 810b8e8:	461c      	mov	r4, r3
 810b8ea:	9312      	str	r3, [sp, #72]	; 0x48
 810b8ec:	f000 ff28 	bl	810c740 <align_factor_ch>
 810b8f0:	f06f 0315 	mvn.w	r3, #21
 810b8f4:	fb03 4306 	mla	r3, r3, r6, r4
 810b8f8:	9311      	str	r3, [sp, #68]	; 0x44
 810b8fa:	f7ff baa7 	b.w	810ae4c <forward_lite_dw_3x3_sssa8_ch+0x70>
 810b8fe:	4602      	mov	r2, r0
 810b900:	ea4f 0846 	mov.w	r8, r6, lsl #1
 810b904:	e77c      	b.n	810b800 <forward_lite_dw_3x3_sssa8_ch+0xa24>
 810b906:	bf00      	nop

0810b908 <forward_lite_pw_sssa8_ch>:
 810b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b90c:	b09b      	sub	sp, #108	; 0x6c
 810b90e:	2b02      	cmp	r3, #2
 810b910:	9217      	str	r2, [sp, #92]	; 0x5c
 810b912:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 810b916:	920d      	str	r2, [sp, #52]	; 0x34
 810b918:	f99d 20a4 	ldrsb.w	r2, [sp, #164]	; 0xa4
 810b91c:	9212      	str	r2, [sp, #72]	; 0x48
 810b91e:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 810b922:	920f      	str	r2, [sp, #60]	; 0x3c
 810b924:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 810b928:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 810b92c:	f8bd b094 	ldrh.w	fp, [sp, #148]	; 0x94
 810b930:	f99d a0a8 	ldrsb.w	sl, [sp, #168]	; 0xa8
 810b934:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 810b936:	9010      	str	r0, [sp, #64]	; 0x40
 810b938:	4688      	mov	r8, r1
 810b93a:	9213      	str	r2, [sp, #76]	; 0x4c
 810b93c:	f000 80ce 	beq.w	810badc <forward_lite_pw_sssa8_ch+0x1d4>
 810b940:	9d10      	ldr	r5, [sp, #64]	; 0x40
 810b942:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810b944:	46c1      	mov	r9, r8
 810b946:	4629      	mov	r1, r5
 810b948:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b94a:	fb09 f206 	mul.w	r2, r9, r6
 810b94e:	fb03 4302 	mla	r3, r3, r2, r4
 810b952:	4299      	cmp	r1, r3
 810b954:	920e      	str	r2, [sp, #56]	; 0x38
 810b956:	d204      	bcs.n	810b962 <forward_lite_pw_sssa8_ch+0x5a>
 810b958:	fb02 130b 	mla	r3, r2, fp, r1
 810b95c:	429c      	cmp	r4, r3
 810b95e:	f0c0 80b5 	bcc.w	810bacc <forward_lite_pw_sssa8_ch+0x1c4>
 810b962:	2301      	movs	r3, #1
 810b964:	9310      	str	r3, [sp, #64]	; 0x40
 810b966:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810b968:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 810b96a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 810b96c:	982b      	ldr	r0, [sp, #172]	; 0xac
 810b96e:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 810b972:	4639      	mov	r1, r7
 810b974:	18d3      	adds	r3, r2, r3
 810b976:	9311      	str	r3, [sp, #68]	; 0x44
 810b978:	f000 fee2 	bl	810c740 <align_factor_ch>
 810b97c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 810b97e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 810b980:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 810b984:	4639      	mov	r1, r7
 810b986:	9214      	str	r2, [sp, #80]	; 0x50
 810b988:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 810b98c:	2900      	cmp	r1, #0
 810b98e:	f000 8162 	beq.w	810bc56 <forward_lite_pw_sssa8_ch+0x34e>
 810b992:	942d      	str	r4, [sp, #180]	; 0xb4
 810b994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b996:	9515      	str	r5, [sp, #84]	; 0x54
 810b998:	2101      	movs	r1, #1
 810b99a:	4654      	mov	r4, sl
 810b99c:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 810b9a0:	1e98      	subs	r0, r3, #2
 810b9a2:	468e      	mov	lr, r1
 810b9a4:	460d      	mov	r5, r1
 810b9a6:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 810b9aa:	1e59      	subs	r1, r3, #1
 810b9ac:	fa0e fc03 	lsl.w	ip, lr, r3
 810b9b0:	b289      	uxth	r1, r1
 810b9b2:	fa04 f303 	lsl.w	r3, r4, r3
 810b9b6:	2914      	cmp	r1, #20
 810b9b8:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 810b9bc:	bf94      	ite	ls
 810b9be:	6013      	strls	r3, [r2, #0]
 810b9c0:	6014      	strhi	r4, [r2, #0]
 810b9c2:	f102 0204 	add.w	r2, r2, #4
 810b9c6:	bf88      	it	hi
 810b9c8:	2500      	movhi	r5, #0
 810b9ca:	4297      	cmp	r7, r2
 810b9cc:	d1eb      	bne.n	810b9a6 <forward_lite_pw_sssa8_ch+0x9e>
 810b9ce:	9518      	str	r5, [sp, #96]	; 0x60
 810b9d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810b9d2:	4654      	mov	r4, sl
 810b9d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810b9d6:	2b01      	cmp	r3, #1
 810b9d8:	f000 811e 	beq.w	810bc18 <forward_lite_pw_sssa8_ch+0x310>
 810b9dc:	2300      	movs	r3, #0
 810b9de:	9315      	str	r3, [sp, #84]	; 0x54
 810b9e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810b9e2:	07db      	lsls	r3, r3, #31
 810b9e4:	d56f      	bpl.n	810bac6 <forward_lite_pw_sssa8_ch+0x1be>
 810b9e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b9e8:	eb09 0306 	add.w	r3, r9, r6
 810b9ec:	3302      	adds	r3, #2
 810b9ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 810b9f2:	9313      	str	r3, [sp, #76]	; 0x4c
 810b9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b9f6:	2b00      	cmp	r3, #0
 810b9f8:	d062      	beq.n	810bac0 <forward_lite_pw_sssa8_ch+0x1b8>
 810b9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b9fc:	942d      	str	r4, [sp, #180]	; 0xb4
 810b9fe:	fb03 f309 	mul.w	r3, r3, r9
 810ba02:	fb09 fa0b 	mul.w	sl, r9, fp
 810ba06:	465c      	mov	r4, fp
 810ba08:	9926      	ldr	r1, [sp, #152]	; 0x98
 810ba0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810ba0c:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 810ba10:	9316      	str	r3, [sp, #88]	; 0x58
 810ba12:	2600      	movs	r6, #0
 810ba14:	e023      	b.n	810ba5e <forward_lite_pw_sssa8_ch+0x156>
 810ba16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ba18:	9228      	str	r2, [sp, #160]	; 0xa0
 810ba1a:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
 810ba1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ba20:	9126      	str	r1, [sp, #152]	; 0x98
 810ba22:	e9cd 9308 	strd	r9, r3, [sp, #32]
 810ba26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ba28:	9307      	str	r3, [sp, #28]
 810ba2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810ba2c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 810ba30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ba32:	9304      	str	r3, [sp, #16]
 810ba34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810ba36:	9303      	str	r3, [sp, #12]
 810ba38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ba3a:	9302      	str	r3, [sp, #8]
 810ba3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810ba3e:	9301      	str	r3, [sp, #4]
 810ba40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 810ba42:	9300      	str	r3, [sp, #0]
 810ba44:	4628      	mov	r0, r5
 810ba46:	465b      	mov	r3, fp
 810ba48:	f002 fd3a 	bl	810e4c0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 810ba4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810ba4e:	9926      	ldr	r1, [sp, #152]	; 0x98
 810ba50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 810ba52:	449b      	add	fp, r3
 810ba54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810ba56:	3601      	adds	r6, #1
 810ba58:	42b3      	cmp	r3, r6
 810ba5a:	4455      	add	r5, sl
 810ba5c:	d030      	beq.n	810bac0 <forward_lite_pw_sssa8_ch+0x1b8>
 810ba5e:	f1b8 0f05 	cmp.w	r8, #5
 810ba62:	d1d8      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810ba66:	2b19      	cmp	r3, #25
 810ba68:	d1d5      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ba6c:	2b40      	cmp	r3, #64	; 0x40
 810ba6e:	d1d2      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba70:	2c40      	cmp	r4, #64	; 0x40
 810ba72:	d1d0      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810ba76:	3380      	adds	r3, #128	; 0x80
 810ba78:	d1cd      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 810ba7c:	2b00      	cmp	r3, #0
 810ba7e:	d0ca      	beq.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ba82:	2b03      	cmp	r3, #3
 810ba84:	d1c7      	bne.n	810ba16 <forward_lite_pw_sssa8_ch+0x10e>
 810ba86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ba88:	9404      	str	r4, [sp, #16]
 810ba8a:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
 810ba8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ba90:	9228      	str	r2, [sp, #160]	; 0xa0
 810ba92:	e9cd 8308 	strd	r8, r3, [sp, #32]
 810ba96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ba98:	9307      	str	r3, [sp, #28]
 810ba9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810ba9c:	9126      	str	r1, [sp, #152]	; 0x98
 810ba9e:	e9cd 4305 	strd	r4, r3, [sp, #20]
 810baa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810baa4:	9303      	str	r3, [sp, #12]
 810baa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810baa8:	9302      	str	r3, [sp, #8]
 810baaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810baac:	9301      	str	r3, [sp, #4]
 810baae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 810bab0:	9300      	str	r3, [sp, #0]
 810bab2:	4628      	mov	r0, r5
 810bab4:	465b      	mov	r3, fp
 810bab6:	f003 f8b3 	bl	810ec20 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 810baba:	9926      	ldr	r1, [sp, #152]	; 0x98
 810babc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810babe:	e7c7      	b.n	810ba50 <forward_lite_pw_sssa8_ch+0x148>
 810bac0:	b01b      	add	sp, #108	; 0x6c
 810bac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bac8:	9313      	str	r3, [sp, #76]	; 0x4c
 810baca:	e793      	b.n	810b9f4 <forward_lite_pw_sssa8_ch+0xec>
 810bacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bace:	9310      	str	r3, [sp, #64]	; 0x40
 810bad0:	2301      	movs	r3, #1
 810bad2:	9317      	str	r3, [sp, #92]	; 0x5c
 810bad4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810bad8:	461e      	mov	r6, r3
 810bada:	e744      	b.n	810b966 <forward_lite_pw_sssa8_ch+0x5e>
 810badc:	2d02      	cmp	r5, #2
 810bade:	f47f af2f 	bne.w	810b940 <forward_lite_pw_sssa8_ch+0x38>
 810bae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bae4:	2b00      	cmp	r3, #0
 810bae6:	f000 80b9 	beq.w	810bc5c <forward_lite_pw_sssa8_ch+0x354>
 810baea:	1e4b      	subs	r3, r1, #1
 810baec:	085b      	lsrs	r3, r3, #1
 810baee:	fb0b f303 	mul.w	r3, fp, r3
 810baf2:	9318      	str	r3, [sp, #96]	; 0x60
 810baf4:	fb01 f30b 	mul.w	r3, r1, fp
 810baf8:	005b      	lsls	r3, r3, #1
 810bafa:	9316      	str	r3, [sp, #88]	; 0x58
 810bafc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 810bb00:	ea4f 0e9b 	mov.w	lr, fp, lsr #2
 810bb04:	2200      	movs	r2, #0
 810bb06:	00db      	lsls	r3, r3, #3
 810bb08:	930e      	str	r3, [sp, #56]	; 0x38
 810bb0a:	9215      	str	r2, [sp, #84]	; 0x54
 810bb0c:	f02e 0301 	bic.w	r3, lr, #1
 810bb10:	9214      	str	r2, [sp, #80]	; 0x50
 810bb12:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 810bb16:	f00b 0703 	and.w	r7, fp, #3
 810bb1a:	009d      	lsls	r5, r3, #2
 810bb1c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 810bb20:	4601      	mov	r1, r0
 810bb22:	9011      	str	r0, [sp, #68]	; 0x44
 810bb24:	4699      	mov	r9, r3
 810bb26:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 810bb2a:	942d      	str	r4, [sp, #180]	; 0xb4
 810bb2c:	4694      	mov	ip, r2
 810bb2e:	f1b8 0f00 	cmp.w	r8, #0
 810bb32:	d044      	beq.n	810bbbe <forward_lite_pw_sssa8_ch+0x2b6>
 810bb34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810bb36:	2400      	movs	r4, #0
 810bb38:	f1be 0f00 	cmp.w	lr, #0
 810bb3c:	d026      	beq.n	810bb8c <forward_lite_pw_sssa8_ch+0x284>
 810bb3e:	ea43 0201 	orr.w	r2, r3, r1
 810bb42:	f1bc 0f08 	cmp.w	ip, #8
 810bb46:	f3c2 0202 	ubfx	r2, r2, #0, #3
 810bb4a:	bf94      	ite	ls
 810bb4c:	2000      	movls	r0, #0
 810bb4e:	2001      	movhi	r0, #1
 810bb50:	2a00      	cmp	r2, #0
 810bb52:	bf18      	it	ne
 810bb54:	2000      	movne	r0, #0
 810bb56:	2800      	cmp	r0, #0
 810bb58:	d074      	beq.n	810bc44 <forward_lite_pw_sssa8_ch+0x33c>
 810bb5a:	43da      	mvns	r2, r3
 810bb5c:	440a      	add	r2, r1
 810bb5e:	2a06      	cmp	r2, #6
 810bb60:	d970      	bls.n	810bc44 <forward_lite_pw_sssa8_ch+0x33c>
 810bb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bb64:	f1a3 0008 	sub.w	r0, r3, #8
 810bb68:	eb01 0a02 	add.w	sl, r1, r2
 810bb6c:	460a      	mov	r2, r1
 810bb6e:	ed90 7b02 	vldr	d7, [r0, #8]
 810bb72:	eca2 7b02 	vstmia	r2!, {d7}
 810bb76:	4592      	cmp	sl, r2
 810bb78:	f100 0008 	add.w	r0, r0, #8
 810bb7c:	d1f7      	bne.n	810bb6e <forward_lite_pw_sssa8_ch+0x266>
 810bb7e:	45ce      	cmp	lr, r9
 810bb80:	bf1c      	itt	ne
 810bb82:	595a      	ldrne	r2, [r3, r5]
 810bb84:	514a      	strne	r2, [r1, r5]
 810bb86:	199a      	adds	r2, r3, r6
 810bb88:	4613      	mov	r3, r2
 810bb8a:	4431      	add	r1, r6
 810bb8c:	b177      	cbz	r7, 810bbac <forward_lite_pw_sssa8_ch+0x2a4>
 810bb8e:	f993 2000 	ldrsb.w	r2, [r3]
 810bb92:	700a      	strb	r2, [r1, #0]
 810bb94:	2f01      	cmp	r7, #1
 810bb96:	d007      	beq.n	810bba8 <forward_lite_pw_sssa8_ch+0x2a0>
 810bb98:	f993 2001 	ldrsb.w	r2, [r3, #1]
 810bb9c:	704a      	strb	r2, [r1, #1]
 810bb9e:	2f03      	cmp	r7, #3
 810bba0:	bf04      	itt	eq
 810bba2:	f993 2002 	ldrsbeq.w	r2, [r3, #2]
 810bba6:	708a      	strbeq	r2, [r1, #2]
 810bba8:	443b      	add	r3, r7
 810bbaa:	4439      	add	r1, r7
 810bbac:	3402      	adds	r4, #2
 810bbae:	4544      	cmp	r4, r8
 810bbb0:	445b      	add	r3, fp
 810bbb2:	dbc1      	blt.n	810bb38 <forward_lite_pw_sssa8_ch+0x230>
 810bbb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bbb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810bbb8:	445b      	add	r3, fp
 810bbba:	18d3      	adds	r3, r2, r3
 810bbbc:	9315      	str	r3, [sp, #84]	; 0x54
 810bbbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810bbc0:	9816      	ldr	r0, [sp, #88]	; 0x58
 810bbc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810bbc4:	4402      	add	r2, r0
 810bbc6:	9211      	str	r2, [sp, #68]	; 0x44
 810bbc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810bbca:	3302      	adds	r3, #2
 810bbcc:	4293      	cmp	r3, r2
 810bbce:	9314      	str	r3, [sp, #80]	; 0x50
 810bbd0:	dbad      	blt.n	810bb2e <forward_lite_pw_sssa8_ch+0x226>
 810bbd2:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 810bbd6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 810bbd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810bbda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810bbdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 810bbde:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
 810bbe2:	fb06 f308 	mul.w	r3, r6, r8
 810bbe6:	1a85      	subs	r5, r0, r2
 810bbe8:	fb0b 5503 	mla	r5, fp, r3, r5
 810bbec:	4629      	mov	r1, r5
 810bbee:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 810bbf2:	f001 fc81 	bl	810d4f8 <st_int8_copy>
 810bbf6:	1c73      	adds	r3, r6, #1
 810bbf8:	f108 0201 	add.w	r2, r8, #1
 810bbfc:	105e      	asrs	r6, r3, #1
 810bbfe:	f3c3 034f 	ubfx	r3, r3, #1, #16
 810bc02:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 810bc06:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 810bc0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 810bc0c:	9317      	str	r3, [sp, #92]	; 0x5c
 810bc0e:	ea4f 0962 	mov.w	r9, r2, asr #1
 810bc12:	f3c2 084f 	ubfx	r8, r2, #1, #16
 810bc16:	e697      	b.n	810b948 <forward_lite_pw_sssa8_ch+0x40>
 810bc18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bc1a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 810bc1c:	f06f 0309 	mvn.w	r3, #9
 810bc20:	fb03 1302 	mla	r3, r3, r2, r1
 810bc24:	fb02 f20b 	mul.w	r2, r2, fp
 810bc28:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 810bc2c:	f6ff aed6 	blt.w	810b9dc <forward_lite_pw_sssa8_ch+0xd4>
 810bc30:	e9cd b700 	strd	fp, r7, [sp]
 810bc34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810bc36:	990d      	ldr	r1, [sp, #52]	; 0x34
 810bc38:	9826      	ldr	r0, [sp, #152]	; 0x98
 810bc3a:	465b      	mov	r3, fp
 810bc3c:	f001 ffc8 	bl	810dbd0 <st_sssa8_ch_fullW_prefetch>
 810bc40:	9715      	str	r7, [sp, #84]	; 0x54
 810bc42:	e6cd      	b.n	810b9e0 <forward_lite_pw_sssa8_ch+0xd8>
 810bc44:	199a      	adds	r2, r3, r6
 810bc46:	4608      	mov	r0, r1
 810bc48:	f853 ab04 	ldr.w	sl, [r3], #4
 810bc4c:	f840 ab04 	str.w	sl, [r0], #4
 810bc50:	429a      	cmp	r2, r3
 810bc52:	d1f9      	bne.n	810bc48 <forward_lite_pw_sssa8_ch+0x340>
 810bc54:	e798      	b.n	810bb88 <forward_lite_pw_sssa8_ch+0x280>
 810bc56:	2301      	movs	r3, #1
 810bc58:	9318      	str	r3, [sp, #96]	; 0x60
 810bc5a:	e6bb      	b.n	810b9d4 <forward_lite_pw_sssa8_ch+0xcc>
 810bc5c:	461a      	mov	r2, r3
 810bc5e:	e7bc      	b.n	810bbda <forward_lite_pw_sssa8_ch+0x2d2>

0810bc60 <forward_lite_conv2d_rgb_sssa8_ch>:
 810bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc64:	ed2d 8b02 	vpush	{d8}
 810bc68:	b0d3      	sub	sp, #332	; 0x14c
 810bc6a:	460f      	mov	r7, r1
 810bc6c:	f8dd 81a0 	ldr.w	r8, [sp, #416]	; 0x1a0
 810bc70:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 810bc72:	f8bd 4178 	ldrh.w	r4, [sp, #376]	; 0x178
 810bc76:	9420      	str	r4, [sp, #128]	; 0x80
 810bc78:	4619      	mov	r1, r3
 810bc7a:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
 810bc7e:	18f4      	adds	r4, r6, r3
 810bc80:	4693      	mov	fp, r2
 810bc82:	ee08 2a90 	vmov	s17, r2
 810bc86:	4632      	mov	r2, r6
 810bc88:	f8bd 617c 	ldrh.w	r6, [sp, #380]	; 0x17c
 810bc8c:	9624      	str	r6, [sp, #144]	; 0x90
 810bc8e:	f8bd 6180 	ldrh.w	r6, [sp, #384]	; 0x180
 810bc92:	960e      	str	r6, [sp, #56]	; 0x38
 810bc94:	f99d 618c 	ldrsb.w	r6, [sp, #396]	; 0x18c
 810bc98:	f99d 3188 	ldrsb.w	r3, [sp, #392]	; 0x188
 810bc9c:	960b      	str	r6, [sp, #44]	; 0x2c
 810bc9e:	f89d 6194 	ldrb.w	r6, [sp, #404]	; 0x194
 810bca2:	900a      	str	r0, [sp, #40]	; 0x28
 810bca4:	9317      	str	r3, [sp, #92]	; 0x5c
 810bca6:	9864      	ldr	r0, [sp, #400]	; 0x190
 810bca8:	9625      	str	r6, [sp, #148]	; 0x94
 810bcaa:	4623      	mov	r3, r4
 810bcac:	f8bd 619c 	ldrh.w	r6, [sp, #412]	; 0x19c
 810bcb0:	9113      	str	r1, [sp, #76]	; 0x4c
 810bcb2:	468a      	mov	sl, r1
 810bcb4:	004d      	lsls	r5, r1, #1
 810bcb6:	960c      	str	r6, [sp, #48]	; 0x30
 810bcb8:	f8dd 9198 	ldr.w	r9, [sp, #408]	; 0x198
 810bcbc:	f000 fd40 	bl	810c740 <align_factor_ch>
 810bcc0:	9e61      	ldr	r6, [sp, #388]	; 0x184
 810bcc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bcc4:	9601      	str	r6, [sp, #4]
 810bcc6:	4652      	mov	r2, sl
 810bcc8:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 810bcca:	9820      	ldr	r0, [sp, #128]	; 0x80
 810bccc:	9302      	str	r3, [sp, #8]
 810bcce:	18ab      	adds	r3, r5, r2
 810bcd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810bcd4:	9603      	str	r6, [sp, #12]
 810bcd6:	9000      	str	r0, [sp, #0]
 810bcd8:	9311      	str	r3, [sp, #68]	; 0x44
 810bcda:	4682      	mov	sl, r0
 810bcdc:	4603      	mov	r3, r0
 810bcde:	4659      	mov	r1, fp
 810bce0:	2003      	movs	r0, #3
 810bce2:	4616      	mov	r6, r2
 810bce4:	f001 f9be 	bl	810d064 <st_sssa8_ch_convolve_rank1upd>
 810bce8:	fb1a f30a 	smulbb	r3, sl, sl
 810bcec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 810bcf0:	9911      	ldr	r1, [sp, #68]	; 0x44
 810bcf2:	b298      	uxth	r0, r3
 810bcf4:	ebc6 7346 	rsb	r3, r6, r6, lsl #29
 810bcf8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 810bcfc:	932c      	str	r3, [sp, #176]	; 0xb0
 810bcfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 810bd02:	9012      	str	r0, [sp, #72]	; 0x48
 810bd04:	932d      	str	r3, [sp, #180]	; 0xb4
 810bd06:	b1de      	cbz	r6, 810bd40 <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 810bd08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 810bd0a:	4621      	mov	r1, r4
 810bd0c:	1d1a      	adds	r2, r3, #4
 810bd0e:	442c      	add	r4, r5
 810bd10:	f04f 0c01 	mov.w	ip, #1
 810bd14:	f931 3b02 	ldrsh.w	r3, [r1], #2
 810bd18:	1e58      	subs	r0, r3, #1
 810bd1a:	b280      	uxth	r0, r0
 810bd1c:	fa0c fe03 	lsl.w	lr, ip, r3
 810bd20:	2814      	cmp	r0, #20
 810bd22:	fa06 f303 	lsl.w	r3, r6, r3
 810bd26:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 810bd2a:	f200 810a 	bhi.w	810bf42 <forward_lite_conv2d_rgb_sssa8_ch+0x2e2>
 810bd2e:	42a1      	cmp	r1, r4
 810bd30:	f842 3c04 	str.w	r3, [r2, #-4]
 810bd34:	f102 0204 	add.w	r2, r2, #4
 810bd38:	d1ec      	bne.n	810bd14 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 810bd3a:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 810bd3c:	eb03 0408 	add.w	r4, r3, r8
 810bd40:	1b63      	subs	r3, r4, r5
 810bd42:	932e      	str	r3, [sp, #184]	; 0xb8
 810bd44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 810bd46:	9c20      	ldr	r4, [sp, #128]	; 0x80
 810bd48:	f013 0f01 	tst.w	r3, #1
 810bd4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bd4e:	bf18      	it	ne
 810bd50:	3302      	addne	r3, #2
 810bd52:	fb03 f303 	mul.w	r3, r3, r3
 810bd56:	931b      	str	r3, [sp, #108]	; 0x6c
 810bd58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bd5a:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
 810bd5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 810bd60:	e9cd 334c 	strd	r3, r3, [sp, #304]	; 0x130
 810bd64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bd66:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 810bd6a:	ab3a      	add	r3, sp, #232	; 0xe8
 810bd6c:	9300      	str	r3, [sp, #0]
 810bd6e:	aa32      	add	r2, sp, #200	; 0xc8
 810bd70:	ab36      	add	r3, sp, #216	; 0xd8
 810bd72:	a948      	add	r1, sp, #288	; 0x120
 810bd74:	a83e      	add	r0, sp, #248	; 0xf8
 810bd76:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
 810bd7a:	e9cd 7733 	strd	r7, r7, [sp, #204]	; 0xcc
 810bd7e:	f000 fdf9 	bl	810c974 <ai_padding_opt_init>
 810bd82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 810bd84:	fb04 f304 	mul.w	r3, r4, r4
 810bd88:	fb01 f203 	mul.w	r2, r1, r3
 810bd8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 810bd90:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 810bd94:	bfa8      	it	ge
 810bd96:	f44f 6220 	movge.w	r2, #2560	; 0xa00
 810bd9a:	4614      	mov	r4, r2
 810bd9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810bd9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 810bda2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810bda6:	930b      	str	r3, [sp, #44]	; 0x2c
 810bda8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810bdaa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 810bdac:	fb01 f303 	mul.w	r3, r1, r3
 810bdb0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 810bdb4:	42a3      	cmp	r3, r4
 810bdb6:	921c      	str	r2, [sp, #112]	; 0x70
 810bdb8:	f340 81c0 	ble.w	810c13c <forward_lite_conv2d_rgb_sssa8_ch+0x4dc>
 810bdbc:	2300      	movs	r3, #0
 810bdbe:	9328      	str	r3, [sp, #160]	; 0xa0
 810bdc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810bdc2:	fbb4 f3f3 	udiv	r3, r4, r3
 810bdc6:	b29b      	uxth	r3, r3
 810bdc8:	4619      	mov	r1, r3
 810bdca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810bdcc:	4299      	cmp	r1, r3
 810bdce:	bf28      	it	cs
 810bdd0:	4619      	movcs	r1, r3
 810bdd2:	fbb3 f2f1 	udiv	r2, r3, r1
 810bdd6:	fb01 3312 	mls	r3, r1, r2, r3
 810bdda:	b29b      	uxth	r3, r3
 810bddc:	b292      	uxth	r2, r2
 810bdde:	9129      	str	r1, [sp, #164]	; 0xa4
 810bde0:	9221      	str	r2, [sp, #132]	; 0x84
 810bde2:	b11b      	cbz	r3, 810bdec <forward_lite_conv2d_rgb_sssa8_ch+0x18c>
 810bde4:	4613      	mov	r3, r2
 810bde6:	3301      	adds	r3, #1
 810bde8:	b29b      	uxth	r3, r3
 810bdea:	9321      	str	r3, [sp, #132]	; 0x84
 810bdec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810bdee:	2a00      	cmp	r2, #0
 810bdf0:	f000 8192 	beq.w	810c118 <forward_lite_conv2d_rgb_sssa8_ch+0x4b8>
 810bdf4:	9820      	ldr	r0, [sp, #128]	; 0x80
 810bdf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 810bdf8:	1ac1      	subs	r1, r0, r3
 810bdfa:	fb07 f303 	mul.w	r3, r7, r3
 810bdfe:	425b      	negs	r3, r3
 810be00:	9310      	str	r3, [sp, #64]	; 0x40
 810be02:	1cd3      	adds	r3, r2, #3
 810be04:	444b      	add	r3, r9
 810be06:	e9cd 3922 	strd	r3, r9, [sp, #136]	; 0x88
 810be0a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 810be0e:	005b      	lsls	r3, r3, #1
 810be10:	930d      	str	r3, [sp, #52]	; 0x34
 810be12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810be14:	912b      	str	r1, [sp, #172]	; 0xac
 810be16:	fb07 f303 	mul.w	r3, r7, r3
 810be1a:	932f      	str	r3, [sp, #188]	; 0xbc
 810be1c:	1c93      	adds	r3, r2, #2
 810be1e:	9330      	str	r3, [sp, #192]	; 0xc0
 810be20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810be22:	fb02 f303 	mul.w	r3, r2, r3
 810be26:	9331      	str	r3, [sp, #196]	; 0xc4
 810be28:	2301      	movs	r3, #1
 810be2a:	4688      	mov	r8, r1
 810be2c:	931f      	str	r3, [sp, #124]	; 0x7c
 810be2e:	a83e      	add	r0, sp, #248	; 0xf8
 810be30:	f000 fdf8 	bl	810ca24 <ai_padding_opt_phase1>
 810be34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 810be36:	2b03      	cmp	r3, #3
 810be38:	f000 817b 	beq.w	810c132 <forward_lite_conv2d_rgb_sssa8_ch+0x4d2>
 810be3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 810be3e:	9316      	str	r3, [sp, #88]	; 0x58
 810be40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810be42:	9327      	str	r3, [sp, #156]	; 0x9c
 810be44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 810be46:	2b00      	cmp	r3, #0
 810be48:	f000 816b 	beq.w	810c122 <forward_lite_conv2d_rgb_sssa8_ch+0x4c2>
 810be4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810be4e:	2b00      	cmp	r3, #0
 810be50:	f000 814c 	beq.w	810c0ec <forward_lite_conv2d_rgb_sssa8_ch+0x48c>
 810be54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 810be56:	edcd 8a26 	vstr	s17, [sp, #152]	; 0x98
 810be5a:	eba8 0303 	sub.w	r3, r8, r3
 810be5e:	930f      	str	r3, [sp, #60]	; 0x3c
 810be60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810be62:	931e      	str	r3, [sp, #120]	; 0x78
 810be64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810be66:	931d      	str	r3, [sp, #116]	; 0x74
 810be68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 810be6a:	9315      	str	r3, [sp, #84]	; 0x54
 810be6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 810be6e:	9318      	str	r3, [sp, #96]	; 0x60
 810be70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 810be72:	ee08 3a10 	vmov	s16, r3
 810be76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 810be78:	9319      	str	r3, [sp, #100]	; 0x64
 810be7a:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 810be7c:	931a      	str	r3, [sp, #104]	; 0x68
 810be7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 810be80:	425b      	negs	r3, r3
 810be82:	932a      	str	r3, [sp, #168]	; 0xa8
 810be84:	9a42      	ldr	r2, [sp, #264]	; 0x108
 810be86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810be88:	9916      	ldr	r1, [sp, #88]	; 0x58
 810be8a:	923f      	str	r2, [sp, #252]	; 0xfc
 810be8c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 810be8e:	9240      	str	r2, [sp, #256]	; 0x100
 810be90:	e9dd 542a 	ldrd	r5, r4, [sp, #168]	; 0xa8
 810be94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810be96:	933e      	str	r3, [sp, #248]	; 0xf8
 810be98:	9114      	str	r1, [sp, #80]	; 0x50
 810be9a:	2600      	movs	r6, #0
 810be9c:	2b00      	cmp	r3, #0
 810be9e:	d047      	beq.n	810bf30 <forward_lite_conv2d_rgb_sssa8_ch+0x2d0>
 810bea0:	3b01      	subs	r3, #1
 810bea2:	933e      	str	r3, [sp, #248]	; 0xf8
 810bea4:	2301      	movs	r3, #1
 810bea6:	f8ad 311e 	strh.w	r3, [sp, #286]	; 0x11e
 810beaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810beac:	4598      	cmp	r8, r3
 810beae:	dd31      	ble.n	810bf14 <forward_lite_conv2d_rgb_sssa8_ch+0x2b4>
 810beb0:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 810beb4:	469e      	mov	lr, r3
 810beb6:	42a5      	cmp	r5, r4
 810beb8:	da28      	bge.n	810bf0c <forward_lite_conv2d_rgb_sssa8_ch+0x2ac>
 810beba:	4577      	cmp	r7, lr
 810bebc:	fb0e fc07 	mul.w	ip, lr, r7
 810bec0:	d95a      	bls.n	810bf78 <forward_lite_conv2d_rgb_sssa8_ch+0x318>
 810bec2:	44ac      	add	ip, r5
 810bec4:	1d93      	adds	r3, r2, #6
 810bec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810bec8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 810becc:	4494      	add	ip, r2
 810bece:	4628      	mov	r0, r5
 810bed0:	f04f 0900 	mov.w	r9, #0
 810bed4:	f361 090f 	bfi	r9, r1, #0, #16
 810bed8:	42b8      	cmp	r0, r7
 810beda:	f361 491f 	bfi	r9, r1, #16, #16
 810bede:	f1a3 0a06 	sub.w	sl, r3, #6
 810bee2:	461a      	mov	r2, r3
 810bee4:	d238      	bcs.n	810bf58 <forward_lite_conv2d_rgb_sssa8_ch+0x2f8>
 810bee6:	f85c 2b03 	ldr.w	r2, [ip], #3
 810beea:	fa2f f982 	sxtb16	r9, r2
 810beee:	ea4f 2b32 	mov.w	fp, r2, ror #8
 810bef2:	3001      	adds	r0, #1
 810bef4:	461a      	mov	r2, r3
 810bef6:	3306      	adds	r3, #6
 810bef8:	42a0      	cmp	r0, r4
 810befa:	fa2f fb8b 	sxtb16	fp, fp
 810befe:	eacb 0b09 	pkhbt	fp, fp, r9
 810bf02:	f8ca b002 	str.w	fp, [sl, #2]
 810bf06:	f823 9c0c 	strh.w	r9, [r3, #-12]
 810bf0a:	d1e1      	bne.n	810bed0 <forward_lite_conv2d_rgb_sssa8_ch+0x270>
 810bf0c:	f10e 0e01 	add.w	lr, lr, #1
 810bf10:	45c6      	cmp	lr, r8
 810bf12:	dbd0      	blt.n	810beb6 <forward_lite_conv2d_rgb_sssa8_ch+0x256>
 810bf14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bf16:	4293      	cmp	r3, r2
 810bf18:	d07c      	beq.n	810c014 <forward_lite_conv2d_rgb_sssa8_ch+0x3b4>
 810bf1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810bf1c:	441c      	add	r4, r3
 810bf1e:	441d      	add	r5, r3
 810bf20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bf22:	3601      	adds	r6, #1
 810bf24:	429e      	cmp	r6, r3
 810bf26:	f000 8099 	beq.w	810c05c <forward_lite_conv2d_rgb_sssa8_ch+0x3fc>
 810bf2a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 810bf2c:	2b00      	cmp	r3, #0
 810bf2e:	d1b7      	bne.n	810bea0 <forward_lite_conv2d_rgb_sssa8_ch+0x240>
 810bf30:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 810bf32:	bbb3      	cbnz	r3, 810bfa2 <forward_lite_conv2d_rgb_sssa8_ch+0x342>
 810bf34:	9b40      	ldr	r3, [sp, #256]	; 0x100
 810bf36:	3b01      	subs	r3, #1
 810bf38:	9340      	str	r3, [sp, #256]	; 0x100
 810bf3a:	2301      	movs	r3, #1
 810bf3c:	f8ad 311e 	strh.w	r3, [sp, #286]	; 0x11e
 810bf40:	e7b3      	b.n	810beaa <forward_lite_conv2d_rgb_sssa8_ch+0x24a>
 810bf42:	42a1      	cmp	r1, r4
 810bf44:	f842 6c04 	str.w	r6, [r2, #-4]
 810bf48:	f102 0204 	add.w	r2, r2, #4
 810bf4c:	f47f aee2 	bne.w	810bd14 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 810bf50:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 810bf52:	eb03 0408 	add.w	r4, r3, r8
 810bf56:	e6f3      	b.n	810bd40 <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 810bf58:	3001      	adds	r0, #1
 810bf5a:	42a0      	cmp	r0, r4
 810bf5c:	f843 9c04 	str.w	r9, [r3, #-4]
 810bf60:	f823 1c06 	strh.w	r1, [r3, #-6]
 810bf64:	f10c 0c03 	add.w	ip, ip, #3
 810bf68:	f103 0306 	add.w	r3, r3, #6
 810bf6c:	d1b0      	bne.n	810bed0 <forward_lite_conv2d_rgb_sssa8_ch+0x270>
 810bf6e:	f10e 0e01 	add.w	lr, lr, #1
 810bf72:	45c6      	cmp	lr, r8
 810bf74:	db9f      	blt.n	810beb6 <forward_lite_conv2d_rgb_sssa8_ch+0x256>
 810bf76:	e7cd      	b.n	810bf14 <forward_lite_conv2d_rgb_sssa8_ch+0x2b4>
 810bf78:	4694      	mov	ip, r2
 810bf7a:	4628      	mov	r0, r5
 810bf7c:	2300      	movs	r3, #0
 810bf7e:	3001      	adds	r0, #1
 810bf80:	f361 030f 	bfi	r3, r1, #0, #16
 810bf84:	f361 431f 	bfi	r3, r1, #16, #16
 810bf88:	42a0      	cmp	r0, r4
 810bf8a:	f8ac 1004 	strh.w	r1, [ip, #4]
 810bf8e:	f84c 3b06 	str.w	r3, [ip], #6
 810bf92:	d1f3      	bne.n	810bf7c <forward_lite_conv2d_rgb_sssa8_ch+0x31c>
 810bf94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810bf96:	f10e 0e01 	add.w	lr, lr, #1
 810bf9a:	45c6      	cmp	lr, r8
 810bf9c:	441a      	add	r2, r3
 810bf9e:	db8a      	blt.n	810beb6 <forward_lite_conv2d_rgb_sssa8_ch+0x256>
 810bfa0:	e7b8      	b.n	810bf14 <forward_lite_conv2d_rgb_sssa8_ch+0x2b4>
 810bfa2:	3b01      	subs	r3, #1
 810bfa4:	933f      	str	r3, [sp, #252]	; 0xfc
 810bfa6:	f8bd 311c 	ldrh.w	r3, [sp, #284]	; 0x11c
 810bfaa:	f8ad 311e 	strh.w	r3, [sp, #286]	; 0x11e
 810bfae:	2b01      	cmp	r3, #1
 810bfb0:	f43f af7b 	beq.w	810beaa <forward_lite_conv2d_rgb_sssa8_ch+0x24a>
 810bfb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bfb6:	4598      	cmp	r8, r3
 810bfb8:	ddac      	ble.n	810bf14 <forward_lite_conv2d_rgb_sssa8_ch+0x2b4>
 810bfba:	990a      	ldr	r1, [sp, #40]	; 0x28
 810bfbc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 810bfc0:	eba4 0a05 	sub.w	sl, r4, r5
 810bfc4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 810bfc8:	eb05 0b45 	add.w	fp, r5, r5, lsl #1
 810bfcc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 810bfd0:	448b      	add	fp, r1
 810bfd2:	4699      	mov	r9, r3
 810bfd4:	42a5      	cmp	r5, r4
 810bfd6:	da15      	bge.n	810c004 <forward_lite_conv2d_rgb_sssa8_ch+0x3a4>
 810bfd8:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
 810bfdc:	4458      	add	r0, fp
 810bfde:	eb02 0c0a 	add.w	ip, r2, sl
 810bfe2:	f850 3b03 	ldr.w	r3, [r0], #3
 810bfe6:	fa2f f183 	sxtb16	r1, r3
 810bfea:	3206      	adds	r2, #6
 810bfec:	4594      	cmp	ip, r2
 810bfee:	ea4f 2333 	mov.w	r3, r3, ror #8
 810bff2:	f822 1c06 	strh.w	r1, [r2, #-6]
 810bff6:	fa2f f383 	sxtb16	r3, r3
 810bffa:	eac3 0301 	pkhbt	r3, r3, r1
 810bffe:	f842 3c04 	str.w	r3, [r2, #-4]
 810c002:	d1ee      	bne.n	810bfe2 <forward_lite_conv2d_rgb_sssa8_ch+0x382>
 810c004:	f109 0901 	add.w	r9, r9, #1
 810c008:	45c1      	cmp	r9, r8
 810c00a:	44be      	add	lr, r7
 810c00c:	d1e2      	bne.n	810bfd4 <forward_lite_conv2d_rgb_sssa8_ch+0x374>
 810c00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c010:	4293      	cmp	r3, r2
 810c012:	d182      	bne.n	810bf1a <forward_lite_conv2d_rgb_sssa8_ch+0x2ba>
 810c014:	4618      	mov	r0, r3
 810c016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c018:	9308      	str	r3, [sp, #32]
 810c01a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810c01c:	9307      	str	r3, [sp, #28]
 810c01e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 810c020:	9306      	str	r3, [sp, #24]
 810c022:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810c024:	9305      	str	r3, [sp, #20]
 810c026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c028:	9304      	str	r3, [sp, #16]
 810c02a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810c02c:	9303      	str	r3, [sp, #12]
 810c02e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810c030:	9300      	str	r3, [sp, #0]
 810c032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c034:	9911      	ldr	r1, [sp, #68]	; 0x44
 810c036:	441c      	add	r4, r3
 810c038:	441d      	add	r5, r3
 810c03a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 810c03e:	9302      	str	r3, [sp, #8]
 810c040:	2300      	movs	r3, #0
 810c042:	9301      	str	r3, [sp, #4]
 810c044:	ee18 2a10 	vmov	r2, s16
 810c048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c04a:	f002 f89b 	bl	810e184 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 810c04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c050:	9014      	str	r0, [sp, #80]	; 0x50
 810c052:	3601      	adds	r6, #1
 810c054:	42b3      	cmp	r3, r6
 810c056:	d01b      	beq.n	810c090 <forward_lite_conv2d_rgb_sssa8_ch+0x430>
 810c058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810c05a:	e766      	b.n	810bf2a <forward_lite_conv2d_rgb_sssa8_ch+0x2ca>
 810c05c:	9911      	ldr	r1, [sp, #68]	; 0x44
 810c05e:	4291      	cmp	r1, r2
 810c060:	d016      	beq.n	810c090 <forward_lite_conv2d_rgb_sssa8_ch+0x430>
 810c062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c064:	9307      	str	r3, [sp, #28]
 810c066:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810c068:	9306      	str	r3, [sp, #24]
 810c06a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 810c06c:	9305      	str	r3, [sp, #20]
 810c06e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 810c070:	9304      	str	r3, [sp, #16]
 810c072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c074:	9303      	str	r3, [sp, #12]
 810c076:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810c078:	9302      	str	r3, [sp, #8]
 810c07a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810c07c:	9300      	str	r3, [sp, #0]
 810c07e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 810c082:	9301      	str	r3, [sp, #4]
 810c084:	ee18 2a10 	vmov	r2, s16
 810c088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c08a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 810c08c:	f001 faee 	bl	810d66c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 810c090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c092:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 810c094:	9916      	ldr	r1, [sp, #88]	; 0x58
 810c096:	1ad2      	subs	r2, r2, r3
 810c098:	429a      	cmp	r2, r3
 810c09a:	921d      	str	r2, [sp, #116]	; 0x74
 810c09c:	bfa8      	it	ge
 810c09e:	461a      	movge	r2, r3
 810c0a0:	4419      	add	r1, r3
 810c0a2:	2a00      	cmp	r2, #0
 810c0a4:	9116      	str	r1, [sp, #88]	; 0x58
 810c0a6:	4614      	mov	r4, r2
 810c0a8:	dd1a      	ble.n	810c0e0 <forward_lite_conv2d_rgb_sssa8_ch+0x480>
 810c0aa:	9926      	ldr	r1, [sp, #152]	; 0x98
 810c0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c0ae:	fb03 1002 	mla	r0, r3, r2, r1
 810c0b2:	ee18 1a10 	vmov	r1, s16
 810c0b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 810c0ba:	ee08 1a10 	vmov	s16, r1
 810c0be:	9919      	ldr	r1, [sp, #100]	; 0x64
 810c0c0:	9026      	str	r0, [sp, #152]	; 0x98
 810c0c2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 810c0c6:	9119      	str	r1, [sp, #100]	; 0x64
 810c0c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 810c0ca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 810c0ce:	911a      	str	r1, [sp, #104]	; 0x68
 810c0d0:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c0d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 810c0d6:	9318      	str	r3, [sp, #96]	; 0x60
 810c0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810c0da:	b2a3      	uxth	r3, r4
 810c0dc:	f000 fb60 	bl	810c7a0 <st_int8_to16_dual>
 810c0e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 810c0e2:	3b01      	subs	r3, #1
 810c0e4:	931e      	str	r3, [sp, #120]	; 0x78
 810c0e6:	d001      	beq.n	810c0ec <forward_lite_conv2d_rgb_sssa8_ch+0x48c>
 810c0e8:	9415      	str	r4, [sp, #84]	; 0x54
 810c0ea:	e6cb      	b.n	810be84 <forward_lite_conv2d_rgb_sssa8_ch+0x224>
 810c0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c0ee:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 810c0f0:	4498      	add	r8, r3
 810c0f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810c0f4:	4413      	add	r3, r2
 810c0f6:	9310      	str	r3, [sp, #64]	; 0x40
 810c0f8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 810c0fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 810c0fc:	4413      	add	r3, r2
 810c0fe:	9322      	str	r3, [sp, #136]	; 0x88
 810c100:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 810c102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 810c104:	4413      	add	r3, r2
 810c106:	9323      	str	r3, [sp, #140]	; 0x8c
 810c108:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810c10a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810c10c:	3301      	adds	r3, #1
 810c10e:	931f      	str	r3, [sp, #124]	; 0x7c
 810c110:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 810c112:	4293      	cmp	r3, r2
 810c114:	f6ff ae8b 	blt.w	810be2e <forward_lite_conv2d_rgb_sssa8_ch+0x1ce>
 810c118:	b053      	add	sp, #332	; 0x14c
 810c11a:	ecbd 8b02 	vpop	{d8}
 810c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c122:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 810c124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810c128:	ee18 0a90 	vmov	r0, s17
 810c12c:	f000 fb38 	bl	810c7a0 <st_int8_to16_dual>
 810c130:	e68c      	b.n	810be4c <forward_lite_conv2d_rgb_sssa8_ch+0x1ec>
 810c132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810c134:	9327      	str	r3, [sp, #156]	; 0x9c
 810c136:	9b22      	ldr	r3, [sp, #136]	; 0x88
 810c138:	9316      	str	r3, [sp, #88]	; 0x58
 810c13a:	e683      	b.n	810be44 <forward_lite_conv2d_rgb_sssa8_ch+0x1e4>
 810c13c:	460b      	mov	r3, r1
 810c13e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810c142:	ee18 0a90 	vmov	r0, s17
 810c146:	f000 fb2b 	bl	810c7a0 <st_int8_to16_dual>
 810c14a:	2301      	movs	r3, #1
 810c14c:	9328      	str	r3, [sp, #160]	; 0xa0
 810c14e:	e637      	b.n	810bdc0 <forward_lite_conv2d_rgb_sssa8_ch+0x160>

0810c150 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 810c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c154:	b083      	sub	sp, #12
 810c156:	f992 0000 	ldrsb.w	r0, [r2]
 810c15a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 810c15e:	f04f 0500 	mov.w	r5, #0
 810c162:	f360 0507 	bfi	r5, r0, #0, #8
 810c166:	f1b9 0f00 	cmp.w	r9, #0
 810c16a:	f360 250f 	bfi	r5, r0, #8, #8
 810c16e:	dd20      	ble.n	810c1b2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 810c170:	461c      	mov	r4, r3
 810c172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c174:	1c9e      	adds	r6, r3, #2
 810c176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c178:	460f      	mov	r7, r1
 810c17a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 810c17e:	fb06 fb04 	mul.w	fp, r6, r4
 810c182:	f04f 0800 	mov.w	r8, #0
 810c186:	2c00      	cmp	r4, #0
 810c188:	dd08      	ble.n	810c19c <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 810c18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c18c:	18f9      	adds	r1, r7, r3
 810c18e:	2300      	movs	r3, #0
 810c190:	3301      	adds	r3, #1
 810c192:	429c      	cmp	r4, r3
 810c194:	800d      	strh	r5, [r1, #0]
 810c196:	4431      	add	r1, r6
 810c198:	d1fa      	bne.n	810c190 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 810c19a:	445f      	add	r7, fp
 810c19c:	4639      	mov	r1, r7
 810c19e:	4652      	mov	r2, sl
 810c1a0:	f108 0801 	add.w	r8, r8, #1
 810c1a4:	9001      	str	r0, [sp, #4]
 810c1a6:	f001 f94b 	bl	810d440 <st_int8_fill>
 810c1aa:	45c1      	cmp	r9, r8
 810c1ac:	9801      	ldr	r0, [sp, #4]
 810c1ae:	4457      	add	r7, sl
 810c1b0:	d1e9      	bne.n	810c186 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 810c1b2:	b003      	add	sp, #12
 810c1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c1b8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 810c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1bc:	b085      	sub	sp, #20
 810c1be:	f992 8000 	ldrsb.w	r8, [r2]
 810c1c2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 810c1c4:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 810c1c8:	461e      	mov	r6, r3
 810c1ca:	f04f 0500 	mov.w	r5, #0
 810c1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c1d0:	9303      	str	r3, [sp, #12]
 810c1d2:	f368 0507 	bfi	r5, r8, #0, #8
 810c1d6:	2e06      	cmp	r6, #6
 810c1d8:	460c      	mov	r4, r1
 810c1da:	f368 250f 	bfi	r5, r8, #8, #8
 810c1de:	d077      	beq.n	810c2d0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 810c1e0:	2e03      	cmp	r6, #3
 810c1e2:	d04f      	beq.n	810c284 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xcc>
 810c1e4:	2b00      	cmp	r3, #0
 810c1e6:	db05      	blt.n	810c1f4 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 810c1e8:	1c5a      	adds	r2, r3, #1
 810c1ea:	4608      	mov	r0, r1
 810c1ec:	4641      	mov	r1, r8
 810c1ee:	4414      	add	r4, r2
 810c1f0:	f004 f832 	bl	8110258 <memset>
 810c1f4:	1e7b      	subs	r3, r7, #1
 810c1f6:	2b00      	cmp	r3, #0
 810c1f8:	9301      	str	r3, [sp, #4]
 810c1fa:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 810c1fe:	dd27      	ble.n	810c250 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x98>
 810c200:	9b03      	ldr	r3, [sp, #12]
 810c202:	f10a 0702 	add.w	r7, sl, #2
 810c206:	1c5a      	adds	r2, r3, #1
 810c208:	fb07 f306 	mul.w	r3, r7, r6
 810c20c:	ea4f 0942 	mov.w	r9, r2, lsl #1
 810c210:	9302      	str	r3, [sp, #8]
 810c212:	4643      	mov	r3, r8
 810c214:	f04f 0b00 	mov.w	fp, #0
 810c218:	46c8      	mov	r8, r9
 810c21a:	4699      	mov	r9, r3
 810c21c:	2e00      	cmp	r6, #0
 810c21e:	eb04 010a 	add.w	r1, r4, sl
 810c222:	dd09      	ble.n	810c238 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x80>
 810c224:	468c      	mov	ip, r1
 810c226:	2300      	movs	r3, #0
 810c228:	3301      	adds	r3, #1
 810c22a:	42b3      	cmp	r3, r6
 810c22c:	f8ac 5000 	strh.w	r5, [ip]
 810c230:	44bc      	add	ip, r7
 810c232:	d1f9      	bne.n	810c228 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x70>
 810c234:	9b02      	ldr	r3, [sp, #8]
 810c236:	4419      	add	r1, r3
 810c238:	4642      	mov	r2, r8
 810c23a:	4648      	mov	r0, r9
 810c23c:	eb01 0408 	add.w	r4, r1, r8
 810c240:	f001 f8fe 	bl	810d440 <st_int8_fill>
 810c244:	9b01      	ldr	r3, [sp, #4]
 810c246:	f10b 0b01 	add.w	fp, fp, #1
 810c24a:	459b      	cmp	fp, r3
 810c24c:	d1e6      	bne.n	810c21c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x64>
 810c24e:	46c8      	mov	r8, r9
 810c250:	2e00      	cmp	r6, #0
 810c252:	eb04 000a 	add.w	r0, r4, sl
 810c256:	dd0a      	ble.n	810c26e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb6>
 810c258:	f10a 0702 	add.w	r7, sl, #2
 810c25c:	4602      	mov	r2, r0
 810c25e:	2300      	movs	r3, #0
 810c260:	3301      	adds	r3, #1
 810c262:	429e      	cmp	r6, r3
 810c264:	8015      	strh	r5, [r2, #0]
 810c266:	443a      	add	r2, r7
 810c268:	d1fa      	bne.n	810c260 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa8>
 810c26a:	fb07 0006 	mla	r0, r7, r6, r0
 810c26e:	9b03      	ldr	r3, [sp, #12]
 810c270:	2b00      	cmp	r3, #0
 810c272:	db2a      	blt.n	810c2ca <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 810c274:	461a      	mov	r2, r3
 810c276:	3201      	adds	r2, #1
 810c278:	4641      	mov	r1, r8
 810c27a:	b005      	add	sp, #20
 810c27c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c280:	f003 bfea 	b.w	8110258 <memset>
 810c284:	fa5f f388 	uxtb.w	r3, r8
 810c288:	ea4f 2208 	mov.w	r2, r8, lsl #8
 810c28c:	b292      	uxth	r2, r2
 810c28e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 810c292:	4313      	orrs	r3, r2
 810c294:	ea4f 4208 	mov.w	r2, r8, lsl #16
 810c298:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 810c29c:	2f00      	cmp	r7, #0
 810c29e:	ea42 0203 	orr.w	r2, r2, r3
 810c2a2:	b29b      	uxth	r3, r3
 810c2a4:	dd11      	ble.n	810c2ca <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 810c2a6:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 810c2aa:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 810c2ae:	4449      	add	r1, r9
 810c2b0:	6022      	str	r2, [r4, #0]
 810c2b2:	80a3      	strh	r3, [r4, #4]
 810c2b4:	f8a4 5009 	strh.w	r5, [r4, #9]
 810c2b8:	81e3      	strh	r3, [r4, #14]
 810c2ba:	f884 8013 	strb.w	r8, [r4, #19]
 810c2be:	6162      	str	r2, [r4, #20]
 810c2c0:	f884 8018 	strb.w	r8, [r4, #24]
 810c2c4:	3419      	adds	r4, #25
 810c2c6:	428c      	cmp	r4, r1
 810c2c8:	d1f2      	bne.n	810c2b0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 810c2ca:	b005      	add	sp, #20
 810c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c2d0:	fa5f f388 	uxtb.w	r3, r8
 810c2d4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 810c2d8:	b292      	uxth	r2, r2
 810c2da:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 810c2de:	4313      	orrs	r3, r2
 810c2e0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 810c2e4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 810c2e8:	2f00      	cmp	r7, #0
 810c2ea:	ea43 0302 	orr.w	r3, r3, r2
 810c2ee:	ddec      	ble.n	810c2ca <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x112>
 810c2f0:	340f      	adds	r4, #15
 810c2f2:	2200      	movs	r2, #0
 810c2f4:	3201      	adds	r2, #1
 810c2f6:	4297      	cmp	r7, r2
 810c2f8:	f844 3c0f 	str.w	r3, [r4, #-15]
 810c2fc:	f844 3c0b 	str.w	r3, [r4, #-11]
 810c300:	f804 8c07 	strb.w	r8, [r4, #-7]
 810c304:	8025      	strh	r5, [r4, #0]
 810c306:	8125      	strh	r5, [r4, #8]
 810c308:	8225      	strh	r5, [r4, #16]
 810c30a:	8325      	strh	r5, [r4, #24]
 810c30c:	8425      	strh	r5, [r4, #32]
 810c30e:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
 810c312:	f8c4 3029 	str.w	r3, [r4, #41]	; 0x29
 810c316:	f8c4 302d 	str.w	r3, [r4, #45]	; 0x2d
 810c31a:	f104 0440 	add.w	r4, r4, #64	; 0x40
 810c31e:	d1e9      	bne.n	810c2f4 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x13c>
 810c320:	b005      	add	sp, #20
 810c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c326:	bf00      	nop

0810c328 <forward_lite_pad_constant>:
 810c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c32c:	b085      	sub	sp, #20
 810c32e:	4616      	mov	r6, r2
 810c330:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810c332:	9201      	str	r2, [sp, #4]
 810c334:	4681      	mov	r9, r0
 810c336:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 810c33a:	2b08      	cmp	r3, #8
 810c33c:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	; 0x3c
 810c340:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	; 0x4c
 810c344:	460c      	mov	r4, r1
 810c346:	9002      	str	r0, [sp, #8]
 810c348:	d052      	beq.n	810c3f0 <forward_lite_pad_constant+0xc8>
 810c34a:	2a00      	cmp	r2, #0
 810c34c:	dd11      	ble.n	810c372 <forward_lite_pad_constant+0x4a>
 810c34e:	f8cd 8000 	str.w	r8, [sp]
 810c352:	f04f 0b00 	mov.w	fp, #0
 810c356:	46b8      	mov	r8, r7
 810c358:	4617      	mov	r7, r2
 810c35a:	4621      	mov	r1, r4
 810c35c:	462a      	mov	r2, r5
 810c35e:	44ab      	add	fp, r5
 810c360:	4630      	mov	r0, r6
 810c362:	f001 f8c9 	bl	810d4f8 <st_int8_copy>
 810c366:	455f      	cmp	r7, fp
 810c368:	442c      	add	r4, r5
 810c36a:	dcf6      	bgt.n	810c35a <forward_lite_pad_constant+0x32>
 810c36c:	4647      	mov	r7, r8
 810c36e:	f8dd 8000 	ldr.w	r8, [sp]
 810c372:	9b01      	ldr	r3, [sp, #4]
 810c374:	2b00      	cmp	r3, #0
 810c376:	dd2a      	ble.n	810c3ce <forward_lite_pad_constant+0xa6>
 810c378:	2300      	movs	r3, #0
 810c37a:	9300      	str	r3, [sp, #0]
 810c37c:	2f00      	cmp	r7, #0
 810c37e:	bfc8      	it	gt
 810c380:	f04f 0b00 	movgt.w	fp, #0
 810c384:	dd08      	ble.n	810c398 <forward_lite_pad_constant+0x70>
 810c386:	4621      	mov	r1, r4
 810c388:	462a      	mov	r2, r5
 810c38a:	44ab      	add	fp, r5
 810c38c:	4630      	mov	r0, r6
 810c38e:	f001 f8b3 	bl	810d4f8 <st_int8_copy>
 810c392:	455f      	cmp	r7, fp
 810c394:	442c      	add	r4, r5
 810c396:	dcf6      	bgt.n	810c386 <forward_lite_pad_constant+0x5e>
 810c398:	4621      	mov	r1, r4
 810c39a:	4648      	mov	r0, r9
 810c39c:	4652      	mov	r2, sl
 810c39e:	f001 f8ab 	bl	810d4f8 <st_int8_copy>
 810c3a2:	f1b8 0f00 	cmp.w	r8, #0
 810c3a6:	4454      	add	r4, sl
 810c3a8:	44d1      	add	r9, sl
 810c3aa:	dd0a      	ble.n	810c3c2 <forward_lite_pad_constant+0x9a>
 810c3ac:	f04f 0b00 	mov.w	fp, #0
 810c3b0:	4621      	mov	r1, r4
 810c3b2:	462a      	mov	r2, r5
 810c3b4:	44ab      	add	fp, r5
 810c3b6:	4630      	mov	r0, r6
 810c3b8:	f001 f89e 	bl	810d4f8 <st_int8_copy>
 810c3bc:	45d8      	cmp	r8, fp
 810c3be:	442c      	add	r4, r5
 810c3c0:	dcf6      	bgt.n	810c3b0 <forward_lite_pad_constant+0x88>
 810c3c2:	9b00      	ldr	r3, [sp, #0]
 810c3c4:	9a01      	ldr	r2, [sp, #4]
 810c3c6:	3301      	adds	r3, #1
 810c3c8:	429a      	cmp	r2, r3
 810c3ca:	9300      	str	r3, [sp, #0]
 810c3cc:	d1d6      	bne.n	810c37c <forward_lite_pad_constant+0x54>
 810c3ce:	9b02      	ldr	r3, [sp, #8]
 810c3d0:	2b00      	cmp	r3, #0
 810c3d2:	dd0a      	ble.n	810c3ea <forward_lite_pad_constant+0xc2>
 810c3d4:	2700      	movs	r7, #0
 810c3d6:	4698      	mov	r8, r3
 810c3d8:	4621      	mov	r1, r4
 810c3da:	462a      	mov	r2, r5
 810c3dc:	4630      	mov	r0, r6
 810c3de:	442f      	add	r7, r5
 810c3e0:	f001 f88a 	bl	810d4f8 <st_int8_copy>
 810c3e4:	45b8      	cmp	r8, r7
 810c3e6:	442c      	add	r4, r5
 810c3e8:	dcf6      	bgt.n	810c3d8 <forward_lite_pad_constant+0xb0>
 810c3ea:	b005      	add	sp, #20
 810c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3f0:	f996 5000 	ldrsb.w	r5, [r6]
 810c3f4:	4414      	add	r4, r2
 810c3f6:	4628      	mov	r0, r5
 810c3f8:	9403      	str	r4, [sp, #12]
 810c3fa:	f001 f821 	bl	810d440 <st_int8_fill>
 810c3fe:	9b01      	ldr	r3, [sp, #4]
 810c400:	2b00      	cmp	r3, #0
 810c402:	dd26      	ble.n	810c452 <forward_lite_pad_constant+0x12a>
 810c404:	eb08 030a 	add.w	r3, r8, sl
 810c408:	eb03 0b07 	add.w	fp, r3, r7
 810c40c:	eb07 030a 	add.w	r3, r7, sl
 810c410:	2600      	movs	r6, #0
 810c412:	9300      	str	r3, [sp, #0]
 810c414:	4643      	mov	r3, r8
 810c416:	46b0      	mov	r8, r6
 810c418:	461e      	mov	r6, r3
 810c41a:	4621      	mov	r1, r4
 810c41c:	4628      	mov	r0, r5
 810c41e:	463a      	mov	r2, r7
 810c420:	f001 f80e 	bl	810d440 <st_int8_fill>
 810c424:	19e1      	adds	r1, r4, r7
 810c426:	4648      	mov	r0, r9
 810c428:	4652      	mov	r2, sl
 810c42a:	f001 f865 	bl	810d4f8 <st_int8_copy>
 810c42e:	9b00      	ldr	r3, [sp, #0]
 810c430:	4632      	mov	r2, r6
 810c432:	18e1      	adds	r1, r4, r3
 810c434:	4628      	mov	r0, r5
 810c436:	f001 f803 	bl	810d440 <st_int8_fill>
 810c43a:	9b01      	ldr	r3, [sp, #4]
 810c43c:	f108 0801 	add.w	r8, r8, #1
 810c440:	4543      	cmp	r3, r8
 810c442:	44d1      	add	r9, sl
 810c444:	445c      	add	r4, fp
 810c446:	d1e8      	bne.n	810c41a <forward_lite_pad_constant+0xf2>
 810c448:	461a      	mov	r2, r3
 810c44a:	9b03      	ldr	r3, [sp, #12]
 810c44c:	fb0b 3302 	mla	r3, fp, r2, r3
 810c450:	9303      	str	r3, [sp, #12]
 810c452:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810c456:	4628      	mov	r0, r5
 810c458:	b005      	add	sp, #20
 810c45a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c45e:	f000 bfef 	b.w	810d440 <st_int8_fill>
 810c462:	bf00      	nop

0810c464 <forward_lite_pad_edge>:
 810c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c468:	ed2d 8b02 	vpush	{d8}
 810c46c:	b087      	sub	sp, #28
 810c46e:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	; 0x50
 810c472:	9305      	str	r3, [sp, #20]
 810c474:	9b16      	ldr	r3, [sp, #88]	; 0x58
 810c476:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 810c47a:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 810c47e:	9103      	str	r1, [sp, #12]
 810c480:	18cd      	adds	r5, r1, r3
 810c482:	1e13      	subs	r3, r2, #0
 810c484:	9504      	str	r5, [sp, #16]
 810c486:	9301      	str	r3, [sp, #4]
 810c488:	dd37      	ble.n	810c4fa <forward_lite_pad_edge+0x96>
 810c48a:	fb04 f308 	mul.w	r3, r4, r8
 810c48e:	9302      	str	r3, [sp, #8]
 810c490:	ee08 aa10 	vmov	s16, sl
 810c494:	2300      	movs	r3, #0
 810c496:	4607      	mov	r7, r0
 810c498:	9300      	str	r3, [sp, #0]
 810c49a:	f1b9 0f00 	cmp.w	r9, #0
 810c49e:	bfc8      	it	gt
 810c4a0:	2600      	movgt	r6, #0
 810c4a2:	dd08      	ble.n	810c4b6 <forward_lite_pad_edge+0x52>
 810c4a4:	4629      	mov	r1, r5
 810c4a6:	4426      	add	r6, r4
 810c4a8:	4622      	mov	r2, r4
 810c4aa:	4638      	mov	r0, r7
 810c4ac:	f001 f824 	bl	810d4f8 <st_int8_copy>
 810c4b0:	45b1      	cmp	r9, r6
 810c4b2:	4425      	add	r5, r4
 810c4b4:	dcf6      	bgt.n	810c4a4 <forward_lite_pad_edge+0x40>
 810c4b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c4b8:	4629      	mov	r1, r5
 810c4ba:	4638      	mov	r0, r7
 810c4bc:	461a      	mov	r2, r3
 810c4be:	441f      	add	r7, r3
 810c4c0:	441d      	add	r5, r3
 810c4c2:	f001 f819 	bl	810d4f8 <st_int8_copy>
 810c4c6:	f1b8 0f00 	cmp.w	r8, #0
 810c4ca:	eba7 0a04 	sub.w	sl, r7, r4
 810c4ce:	dd0c      	ble.n	810c4ea <forward_lite_pad_edge+0x86>
 810c4d0:	46ab      	mov	fp, r5
 810c4d2:	2600      	movs	r6, #0
 810c4d4:	4659      	mov	r1, fp
 810c4d6:	3601      	adds	r6, #1
 810c4d8:	4622      	mov	r2, r4
 810c4da:	4650      	mov	r0, sl
 810c4dc:	f001 f80c 	bl	810d4f8 <st_int8_copy>
 810c4e0:	4546      	cmp	r6, r8
 810c4e2:	44a3      	add	fp, r4
 810c4e4:	d1f6      	bne.n	810c4d4 <forward_lite_pad_edge+0x70>
 810c4e6:	9b02      	ldr	r3, [sp, #8]
 810c4e8:	441d      	add	r5, r3
 810c4ea:	9b00      	ldr	r3, [sp, #0]
 810c4ec:	9a01      	ldr	r2, [sp, #4]
 810c4ee:	3301      	adds	r3, #1
 810c4f0:	429a      	cmp	r2, r3
 810c4f2:	9300      	str	r3, [sp, #0]
 810c4f4:	d1d1      	bne.n	810c49a <forward_lite_pad_edge+0x36>
 810c4f6:	ee18 aa10 	vmov	sl, s16
 810c4fa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 810c4fe:	4293      	cmp	r3, r2
 810c500:	d009      	beq.n	810c516 <forward_lite_pad_edge+0xb2>
 810c502:	461c      	mov	r4, r3
 810c504:	4615      	mov	r5, r2
 810c506:	4621      	mov	r1, r4
 810c508:	4652      	mov	r2, sl
 810c50a:	4628      	mov	r0, r5
 810c50c:	4454      	add	r4, sl
 810c50e:	f000 fff3 	bl	810d4f8 <st_int8_copy>
 810c512:	42a5      	cmp	r5, r4
 810c514:	d1f7      	bne.n	810c506 <forward_lite_pad_edge+0xa2>
 810c516:	9a01      	ldr	r2, [sp, #4]
 810c518:	9b05      	ldr	r3, [sp, #20]
 810c51a:	4413      	add	r3, r2
 810c51c:	9a03      	ldr	r2, [sp, #12]
 810c51e:	3b01      	subs	r3, #1
 810c520:	fb0a 2503 	mla	r5, sl, r3, r2
 810c524:	9b18      	ldr	r3, [sp, #96]	; 0x60
 810c526:	18ec      	adds	r4, r5, r3
 810c528:	42a5      	cmp	r5, r4
 810c52a:	bf18      	it	ne
 810c52c:	f1ca 0600 	rsbne	r6, sl, #0
 810c530:	d007      	beq.n	810c542 <forward_lite_pad_edge+0xde>
 810c532:	4621      	mov	r1, r4
 810c534:	4652      	mov	r2, sl
 810c536:	4628      	mov	r0, r5
 810c538:	4434      	add	r4, r6
 810c53a:	f000 ffdd 	bl	810d4f8 <st_int8_copy>
 810c53e:	42a5      	cmp	r5, r4
 810c540:	d1f7      	bne.n	810c532 <forward_lite_pad_edge+0xce>
 810c542:	b007      	add	sp, #28
 810c544:	ecbd 8b02 	vpop	{d8}
 810c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c54c <forward_lite_pad_reflect>:
 810c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c550:	b08f      	sub	sp, #60	; 0x3c
 810c552:	460e      	mov	r6, r1
 810c554:	9f22      	ldr	r7, [sp, #136]	; 0x88
 810c556:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 810c55a:	f9bd e084 	ldrsh.w	lr, [sp, #132]	; 0x84
 810c55e:	910b      	str	r1, [sp, #44]	; 0x2c
 810c560:	2b00      	cmp	r3, #0
 810c562:	4684      	mov	ip, r0
 810c564:	9002      	str	r0, [sp, #8]
 810c566:	950c      	str	r5, [sp, #48]	; 0x30
 810c568:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c56a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 810c56e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 810c570:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 810c574:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	; 0x7c
 810c578:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 810c57a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 810c57e:	4437      	add	r7, r6
 810c580:	9307      	str	r3, [sp, #28]
 810c582:	dd58      	ble.n	810c636 <forward_lite_pad_reflect+0xea>
 810c584:	4408      	add	r0, r1
 810c586:	fb02 f200 	mul.w	r2, r2, r0
 810c58a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 810c58c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 810c58e:	9206      	str	r2, [sp, #24]
 810c590:	4403      	add	r3, r0
 810c592:	442b      	add	r3, r5
 810c594:	930a      	str	r3, [sp, #40]	; 0x28
 810c596:	197b      	adds	r3, r7, r5
 810c598:	9301      	str	r3, [sp, #4]
 810c59a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810c59c:	1e8b      	subs	r3, r1, #2
 810c59e:	fb04 c303 	mla	r3, r4, r3, ip
 810c5a2:	9304      	str	r3, [sp, #16]
 810c5a4:	fb08 2305 	mla	r3, r8, r5, r2
 810c5a8:	fb09 6303 	mla	r3, r9, r3, r6
 810c5ac:	9303      	str	r3, [sp, #12]
 810c5ae:	fb09 f308 	mul.w	r3, r9, r8
 810c5b2:	fb04 f101 	mul.w	r1, r4, r1
 810c5b6:	9308      	str	r3, [sp, #32]
 810c5b8:	2300      	movs	r3, #0
 810c5ba:	9109      	str	r1, [sp, #36]	; 0x24
 810c5bc:	9305      	str	r3, [sp, #20]
 810c5be:	f1c9 0a00 	rsb	sl, r9, #0
 810c5c2:	9b01      	ldr	r3, [sp, #4]
 810c5c4:	42bb      	cmp	r3, r7
 810c5c6:	d00a      	beq.n	810c5de <forward_lite_pad_reflect+0x92>
 810c5c8:	9e02      	ldr	r6, [sp, #8]
 810c5ca:	461d      	mov	r5, r3
 810c5cc:	4455      	add	r5, sl
 810c5ce:	4426      	add	r6, r4
 810c5d0:	4622      	mov	r2, r4
 810c5d2:	4629      	mov	r1, r5
 810c5d4:	4630      	mov	r0, r6
 810c5d6:	f000 ff8f 	bl	810d4f8 <st_int8_copy>
 810c5da:	42bd      	cmp	r5, r7
 810c5dc:	d1f6      	bne.n	810c5cc <forward_lite_pad_reflect+0x80>
 810c5de:	9b02      	ldr	r3, [sp, #8]
 810c5e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810c5e2:	9901      	ldr	r1, [sp, #4]
 810c5e4:	4618      	mov	r0, r3
 810c5e6:	4413      	add	r3, r2
 810c5e8:	9302      	str	r3, [sp, #8]
 810c5ea:	f000 ff85 	bl	810d4f8 <st_int8_copy>
 810c5ee:	9b06      	ldr	r3, [sp, #24]
 810c5f0:	4543      	cmp	r3, r8
 810c5f2:	da0d      	bge.n	810c610 <forward_lite_pad_reflect+0xc4>
 810c5f4:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 810c5f8:	461d      	mov	r5, r3
 810c5fa:	4659      	mov	r1, fp
 810c5fc:	4630      	mov	r0, r6
 810c5fe:	3501      	adds	r5, #1
 810c600:	4622      	mov	r2, r4
 810c602:	f000 ff79 	bl	810d4f8 <st_int8_copy>
 810c606:	45a8      	cmp	r8, r5
 810c608:	44cb      	add	fp, r9
 810c60a:	eba6 0604 	sub.w	r6, r6, r4
 810c60e:	d1f4      	bne.n	810c5fa <forward_lite_pad_reflect+0xae>
 810c610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c612:	9901      	ldr	r1, [sp, #4]
 810c614:	9b05      	ldr	r3, [sp, #20]
 810c616:	4411      	add	r1, r2
 810c618:	4417      	add	r7, r2
 810c61a:	9101      	str	r1, [sp, #4]
 810c61c:	9a04      	ldr	r2, [sp, #16]
 810c61e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c620:	440a      	add	r2, r1
 810c622:	9204      	str	r2, [sp, #16]
 810c624:	9908      	ldr	r1, [sp, #32]
 810c626:	9a03      	ldr	r2, [sp, #12]
 810c628:	440a      	add	r2, r1
 810c62a:	9203      	str	r2, [sp, #12]
 810c62c:	9a07      	ldr	r2, [sp, #28]
 810c62e:	3301      	adds	r3, #1
 810c630:	429a      	cmp	r2, r3
 810c632:	9305      	str	r3, [sp, #20]
 810c634:	d1c5      	bne.n	810c5c2 <forward_lite_pad_reflect+0x76>
 810c636:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810c638:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 810c63a:	fb03 f404 	mul.w	r4, r3, r4
 810c63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c640:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 810c644:	42a3      	cmp	r3, r4
 810c646:	d00c      	beq.n	810c662 <forward_lite_pad_reflect+0x116>
 810c648:	461d      	mov	r5, r3
 810c64a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810c64c:	425e      	negs	r6, r3
 810c64e:	461f      	mov	r7, r3
 810c650:	4629      	mov	r1, r5
 810c652:	4620      	mov	r0, r4
 810c654:	463a      	mov	r2, r7
 810c656:	443d      	add	r5, r7
 810c658:	4434      	add	r4, r6
 810c65a:	f000 ff4d 	bl	810d4f8 <st_int8_copy>
 810c65e:	42a5      	cmp	r5, r4
 810c660:	d1f6      	bne.n	810c650 <forward_lite_pad_reflect+0x104>
 810c662:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c664:	991d      	ldr	r1, [sp, #116]	; 0x74
 810c666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c668:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 810c66a:	3b01      	subs	r3, #1
 810c66c:	fb01 2403 	mla	r4, r1, r3, r2
 810c670:	fb01 f505 	mul.w	r5, r1, r5
 810c674:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 810c678:	42ac      	cmp	r4, r5
 810c67a:	d00a      	beq.n	810c692 <forward_lite_pad_reflect+0x146>
 810c67c:	424e      	negs	r6, r1
 810c67e:	460f      	mov	r7, r1
 810c680:	4621      	mov	r1, r4
 810c682:	4628      	mov	r0, r5
 810c684:	463a      	mov	r2, r7
 810c686:	4434      	add	r4, r6
 810c688:	443d      	add	r5, r7
 810c68a:	f000 ff35 	bl	810d4f8 <st_int8_copy>
 810c68e:	42ac      	cmp	r4, r5
 810c690:	d1f6      	bne.n	810c680 <forward_lite_pad_reflect+0x134>
 810c692:	b00f      	add	sp, #60	; 0x3c
 810c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c698 <align_factor>:
 810c698:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810c69c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 810c6a0:	b508      	push	{r3, lr}
 810c6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c6a6:	f04f 0300 	mov.w	r3, #0
 810c6aa:	8003      	strh	r3, [r0, #0]
 810c6ac:	d425      	bmi.n	810c6fa <align_factor+0x62>
 810c6ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810c6b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810c6b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810c6ba:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 810c6be:	e005      	b.n	810c6cc <align_factor+0x34>
 810c6c0:	8003      	strh	r3, [r0, #0]
 810c6c2:	b293      	uxth	r3, r2
 810c6c4:	428b      	cmp	r3, r1
 810c6c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 810c6ca:	d02d      	beq.n	810c728 <align_factor+0x90>
 810c6cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 810c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c6d4:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 810c6d8:	dcf2      	bgt.n	810c6c0 <align_factor+0x28>
 810c6da:	eddf 7a18 	vldr	s15, [pc, #96]	; 810c73c <align_factor+0xa4>
 810c6de:	ee60 7a27 	vmul.f32	s15, s0, s15
 810c6e2:	ee17 0a90 	vmov	r0, s15
 810c6e6:	f7f4 f9e1 	bl	8100aac <__aeabi_f2lz>
 810c6ea:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 810c6ee:	bf1c      	itt	ne
 810c6f0:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
 810c6f4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 810c6f8:	bd08      	pop	{r3, pc}
 810c6fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c702:	ddd4      	ble.n	810c6ae <align_factor+0x16>
 810c704:	2301      	movs	r3, #1
 810c706:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810c70a:	e005      	b.n	810c718 <align_factor+0x80>
 810c70c:	8003      	strh	r3, [r0, #0]
 810c70e:	b293      	uxth	r3, r2
 810c710:	2b21      	cmp	r3, #33	; 0x21
 810c712:	ee30 0a00 	vadd.f32	s0, s0, s0
 810c716:	d00d      	beq.n	810c734 <align_factor+0x9c>
 810c718:	eeb4 0ae7 	vcmpe.f32	s0, s15
 810c71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c720:	f103 0201 	add.w	r2, r3, #1
 810c724:	d4f2      	bmi.n	810c70c <align_factor+0x74>
 810c726:	e7d8      	b.n	810c6da <align_factor+0x42>
 810c728:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 810c72c:	ee30 0a00 	vadd.f32	s0, s0, s0
 810c730:	8003      	strh	r3, [r0, #0]
 810c732:	e7d2      	b.n	810c6da <align_factor+0x42>
 810c734:	2300      	movs	r3, #0
 810c736:	8003      	strh	r3, [r0, #0]
 810c738:	4618      	mov	r0, r3
 810c73a:	bd08      	pop	{r3, pc}
 810c73c:	4f000000 	.word	0x4f000000

0810c740 <align_factor_ch>:
 810c740:	b361      	cbz	r1, 810c79c <align_factor_ch+0x5c>
 810c742:	ee80 7a20 	vdiv.f32	s14, s0, s1
 810c746:	b570      	push	{r4, r5, r6, lr}
 810c748:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c74c:	1e9d      	subs	r5, r3, #2
 810c74e:	1f14      	subs	r4, r2, #4
 810c750:	2600      	movs	r6, #0
 810c752:	ecf0 7a01 	vldmia	r0!, {s15}
 810c756:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c75a:	ee17 ea90 	vmov	lr, s15
 810c75e:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 810c762:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 810c766:	f50c 0c00 	add.w	ip, ip, #8388608	; 0x800000
 810c76a:	f1be 0f00 	cmp.w	lr, #0
 810c76e:	f1c2 027e 	rsb	r2, r2, #126	; 0x7e
 810c772:	bfb8      	it	lt
 810c774:	f1cc 0c00 	rsblt	ip, ip, #0
 810c778:	2a1f      	cmp	r2, #31
 810c77a:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 810c77e:	dc06      	bgt.n	810c78e <align_factor_ch+0x4e>
 810c780:	4281      	cmp	r1, r0
 810c782:	f825 2f02 	strh.w	r2, [r5, #2]!
 810c786:	f844 3f04 	str.w	r3, [r4, #4]!
 810c78a:	d1e2      	bne.n	810c752 <align_factor_ch+0x12>
 810c78c:	bd70      	pop	{r4, r5, r6, pc}
 810c78e:	4281      	cmp	r1, r0
 810c790:	f825 6f02 	strh.w	r6, [r5, #2]!
 810c794:	f844 6f04 	str.w	r6, [r4, #4]!
 810c798:	d1db      	bne.n	810c752 <align_factor_ch+0x12>
 810c79a:	bd70      	pop	{r4, r5, r6, pc}
 810c79c:	4770      	bx	lr
 810c79e:	bf00      	nop

0810c7a0 <st_int8_to16_dual>:
 810c7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c7a4:	4698      	mov	r8, r3
 810c7a6:	085b      	lsrs	r3, r3, #1
 810c7a8:	eb00 0c02 	add.w	ip, r0, r2
 810c7ac:	f000 80ba 	beq.w	810c924 <st_int8_to16_dual+0x184>
 810c7b0:	f1a2 0710 	sub.w	r7, r2, #16
 810c7b4:	1f16      	subs	r6, r2, #4
 810c7b6:	2f00      	cmp	r7, #0
 810c7b8:	f04f 0500 	mov.w	r5, #0
 810c7bc:	db73      	blt.n	810c8a6 <st_int8_to16_dual+0x106>
 810c7be:	f8d0 e000 	ldr.w	lr, [r0]
 810c7c2:	f8dc 4000 	ldr.w	r4, [ip]
 810c7c6:	fa2f f99e 	sxtb16	r9, lr, ror #8
 810c7ca:	fa2f fe8e 	sxtb16	lr, lr
 810c7ce:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 810c7d2:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 810c7d6:	fa2f f994 	sxtb16	r9, r4, ror #8
 810c7da:	f8c1 e000 	str.w	lr, [r1]
 810c7de:	f8c1 a008 	str.w	sl, [r1, #8]
 810c7e2:	fa2f f484 	sxtb16	r4, r4
 810c7e6:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 810c7ea:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 810c7ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 810c7f2:	604c      	str	r4, [r1, #4]
 810c7f4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 810c7f8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 810c7fc:	fa2f f99e 	sxtb16	r9, lr, ror #8
 810c800:	fa2f fe8e 	sxtb16	lr, lr
 810c804:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 810c808:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 810c80c:	fa2f f994 	sxtb16	r9, r4, ror #8
 810c810:	f8c1 e010 	str.w	lr, [r1, #16]
 810c814:	f8c1 a018 	str.w	sl, [r1, #24]
 810c818:	fa2f f484 	sxtb16	r4, r4
 810c81c:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 810c820:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 810c824:	f8c1 e01c 	str.w	lr, [r1, #28]
 810c828:	614c      	str	r4, [r1, #20]
 810c82a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 810c82e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 810c832:	fa2f f99e 	sxtb16	r9, lr, ror #8
 810c836:	fa2f fe8e 	sxtb16	lr, lr
 810c83a:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 810c83e:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 810c842:	fa2f f994 	sxtb16	r9, r4, ror #8
 810c846:	3010      	adds	r0, #16
 810c848:	f8c1 e020 	str.w	lr, [r1, #32]
 810c84c:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 810c850:	fa2f f484 	sxtb16	r4, r4
 810c854:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 810c858:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 810c85c:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 810c860:	624c      	str	r4, [r1, #36]	; 0x24
 810c862:	f8dc 400c 	ldr.w	r4, [ip, #12]
 810c866:	f850 ec04 	ldr.w	lr, [r0, #-4]
 810c86a:	f10c 0c10 	add.w	ip, ip, #16
 810c86e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 810c872:	fa2f fe8e 	sxtb16	lr, lr
 810c876:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 810c87a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 810c87e:	fa2f f994 	sxtb16	r9, r4, ror #8
 810c882:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 810c886:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
 810c88a:	3510      	adds	r5, #16
 810c88c:	3140      	adds	r1, #64	; 0x40
 810c88e:	42bd      	cmp	r5, r7
 810c890:	fa2f f484 	sxtb16	r4, r4
 810c894:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 810c898:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 810c89c:	f841 ec04 	str.w	lr, [r1, #-4]
 810c8a0:	f841 4c0c 	str.w	r4, [r1, #-12]
 810c8a4:	dd8b      	ble.n	810c7be <st_int8_to16_dual+0x1e>
 810c8a6:	42ae      	cmp	r6, r5
 810c8a8:	db1e      	blt.n	810c8e8 <st_int8_to16_dual+0x148>
 810c8aa:	f850 4b04 	ldr.w	r4, [r0], #4
 810c8ae:	f85c eb04 	ldr.w	lr, [ip], #4
 810c8b2:	fa2f f994 	sxtb16	r9, r4, ror #8
 810c8b6:	fa2f f484 	sxtb16	r4, r4
 810c8ba:	eac9 4a24 	pkhtb	sl, r9, r4, asr #16
 810c8be:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 810c8c2:	fa2f f99e 	sxtb16	r9, lr, ror #8
 810c8c6:	600c      	str	r4, [r1, #0]
 810c8c8:	f8c1 a008 	str.w	sl, [r1, #8]
 810c8cc:	3504      	adds	r5, #4
 810c8ce:	3110      	adds	r1, #16
 810c8d0:	42b5      	cmp	r5, r6
 810c8d2:	fa2f fe8e 	sxtb16	lr, lr
 810c8d6:	eac9 442e 	pkhtb	r4, r9, lr, asr #16
 810c8da:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 810c8de:	f841 4c04 	str.w	r4, [r1, #-4]
 810c8e2:	f841 ec0c 	str.w	lr, [r1, #-12]
 810c8e6:	dde0      	ble.n	810c8aa <st_int8_to16_dual+0x10a>
 810c8e8:	42aa      	cmp	r2, r5
 810c8ea:	dd41      	ble.n	810c970 <st_int8_to16_dual+0x1d0>
 810c8ec:	1b55      	subs	r5, r2, r5
 810c8ee:	1d0c      	adds	r4, r1, #4
 810c8f0:	eb00 0a05 	add.w	sl, r0, r5
 810c8f4:	46e6      	mov	lr, ip
 810c8f6:	f910 9b01 	ldrsb.w	r9, [r0], #1
 810c8fa:	f824 9c04 	strh.w	r9, [r4, #-4]
 810c8fe:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 810c902:	f824 9c02 	strh.w	r9, [r4, #-2]
 810c906:	4550      	cmp	r0, sl
 810c908:	f104 0404 	add.w	r4, r4, #4
 810c90c:	d1f3      	bne.n	810c8f6 <st_int8_to16_dual+0x156>
 810c90e:	44ac      	add	ip, r5
 810c910:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 810c914:	3b01      	subs	r3, #1
 810c916:	b29b      	uxth	r3, r3
 810c918:	eb0a 0002 	add.w	r0, sl, r2
 810c91c:	4494      	add	ip, r2
 810c91e:	2b00      	cmp	r3, #0
 810c920:	f47f af49 	bne.w	810c7b6 <st_int8_to16_dual+0x16>
 810c924:	f018 0f01 	tst.w	r8, #1
 810c928:	d020      	beq.n	810c96c <st_int8_to16_dual+0x1cc>
 810c92a:	1f17      	subs	r7, r2, #4
 810c92c:	f04f 0400 	mov.w	r4, #0
 810c930:	d411      	bmi.n	810c956 <st_int8_to16_dual+0x1b6>
 810c932:	f850 3b04 	ldr.w	r3, [r0], #4
 810c936:	fa2f f593 	sxtb16	r5, r3, ror #8
 810c93a:	3108      	adds	r1, #8
 810c93c:	3404      	adds	r4, #4
 810c93e:	42a7      	cmp	r7, r4
 810c940:	fa2f f383 	sxtb16	r3, r3
 810c944:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 810c948:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 810c94c:	f841 6c04 	str.w	r6, [r1, #-4]
 810c950:	f841 3c08 	str.w	r3, [r1, #-8]
 810c954:	daed      	bge.n	810c932 <st_int8_to16_dual+0x192>
 810c956:	42a2      	cmp	r2, r4
 810c958:	dd08      	ble.n	810c96c <st_int8_to16_dual+0x1cc>
 810c95a:	1b13      	subs	r3, r2, r4
 810c95c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 810c960:	f910 2b01 	ldrsb.w	r2, [r0], #1
 810c964:	f821 2b02 	strh.w	r2, [r1], #2
 810c968:	428b      	cmp	r3, r1
 810c96a:	d1f9      	bne.n	810c960 <st_int8_to16_dual+0x1c0>
 810c96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c970:	4682      	mov	sl, r0
 810c972:	e7cf      	b.n	810c914 <st_int8_to16_dual+0x174>

0810c974 <ai_padding_opt_init>:
 810c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c978:	2700      	movs	r7, #0
 810c97a:	e9c0 7700 	strd	r7, r7, [r0]
 810c97e:	6087      	str	r7, [r0, #8]
 810c980:	690e      	ldr	r6, [r1, #16]
 810c982:	9c07      	ldr	r4, [sp, #28]
 810c984:	f1c6 0c00 	rsb	ip, r6, #0
 810c988:	689e      	ldr	r6, [r3, #8]
 810c98a:	42be      	cmp	r6, r7
 810c98c:	46b9      	mov	r9, r7
 810c98e:	dd1b      	ble.n	810c9c8 <ai_padding_opt_init+0x54>
 810c990:	463e      	mov	r6, r7
 810c992:	46be      	mov	lr, r7
 810c994:	e012      	b.n	810c9bc <ai_padding_opt_init+0x48>
 810c996:	6895      	ldr	r5, [r2, #8]
 810c998:	eba5 080c 	sub.w	r8, r5, ip
 810c99c:	68a5      	ldr	r5, [r4, #8]
 810c99e:	45a8      	cmp	r8, r5
 810c9a0:	bfb5      	itete	lt
 810c9a2:	f109 0901 	addlt.w	r9, r9, #1
 810c9a6:	3701      	addge	r7, #1
 810c9a8:	f8c0 9008 	strlt.w	r9, [r0, #8]
 810c9ac:	6047      	strge	r7, [r0, #4]
 810c9ae:	688d      	ldr	r5, [r1, #8]
 810c9b0:	44ac      	add	ip, r5
 810c9b2:	689d      	ldr	r5, [r3, #8]
 810c9b4:	f10e 0e01 	add.w	lr, lr, #1
 810c9b8:	4575      	cmp	r5, lr
 810c9ba:	dd06      	ble.n	810c9ca <ai_padding_opt_init+0x56>
 810c9bc:	f1bc 0f00 	cmp.w	ip, #0
 810c9c0:	dae9      	bge.n	810c996 <ai_padding_opt_init+0x22>
 810c9c2:	3601      	adds	r6, #1
 810c9c4:	6006      	str	r6, [r0, #0]
 810c9c6:	e7f2      	b.n	810c9ae <ai_padding_opt_init+0x3a>
 810c9c8:	463e      	mov	r6, r7
 810c9ca:	2500      	movs	r5, #0
 810c9cc:	e9c0 6703 	strd	r6, r7, [r0, #12]
 810c9d0:	e9c0 5506 	strd	r5, r5, [r0, #24]
 810c9d4:	f8c0 9014 	str.w	r9, [r0, #20]
 810c9d8:	6205      	str	r5, [r0, #32]
 810c9da:	694e      	ldr	r6, [r1, #20]
 810c9dc:	f1c6 0c00 	rsb	ip, r6, #0
 810c9e0:	685e      	ldr	r6, [r3, #4]
 810c9e2:	42ae      	cmp	r6, r5
 810c9e4:	dd1c      	ble.n	810ca20 <ai_padding_opt_init+0xac>
 810c9e6:	46ae      	mov	lr, r5
 810c9e8:	e00f      	b.n	810ca0a <ai_padding_opt_init+0x96>
 810c9ea:	6855      	ldr	r5, [r2, #4]
 810c9ec:	6866      	ldr	r6, [r4, #4]
 810c9ee:	eba5 050c 	sub.w	r5, r5, ip
 810c9f2:	42b5      	cmp	r5, r6
 810c9f4:	da10      	bge.n	810ca18 <ai_padding_opt_init+0xa4>
 810c9f6:	6a05      	ldr	r5, [r0, #32]
 810c9f8:	3501      	adds	r5, #1
 810c9fa:	6205      	str	r5, [r0, #32]
 810c9fc:	68cd      	ldr	r5, [r1, #12]
 810c9fe:	44ac      	add	ip, r5
 810ca00:	685d      	ldr	r5, [r3, #4]
 810ca02:	f10e 0e01 	add.w	lr, lr, #1
 810ca06:	4575      	cmp	r5, lr
 810ca08:	dd0a      	ble.n	810ca20 <ai_padding_opt_init+0xac>
 810ca0a:	f1bc 0f00 	cmp.w	ip, #0
 810ca0e:	daec      	bge.n	810c9ea <ai_padding_opt_init+0x76>
 810ca10:	6985      	ldr	r5, [r0, #24]
 810ca12:	3501      	adds	r5, #1
 810ca14:	6185      	str	r5, [r0, #24]
 810ca16:	e7f1      	b.n	810c9fc <ai_padding_opt_init+0x88>
 810ca18:	69c5      	ldr	r5, [r0, #28]
 810ca1a:	3501      	adds	r5, #1
 810ca1c:	61c5      	str	r5, [r0, #28]
 810ca1e:	e7ed      	b.n	810c9fc <ai_padding_opt_init+0x88>
 810ca20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810ca24 <ai_padding_opt_phase1>:
 810ca24:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 810ca28:	b923      	cbnz	r3, 810ca34 <ai_padding_opt_phase1+0x10>
 810ca2a:	b17a      	cbz	r2, 810ca4c <ai_padding_opt_phase1+0x28>
 810ca2c:	3a01      	subs	r2, #1
 810ca2e:	8483      	strh	r3, [r0, #36]	; 0x24
 810ca30:	61c2      	str	r2, [r0, #28]
 810ca32:	e004      	b.n	810ca3e <ai_padding_opt_phase1+0x1a>
 810ca34:	b152      	cbz	r2, 810ca4c <ai_padding_opt_phase1+0x28>
 810ca36:	2201      	movs	r2, #1
 810ca38:	3b01      	subs	r3, #1
 810ca3a:	8482      	strh	r2, [r0, #36]	; 0x24
 810ca3c:	6183      	str	r3, [r0, #24]
 810ca3e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 810ca42:	68c1      	ldr	r1, [r0, #12]
 810ca44:	6083      	str	r3, [r0, #8]
 810ca46:	e9c0 1200 	strd	r1, r2, [r0]
 810ca4a:	4770      	bx	lr
 810ca4c:	6a03      	ldr	r3, [r0, #32]
 810ca4e:	2201      	movs	r2, #1
 810ca50:	3b01      	subs	r3, #1
 810ca52:	8482      	strh	r2, [r0, #36]	; 0x24
 810ca54:	6203      	str	r3, [r0, #32]
 810ca56:	e7f2      	b.n	810ca3e <ai_padding_opt_phase1+0x1a>

0810ca58 <st_int8_avepool>:
 810ca58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca5c:	b097      	sub	sp, #92	; 0x5c
 810ca5e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810ca62:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 810ca66:	910f      	str	r1, [sp, #60]	; 0x3c
 810ca68:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 810ca6c:	9110      	str	r1, [sp, #64]	; 0x40
 810ca6e:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 810ca72:	9111      	str	r1, [sp, #68]	; 0x44
 810ca74:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 810ca78:	9112      	str	r1, [sp, #72]	; 0x48
 810ca7a:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 810ca7e:	9113      	str	r1, [sp, #76]	; 0x4c
 810ca80:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 810ca84:	9114      	str	r1, [sp, #80]	; 0x50
 810ca86:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 810ca8a:	930e      	str	r3, [sp, #56]	; 0x38
 810ca8c:	9109      	str	r1, [sp, #36]	; 0x24
 810ca8e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 810ca92:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 810ca96:	9104      	str	r1, [sp, #16]
 810ca98:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 810ca9c:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 810caa0:	9208      	str	r2, [sp, #32]
 810caa2:	ee80 6a20 	vdiv.f32	s12, s0, s1
 810caa6:	9315      	str	r3, [sp, #84]	; 0x54
 810caa8:	9105      	str	r1, [sp, #20]
 810caaa:	2b00      	cmp	r3, #0
 810caac:	f000 80a8 	beq.w	810cc00 <st_int8_avepool+0x1a8>
 810cab0:	2300      	movs	r3, #0
 810cab2:	fb02 fb0a 	mul.w	fp, r2, sl
 810cab6:	9306      	str	r3, [sp, #24]
 810cab8:	eddf 6a63 	vldr	s13, [pc, #396]	; 810cc48 <st_int8_avepool+0x1f0>
 810cabc:	eddf 3a63 	vldr	s7, [pc, #396]	; 810cc4c <st_int8_avepool+0x1f4>
 810cac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810cac2:	2a00      	cmp	r2, #0
 810cac4:	f000 8095 	beq.w	810cbf2 <st_int8_avepool+0x19a>
 810cac8:	9906      	ldr	r1, [sp, #24]
 810caca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810cacc:	9812      	ldr	r0, [sp, #72]	; 0x48
 810cace:	9c10      	ldr	r4, [sp, #64]	; 0x40
 810cad0:	eddd 7a04 	vldr	s15, [sp, #16]
 810cad4:	fb01 f303 	mul.w	r3, r1, r3
 810cad8:	1a1b      	subs	r3, r3, r0
 810cada:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 810cade:	4423      	add	r3, r4
 810cae0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 810cae2:	9002      	str	r0, [sp, #8]
 810cae4:	429c      	cmp	r4, r3
 810cae6:	bfa8      	it	ge
 810cae8:	461c      	movge	r4, r3
 810caea:	fb01 f302 	mul.w	r3, r1, r2
 810caee:	930a      	str	r3, [sp, #40]	; 0x28
 810caf0:	9b08      	ldr	r3, [sp, #32]
 810caf2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 810caf6:	eddd 7a05 	vldr	s15, [sp, #20]
 810cafa:	fb00 f303 	mul.w	r3, r0, r3
 810cafe:	930b      	str	r3, [sp, #44]	; 0x2c
 810cb00:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 810cb04:	2300      	movs	r3, #0
 810cb06:	46a1      	mov	r9, r4
 810cb08:	9307      	str	r3, [sp, #28]
 810cb0a:	f1ba 0f00 	cmp.w	sl, #0
 810cb0e:	d06a      	beq.n	810cbe6 <st_int8_avepool+0x18e>
 810cb10:	9a07      	ldr	r2, [sp, #28]
 810cb12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810cb14:	9911      	ldr	r1, [sp, #68]	; 0x44
 810cb16:	9c08      	ldr	r4, [sp, #32]
 810cb18:	fb02 f303 	mul.w	r3, r2, r3
 810cb1c:	1a5b      	subs	r3, r3, r1
 810cb1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 810cb20:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 810cb24:	440b      	add	r3, r1
 810cb26:	429c      	cmp	r4, r3
 810cb28:	bfa8      	it	ge
 810cb2a:	461c      	movge	r4, r3
 810cb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cb2e:	18d3      	adds	r3, r2, r3
 810cb30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810cb32:	fb0a 2303 	mla	r3, sl, r3, r2
 810cb36:	9301      	str	r3, [sp, #4]
 810cb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cb3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cb3c:	4463      	add	r3, ip
 810cb3e:	fb0a 2303 	mla	r3, sl, r3, r2
 810cb42:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 810cb46:	9303      	str	r3, [sp, #12]
 810cb48:	f04f 0800 	mov.w	r8, #0
 810cb4c:	eba4 0e0c 	sub.w	lr, r4, ip
 810cb50:	9d02      	ldr	r5, [sp, #8]
 810cb52:	45a9      	cmp	r9, r5
 810cb54:	dd63      	ble.n	810cc1e <st_int8_avepool+0x1c6>
 810cb56:	9b03      	ldr	r3, [sp, #12]
 810cb58:	2700      	movs	r7, #0
 810cb5a:	eb08 0603 	add.w	r6, r8, r3
 810cb5e:	4639      	mov	r1, r7
 810cb60:	4564      	cmp	r4, ip
 810cb62:	dd09      	ble.n	810cb78 <st_int8_avepool+0x120>
 810cb64:	4632      	mov	r2, r6
 810cb66:	4663      	mov	r3, ip
 810cb68:	f992 0000 	ldrsb.w	r0, [r2]
 810cb6c:	3301      	adds	r3, #1
 810cb6e:	429c      	cmp	r4, r3
 810cb70:	4401      	add	r1, r0
 810cb72:	4452      	add	r2, sl
 810cb74:	d1f8      	bne.n	810cb68 <st_int8_avepool+0x110>
 810cb76:	4477      	add	r7, lr
 810cb78:	3501      	adds	r5, #1
 810cb7a:	45a9      	cmp	r9, r5
 810cb7c:	445e      	add	r6, fp
 810cb7e:	d1ef      	bne.n	810cb60 <st_int8_avepool+0x108>
 810cb80:	eeb4 0a60 	vcmp.f32	s0, s1
 810cb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cb88:	d103      	bne.n	810cb92 <st_int8_avepool+0x13a>
 810cb8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 810cb8e:	4293      	cmp	r3, r2
 810cb90:	d039      	beq.n	810cc06 <st_int8_avepool+0x1ae>
 810cb92:	ee07 1a90 	vmov	s15, r1
 810cb96:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 810cb9a:	ee07 7a90 	vmov	s15, r7
 810cb9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810cba2:	eec4 7a07 	vdiv.f32	s15, s8, s14
 810cba6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 810cbaa:	eeb0 7a65 	vmov.f32	s14, s11
 810cbae:	eea7 7a86 	vfma.f32	s14, s15, s12
 810cbb2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cbba:	bfb4      	ite	lt
 810cbbc:	eef0 7a66 	vmovlt.f32	s15, s13
 810cbc0:	eef0 7a64 	vmovge.f32	s15, s9
 810cbc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810cbc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cbcc:	ee17 3a90 	vmov	r3, s15
 810cbd0:	f303 0307 	ssat	r3, #8, r3
 810cbd4:	9a01      	ldr	r2, [sp, #4]
 810cbd6:	7013      	strb	r3, [r2, #0]
 810cbd8:	4613      	mov	r3, r2
 810cbda:	f108 0801 	add.w	r8, r8, #1
 810cbde:	3301      	adds	r3, #1
 810cbe0:	45d0      	cmp	r8, sl
 810cbe2:	9301      	str	r3, [sp, #4]
 810cbe4:	d1b4      	bne.n	810cb50 <st_int8_avepool+0xf8>
 810cbe6:	9b07      	ldr	r3, [sp, #28]
 810cbe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810cbea:	3301      	adds	r3, #1
 810cbec:	4293      	cmp	r3, r2
 810cbee:	9307      	str	r3, [sp, #28]
 810cbf0:	db8b      	blt.n	810cb0a <st_int8_avepool+0xb2>
 810cbf2:	9b06      	ldr	r3, [sp, #24]
 810cbf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810cbf6:	3301      	adds	r3, #1
 810cbf8:	429a      	cmp	r2, r3
 810cbfa:	9306      	str	r3, [sp, #24]
 810cbfc:	f73f af60 	bgt.w	810cac0 <st_int8_avepool+0x68>
 810cc00:	b017      	add	sp, #92	; 0x5c
 810cc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cc06:	2900      	cmp	r1, #0
 810cc08:	db15      	blt.n	810cc36 <st_int8_avepool+0x1de>
 810cc0a:	eb01 0167 	add.w	r1, r1, r7, asr #1
 810cc0e:	fbb1 f7f7 	udiv	r7, r1, r7
 810cc12:	f307 0307 	ssat	r3, #8, r7
 810cc16:	9a01      	ldr	r2, [sp, #4]
 810cc18:	7013      	strb	r3, [r2, #0]
 810cc1a:	4613      	mov	r3, r2
 810cc1c:	e7dd      	b.n	810cbda <st_int8_avepool+0x182>
 810cc1e:	eeb4 0a60 	vcmp.f32	s0, s1
 810cc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cc26:	d103      	bne.n	810cc30 <st_int8_avepool+0x1d8>
 810cc28:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 810cc2c:	4293      	cmp	r3, r2
 810cc2e:	d009      	beq.n	810cc44 <st_int8_avepool+0x1ec>
 810cc30:	eef0 7a63 	vmov.f32	s15, s7
 810cc34:	e7b7      	b.n	810cba6 <st_int8_avepool+0x14e>
 810cc36:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
 810cc3a:	eba1 0163 	sub.w	r1, r1, r3, asr #1
 810cc3e:	fb91 f7f7 	sdiv	r7, r1, r7
 810cc42:	e7e6      	b.n	810cc12 <st_int8_avepool+0x1ba>
 810cc44:	deff      	udf	#255	; 0xff
 810cc46:	bf00      	nop
 810cc48:	befffffc 	.word	0xbefffffc
 810cc4c:	7fc00000 	.word	0x7fc00000

0810cc50 <st_f32_to_int16>:
 810cc50:	b530      	push	{r4, r5, lr}
 810cc52:	0895      	lsrs	r5, r2, #2
 810cc54:	d072      	beq.n	810cd3c <st_f32_to_int16+0xec>
 810cc56:	eddf 5a60 	vldr	s11, [pc, #384]	; 810cdd8 <st_f32_to_int16+0x188>
 810cc5a:	f100 0c10 	add.w	ip, r0, #16
 810cc5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810cc62:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 810cc66:	f101 0e08 	add.w	lr, r1, #8
 810cc6a:	462c      	mov	r4, r5
 810cc6c:	ed5c 6a04 	vldr	s13, [ip, #-16]
 810cc70:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cc74:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810cc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cc7c:	bfd4      	ite	le
 810cc7e:	eef0 7a45 	vmovle.f32	s15, s10
 810cc82:	eef0 7a47 	vmovgt.f32	s15, s14
 810cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cc8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cc8e:	ee17 3a90 	vmov	r3, s15
 810cc92:	f303 030f 	ssat	r3, #16, r3
 810cc96:	f82e 3c08 	strh.w	r3, [lr, #-8]
 810cc9a:	ed5c 6a03 	vldr	s13, [ip, #-12]
 810cc9e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cca2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ccaa:	bfd4      	ite	le
 810ccac:	eef0 7a45 	vmovle.f32	s15, s10
 810ccb0:	eef0 7a47 	vmovgt.f32	s15, s14
 810ccb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ccb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ccbc:	ee17 3a90 	vmov	r3, s15
 810ccc0:	f303 030f 	ssat	r3, #16, r3
 810ccc4:	f82e 3c06 	strh.w	r3, [lr, #-6]
 810ccc8:	ed5c 6a02 	vldr	s13, [ip, #-8]
 810cccc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810ccd0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810ccd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ccd8:	bfd4      	ite	le
 810ccda:	eef0 7a45 	vmovle.f32	s15, s10
 810ccde:	eef0 7a47 	vmovgt.f32	s15, s14
 810cce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ccea:	ee17 3a90 	vmov	r3, s15
 810ccee:	f303 030f 	ssat	r3, #16, r3
 810ccf2:	f82e 3c04 	strh.w	r3, [lr, #-4]
 810ccf6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 810ccfa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810ccfe:	ee77 6a87 	vadd.f32	s13, s15, s14
 810cd02:	ee37 6ac7 	vsub.f32	s12, s15, s14
 810cd06:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 810cd0a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 810cd0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810cd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cd16:	bfcc      	ite	gt
 810cd18:	ee16 3a90 	vmovgt	r3, s13
 810cd1c:	ee16 3a10 	vmovle	r3, s12
 810cd20:	f303 030f 	ssat	r3, #16, r3
 810cd24:	3c01      	subs	r4, #1
 810cd26:	f82e 3c02 	strh.w	r3, [lr, #-2]
 810cd2a:	f10c 0c10 	add.w	ip, ip, #16
 810cd2e:	f10e 0e08 	add.w	lr, lr, #8
 810cd32:	d19b      	bne.n	810cc6c <st_f32_to_int16+0x1c>
 810cd34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 810cd38:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 810cd3c:	f012 0203 	ands.w	r2, r2, #3
 810cd40:	d049      	beq.n	810cdd6 <st_f32_to_int16+0x186>
 810cd42:	edd0 6a00 	vldr	s13, [r0]
 810cd46:	eddf 5a24 	vldr	s11, [pc, #144]	; 810cdd8 <st_f32_to_int16+0x188>
 810cd4a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cd4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810cd52:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810cd56:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 810cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cd5e:	bfd4      	ite	le
 810cd60:	eef0 7a46 	vmovle.f32	s15, s12
 810cd64:	eef0 7a47 	vmovgt.f32	s15, s14
 810cd68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cd6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cd70:	ee17 3a90 	vmov	r3, s15
 810cd74:	f303 030f 	ssat	r3, #16, r3
 810cd78:	3a01      	subs	r2, #1
 810cd7a:	800b      	strh	r3, [r1, #0]
 810cd7c:	d02b      	beq.n	810cdd6 <st_f32_to_int16+0x186>
 810cd7e:	edd0 7a01 	vldr	s15, [r0, #4]
 810cd82:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810cd86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cd8e:	bfd4      	ite	le
 810cd90:	eef0 6a46 	vmovle.f32	s13, s12
 810cd94:	eef0 6a47 	vmovgt.f32	s13, s14
 810cd98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cd9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cda0:	ee17 3a90 	vmov	r3, s15
 810cda4:	f303 030f 	ssat	r3, #16, r3
 810cda8:	2a01      	cmp	r2, #1
 810cdaa:	804b      	strh	r3, [r1, #2]
 810cdac:	d013      	beq.n	810cdd6 <st_f32_to_int16+0x186>
 810cdae:	edd0 7a02 	vldr	s15, [r0, #8]
 810cdb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810cdb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810cdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cdbe:	bfd8      	it	le
 810cdc0:	eeb0 7a46 	vmovle.f32	s14, s12
 810cdc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 810cdc8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 810cdcc:	ee17 3a10 	vmov	r3, s14
 810cdd0:	f303 030f 	ssat	r3, #16, r3
 810cdd4:	808b      	strh	r3, [r1, #4]
 810cdd6:	bd30      	pop	{r4, r5, pc}
 810cdd8:	47000000 	.word	0x47000000

0810cddc <st_f32_to_int8>:
 810cddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 810cdde:	0895      	lsrs	r5, r2, #2
 810cde0:	d078      	beq.n	810ced4 <st_f32_to_int8+0xf8>
 810cde2:	f101 0c04 	add.w	ip, r1, #4
 810cde6:	eddf 5a6b 	vldr	s11, [pc, #428]	; 810cf94 <st_f32_to_int8+0x1b8>
 810cdea:	f100 0e10 	add.w	lr, r0, #16
 810cdee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 810cdf2:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
 810cdf6:	00ae      	lsls	r6, r5, #2
 810cdf8:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
 810cdfc:	ed1e 7a04 	vldr	s14, [lr, #-16]
 810ce00:	ee27 7a25 	vmul.f32	s14, s14, s11
 810ce04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ce0c:	bfd4      	ite	le
 810ce0e:	eef0 7a45 	vmovle.f32	s15, s10
 810ce12:	eef0 7a46 	vmovgt.f32	s15, s12
 810ce16:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ce1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ce1e:	ee17 3a90 	vmov	r3, s15
 810ce22:	b21b      	sxth	r3, r3
 810ce24:	f303 0307 	ssat	r3, #8, r3
 810ce28:	f80c 3c04 	strb.w	r3, [ip, #-4]
 810ce2c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 810ce30:	ee27 7a25 	vmul.f32	s14, s14, s11
 810ce34:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810ce38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ce3c:	bfd4      	ite	le
 810ce3e:	eef0 7a45 	vmovle.f32	s15, s10
 810ce42:	eef0 7a46 	vmovgt.f32	s15, s12
 810ce46:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ce4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ce4e:	ee17 3a90 	vmov	r3, s15
 810ce52:	b21b      	sxth	r3, r3
 810ce54:	f303 0307 	ssat	r3, #8, r3
 810ce58:	f80c 3c03 	strb.w	r3, [ip, #-3]
 810ce5c:	ed1e 7a02 	vldr	s14, [lr, #-8]
 810ce60:	ee27 7a25 	vmul.f32	s14, s14, s11
 810ce64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810ce68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ce6c:	bfd4      	ite	le
 810ce6e:	eef0 7a45 	vmovle.f32	s15, s10
 810ce72:	eef0 7a46 	vmovgt.f32	s15, s12
 810ce76:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ce7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ce7e:	ee17 3a90 	vmov	r3, s15
 810ce82:	b21b      	sxth	r3, r3
 810ce84:	f303 0307 	ssat	r3, #8, r3
 810ce88:	f80c 3c02 	strb.w	r3, [ip, #-2]
 810ce8c:	ed5e 6a01 	vldr	s13, [lr, #-4]
 810ce90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810ce94:	ee76 7a86 	vadd.f32	s15, s13, s12
 810ce98:	ee36 7ac6 	vsub.f32	s14, s13, s12
 810ce9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cea0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 810cea4:	ee17 3a90 	vmov	r3, s15
 810cea8:	ee17 7a10 	vmov	r7, s14
 810ceac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ceb4:	b21b      	sxth	r3, r3
 810ceb6:	b23f      	sxth	r7, r7
 810ceb8:	dd5f      	ble.n	810cf7a <st_f32_to_int8+0x19e>
 810ceba:	f303 0307 	ssat	r3, #8, r3
 810cebe:	f80c 3c01 	strb.w	r3, [ip, #-1]
 810cec2:	f10c 0c04 	add.w	ip, ip, #4
 810cec6:	4564      	cmp	r4, ip
 810cec8:	f10e 0e10 	add.w	lr, lr, #16
 810cecc:	d196      	bne.n	810cdfc <st_f32_to_int8+0x20>
 810cece:	4431      	add	r1, r6
 810ced0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 810ced4:	f012 0203 	ands.w	r2, r2, #3
 810ced8:	d04e      	beq.n	810cf78 <st_f32_to_int8+0x19c>
 810ceda:	edd0 6a00 	vldr	s13, [r0]
 810cede:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810cf94 <st_f32_to_int8+0x1b8>
 810cee2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cee6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810ceea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810ceee:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 810cef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cef6:	bfd4      	ite	le
 810cef8:	eef0 7a46 	vmovle.f32	s15, s12
 810cefc:	eef0 7a47 	vmovgt.f32	s15, s14
 810cf00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cf04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cf08:	ee17 3a90 	vmov	r3, s15
 810cf0c:	b21b      	sxth	r3, r3
 810cf0e:	f303 0307 	ssat	r3, #8, r3
 810cf12:	3a01      	subs	r2, #1
 810cf14:	700b      	strb	r3, [r1, #0]
 810cf16:	d02f      	beq.n	810cf78 <st_f32_to_int8+0x19c>
 810cf18:	edd0 6a01 	vldr	s13, [r0, #4]
 810cf1c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cf20:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810cf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cf28:	bfd4      	ite	le
 810cf2a:	eef0 7a46 	vmovle.f32	s15, s12
 810cf2e:	eef0 7a47 	vmovgt.f32	s15, s14
 810cf32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cf36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cf3a:	ee17 3a90 	vmov	r3, s15
 810cf3e:	b21b      	sxth	r3, r3
 810cf40:	f303 0307 	ssat	r3, #8, r3
 810cf44:	2a01      	cmp	r2, #1
 810cf46:	704b      	strb	r3, [r1, #1]
 810cf48:	d016      	beq.n	810cf78 <st_f32_to_int8+0x19c>
 810cf4a:	edd0 6a02 	vldr	s13, [r0, #8]
 810cf4e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 810cf52:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 810cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810cf5a:	bfd4      	ite	le
 810cf5c:	eef0 7a46 	vmovle.f32	s15, s12
 810cf60:	eef0 7a47 	vmovgt.f32	s15, s14
 810cf64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810cf68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810cf6c:	ee17 3a90 	vmov	r3, s15
 810cf70:	b21b      	sxth	r3, r3
 810cf72:	f303 0307 	ssat	r3, #8, r3
 810cf76:	708b      	strb	r3, [r1, #2]
 810cf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810cf7a:	f307 0707 	ssat	r7, #8, r7
 810cf7e:	f80c 7c01 	strb.w	r7, [ip, #-1]
 810cf82:	f10c 0c04 	add.w	ip, ip, #4
 810cf86:	45a4      	cmp	ip, r4
 810cf88:	f10e 0e10 	add.w	lr, lr, #16
 810cf8c:	f47f af36 	bne.w	810cdfc <st_f32_to_int8+0x20>
 810cf90:	e79d      	b.n	810cece <st_f32_to_int8+0xf2>
 810cf92:	bf00      	nop
 810cf94:	43000000 	.word	0x43000000

0810cf98 <st_int16_to_f32>:
 810cf98:	b530      	push	{r4, r5, lr}
 810cf9a:	0894      	lsrs	r4, r2, #2
 810cf9c:	d038      	beq.n	810d010 <st_int16_to_f32+0x78>
 810cf9e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 810d060 <st_int16_to_f32+0xc8>
 810cfa2:	f100 0c08 	add.w	ip, r0, #8
 810cfa6:	f101 0310 	add.w	r3, r1, #16
 810cfaa:	46a6      	mov	lr, r4
 810cfac:	f93c 5c08 	ldrsh.w	r5, [ip, #-8]
 810cfb0:	ee07 5a90 	vmov	s15, r5
 810cfb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810cfb8:	3310      	adds	r3, #16
 810cfba:	ee67 7a87 	vmul.f32	s15, s15, s14
 810cfbe:	f10c 0c08 	add.w	ip, ip, #8
 810cfc2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 810cfc6:	f93c 5c0e 	ldrsh.w	r5, [ip, #-14]
 810cfca:	ee07 5a90 	vmov	s15, r5
 810cfce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810cfd2:	f1be 0e01 	subs.w	lr, lr, #1
 810cfd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 810cfda:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 810cfde:	f93c 5c0c 	ldrsh.w	r5, [ip, #-12]
 810cfe2:	ee07 5a90 	vmov	s15, r5
 810cfe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810cfea:	ee67 7a87 	vmul.f32	s15, s15, s14
 810cfee:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 810cff2:	f93c 5c0a 	ldrsh.w	r5, [ip, #-10]
 810cff6:	ee07 5a90 	vmov	s15, r5
 810cffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810cffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 810d002:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 810d006:	d1d1      	bne.n	810cfac <st_int16_to_f32+0x14>
 810d008:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 810d00c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 810d010:	f012 0203 	ands.w	r2, r2, #3
 810d014:	d023      	beq.n	810d05e <st_int16_to_f32+0xc6>
 810d016:	f9b0 3000 	ldrsh.w	r3, [r0]
 810d01a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 810d060 <st_int16_to_f32+0xc8>
 810d01e:	ee07 3a90 	vmov	s15, r3
 810d022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810d026:	3a01      	subs	r2, #1
 810d028:	ee67 7a87 	vmul.f32	s15, s15, s14
 810d02c:	edc1 7a00 	vstr	s15, [r1]
 810d030:	d015      	beq.n	810d05e <st_int16_to_f32+0xc6>
 810d032:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 810d036:	ee07 3a90 	vmov	s15, r3
 810d03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810d03e:	2a01      	cmp	r2, #1
 810d040:	ee67 7a87 	vmul.f32	s15, s15, s14
 810d044:	edc1 7a01 	vstr	s15, [r1, #4]
 810d048:	d009      	beq.n	810d05e <st_int16_to_f32+0xc6>
 810d04a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 810d04e:	ee07 3a90 	vmov	s15, r3
 810d052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810d056:	ee67 7a87 	vmul.f32	s15, s15, s14
 810d05a:	edc1 7a02 	vstr	s15, [r1, #8]
 810d05e:	bd30      	pop	{r4, r5, pc}
 810d060:	38000000 	.word	0x38000000

0810d064 <st_sssa8_ch_convolve_rank1upd>:
 810d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d068:	b085      	sub	sp, #20
 810d06a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 810d06e:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 810d072:	fb13 f304 	smulbb	r3, r3, r4
 810d076:	fb13 f500 	smulbb	r5, r3, r0
 810d07a:	460c      	mov	r4, r1
 810d07c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d07e:	9911      	ldr	r1, [sp, #68]	; 0x44
 810d080:	2a00      	cmp	r2, #0
 810d082:	d073      	beq.n	810d16c <st_sssa8_ch_convolve_rank1upd+0x108>
 810d084:	b2ad      	uxth	r5, r5
 810d086:	ea4f 0895 	mov.w	r8, r5, lsr #2
 810d08a:	f1a3 0904 	sub.w	r9, r3, #4
 810d08e:	f1a8 0381 	sub.w	r3, r8, #129	; 0x81
 810d092:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 810d096:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 810d09a:	f1a8 0780 	sub.w	r7, r8, #128	; 0x80
 810d09e:	eb07 17c0 	add.w	r7, r7, r0, lsl #7
 810d0a2:	0258      	lsls	r0, r3, #9
 810d0a4:	3301      	adds	r3, #1
 810d0a6:	025b      	lsls	r3, r3, #9
 810d0a8:	f005 0503 	and.w	r5, r5, #3
 810d0ac:	9301      	str	r3, [sp, #4]
 810d0ae:	f500 6380 	add.w	r3, r0, #1024	; 0x400
 810d0b2:	9303      	str	r3, [sp, #12]
 810d0b4:	1e6b      	subs	r3, r5, #1
 810d0b6:	b29b      	uxth	r3, r3
 810d0b8:	9300      	str	r3, [sp, #0]
 810d0ba:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 810d0be:	b2bf      	uxth	r7, r7
 810d0c0:	eb01 0a82 	add.w	sl, r1, r2, lsl #2
 810d0c4:	9302      	str	r3, [sp, #8]
 810d0c6:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 810d0ca:	d954      	bls.n	810d176 <st_sssa8_ch_convolve_rank1upd+0x112>
 810d0cc:	9b03      	ldr	r3, [sp, #12]
 810d0ce:	f504 7000 	add.w	r0, r4, #512	; 0x200
 810d0d2:	eb04 0c03 	add.w	ip, r4, r3
 810d0d6:	2600      	movs	r6, #0
 810d0d8:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 810d0dc:	2200      	movs	r2, #0
 810d0de:	f851 3b04 	ldr.w	r3, [r1], #4
 810d0e2:	fa2f fe83 	sxtb16	lr, r3
 810d0e6:	4281      	cmp	r1, r0
 810d0e8:	ea4f 2333 	mov.w	r3, r3, ror #8
 810d0ec:	fa92 f21e 	qadd16	r2, r2, lr
 810d0f0:	fa2f f383 	sxtb16	r3, r3
 810d0f4:	fa92 f213 	qadd16	r2, r2, r3
 810d0f8:	d1f1      	bne.n	810d0de <st_sssa8_ch_convolve_rank1upd+0x7a>
 810d0fa:	f501 7000 	add.w	r0, r1, #512	; 0x200
 810d0fe:	b213      	sxth	r3, r2
 810d100:	eb03 4322 	add.w	r3, r3, r2, asr #16
 810d104:	4560      	cmp	r0, ip
 810d106:	441e      	add	r6, r3
 810d108:	d1e6      	bne.n	810d0d8 <st_sssa8_ch_convolve_rank1upd+0x74>
 810d10a:	9b01      	ldr	r3, [sp, #4]
 810d10c:	18e1      	adds	r1, r4, r3
 810d10e:	463c      	mov	r4, r7
 810d110:	b37c      	cbz	r4, 810d172 <st_sssa8_ch_convolve_rank1upd+0x10e>
 810d112:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 810d116:	2200      	movs	r2, #0
 810d118:	f851 3b04 	ldr.w	r3, [r1], #4
 810d11c:	fa2f f083 	sxtb16	r0, r3
 810d120:	428c      	cmp	r4, r1
 810d122:	ea4f 2333 	mov.w	r3, r3, ror #8
 810d126:	fa92 f210 	qadd16	r2, r2, r0
 810d12a:	fa2f f383 	sxtb16	r3, r3
 810d12e:	fa92 f213 	qadd16	r2, r2, r3
 810d132:	d1f1      	bne.n	810d118 <st_sssa8_ch_convolve_rank1upd+0xb4>
 810d134:	b213      	sxth	r3, r2
 810d136:	eb03 4322 	add.w	r3, r3, r2, asr #16
 810d13a:	441e      	add	r6, r3
 810d13c:	b16d      	cbz	r5, 810d15a <st_sssa8_ch_convolve_rank1upd+0xf6>
 810d13e:	f994 3000 	ldrsb.w	r3, [r4]
 810d142:	441e      	add	r6, r3
 810d144:	9b00      	ldr	r3, [sp, #0]
 810d146:	b13b      	cbz	r3, 810d158 <st_sssa8_ch_convolve_rank1upd+0xf4>
 810d148:	f994 3001 	ldrsb.w	r3, [r4, #1]
 810d14c:	2d02      	cmp	r5, #2
 810d14e:	441e      	add	r6, r3
 810d150:	bf1c      	itt	ne
 810d152:	f994 3002 	ldrsbne.w	r3, [r4, #2]
 810d156:	18f6      	addne	r6, r6, r3
 810d158:	442c      	add	r4, r5
 810d15a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 810d15e:	fb06 331b 	mls	r3, r6, fp, r3
 810d162:	f84a 3b04 	str.w	r3, [sl], #4
 810d166:	9b02      	ldr	r3, [sp, #8]
 810d168:	459a      	cmp	sl, r3
 810d16a:	d1ac      	bne.n	810d0c6 <st_sssa8_ch_convolve_rank1upd+0x62>
 810d16c:	b005      	add	sp, #20
 810d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d172:	460c      	mov	r4, r1
 810d174:	e7e2      	b.n	810d13c <st_sssa8_ch_convolve_rank1upd+0xd8>
 810d176:	4621      	mov	r1, r4
 810d178:	2600      	movs	r6, #0
 810d17a:	4644      	mov	r4, r8
 810d17c:	e7c8      	b.n	810d110 <st_sssa8_ch_convolve_rank1upd+0xac>
 810d17e:	bf00      	nop

0810d180 <st_sssa8_fully_connected>:
 810d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d184:	b08d      	sub	sp, #52	; 0x34
 810d186:	4698      	mov	r8, r3
 810d188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810d18a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 810d18c:	f9b3 5000 	ldrsh.w	r5, [r3]
 810d190:	6824      	ldr	r4, [r4, #0]
 810d192:	9407      	str	r4, [sp, #28]
 810d194:	1e6b      	subs	r3, r5, #1
 810d196:	2b14      	cmp	r3, #20
 810d198:	f99d 4060 	ldrsb.w	r4, [sp, #96]	; 0x60
 810d19c:	f99d 7064 	ldrsb.w	r7, [sp, #100]	; 0x64
 810d1a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810d1a4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 810d1a6:	9308      	str	r3, [sp, #32]
 810d1a8:	4689      	mov	r9, r1
 810d1aa:	4693      	mov	fp, r2
 810d1ac:	d804      	bhi.n	810d1b8 <st_sssa8_fully_connected+0x38>
 810d1ae:	2301      	movs	r3, #1
 810d1b0:	40af      	lsls	r7, r5
 810d1b2:	40ab      	lsls	r3, r5
 810d1b4:	eb07 0753 	add.w	r7, r7, r3, lsr #1
 810d1b8:	2e00      	cmp	r6, #0
 810d1ba:	d062      	beq.n	810d282 <st_sssa8_fully_connected+0x102>
 810d1bc:	eac4 4304 	pkhbt	r3, r4, r4, lsl #16
 810d1c0:	9400      	str	r4, [sp, #0]
 810d1c2:	465a      	mov	r2, fp
 810d1c4:	4631      	mov	r1, r6
 810d1c6:	f000 fa1d 	bl	810d604 <st_int8_reordered_no_shift_zero>
 810d1ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810d1cc:	e9cd 5303 	strd	r5, r3, [sp, #12]
 810d1d0:	9b07      	ldr	r3, [sp, #28]
 810d1d2:	ea4f 0458 	mov.w	r4, r8, lsr #1
 810d1d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 810d1da:	9400      	str	r4, [sp, #0]
 810d1dc:	4653      	mov	r3, sl
 810d1de:	465a      	mov	r2, fp
 810d1e0:	4649      	mov	r1, r9
 810d1e2:	4630      	mov	r0, r6
 810d1e4:	f000 fd9c 	bl	810dd20 <st_sssa8_dense_loop>
 810d1e8:	f018 0f01 	tst.w	r8, #1
 810d1ec:	d045      	beq.n	810d27a <st_sssa8_fully_connected+0xfa>
 810d1ee:	f85a 3034 	ldr.w	r3, [sl, r4, lsl #3]
 810d1f2:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 810d1f6:	ea5f 0a9b 	movs.w	sl, fp, lsr #2
 810d1fa:	fb0e 9e0b 	mla	lr, lr, fp, r9
 810d1fe:	f000 811c 	beq.w	810d43a <st_sssa8_fully_connected+0x2ba>
 810d202:	eb0e 098a 	add.w	r9, lr, sl, lsl #2
 810d206:	4630      	mov	r0, r6
 810d208:	f85e 2b04 	ldr.w	r2, [lr], #4
 810d20c:	fa2f f192 	sxtb16	r1, r2, ror #8
 810d210:	f8d0 c000 	ldr.w	ip, [r0]
 810d214:	fa2f f282 	sxtb16	r2, r2
 810d218:	fb2c 3302 	smlad	r3, ip, r2, r3
 810d21c:	6842      	ldr	r2, [r0, #4]
 810d21e:	3008      	adds	r0, #8
 810d220:	fb22 3301 	smlad	r3, r2, r1, r3
 810d224:	45ce      	cmp	lr, r9
 810d226:	d1ef      	bne.n	810d208 <st_sssa8_fully_connected+0x88>
 810d228:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810d22c:	f01b 0203 	ands.w	r2, fp, #3
 810d230:	d013      	beq.n	810d25a <st_sssa8_fully_connected+0xda>
 810d232:	f999 1000 	ldrsb.w	r1, [r9]
 810d236:	8830      	ldrh	r0, [r6, #0]
 810d238:	3a01      	subs	r2, #1
 810d23a:	b292      	uxth	r2, r2
 810d23c:	fb10 3301 	smlabb	r3, r0, r1, r3
 810d240:	b15a      	cbz	r2, 810d25a <st_sssa8_fully_connected+0xda>
 810d242:	f999 1001 	ldrsb.w	r1, [r9, #1]
 810d246:	8870      	ldrh	r0, [r6, #2]
 810d248:	2a01      	cmp	r2, #1
 810d24a:	fb10 3301 	smlabb	r3, r0, r1, r3
 810d24e:	d004      	beq.n	810d25a <st_sssa8_fully_connected+0xda>
 810d250:	f999 2002 	ldrsb.w	r2, [r9, #2]
 810d254:	88b1      	ldrh	r1, [r6, #4]
 810d256:	fb11 3302 	smlabb	r3, r1, r2, r3
 810d25a:	2d15      	cmp	r5, #21
 810d25c:	f300 80b5 	bgt.w	810d3ca <st_sssa8_fully_connected+0x24a>
 810d260:	2d00      	cmp	r5, #0
 810d262:	f340 80d2 	ble.w	810d40a <st_sssa8_fully_connected+0x28a>
 810d266:	9a07      	ldr	r2, [sp, #28]
 810d268:	005b      	lsls	r3, r3, #1
 810d26a:	fb53 7302 	smmla	r3, r3, r2, r7
 810d26e:	412b      	asrs	r3, r5
 810d270:	f303 0307 	ssat	r3, #8, r3
 810d274:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810d276:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 810d27a:	2000      	movs	r0, #0
 810d27c:	b00d      	add	sp, #52	; 0x34
 810d27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810d284:	9701      	str	r7, [sp, #4]
 810d286:	e9cd 5304 	strd	r5, r3, [sp, #16]
 810d28a:	9b07      	ldr	r3, [sp, #28]
 810d28c:	900a      	str	r0, [sp, #40]	; 0x28
 810d28e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 810d292:	e9cd 4302 	strd	r4, r3, [sp, #8]
 810d296:	9209      	str	r2, [sp, #36]	; 0x24
 810d298:	9200      	str	r2, [sp, #0]
 810d29a:	4653      	mov	r3, sl
 810d29c:	465a      	mov	r2, fp
 810d29e:	4649      	mov	r1, r9
 810d2a0:	f000 fe46 	bl	810df30 <st_sssa8_dense_memopt_loop>
 810d2a4:	f018 0f01 	tst.w	r8, #1
 810d2a8:	d0e7      	beq.n	810d27a <st_sssa8_fully_connected+0xfa>
 810d2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d2ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 810d2ae:	f85a 3032 	ldr.w	r3, [sl, r2, lsl #3]
 810d2b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 810d2b6:	f1bb 0f0f 	cmp.w	fp, #15
 810d2ba:	f1c4 0e00 	rsb	lr, r4, #0
 810d2be:	fb0b 9c0c 	mla	ip, fp, ip, r9
 810d2c2:	eace 4e0e 	pkhbt	lr, lr, lr, lsl #16
 810d2c6:	dd5b      	ble.n	810d380 <st_sssa8_fully_connected+0x200>
 810d2c8:	f1ab 0110 	sub.w	r1, fp, #16
 810d2cc:	0909      	lsrs	r1, r1, #4
 810d2ce:	1c4a      	adds	r2, r1, #1
 810d2d0:	0111      	lsls	r1, r2, #4
 810d2d2:	920b      	str	r2, [sp, #44]	; 0x2c
 810d2d4:	910a      	str	r1, [sp, #40]	; 0x28
 810d2d6:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 810d2da:	4680      	mov	r8, r0
 810d2dc:	f8dc a000 	ldr.w	sl, [ip]
 810d2e0:	f8d8 1000 	ldr.w	r1, [r8]
 810d2e4:	fa2f f99a 	sxtb16	r9, sl, ror #8
 810d2e8:	ea4f 2631 	mov.w	r6, r1, ror #8
 810d2ec:	fa2f fa8a 	sxtb16	sl, sl
 810d2f0:	fa2e f181 	sxtab16	r1, lr, r1
 810d2f4:	fa2e f686 	sxtab16	r6, lr, r6
 810d2f8:	fb21 310a 	smlad	r1, r1, sl, r3
 810d2fc:	fb26 1109 	smlad	r1, r6, r9, r1
 810d300:	f8dc a004 	ldr.w	sl, [ip, #4]
 810d304:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810d308:	fa2f f99a 	sxtb16	r9, sl, ror #8
 810d30c:	ea4f 2633 	mov.w	r6, r3, ror #8
 810d310:	fa2f fa8a 	sxtb16	sl, sl
 810d314:	fa2e f383 	sxtab16	r3, lr, r3
 810d318:	fa2e f686 	sxtab16	r6, lr, r6
 810d31c:	fb23 130a 	smlad	r3, r3, sl, r1
 810d320:	fb26 3309 	smlad	r3, r6, r9, r3
 810d324:	f8dc a008 	ldr.w	sl, [ip, #8]
 810d328:	f8d8 1008 	ldr.w	r1, [r8, #8]
 810d32c:	fa2f f99a 	sxtb16	r9, sl, ror #8
 810d330:	ea4f 2631 	mov.w	r6, r1, ror #8
 810d334:	fa2f fa8a 	sxtb16	sl, sl
 810d338:	fa2e f181 	sxtab16	r1, lr, r1
 810d33c:	fa2e f686 	sxtab16	r6, lr, r6
 810d340:	fb21 310a 	smlad	r1, r1, sl, r3
 810d344:	fb26 1109 	smlad	r1, r6, r9, r1
 810d348:	f8dc a00c 	ldr.w	sl, [ip, #12]
 810d34c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810d350:	f10c 0c10 	add.w	ip, ip, #16
 810d354:	f108 0810 	add.w	r8, r8, #16
 810d358:	fa2f f99a 	sxtb16	r9, sl, ror #8
 810d35c:	ea4f 2633 	mov.w	r6, r3, ror #8
 810d360:	fa2f fa8a 	sxtb16	sl, sl
 810d364:	fa2e f383 	sxtab16	r3, lr, r3
 810d368:	fa2e f686 	sxtab16	r6, lr, r6
 810d36c:	fb23 130a 	smlad	r3, r3, sl, r1
 810d370:	fb26 3309 	smlad	r3, r6, r9, r3
 810d374:	4562      	cmp	r2, ip
 810d376:	d1b1      	bne.n	810d2dc <st_sssa8_fully_connected+0x15c>
 810d378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810d37a:	4410      	add	r0, r2
 810d37c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d37e:	0116      	lsls	r6, r2, #4
 810d380:	45b3      	cmp	fp, r6
 810d382:	dd0d      	ble.n	810d3a0 <st_sssa8_fully_connected+0x220>
 810d384:	ebab 0206 	sub.w	r2, fp, r6
 810d388:	b224      	sxth	r4, r4
 810d38a:	4462      	add	r2, ip
 810d38c:	f91c 6b01 	ldrsb.w	r6, [ip], #1
 810d390:	f910 1b01 	ldrsb.w	r1, [r0], #1
 810d394:	4594      	cmp	ip, r2
 810d396:	eba1 0104 	sub.w	r1, r1, r4
 810d39a:	fb11 3306 	smlabb	r3, r1, r6, r3
 810d39e:	d1f5      	bne.n	810d38c <st_sssa8_fully_connected+0x20c>
 810d3a0:	2d15      	cmp	r5, #21
 810d3a2:	dd24      	ble.n	810d3ee <st_sssa8_fully_connected+0x26e>
 810d3a4:	3d02      	subs	r5, #2
 810d3a6:	2201      	movs	r2, #1
 810d3a8:	40aa      	lsls	r2, r5
 810d3aa:	9907      	ldr	r1, [sp, #28]
 810d3ac:	fb53 2301 	smmla	r3, r3, r1, r2
 810d3b0:	9a08      	ldr	r2, [sp, #32]
 810d3b2:	4113      	asrs	r3, r2
 810d3b4:	443b      	add	r3, r7
 810d3b6:	f303 0307 	ssat	r3, #8, r3
 810d3ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810d3bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d3be:	2000      	movs	r0, #0
 810d3c0:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 810d3c4:	b00d      	add	sp, #52	; 0x34
 810d3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3ca:	3d02      	subs	r5, #2
 810d3cc:	2201      	movs	r2, #1
 810d3ce:	40aa      	lsls	r2, r5
 810d3d0:	9907      	ldr	r1, [sp, #28]
 810d3d2:	fb53 2301 	smmla	r3, r3, r1, r2
 810d3d6:	9a08      	ldr	r2, [sp, #32]
 810d3d8:	4113      	asrs	r3, r2
 810d3da:	443b      	add	r3, r7
 810d3dc:	f303 0307 	ssat	r3, #8, r3
 810d3e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810d3e2:	2000      	movs	r0, #0
 810d3e4:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 810d3e8:	b00d      	add	sp, #52	; 0x34
 810d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3ee:	2d00      	cmp	r5, #0
 810d3f0:	dd1a      	ble.n	810d428 <st_sssa8_fully_connected+0x2a8>
 810d3f2:	9a07      	ldr	r2, [sp, #28]
 810d3f4:	005b      	lsls	r3, r3, #1
 810d3f6:	fb53 7302 	smmla	r3, r3, r2, r7
 810d3fa:	412b      	asrs	r3, r5
 810d3fc:	f303 0307 	ssat	r3, #8, r3
 810d400:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810d402:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d404:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 810d408:	e737      	b.n	810d27a <st_sssa8_fully_connected+0xfa>
 810d40a:	f1c5 0501 	rsb	r5, r5, #1
 810d40e:	40ab      	lsls	r3, r5
 810d410:	f303 031f 	ssat	r3, #32, r3
 810d414:	9a07      	ldr	r2, [sp, #28]
 810d416:	fb53 f312 	smmulr	r3, r3, r2
 810d41a:	443b      	add	r3, r7
 810d41c:	f303 0307 	ssat	r3, #8, r3
 810d420:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 810d422:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 810d426:	e728      	b.n	810d27a <st_sssa8_fully_connected+0xfa>
 810d428:	f1c5 0501 	rsb	r5, r5, #1
 810d42c:	40ab      	lsls	r3, r5
 810d42e:	f303 031f 	ssat	r3, #32, r3
 810d432:	9a07      	ldr	r2, [sp, #28]
 810d434:	fb53 f312 	smmulr	r3, r3, r2
 810d438:	e7bc      	b.n	810d3b4 <st_sssa8_fully_connected+0x234>
 810d43a:	46f1      	mov	r9, lr
 810d43c:	e6f6      	b.n	810d22c <st_sssa8_fully_connected+0xac>
 810d43e:	bf00      	nop

0810d440 <st_int8_fill>:
 810d440:	b510      	push	{r4, lr}
 810d442:	0203      	lsls	r3, r0, #8
 810d444:	b2c4      	uxtb	r4, r0
 810d446:	b29b      	uxth	r3, r3
 810d448:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 810d44c:	431c      	orrs	r4, r3
 810d44e:	0403      	lsls	r3, r0, #16
 810d450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810d454:	431c      	orrs	r4, r3
 810d456:	078b      	lsls	r3, r1, #30
 810d458:	468c      	mov	ip, r1
 810d45a:	d007      	beq.n	810d46c <st_int8_fill+0x2c>
 810d45c:	b3a2      	cbz	r2, 810d4c8 <st_int8_fill+0x88>
 810d45e:	f80c 0b01 	strb.w	r0, [ip], #1
 810d462:	f01c 0f03 	tst.w	ip, #3
 810d466:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 810d46a:	d1f7      	bne.n	810d45c <st_int8_fill+0x1c>
 810d46c:	0911      	lsrs	r1, r2, #4
 810d46e:	d03e      	beq.n	810d4ee <st_int8_fill+0xae>
 810d470:	1e4b      	subs	r3, r1, #1
 810d472:	2b01      	cmp	r3, #1
 810d474:	d929      	bls.n	810d4ca <st_int8_fill+0x8a>
 810d476:	f01c 0f07 	tst.w	ip, #7
 810d47a:	d126      	bne.n	810d4ca <st_int8_fill+0x8a>
 810d47c:	f10c 0310 	add.w	r3, ip, #16
 810d480:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 810d484:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 810d488:	e943 4404 	strd	r4, r4, [r3, #-16]
 810d48c:	e943 4402 	strd	r4, r4, [r3, #-8]
 810d490:	3310      	adds	r3, #16
 810d492:	428b      	cmp	r3, r1
 810d494:	d1f8      	bne.n	810d488 <st_int8_fill+0x48>
 810d496:	f3c2 0381 	ubfx	r3, r2, #2, #2
 810d49a:	44f4      	add	ip, lr
 810d49c:	f002 0203 	and.w	r2, r2, #3
 810d4a0:	b15b      	cbz	r3, 810d4ba <st_int8_fill+0x7a>
 810d4a2:	1e59      	subs	r1, r3, #1
 810d4a4:	f8cc 4000 	str.w	r4, [ip]
 810d4a8:	d005      	beq.n	810d4b6 <st_int8_fill+0x76>
 810d4aa:	2901      	cmp	r1, #1
 810d4ac:	f8cc 4004 	str.w	r4, [ip, #4]
 810d4b0:	bf18      	it	ne
 810d4b2:	f8cc 4008 	strne.w	r4, [ip, #8]
 810d4b6:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 810d4ba:	b12a      	cbz	r2, 810d4c8 <st_int8_fill+0x88>
 810d4bc:	4601      	mov	r1, r0
 810d4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810d4c2:	4660      	mov	r0, ip
 810d4c4:	f002 bec8 	b.w	8110258 <memset>
 810d4c8:	bd10      	pop	{r4, pc}
 810d4ca:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 810d4ce:	4663      	mov	r3, ip
 810d4d0:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 810d4d4:	601c      	str	r4, [r3, #0]
 810d4d6:	605c      	str	r4, [r3, #4]
 810d4d8:	609c      	str	r4, [r3, #8]
 810d4da:	60dc      	str	r4, [r3, #12]
 810d4dc:	3310      	adds	r3, #16
 810d4de:	4299      	cmp	r1, r3
 810d4e0:	d1f8      	bne.n	810d4d4 <st_int8_fill+0x94>
 810d4e2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 810d4e6:	44f4      	add	ip, lr
 810d4e8:	f002 0203 	and.w	r2, r2, #3
 810d4ec:	e7d8      	b.n	810d4a0 <st_int8_fill+0x60>
 810d4ee:	0893      	lsrs	r3, r2, #2
 810d4f0:	f002 0203 	and.w	r2, r2, #3
 810d4f4:	e7d4      	b.n	810d4a0 <st_int8_fill+0x60>
 810d4f6:	bf00      	nop

0810d4f8 <st_int8_copy>:
 810d4f8:	4288      	cmp	r0, r1
 810d4fa:	d056      	beq.n	810d5aa <st_int8_copy+0xb2>
 810d4fc:	2a00      	cmp	r2, #0
 810d4fe:	d054      	beq.n	810d5aa <st_int8_copy+0xb2>
 810d500:	4288      	cmp	r0, r1
 810d502:	d353      	bcc.n	810d5ac <st_int8_copy+0xb4>
 810d504:	078b      	lsls	r3, r1, #30
 810d506:	d102      	bne.n	810d50e <st_int8_copy+0x16>
 810d508:	e009      	b.n	810d51e <st_int8_copy+0x26>
 810d50a:	2a00      	cmp	r2, #0
 810d50c:	d05b      	beq.n	810d5c6 <st_int8_copy+0xce>
 810d50e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 810d512:	f801 3b01 	strb.w	r3, [r1], #1
 810d516:	078b      	lsls	r3, r1, #30
 810d518:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 810d51c:	d1f5      	bne.n	810d50a <st_int8_copy+0x12>
 810d51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d522:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 810d526:	d068      	beq.n	810d5fa <st_int8_copy+0x102>
 810d528:	ea40 0301 	orr.w	r3, r0, r1
 810d52c:	075b      	lsls	r3, r3, #29
 810d52e:	d14b      	bne.n	810d5c8 <st_int8_copy+0xd0>
 810d530:	f1be 0f01 	cmp.w	lr, #1
 810d534:	d048      	beq.n	810d5c8 <st_int8_copy+0xd0>
 810d536:	f100 0310 	add.w	r3, r0, #16
 810d53a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810d53e:	f101 0c10 	add.w	ip, r1, #16
 810d542:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 810d546:	ed13 6b04 	vldr	d6, [r3, #-16]
 810d54a:	ed13 7b02 	vldr	d7, [r3, #-8]
 810d54e:	3310      	adds	r3, #16
 810d550:	4573      	cmp	r3, lr
 810d552:	ed0c 6b04 	vstr	d6, [ip, #-16]
 810d556:	ed0c 7b02 	vstr	d7, [ip, #-8]
 810d55a:	f10c 0c10 	add.w	ip, ip, #16
 810d55e:	d1f2      	bne.n	810d546 <st_int8_copy+0x4e>
 810d560:	f3c2 0381 	ubfx	r3, r2, #2, #2
 810d564:	4421      	add	r1, r4
 810d566:	4420      	add	r0, r4
 810d568:	f002 0203 	and.w	r2, r2, #3
 810d56c:	b16b      	cbz	r3, 810d58a <st_int8_copy+0x92>
 810d56e:	6804      	ldr	r4, [r0, #0]
 810d570:	600c      	str	r4, [r1, #0]
 810d572:	1e5c      	subs	r4, r3, #1
 810d574:	d005      	beq.n	810d582 <st_int8_copy+0x8a>
 810d576:	6845      	ldr	r5, [r0, #4]
 810d578:	604d      	str	r5, [r1, #4]
 810d57a:	2c01      	cmp	r4, #1
 810d57c:	bf1c      	itt	ne
 810d57e:	6884      	ldrne	r4, [r0, #8]
 810d580:	608c      	strne	r4, [r1, #8]
 810d582:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 810d586:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 810d58a:	b162      	cbz	r2, 810d5a6 <st_int8_copy+0xae>
 810d58c:	f990 3000 	ldrsb.w	r3, [r0]
 810d590:	700b      	strb	r3, [r1, #0]
 810d592:	3a01      	subs	r2, #1
 810d594:	d007      	beq.n	810d5a6 <st_int8_copy+0xae>
 810d596:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810d59a:	704b      	strb	r3, [r1, #1]
 810d59c:	2a01      	cmp	r2, #1
 810d59e:	bf1c      	itt	ne
 810d5a0:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 810d5a4:	708b      	strbne	r3, [r1, #2]
 810d5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d5aa:	4770      	bx	lr
 810d5ac:	1883      	adds	r3, r0, r2
 810d5ae:	428b      	cmp	r3, r1
 810d5b0:	d9a8      	bls.n	810d504 <st_int8_copy+0xc>
 810d5b2:	4283      	cmp	r3, r0
 810d5b4:	440a      	add	r2, r1
 810d5b6:	d9f8      	bls.n	810d5aa <st_int8_copy+0xb2>
 810d5b8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 810d5bc:	f802 1d01 	strb.w	r1, [r2, #-1]!
 810d5c0:	4283      	cmp	r3, r0
 810d5c2:	d1f9      	bne.n	810d5b8 <st_int8_copy+0xc0>
 810d5c4:	4770      	bx	lr
 810d5c6:	4770      	bx	lr
 810d5c8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810d5cc:	460b      	mov	r3, r1
 810d5ce:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 810d5d2:	4684      	mov	ip, r0
 810d5d4:	f8dc 7000 	ldr.w	r7, [ip]
 810d5d8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 810d5dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 810d5e0:	f8dc 800c 	ldr.w	r8, [ip, #12]
 810d5e4:	f8c3 800c 	str.w	r8, [r3, #12]
 810d5e8:	601f      	str	r7, [r3, #0]
 810d5ea:	605e      	str	r6, [r3, #4]
 810d5ec:	609d      	str	r5, [r3, #8]
 810d5ee:	3310      	adds	r3, #16
 810d5f0:	459e      	cmp	lr, r3
 810d5f2:	f10c 0c10 	add.w	ip, ip, #16
 810d5f6:	d1ed      	bne.n	810d5d4 <st_int8_copy+0xdc>
 810d5f8:	e7b2      	b.n	810d560 <st_int8_copy+0x68>
 810d5fa:	0893      	lsrs	r3, r2, #2
 810d5fc:	f002 0203 	and.w	r2, r2, #3
 810d600:	e7b4      	b.n	810d56c <st_int8_copy+0x74>
 810d602:	bf00      	nop

0810d604 <st_int8_reordered_no_shift_zero>:
 810d604:	b5f0      	push	{r4, r5, r6, r7, lr}
 810d606:	0897      	lsrs	r7, r2, #2
 810d608:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 810d60c:	d02c      	beq.n	810d668 <st_int8_reordered_no_shift_zero+0x64>
 810d60e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 810d612:	468e      	mov	lr, r1
 810d614:	f850 cb04 	ldr.w	ip, [r0], #4
 810d618:	fa2f f49c 	sxtb16	r4, ip, ror #8
 810d61c:	fad4 f403 	ssub16	r4, r4, r3
 810d620:	fa2f fc8c 	sxtb16	ip, ip
 810d624:	fadc fc03 	ssub16	ip, ip, r3
 810d628:	42a8      	cmp	r0, r5
 810d62a:	f8ce c000 	str.w	ip, [lr]
 810d62e:	f8ce 4004 	str.w	r4, [lr, #4]
 810d632:	f10e 0e08 	add.w	lr, lr, #8
 810d636:	d1ed      	bne.n	810d614 <st_int8_reordered_no_shift_zero+0x10>
 810d638:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 810d63c:	f012 0203 	ands.w	r2, r2, #3
 810d640:	d011      	beq.n	810d666 <st_int8_reordered_no_shift_zero+0x62>
 810d642:	f995 0000 	ldrsb.w	r0, [r5]
 810d646:	b273      	sxtb	r3, r6
 810d648:	1ac0      	subs	r0, r0, r3
 810d64a:	3a01      	subs	r2, #1
 810d64c:	8008      	strh	r0, [r1, #0]
 810d64e:	d00a      	beq.n	810d666 <st_int8_reordered_no_shift_zero+0x62>
 810d650:	f995 0001 	ldrsb.w	r0, [r5, #1]
 810d654:	2a01      	cmp	r2, #1
 810d656:	eba0 0003 	sub.w	r0, r0, r3
 810d65a:	8048      	strh	r0, [r1, #2]
 810d65c:	d003      	beq.n	810d666 <st_int8_reordered_no_shift_zero+0x62>
 810d65e:	f995 2002 	ldrsb.w	r2, [r5, #2]
 810d662:	1ad3      	subs	r3, r2, r3
 810d664:	808b      	strh	r3, [r1, #4]
 810d666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d668:	4605      	mov	r5, r0
 810d66a:	e7e7      	b.n	810d63c <st_int8_reordered_no_shift_zero+0x38>

0810d66c <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 810d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d670:	b093      	sub	sp, #76	; 0x4c
 810d672:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 810d676:	920a      	str	r2, [sp, #40]	; 0x28
 810d678:	930f      	str	r3, [sp, #60]	; 0x3c
 810d67a:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 810d67e:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 810d682:	920d      	str	r2, [sp, #52]	; 0x34
 810d684:	0862      	lsrs	r2, r4, #1
 810d686:	940c      	str	r4, [sp, #48]	; 0x30
 810d688:	9104      	str	r1, [sp, #16]
 810d68a:	930e      	str	r3, [sp, #56]	; 0x38
 810d68c:	920b      	str	r2, [sp, #44]	; 0x2c
 810d68e:	2b00      	cmp	r3, #0
 810d690:	f000 8182 	beq.w	810d998 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 810d694:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 810d696:	b299      	uxth	r1, r3
 810d698:	4613      	mov	r3, r2
 810d69a:	2b00      	cmp	r3, #0
 810d69c:	f000 80d6 	beq.w	810d84c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e0>
 810d6a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d6a2:	0897      	lsrs	r7, r2, #2
 810d6a4:	f002 0203 	and.w	r2, r2, #3
 810d6a8:	9201      	str	r2, [sp, #4]
 810d6aa:	1c4a      	adds	r2, r1, #1
 810d6ac:	0049      	lsls	r1, r1, #1
 810d6ae:	9105      	str	r1, [sp, #20]
 810d6b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 810d6b2:	9703      	str	r7, [sp, #12]
 810d6b4:	4411      	add	r1, r2
 810d6b6:	9102      	str	r1, [sp, #8]
 810d6b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 810d6ba:	3b01      	subs	r3, #1
 810d6bc:	f101 0210 	add.w	r2, r1, #16
 810d6c0:	b29b      	uxth	r3, r3
 810d6c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d6c6:	9306      	str	r3, [sp, #24]
 810d6c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810d6ca:	9a01      	ldr	r2, [sp, #4]
 810d6cc:	f103 0e04 	add.w	lr, r3, #4
 810d6d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 810d6d2:	f103 0508 	add.w	r5, r3, #8
 810d6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d6d8:	f103 0408 	add.w	r4, r3, #8
 810d6dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 810d6de:	1c5e      	adds	r6, r3, #1
 810d6e0:	013b      	lsls	r3, r7, #4
 810d6e2:	9307      	str	r3, [sp, #28]
 810d6e4:	9b04      	ldr	r3, [sp, #16]
 810d6e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d6ea:	9308      	str	r3, [sp, #32]
 810d6ec:	0093      	lsls	r3, r2, #2
 810d6ee:	f101 0c08 	add.w	ip, r1, #8
 810d6f2:	9309      	str	r3, [sp, #36]	; 0x24
 810d6f4:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 810d6f8:	9311      	str	r3, [sp, #68]	; 0x44
 810d6fa:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 810d6fe:	9903      	ldr	r1, [sp, #12]
 810d700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810d702:	9211      	str	r2, [sp, #68]	; 0x44
 810d704:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810d706:	2900      	cmp	r1, #0
 810d708:	f000 8144 	beq.w	810d994 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x328>
 810d70c:	9f04      	ldr	r7, [sp, #16]
 810d70e:	4688      	mov	r8, r1
 810d710:	4601      	mov	r1, r0
 810d712:	f8d7 9000 	ldr.w	r9, [r7]
 810d716:	f8d1 a000 	ldr.w	sl, [r1]
 810d71a:	fb2a 3a09 	smlad	sl, sl, r9, r3
 810d71e:	684b      	ldr	r3, [r1, #4]
 810d720:	fb23 2909 	smlad	r9, r3, r9, r2
 810d724:	f8d7 b004 	ldr.w	fp, [r7, #4]
 810d728:	688b      	ldr	r3, [r1, #8]
 810d72a:	68ca      	ldr	r2, [r1, #12]
 810d72c:	3708      	adds	r7, #8
 810d72e:	3110      	adds	r1, #16
 810d730:	fb23 a30b 	smlad	r3, r3, fp, sl
 810d734:	fb22 920b 	smlad	r2, r2, fp, r9
 810d738:	f1b8 0801 	subs.w	r8, r8, #1
 810d73c:	d1e9      	bne.n	810d712 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 810d73e:	9907      	ldr	r1, [sp, #28]
 810d740:	4408      	add	r0, r1
 810d742:	9908      	ldr	r1, [sp, #32]
 810d744:	9f01      	ldr	r7, [sp, #4]
 810d746:	b31f      	cbz	r7, 810d790 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 810d748:	f9b1 7000 	ldrsh.w	r7, [r1]
 810d74c:	f8b0 8000 	ldrh.w	r8, [r0]
 810d750:	fb17 3308 	smlabb	r3, r7, r8, r3
 810d754:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 810d758:	fb18 2207 	smlabb	r2, r8, r7, r2
 810d75c:	9f01      	ldr	r7, [sp, #4]
 810d75e:	2f01      	cmp	r7, #1
 810d760:	d014      	beq.n	810d78c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 810d762:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 810d766:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 810d76a:	fb17 3308 	smlabb	r3, r7, r8, r3
 810d76e:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 810d772:	fb18 2207 	smlabb	r2, r8, r7, r2
 810d776:	9f01      	ldr	r7, [sp, #4]
 810d778:	2f02      	cmp	r7, #2
 810d77a:	d007      	beq.n	810d78c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x120>
 810d77c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 810d780:	8907      	ldrh	r7, [r0, #8]
 810d782:	fb17 3301 	smlabb	r3, r7, r1, r3
 810d786:	8947      	ldrh	r7, [r0, #10]
 810d788:	fb11 2207 	smlabb	r2, r1, r7, r2
 810d78c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d78e:	4408      	add	r0, r1
 810d790:	f93e 8c04 	ldrsh.w	r8, [lr, #-4]
 810d794:	f1b8 0f15 	cmp.w	r8, #21
 810d798:	f340 80af 	ble.w	810d8fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x28e>
 810d79c:	f1a8 0702 	sub.w	r7, r8, #2
 810d7a0:	2101      	movs	r1, #1
 810d7a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810d7a6:	fa01 f707 	lsl.w	r7, r1, r7
 810d7aa:	f855 1c08 	ldr.w	r1, [r5, #-8]
 810d7ae:	fb53 7101 	smmla	r1, r3, r1, r7
 810d7b2:	fa41 f308 	asr.w	r3, r1, r8
 810d7b6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 810d7ba:	1f2f      	subs	r7, r5, #4
 810d7bc:	440b      	add	r3, r1
 810d7be:	f1a4 0804 	sub.w	r8, r4, #4
 810d7c2:	f1ae 0102 	sub.w	r1, lr, #2
 810d7c6:	f303 0307 	ssat	r3, #8, r3
 810d7ca:	b25b      	sxtb	r3, r3
 810d7cc:	f806 3c01 	strb.w	r3, [r6, #-1]
 810d7d0:	f9b1 1000 	ldrsh.w	r1, [r1]
 810d7d4:	2915      	cmp	r1, #21
 810d7d6:	f340 80ab 	ble.w	810d930 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c4>
 810d7da:	683b      	ldr	r3, [r7, #0]
 810d7dc:	f8d8 8000 	ldr.w	r8, [r8]
 810d7e0:	1e8f      	subs	r7, r1, #2
 810d7e2:	f04f 0901 	mov.w	r9, #1
 810d7e6:	3901      	subs	r1, #1
 810d7e8:	fa09 f707 	lsl.w	r7, r9, r7
 810d7ec:	fb52 7303 	smmla	r3, r2, r3, r7
 810d7f0:	410b      	asrs	r3, r1
 810d7f2:	4443      	add	r3, r8
 810d7f4:	f303 0307 	ssat	r3, #8, r3
 810d7f8:	b25b      	sxtb	r3, r3
 810d7fa:	9a02      	ldr	r2, [sp, #8]
 810d7fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 810d800:	9b05      	ldr	r3, [sp, #20]
 810d802:	441a      	add	r2, r3
 810d804:	441e      	add	r6, r3
 810d806:	9b06      	ldr	r3, [sp, #24]
 810d808:	9202      	str	r2, [sp, #8]
 810d80a:	f10c 0c08 	add.w	ip, ip, #8
 810d80e:	459c      	cmp	ip, r3
 810d810:	f10e 0e04 	add.w	lr, lr, #4
 810d814:	f105 0508 	add.w	r5, r5, #8
 810d818:	f104 0408 	add.w	r4, r4, #8
 810d81c:	f47f af6a 	bne.w	810d6f4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 810d820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d822:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d824:	9905      	ldr	r1, [sp, #20]
 810d826:	fb03 2201 	mla	r2, r3, r1, r2
 810d82a:	9223      	str	r2, [sp, #140]	; 0x8c
 810d82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810d82e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 810d832:	920a      	str	r2, [sp, #40]	; 0x28
 810d834:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810d836:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 810d83a:	921f      	str	r2, [sp, #124]	; 0x7c
 810d83c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810d83e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 810d842:	9220      	str	r2, [sp, #128]	; 0x80
 810d844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810d846:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d84a:	9321      	str	r3, [sp, #132]	; 0x84
 810d84c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d84e:	07db      	lsls	r3, r3, #31
 810d850:	d545      	bpl.n	810d8de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x272>
 810d852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d856:	0896      	lsrs	r6, r2, #2
 810d858:	681b      	ldr	r3, [r3, #0]
 810d85a:	f000 80cc 	beq.w	810d9f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38a>
 810d85e:	9904      	ldr	r1, [sp, #16]
 810d860:	00f7      	lsls	r7, r6, #3
 810d862:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 810d866:	6804      	ldr	r4, [r0, #0]
 810d868:	6842      	ldr	r2, [r0, #4]
 810d86a:	680d      	ldr	r5, [r1, #0]
 810d86c:	3008      	adds	r0, #8
 810d86e:	fb24 3305 	smlad	r3, r4, r5, r3
 810d872:	684c      	ldr	r4, [r1, #4]
 810d874:	3108      	adds	r1, #8
 810d876:	fb22 3304 	smlad	r3, r2, r4, r3
 810d87a:	42b0      	cmp	r0, r6
 810d87c:	d1f3      	bne.n	810d866 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fa>
 810d87e:	9a04      	ldr	r2, [sp, #16]
 810d880:	443a      	add	r2, r7
 810d882:	9204      	str	r2, [sp, #16]
 810d884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d886:	f012 0203 	ands.w	r2, r2, #3
 810d88a:	d011      	beq.n	810d8b0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x244>
 810d88c:	9c04      	ldr	r4, [sp, #16]
 810d88e:	8831      	ldrh	r1, [r6, #0]
 810d890:	8820      	ldrh	r0, [r4, #0]
 810d892:	3a01      	subs	r2, #1
 810d894:	b292      	uxth	r2, r2
 810d896:	fb10 3301 	smlabb	r3, r0, r1, r3
 810d89a:	b14a      	cbz	r2, 810d8b0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x244>
 810d89c:	8860      	ldrh	r0, [r4, #2]
 810d89e:	8871      	ldrh	r1, [r6, #2]
 810d8a0:	2a01      	cmp	r2, #1
 810d8a2:	fb10 3301 	smlabb	r3, r0, r1, r3
 810d8a6:	d003      	beq.n	810d8b0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x244>
 810d8a8:	88b1      	ldrh	r1, [r6, #4]
 810d8aa:	88a2      	ldrh	r2, [r4, #4]
 810d8ac:	fb11 3302 	smlabb	r3, r1, r2, r3
 810d8b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 810d8b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 810d8b6:	2a15      	cmp	r2, #21
 810d8b8:	dd79      	ble.n	810d9ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x342>
 810d8ba:	9921      	ldr	r1, [sp, #132]	; 0x84
 810d8bc:	680c      	ldr	r4, [r1, #0]
 810d8be:	9920      	ldr	r1, [sp, #128]	; 0x80
 810d8c0:	1e95      	subs	r5, r2, #2
 810d8c2:	2001      	movs	r0, #1
 810d8c4:	3a01      	subs	r2, #1
 810d8c6:	6809      	ldr	r1, [r1, #0]
 810d8c8:	40a8      	lsls	r0, r5
 810d8ca:	fb53 0301 	smmla	r3, r3, r1, r0
 810d8ce:	4113      	asrs	r3, r2
 810d8d0:	4423      	add	r3, r4
 810d8d2:	f303 0307 	ssat	r3, #8, r3
 810d8d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d8d8:	f802 3b01 	strb.w	r3, [r2], #1
 810d8dc:	9223      	str	r2, [sp, #140]	; 0x8c
 810d8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d8e0:	2b00      	cmp	r3, #0
 810d8e2:	d05c      	beq.n	810d99e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x332>
 810d8e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 810d8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d8e8:	fb02 f303 	mul.w	r3, r2, r3
 810d8ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d8ee:	f1c3 0301 	rsb	r3, r3, #1
 810d8f2:	18d0      	adds	r0, r2, r3
 810d8f4:	b013      	add	sp, #76	; 0x4c
 810d8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d8fa:	f1b8 0f00 	cmp.w	r8, #0
 810d8fe:	dd24      	ble.n	810d94a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2de>
 810d900:	f855 1c08 	ldr.w	r1, [r5, #-8]
 810d904:	f854 7c08 	ldr.w	r7, [r4, #-8]
 810d908:	005b      	lsls	r3, r3, #1
 810d90a:	fb53 7301 	smmla	r3, r3, r1, r7
 810d90e:	1f2f      	subs	r7, r5, #4
 810d910:	fa43 f308 	asr.w	r3, r3, r8
 810d914:	f1ae 0102 	sub.w	r1, lr, #2
 810d918:	f1a4 0804 	sub.w	r8, r4, #4
 810d91c:	f303 0307 	ssat	r3, #8, r3
 810d920:	b25b      	sxtb	r3, r3
 810d922:	f806 3c01 	strb.w	r3, [r6, #-1]
 810d926:	f9b1 1000 	ldrsh.w	r1, [r1]
 810d92a:	2915      	cmp	r1, #21
 810d92c:	f73f af55 	bgt.w	810d7da <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16e>
 810d930:	2900      	cmp	r1, #0
 810d932:	dd20      	ble.n	810d976 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30a>
 810d934:	683b      	ldr	r3, [r7, #0]
 810d936:	f8d8 7000 	ldr.w	r7, [r8]
 810d93a:	0052      	lsls	r2, r2, #1
 810d93c:	fb52 7203 	smmla	r2, r2, r3, r7
 810d940:	410a      	asrs	r2, r1
 810d942:	f302 0307 	ssat	r3, #8, r2
 810d946:	b25b      	sxtb	r3, r3
 810d948:	e757      	b.n	810d7fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 810d94a:	f1c8 0801 	rsb	r8, r8, #1
 810d94e:	fa03 f808 	lsl.w	r8, r3, r8
 810d952:	f1ae 0102 	sub.w	r1, lr, #2
 810d956:	f308 081f 	ssat	r8, #32, r8
 810d95a:	f855 3c08 	ldr.w	r3, [r5, #-8]
 810d95e:	1f2f      	subs	r7, r5, #4
 810d960:	fb58 f813 	smmulr	r8, r8, r3
 810d964:	f854 3c08 	ldr.w	r3, [r4, #-8]
 810d968:	4443      	add	r3, r8
 810d96a:	f1a4 0804 	sub.w	r8, r4, #4
 810d96e:	f303 0307 	ssat	r3, #8, r3
 810d972:	b25b      	sxtb	r3, r3
 810d974:	e72a      	b.n	810d7cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x160>
 810d976:	f1c1 0101 	rsb	r1, r1, #1
 810d97a:	408a      	lsls	r2, r1
 810d97c:	f302 021f 	ssat	r2, #32, r2
 810d980:	683b      	ldr	r3, [r7, #0]
 810d982:	fb52 f313 	smmulr	r3, r2, r3
 810d986:	f8d8 2000 	ldr.w	r2, [r8]
 810d98a:	4413      	add	r3, r2
 810d98c:	f303 0307 	ssat	r3, #8, r3
 810d990:	b25b      	sxtb	r3, r3
 810d992:	e732      	b.n	810d7fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x18e>
 810d994:	9904      	ldr	r1, [sp, #16]
 810d996:	e6d5      	b.n	810d744 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xd8>
 810d998:	2101      	movs	r1, #1
 810d99a:	4613      	mov	r3, r2
 810d99c:	e67d      	b.n	810d69a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 810d99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810d9a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d9a2:	1a9b      	subs	r3, r3, r2
 810d9a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d9a6:	18d0      	adds	r0, r2, r3
 810d9a8:	b013      	add	sp, #76	; 0x4c
 810d9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9ae:	2a00      	cmp	r2, #0
 810d9b0:	dd0e      	ble.n	810d9d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x364>
 810d9b2:	9920      	ldr	r1, [sp, #128]	; 0x80
 810d9b4:	9821      	ldr	r0, [sp, #132]	; 0x84
 810d9b6:	6809      	ldr	r1, [r1, #0]
 810d9b8:	6800      	ldr	r0, [r0, #0]
 810d9ba:	005b      	lsls	r3, r3, #1
 810d9bc:	fb53 0301 	smmla	r3, r3, r1, r0
 810d9c0:	4113      	asrs	r3, r2
 810d9c2:	f303 0307 	ssat	r3, #8, r3
 810d9c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d9c8:	f802 3b01 	strb.w	r3, [r2], #1
 810d9cc:	9223      	str	r2, [sp, #140]	; 0x8c
 810d9ce:	e786      	b.n	810d8de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x272>
 810d9d0:	f1c2 0201 	rsb	r2, r2, #1
 810d9d4:	4093      	lsls	r3, r2
 810d9d6:	f303 031f 	ssat	r3, #32, r3
 810d9da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810d9dc:	6812      	ldr	r2, [r2, #0]
 810d9de:	fb53 f312 	smmulr	r3, r3, r2
 810d9e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810d9e4:	6812      	ldr	r2, [r2, #0]
 810d9e6:	4413      	add	r3, r2
 810d9e8:	f303 0307 	ssat	r3, #8, r3
 810d9ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810d9ee:	f802 3b01 	strb.w	r3, [r2], #1
 810d9f2:	9223      	str	r2, [sp, #140]	; 0x8c
 810d9f4:	e773      	b.n	810d8de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x272>
 810d9f6:	4606      	mov	r6, r0
 810d9f8:	e744      	b.n	810d884 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x218>
 810d9fa:	bf00      	nop

0810d9fc <weights_2channels_prefetch>:
 810d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810da00:	b087      	sub	sp, #28
 810da02:	2b00      	cmp	r3, #0
 810da04:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 810da08:	9302      	str	r3, [sp, #8]
 810da0a:	f340 80d7 	ble.w	810dbbc <weights_2channels_prefetch+0x1c0>
 810da0e:	f1a8 0310 	sub.w	r3, r8, #16
 810da12:	091b      	lsrs	r3, r3, #4
 810da14:	3301      	adds	r3, #1
 810da16:	f1a8 0403 	sub.w	r4, r8, #3
 810da1a:	9403      	str	r4, [sp, #12]
 810da1c:	011c      	lsls	r4, r3, #4
 810da1e:	019b      	lsls	r3, r3, #6
 810da20:	9304      	str	r3, [sp, #16]
 810da22:	f1a8 0304 	sub.w	r3, r8, #4
 810da26:	9400      	str	r4, [sp, #0]
 810da28:	f04f 0b00 	mov.w	fp, #0
 810da2c:	9305      	str	r3, [sp, #20]
 810da2e:	f1b8 0f0f 	cmp.w	r8, #15
 810da32:	f340 80c8 	ble.w	810dbc6 <weights_2channels_prefetch+0x1ca>
 810da36:	9b00      	ldr	r3, [sp, #0]
 810da38:	460c      	mov	r4, r1
 810da3a:	18c6      	adds	r6, r0, r3
 810da3c:	4613      	mov	r3, r2
 810da3e:	6807      	ldr	r7, [r0, #0]
 810da40:	6825      	ldr	r5, [r4, #0]
 810da42:	ea4f 2c37 	mov.w	ip, r7, ror #8
 810da46:	fa2f f787 	sxtb16	r7, r7
 810da4a:	601f      	str	r7, [r3, #0]
 810da4c:	fa2f f78c 	sxtb16	r7, ip
 810da50:	605f      	str	r7, [r3, #4]
 810da52:	ea4f 2735 	mov.w	r7, r5, ror #8
 810da56:	fa2f f585 	sxtb16	r5, r5
 810da5a:	609d      	str	r5, [r3, #8]
 810da5c:	fa2f f587 	sxtb16	r5, r7
 810da60:	60dd      	str	r5, [r3, #12]
 810da62:	6847      	ldr	r7, [r0, #4]
 810da64:	6865      	ldr	r5, [r4, #4]
 810da66:	ea4f 2c37 	mov.w	ip, r7, ror #8
 810da6a:	fa2f f787 	sxtb16	r7, r7
 810da6e:	611f      	str	r7, [r3, #16]
 810da70:	fa2f f78c 	sxtb16	r7, ip
 810da74:	615f      	str	r7, [r3, #20]
 810da76:	ea4f 2735 	mov.w	r7, r5, ror #8
 810da7a:	fa2f f585 	sxtb16	r5, r5
 810da7e:	619d      	str	r5, [r3, #24]
 810da80:	fa2f f587 	sxtb16	r5, r7
 810da84:	61dd      	str	r5, [r3, #28]
 810da86:	6887      	ldr	r7, [r0, #8]
 810da88:	68a5      	ldr	r5, [r4, #8]
 810da8a:	ea4f 2c37 	mov.w	ip, r7, ror #8
 810da8e:	fa2f f787 	sxtb16	r7, r7
 810da92:	621f      	str	r7, [r3, #32]
 810da94:	fa2f f78c 	sxtb16	r7, ip
 810da98:	625f      	str	r7, [r3, #36]	; 0x24
 810da9a:	ea4f 2735 	mov.w	r7, r5, ror #8
 810da9e:	fa2f f585 	sxtb16	r5, r5
 810daa2:	629d      	str	r5, [r3, #40]	; 0x28
 810daa4:	fa2f f587 	sxtb16	r5, r7
 810daa8:	62dd      	str	r5, [r3, #44]	; 0x2c
 810daaa:	68c7      	ldr	r7, [r0, #12]
 810daac:	68e5      	ldr	r5, [r4, #12]
 810daae:	3010      	adds	r0, #16
 810dab0:	42b0      	cmp	r0, r6
 810dab2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 810dab6:	f104 0410 	add.w	r4, r4, #16
 810daba:	fa2f f787 	sxtb16	r7, r7
 810dabe:	f103 0340 	add.w	r3, r3, #64	; 0x40
 810dac2:	f843 7c10 	str.w	r7, [r3, #-16]
 810dac6:	fa2f f78c 	sxtb16	r7, ip
 810daca:	f843 7c0c 	str.w	r7, [r3, #-12]
 810dace:	ea4f 2735 	mov.w	r7, r5, ror #8
 810dad2:	fa2f f585 	sxtb16	r5, r5
 810dad6:	f843 5c08 	str.w	r5, [r3, #-8]
 810dada:	fa2f f587 	sxtb16	r5, r7
 810dade:	f843 5c04 	str.w	r5, [r3, #-4]
 810dae2:	d1ac      	bne.n	810da3e <weights_2channels_prefetch+0x42>
 810dae4:	9b04      	ldr	r3, [sp, #16]
 810dae6:	441a      	add	r2, r3
 810dae8:	9b00      	ldr	r3, [sp, #0]
 810daea:	4419      	add	r1, r3
 810daec:	469e      	mov	lr, r3
 810daee:	9b03      	ldr	r3, [sp, #12]
 810daf0:	4573      	cmp	r3, lr
 810daf2:	dd66      	ble.n	810dbc2 <weights_2channels_prefetch+0x1c6>
 810daf4:	9b05      	ldr	r3, [sp, #20]
 810daf6:	eba3 090e 	sub.w	r9, r3, lr
 810dafa:	ea4f 0999 	mov.w	r9, r9, lsr #2
 810dafe:	f109 0a01 	add.w	sl, r9, #1
 810db02:	ea4f 038a 	mov.w	r3, sl, lsl #2
 810db06:	9301      	str	r3, [sp, #4]
 810db08:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 810db0c:	4613      	mov	r3, r2
 810db0e:	468c      	mov	ip, r1
 810db10:	f856 5b04 	ldr.w	r5, [r6], #4
 810db14:	f85c 4b04 	ldr.w	r4, [ip], #4
 810db18:	4286      	cmp	r6, r0
 810db1a:	ea4f 2735 	mov.w	r7, r5, ror #8
 810db1e:	f103 0310 	add.w	r3, r3, #16
 810db22:	fa2f f585 	sxtb16	r5, r5
 810db26:	fa2f f787 	sxtb16	r7, r7
 810db2a:	f843 5c10 	str.w	r5, [r3, #-16]
 810db2e:	f843 7c0c 	str.w	r7, [r3, #-12]
 810db32:	ea4f 2534 	mov.w	r5, r4, ror #8
 810db36:	fa2f f484 	sxtb16	r4, r4
 810db3a:	f843 4c08 	str.w	r4, [r3, #-8]
 810db3e:	fa2f f485 	sxtb16	r4, r5
 810db42:	f843 4c04 	str.w	r4, [r3, #-4]
 810db46:	d1e3      	bne.n	810db10 <weights_2channels_prefetch+0x114>
 810db48:	9b01      	ldr	r3, [sp, #4]
 810db4a:	f10e 0e04 	add.w	lr, lr, #4
 810db4e:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 810db52:	4419      	add	r1, r3
 810db54:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 810db58:	45f0      	cmp	r8, lr
 810db5a:	dd29      	ble.n	810dbb0 <weights_2channels_prefetch+0x1b4>
 810db5c:	f990 3000 	ldrsb.w	r3, [r0]
 810db60:	8013      	strh	r3, [r2, #0]
 810db62:	f991 3000 	ldrsb.w	r3, [r1]
 810db66:	8053      	strh	r3, [r2, #2]
 810db68:	f10e 0301 	add.w	r3, lr, #1
 810db6c:	4598      	cmp	r8, r3
 810db6e:	dd19      	ble.n	810dba4 <weights_2channels_prefetch+0x1a8>
 810db70:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810db74:	8093      	strh	r3, [r2, #4]
 810db76:	f991 3001 	ldrsb.w	r3, [r1, #1]
 810db7a:	80d3      	strh	r3, [r2, #6]
 810db7c:	f10e 0302 	add.w	r3, lr, #2
 810db80:	4598      	cmp	r8, r3
 810db82:	dd0f      	ble.n	810dba4 <weights_2channels_prefetch+0x1a8>
 810db84:	f990 3002 	ldrsb.w	r3, [r0, #2]
 810db88:	8113      	strh	r3, [r2, #8]
 810db8a:	f991 3002 	ldrsb.w	r3, [r1, #2]
 810db8e:	8153      	strh	r3, [r2, #10]
 810db90:	f10e 0303 	add.w	r3, lr, #3
 810db94:	4598      	cmp	r8, r3
 810db96:	dd05      	ble.n	810dba4 <weights_2channels_prefetch+0x1a8>
 810db98:	f990 3003 	ldrsb.w	r3, [r0, #3]
 810db9c:	8193      	strh	r3, [r2, #12]
 810db9e:	f991 3003 	ldrsb.w	r3, [r1, #3]
 810dba2:	81d3      	strh	r3, [r2, #14]
 810dba4:	eba8 0e0e 	sub.w	lr, r8, lr
 810dba8:	4470      	add	r0, lr
 810dbaa:	4471      	add	r1, lr
 810dbac:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 810dbb0:	9b02      	ldr	r3, [sp, #8]
 810dbb2:	f10b 0b01 	add.w	fp, fp, #1
 810dbb6:	455b      	cmp	r3, fp
 810dbb8:	f47f af39 	bne.w	810da2e <weights_2channels_prefetch+0x32>
 810dbbc:	b007      	add	sp, #28
 810dbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dbc2:	4630      	mov	r0, r6
 810dbc4:	e7c8      	b.n	810db58 <weights_2channels_prefetch+0x15c>
 810dbc6:	4606      	mov	r6, r0
 810dbc8:	f04f 0e00 	mov.w	lr, #0
 810dbcc:	e78f      	b.n	810daee <weights_2channels_prefetch+0xf2>
 810dbce:	bf00      	nop

0810dbd0 <st_sssa8_ch_fullW_prefetch>:
 810dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dbd4:	b087      	sub	sp, #28
 810dbd6:	4680      	mov	r8, r0
 810dbd8:	4618      	mov	r0, r3
 810dbda:	4613      	mov	r3, r2
 810dbdc:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 810dbe0:	104f      	asrs	r7, r1, #1
 810dbe2:	9103      	str	r1, [sp, #12]
 810dbe4:	eb08 0402 	add.w	r4, r8, r2
 810dbe8:	9704      	str	r7, [sp, #16]
 810dbea:	d020      	beq.n	810dc2e <st_sssa8_ch_fullW_prefetch+0x5e>
 810dbec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810dbee:	f8cd 8014 	str.w	r8, [sp, #20]
 810dbf2:	4646      	mov	r6, r8
 810dbf4:	4655      	mov	r5, sl
 810dbf6:	ea4f 0942 	mov.w	r9, r2, lsl #1
 810dbfa:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 810dbfe:	4680      	mov	r8, r0
 810dc00:	469a      	mov	sl, r3
 810dc02:	462a      	mov	r2, r5
 810dc04:	4621      	mov	r1, r4
 810dc06:	4630      	mov	r0, r6
 810dc08:	f8cd 8000 	str.w	r8, [sp]
 810dc0c:	4653      	mov	r3, sl
 810dc0e:	f7ff fef5 	bl	810d9fc <weights_2channels_prefetch>
 810dc12:	3f01      	subs	r7, #1
 810dc14:	445d      	add	r5, fp
 810dc16:	444c      	add	r4, r9
 810dc18:	444e      	add	r6, r9
 810dc1a:	d1f2      	bne.n	810dc02 <st_sssa8_ch_fullW_prefetch+0x32>
 810dc1c:	9b04      	ldr	r3, [sp, #16]
 810dc1e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 810dc22:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 810dc26:	fb03 8809 	mla	r8, r3, r9, r8
 810dc2a:	fb03 aa0b 	mla	sl, r3, fp, sl
 810dc2e:	9b03      	ldr	r3, [sp, #12]
 810dc30:	07db      	lsls	r3, r3, #31
 810dc32:	d509      	bpl.n	810dc48 <st_sssa8_ch_fullW_prefetch+0x78>
 810dc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810dc36:	2b00      	cmp	r3, #0
 810dc38:	dd06      	ble.n	810dc48 <st_sssa8_ch_fullW_prefetch+0x78>
 810dc3a:	4443      	add	r3, r8
 810dc3c:	f918 2b01 	ldrsb.w	r2, [r8], #1
 810dc40:	f82a 2b02 	strh.w	r2, [sl], #2
 810dc44:	4543      	cmp	r3, r8
 810dc46:	d1f9      	bne.n	810dc3c <st_sssa8_ch_fullW_prefetch+0x6c>
 810dc48:	b007      	add	sp, #28
 810dc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dc4e:	bf00      	nop

0810dc50 <st_int8_to_f32>:
 810dc50:	b530      	push	{r4, r5, lr}
 810dc52:	0894      	lsrs	r4, r2, #2
 810dc54:	d036      	beq.n	810dcc4 <st_int8_to_f32+0x74>
 810dc56:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 810dd14 <st_int8_to_f32+0xc4>
 810dc5a:	1d03      	adds	r3, r0, #4
 810dc5c:	f101 0c10 	add.w	ip, r1, #16
 810dc60:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 810dc64:	f913 ec04 	ldrsb.w	lr, [r3, #-4]
 810dc68:	ee07 ea90 	vmov	s15, lr
 810dc6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dc70:	469e      	mov	lr, r3
 810dc72:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dc76:	3304      	adds	r3, #4
 810dc78:	ed4c 7a04 	vstr	s15, [ip, #-16]
 810dc7c:	f913 5c07 	ldrsb.w	r5, [r3, #-7]
 810dc80:	ee07 5a90 	vmov	s15, r5
 810dc84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dc88:	4586      	cmp	lr, r0
 810dc8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dc8e:	f10c 0c10 	add.w	ip, ip, #16
 810dc92:	ed4c 7a07 	vstr	s15, [ip, #-28]	; 0xffffffe4
 810dc96:	f913 5c06 	ldrsb.w	r5, [r3, #-6]
 810dc9a:	ee07 5a90 	vmov	s15, r5
 810dc9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dca6:	ed4c 7a06 	vstr	s15, [ip, #-24]	; 0xffffffe8
 810dcaa:	f913 5c05 	ldrsb.w	r5, [r3, #-5]
 810dcae:	ee07 5a90 	vmov	s15, r5
 810dcb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dcb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dcba:	ed4c 7a05 	vstr	s15, [ip, #-20]	; 0xffffffec
 810dcbe:	d1d1      	bne.n	810dc64 <st_int8_to_f32+0x14>
 810dcc0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 810dcc4:	f012 0203 	ands.w	r2, r2, #3
 810dcc8:	d023      	beq.n	810dd12 <st_int8_to_f32+0xc2>
 810dcca:	f990 3000 	ldrsb.w	r3, [r0]
 810dcce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 810dd14 <st_int8_to_f32+0xc4>
 810dcd2:	ee07 3a90 	vmov	s15, r3
 810dcd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dcda:	3a01      	subs	r2, #1
 810dcdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dce0:	edc1 7a00 	vstr	s15, [r1]
 810dce4:	d015      	beq.n	810dd12 <st_int8_to_f32+0xc2>
 810dce6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810dcea:	ee07 3a90 	vmov	s15, r3
 810dcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dcf2:	2a01      	cmp	r2, #1
 810dcf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dcf8:	edc1 7a01 	vstr	s15, [r1, #4]
 810dcfc:	d009      	beq.n	810dd12 <st_int8_to_f32+0xc2>
 810dcfe:	f990 3002 	ldrsb.w	r3, [r0, #2]
 810dd02:	ee07 3a90 	vmov	s15, r3
 810dd06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dd0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dd0e:	edc1 7a02 	vstr	s15, [r1, #8]
 810dd12:	bd30      	pop	{r4, r5, pc}
 810dd14:	3c000000 	.word	0x3c000000
	...

0810dd20 <st_sssa8_dense_loop>:
 810dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd24:	b083      	sub	sp, #12
 810dd26:	bf00      	nop
 810dd28:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 810dd2c:	f1bb 0f00 	cmp.w	fp, #0
 810dd30:	bfcc      	ite	gt
 810dd32:	f04f 0c00 	movgt.w	ip, #0
 810dd36:	f04f 3cff 	movle.w	ip, #4294967295	; 0xffffffff
 810dd3a:	f1bb 0f15 	cmp.w	fp, #21
 810dd3e:	bfc8      	it	gt
 810dd40:	f04f 0c01 	movgt.w	ip, #1
 810dd44:	f8cd c000 	str.w	ip, [sp]
 810dd48:	9001      	str	r0, [sp, #4]
 810dd4a:	4692      	mov	sl, r2
 810dd4c:	4699      	mov	r9, r3
 810dd4e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 810dd52:	460f      	mov	r7, r1
 810dd54:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 810dd58:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 810dd5c:	9202      	str	r2, [sp, #8]
 810dd5e:	2c00      	cmp	r4, #0
 810dd60:	f000 80dc 	beq.w	810df1c <Exit>

0810dd64 <MainLoop>:
 810dd64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810dd68:	f8d9 e000 	ldr.w	lr, [r9]
 810dd6c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 810dd70:	ea4f 162a 	mov.w	r6, sl, asr #4
 810dd74:	2e00      	cmp	r6, #0
 810dd76:	f109 0908 	add.w	r9, r9, #8
 810dd7a:	d05b      	beq.n	810de34 <NextLoop4>

0810dd7c <Loop16>:
 810dd7c:	6838      	ldr	r0, [r7, #0]
 810dd7e:	6879      	ldr	r1, [r7, #4]
 810dd80:	f858 4b04 	ldr.w	r4, [r8], #4
 810dd84:	f858 5b04 	ldr.w	r5, [r8], #4
 810dd88:	fa2f f391 	sxtb16	r3, r1, ror #8
 810dd8c:	fa2f f181 	sxtb16	r1, r1
 810dd90:	fa2f f290 	sxtb16	r2, r0, ror #8
 810dd94:	fa2f f080 	sxtb16	r0, r0
 810dd98:	fb23 cc05 	smlad	ip, r3, r5, ip
 810dd9c:	fb21 cc04 	smlad	ip, r1, r4, ip
 810dda0:	fb22 ee05 	smlad	lr, r2, r5, lr
 810dda4:	fb20 ee04 	smlad	lr, r0, r4, lr
 810dda8:	68b8      	ldr	r0, [r7, #8]
 810ddaa:	68f9      	ldr	r1, [r7, #12]
 810ddac:	f858 4b04 	ldr.w	r4, [r8], #4
 810ddb0:	f858 5b04 	ldr.w	r5, [r8], #4
 810ddb4:	fa2f f391 	sxtb16	r3, r1, ror #8
 810ddb8:	fa2f f181 	sxtb16	r1, r1
 810ddbc:	fa2f f290 	sxtb16	r2, r0, ror #8
 810ddc0:	fa2f f080 	sxtb16	r0, r0
 810ddc4:	fb23 cc05 	smlad	ip, r3, r5, ip
 810ddc8:	fb21 cc04 	smlad	ip, r1, r4, ip
 810ddcc:	fb22 ee05 	smlad	lr, r2, r5, lr
 810ddd0:	fb20 ee04 	smlad	lr, r0, r4, lr
 810ddd4:	6938      	ldr	r0, [r7, #16]
 810ddd6:	6979      	ldr	r1, [r7, #20]
 810ddd8:	f858 4b04 	ldr.w	r4, [r8], #4
 810dddc:	f858 5b04 	ldr.w	r5, [r8], #4
 810dde0:	fa2f f391 	sxtb16	r3, r1, ror #8
 810dde4:	fa2f f181 	sxtb16	r1, r1
 810dde8:	fa2f f290 	sxtb16	r2, r0, ror #8
 810ddec:	fa2f f080 	sxtb16	r0, r0
 810ddf0:	fb23 cc05 	smlad	ip, r3, r5, ip
 810ddf4:	fb21 cc04 	smlad	ip, r1, r4, ip
 810ddf8:	fb22 ee05 	smlad	lr, r2, r5, lr
 810ddfc:	fb20 ee04 	smlad	lr, r0, r4, lr
 810de00:	69b8      	ldr	r0, [r7, #24]
 810de02:	69f9      	ldr	r1, [r7, #28]
 810de04:	f858 4b04 	ldr.w	r4, [r8], #4
 810de08:	f858 5b04 	ldr.w	r5, [r8], #4
 810de0c:	fa2f f391 	sxtb16	r3, r1, ror #8
 810de10:	fa2f f181 	sxtb16	r1, r1
 810de14:	fa2f f290 	sxtb16	r2, r0, ror #8
 810de18:	fa2f f080 	sxtb16	r0, r0
 810de1c:	fb23 cc05 	smlad	ip, r3, r5, ip
 810de20:	fb21 cc04 	smlad	ip, r1, r4, ip
 810de24:	fb22 ee05 	smlad	lr, r2, r5, lr
 810de28:	fb20 ee04 	smlad	lr, r0, r4, lr
 810de2c:	3e01      	subs	r6, #1
 810de2e:	f107 0720 	add.w	r7, r7, #32
 810de32:	dca3      	bgt.n	810dd7c <Loop16>

0810de34 <NextLoop4>:
 810de34:	f3ca 0681 	ubfx	r6, sl, #2, #2
 810de38:	2e00      	cmp	r6, #0
 810de3a:	d019      	beq.n	810de70 <FinalLoop>

0810de3c <Loop4>:
 810de3c:	6838      	ldr	r0, [r7, #0]
 810de3e:	6879      	ldr	r1, [r7, #4]
 810de40:	f858 4b04 	ldr.w	r4, [r8], #4
 810de44:	f858 5b04 	ldr.w	r5, [r8], #4
 810de48:	fa2f f391 	sxtb16	r3, r1, ror #8
 810de4c:	fa2f f181 	sxtb16	r1, r1
 810de50:	fa2f f290 	sxtb16	r2, r0, ror #8
 810de54:	fa2f f080 	sxtb16	r0, r0
 810de58:	fb23 cc05 	smlad	ip, r3, r5, ip
 810de5c:	fb21 cc04 	smlad	ip, r1, r4, ip
 810de60:	fb22 ee05 	smlad	lr, r2, r5, lr
 810de64:	fb20 ee04 	smlad	lr, r0, r4, lr
 810de68:	3e01      	subs	r6, #1
 810de6a:	f107 0708 	add.w	r7, r7, #8
 810de6e:	dce5      	bgt.n	810de3c <Loop4>

0810de70 <FinalLoop>:
 810de70:	f00a 0603 	and.w	r6, sl, #3
 810de74:	2e00      	cmp	r6, #0
 810de76:	dd0b      	ble.n	810de90 <OutputFormatting>

0810de78 <Loop1>:
 810de78:	f938 4b02 	ldrsh.w	r4, [r8], #2
 810de7c:	f917 0b01 	ldrsb.w	r0, [r7], #1
 810de80:	f917 1b01 	ldrsb.w	r1, [r7], #1
 810de84:	fb10 ee04 	smlabb	lr, r0, r4, lr
 810de88:	fb11 cc04 	smlabb	ip, r1, r4, ip
 810de8c:	3e01      	subs	r6, #1
 810de8e:	d1f3      	bne.n	810de78 <Loop1>

0810de90 <OutputFormatting>:
 810de90:	980e      	ldr	r0, [sp, #56]	; 0x38
 810de92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 810de94:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 810de96:	9e00      	ldr	r6, [sp, #0]
 810de98:	2e00      	cmp	r6, #0
 810de9a:	d10c      	bne.n	810deb6 <OutputFormatting_ex>
 810de9c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810dea0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810dea4:	fb5e 5e00 	smmla	lr, lr, r0, r5
 810dea8:	fb5c 5c00 	smmla	ip, ip, r0, r5
 810deac:	fa4e fe01 	asr.w	lr, lr, r1
 810deb0:	fa4c fc01 	asr.w	ip, ip, r1
 810deb4:	e026      	b.n	810df04 <EndScaling>

0810deb6 <OutputFormatting_ex>:
 810deb6:	1c73      	adds	r3, r6, #1
 810deb8:	d014      	beq.n	810dee4 <OutputFormatting_Neg>
 810deba:	f04f 0301 	mov.w	r3, #1
 810debe:	fa03 f301 	lsl.w	r3, r3, r1
 810dec2:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810dec6:	fb5e 3e00 	smmla	lr, lr, r0, r3
 810deca:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810dece:	fa4e fe01 	asr.w	lr, lr, r1
 810ded2:	44ae      	add	lr, r5
 810ded4:	fb5c 3c00 	smmla	ip, ip, r0, r3
 810ded8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810dedc:	fa4c fc01 	asr.w	ip, ip, r1
 810dee0:	44ac      	add	ip, r5
 810dee2:	e00f      	b.n	810df04 <EndScaling>

0810dee4 <OutputFormatting_Neg>:
 810dee4:	f1c1 0301 	rsb	r3, r1, #1
 810dee8:	fa0e fe03 	lsl.w	lr, lr, r3
 810deec:	f30e 0e1f 	ssat	lr, #32, lr
 810def0:	fb5e fe10 	smmulr	lr, lr, r0
 810def4:	fa0c fc03 	lsl.w	ip, ip, r3
 810def8:	f30c 0c1f 	ssat	ip, #32, ip
 810defc:	fb5c fc10 	smmulr	ip, ip, r0
 810df00:	44ae      	add	lr, r5
 810df02:	44ac      	add	ip, r5

0810df04 <EndScaling>:
 810df04:	f30e 0e07 	ssat	lr, #8, lr
 810df08:	9b02      	ldr	r3, [sp, #8]
 810df0a:	f30c 0c07 	ssat	ip, #8, ip
 810df0e:	f36c 2e0f 	bfi	lr, ip, #8, #8
 810df12:	f82b eb02 	strh.w	lr, [fp], #2
 810df16:	459b      	cmp	fp, r3
 810df18:	f47f af24 	bne.w	810dd64 <MainLoop>

0810df1c <Exit>:
 810df1c:	b003      	add	sp, #12
 810df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810df22:	bf00      	nop
 810df24:	f3af 8000 	nop.w
 810df28:	f3af 8000 	nop.w
 810df2c:	f3af 8000 	nop.w

0810df30 <st_sssa8_dense_memopt_loop>:
 810df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df34:	b087      	sub	sp, #28
 810df36:	bf00      	nop
 810df38:	bf00      	nop
 810df3a:	bf00      	nop
 810df3c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 810df40:	f1bb 0f00 	cmp.w	fp, #0
 810df44:	bfcc      	ite	gt
 810df46:	f04f 0c00 	movgt.w	ip, #0
 810df4a:	f04f 3cff 	movle.w	ip, #4294967295	; 0xffffffff
 810df4e:	f1bb 0f15 	cmp.w	fp, #21
 810df52:	bfc8      	it	gt
 810df54:	f04f 0c01 	movgt.w	ip, #1
 810df58:	f8cd c018 	str.w	ip, [sp, #24]
 810df5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 810df5e:	f1c5 0a00 	rsb	sl, r5, #0
 810df62:	eaca 4a0a 	pkhbt	sl, sl, sl, lsl #16
 810df66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 810df68:	4680      	mov	r8, r0
 810df6a:	460f      	mov	r7, r1
 810df6c:	4699      	mov	r9, r3
 810df6e:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 810df72:	9004      	str	r0, [sp, #16]
 810df74:	9200      	str	r2, [sp, #0]
 810df76:	f022 050f 	bic.w	r5, r2, #15
 810df7a:	4405      	add	r5, r0
 810df7c:	9503      	str	r5, [sp, #12]
 810df7e:	f022 0503 	bic.w	r5, r2, #3
 810df82:	4405      	add	r5, r0
 810df84:	9502      	str	r5, [sp, #8]
 810df86:	f002 0503 	and.w	r5, r2, #3
 810df8a:	9505      	str	r5, [sp, #20]
 810df8c:	2c00      	cmp	r4, #0
 810df8e:	f340 80f5 	ble.w	810e17c <Exit_m>
 810df92:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 810df96:	9301      	str	r3, [sp, #4]

0810df98 <MainLoop_m>:
 810df98:	9b00      	ldr	r3, [sp, #0]
 810df9a:	f859 eb04 	ldr.w	lr, [r9], #4
 810df9e:	f859 cb04 	ldr.w	ip, [r9], #4
 810dfa2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 810dfa6:	2b0f      	cmp	r3, #15
 810dfa8:	dd6c      	ble.n	810e084 <NextLoop4_m>
 810dfaa:	9b03      	ldr	r3, [sp, #12]

0810dfac <Loop16_m>:
 810dfac:	6838      	ldr	r0, [r7, #0]
 810dfae:	6879      	ldr	r1, [r7, #4]
 810dfb0:	f858 4b04 	ldr.w	r4, [r8], #4
 810dfb4:	fa2f f690 	sxtb16	r6, r0, ror #8
 810dfb8:	fa2f f591 	sxtb16	r5, r1, ror #8
 810dfbc:	ea4f 2234 	mov.w	r2, r4, ror #8
 810dfc0:	fa2f f181 	sxtb16	r1, r1
 810dfc4:	fa2f f080 	sxtb16	r0, r0
 810dfc8:	fa2a f484 	sxtab16	r4, sl, r4
 810dfcc:	fa2a f282 	sxtab16	r2, sl, r2
 810dfd0:	fb24 ee00 	smlad	lr, r4, r0, lr
 810dfd4:	fb22 ee06 	smlad	lr, r2, r6, lr
 810dfd8:	fb24 cc01 	smlad	ip, r4, r1, ip
 810dfdc:	fb22 cc05 	smlad	ip, r2, r5, ip
 810dfe0:	68b8      	ldr	r0, [r7, #8]
 810dfe2:	68f9      	ldr	r1, [r7, #12]
 810dfe4:	f858 4b04 	ldr.w	r4, [r8], #4
 810dfe8:	fa2f f690 	sxtb16	r6, r0, ror #8
 810dfec:	fa2f f591 	sxtb16	r5, r1, ror #8
 810dff0:	ea4f 2234 	mov.w	r2, r4, ror #8
 810dff4:	fa2f f181 	sxtb16	r1, r1
 810dff8:	fa2f f080 	sxtb16	r0, r0
 810dffc:	fa2a f484 	sxtab16	r4, sl, r4
 810e000:	fa2a f282 	sxtab16	r2, sl, r2
 810e004:	fb24 ee00 	smlad	lr, r4, r0, lr
 810e008:	fb22 ee06 	smlad	lr, r2, r6, lr
 810e00c:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e010:	fb22 cc05 	smlad	ip, r2, r5, ip
 810e014:	6938      	ldr	r0, [r7, #16]
 810e016:	6979      	ldr	r1, [r7, #20]
 810e018:	f858 4b04 	ldr.w	r4, [r8], #4
 810e01c:	fa2f f690 	sxtb16	r6, r0, ror #8
 810e020:	fa2f f591 	sxtb16	r5, r1, ror #8
 810e024:	ea4f 2234 	mov.w	r2, r4, ror #8
 810e028:	fa2f f181 	sxtb16	r1, r1
 810e02c:	fa2f f080 	sxtb16	r0, r0
 810e030:	fa2a f484 	sxtab16	r4, sl, r4
 810e034:	fa2a f282 	sxtab16	r2, sl, r2
 810e038:	fb24 ee00 	smlad	lr, r4, r0, lr
 810e03c:	fb22 ee06 	smlad	lr, r2, r6, lr
 810e040:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e044:	fb22 cc05 	smlad	ip, r2, r5, ip
 810e048:	69b8      	ldr	r0, [r7, #24]
 810e04a:	69f9      	ldr	r1, [r7, #28]
 810e04c:	f858 4b04 	ldr.w	r4, [r8], #4
 810e050:	fa2f f690 	sxtb16	r6, r0, ror #8
 810e054:	fa2f f591 	sxtb16	r5, r1, ror #8
 810e058:	ea4f 2234 	mov.w	r2, r4, ror #8
 810e05c:	fa2f f181 	sxtb16	r1, r1
 810e060:	fa2f f080 	sxtb16	r0, r0
 810e064:	fa2a f484 	sxtab16	r4, sl, r4
 810e068:	fa2a f282 	sxtab16	r2, sl, r2
 810e06c:	fb24 ee00 	smlad	lr, r4, r0, lr
 810e070:	fb22 ee06 	smlad	lr, r2, r6, lr
 810e074:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e078:	fb22 cc05 	smlad	ip, r2, r5, ip
 810e07c:	4598      	cmp	r8, r3
 810e07e:	f107 0720 	add.w	r7, r7, #32
 810e082:	d193      	bne.n	810dfac <Loop16_m>

0810e084 <NextLoop4_m>:
 810e084:	9b02      	ldr	r3, [sp, #8]
 810e086:	4598      	cmp	r8, r3
 810e088:	d01d      	beq.n	810e0c6 <FinalLoop_m>

0810e08a <Loop4_m>:
 810e08a:	6838      	ldr	r0, [r7, #0]
 810e08c:	6879      	ldr	r1, [r7, #4]
 810e08e:	f858 4b04 	ldr.w	r4, [r8], #4
 810e092:	fa2f f690 	sxtb16	r6, r0, ror #8
 810e096:	fa2f f591 	sxtb16	r5, r1, ror #8
 810e09a:	ea4f 2234 	mov.w	r2, r4, ror #8
 810e09e:	fa2f f181 	sxtb16	r1, r1
 810e0a2:	fa2f f080 	sxtb16	r0, r0
 810e0a6:	fa2a f484 	sxtab16	r4, sl, r4
 810e0aa:	fa2a f282 	sxtab16	r2, sl, r2
 810e0ae:	fb24 ee00 	smlad	lr, r4, r0, lr
 810e0b2:	fb22 ee06 	smlad	lr, r2, r6, lr
 810e0b6:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e0ba:	fb22 cc05 	smlad	ip, r2, r5, ip
 810e0be:	f107 0708 	add.w	r7, r7, #8
 810e0c2:	4598      	cmp	r8, r3
 810e0c4:	d1e1      	bne.n	810e08a <Loop4_m>

0810e0c6 <FinalLoop_m>:
 810e0c6:	9b05      	ldr	r3, [sp, #20]
 810e0c8:	2b00      	cmp	r3, #0
 810e0ca:	d011      	beq.n	810e0f0 <OutputFormatting_m>

0810e0cc <Loop1_m>:
 810e0cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 810e0ce:	f918 4b01 	ldrsb.w	r4, [r8], #1
 810e0d2:	eba4 0405 	sub.w	r4, r4, r5
 810e0d6:	f917 5b01 	ldrsb.w	r5, [r7], #1
 810e0da:	b224      	sxth	r4, r4
 810e0dc:	fb14 ee05 	smlabb	lr, r4, r5, lr
 810e0e0:	f917 5b01 	ldrsb.w	r5, [r7], #1
 810e0e4:	fb14 cc05 	smlabb	ip, r4, r5, ip
 810e0e8:	f1a3 0301 	sub.w	r3, r3, #1
 810e0ec:	2b00      	cmp	r3, #0
 810e0ee:	dced      	bgt.n	810e0cc <Loop1_m>

0810e0f0 <OutputFormatting_m>:
 810e0f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 810e0f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 810e0f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 810e0f6:	9e06      	ldr	r6, [sp, #24]
 810e0f8:	2e00      	cmp	r6, #0
 810e0fa:	d10c      	bne.n	810e116 <OutputFormatting_m_ex>
 810e0fc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810e100:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810e104:	fb5e 5e00 	smmla	lr, lr, r0, r5
 810e108:	fb5c 5c00 	smmla	ip, ip, r0, r5
 810e10c:	fa4e fe01 	asr.w	lr, lr, r1
 810e110:	fa4c fc01 	asr.w	ip, ip, r1
 810e114:	e026      	b.n	810e164 <EndScaling_m>

0810e116 <OutputFormatting_m_ex>:
 810e116:	1c73      	adds	r3, r6, #1
 810e118:	d014      	beq.n	810e144 <OutputFormatting_m_Neg>
 810e11a:	f04f 0301 	mov.w	r3, #1
 810e11e:	fa03 f301 	lsl.w	r3, r3, r1
 810e122:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810e126:	fb5e 3e00 	smmla	lr, lr, r0, r3
 810e12a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810e12e:	fa4e fe01 	asr.w	lr, lr, r1
 810e132:	44ae      	add	lr, r5
 810e134:	fb5c 3c00 	smmla	ip, ip, r0, r3
 810e138:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810e13c:	fa4c fc01 	asr.w	ip, ip, r1
 810e140:	44ac      	add	ip, r5
 810e142:	e00f      	b.n	810e164 <EndScaling_m>

0810e144 <OutputFormatting_m_Neg>:
 810e144:	f1c1 0301 	rsb	r3, r1, #1
 810e148:	fa0e fe03 	lsl.w	lr, lr, r3
 810e14c:	f30e 0e1f 	ssat	lr, #32, lr
 810e150:	fb5e fe10 	smmulr	lr, lr, r0
 810e154:	fa0c fc03 	lsl.w	ip, ip, r3
 810e158:	f30c 0c1f 	ssat	ip, #32, ip
 810e15c:	fb5c fc10 	smmulr	ip, ip, r0
 810e160:	44ae      	add	lr, r5
 810e162:	44ac      	add	ip, r5

0810e164 <EndScaling_m>:
 810e164:	f30e 0e07 	ssat	lr, #8, lr
 810e168:	9b01      	ldr	r3, [sp, #4]
 810e16a:	f30c 0c07 	ssat	ip, #8, ip
 810e16e:	f36c 2e0f 	bfi	lr, ip, #8, #8
 810e172:	f82b eb02 	strh.w	lr, [fp], #2
 810e176:	459b      	cmp	fp, r3
 810e178:	f6ff af0e 	blt.w	810df98 <MainLoop_m>

0810e17c <Exit_m>:
 810e17c:	b007      	add	sp, #28
 810e17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e182:	bf00      	nop

0810e184 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 810e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e188:	b086      	sub	sp, #24
 810e18a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 810e18e:	9100      	str	r1, [sp, #0]
 810e190:	9203      	str	r2, [sp, #12]
 810e192:	2f00      	cmp	r7, #0
 810e194:	9305      	str	r3, [sp, #20]
 810e196:	bf18      	it	ne
 810e198:	2301      	movne	r3, #1
 810e19a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 810e19c:	fb04 3303 	mla	r3, r4, r3, r3
 810e1a0:	9304      	str	r3, [sp, #16]
 810e1a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810e1a4:	bf14      	ite	ne
 810e1a6:	462f      	movne	r7, r5
 810e1a8:	2701      	moveq	r7, #1
 810e1aa:	9701      	str	r7, [sp, #4]
 810e1ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 810e1b0:	085b      	lsrs	r3, r3, #1
 810e1b2:	f000 809f 	beq.w	810e2f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 810e1b6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 810e1ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810e1bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810e1c0:	9302      	str	r3, [sp, #8]
 810e1c2:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 810e1c6:	9f03      	ldr	r7, [sp, #12]
 810e1c8:	ea5f 089e 	movs.w	r8, lr, lsr #2
 810e1cc:	f8dd c000 	ldr.w	ip, [sp]
 810e1d0:	f857 6b04 	ldr.w	r6, [r7], #4
 810e1d4:	f857 3b04 	ldr.w	r3, [r7], #4
 810e1d8:	9703      	str	r7, [sp, #12]
 810e1da:	461a      	mov	r2, r3
 810e1dc:	4631      	mov	r1, r6
 810e1de:	d022      	beq.n	810e226 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 810e1e0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 810e1e4:	f85c 9b04 	ldr.w	r9, [ip], #4
 810e1e8:	f850 ab04 	ldr.w	sl, [r0], #4
 810e1ec:	f850 5b04 	ldr.w	r5, [r0], #4
 810e1f0:	fb2a 6609 	smlad	r6, sl, r9, r6
 810e1f4:	fb2a 1107 	smlad	r1, sl, r7, r1
 810e1f8:	fb25 3309 	smlad	r3, r5, r9, r3
 810e1fc:	fb25 2207 	smlad	r2, r5, r7, r2
 810e200:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 810e204:	f85c 9b04 	ldr.w	r9, [ip], #4
 810e208:	f850 ab04 	ldr.w	sl, [r0], #4
 810e20c:	f850 5b04 	ldr.w	r5, [r0], #4
 810e210:	fb2a 6609 	smlad	r6, sl, r9, r6
 810e214:	fb2a 1107 	smlad	r1, sl, r7, r1
 810e218:	fb25 3309 	smlad	r3, r5, r9, r3
 810e21c:	fb25 2207 	smlad	r2, r5, r7, r2
 810e220:	f1b8 0801 	subs.w	r8, r8, #1
 810e224:	d1dc      	bne.n	810e1e0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 810e226:	f00e 0703 	and.w	r7, lr, #3
 810e22a:	b18f      	cbz	r7, 810e250 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 810e22c:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 810e230:	f93c ab02 	ldrsh.w	sl, [ip], #2
 810e234:	f930 5b02 	ldrsh.w	r5, [r0], #2
 810e238:	f930 9b02 	ldrsh.w	r9, [r0], #2
 810e23c:	fb0a 6605 	mla	r6, sl, r5, r6
 810e240:	fb09 330a 	mla	r3, r9, sl, r3
 810e244:	fb08 1105 	mla	r1, r8, r5, r1
 810e248:	fb09 2208 	mla	r2, r9, r8, r2
 810e24c:	3f01      	subs	r7, #1
 810e24e:	dced      	bgt.n	810e22c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 810e250:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 810e254:	9f15      	ldr	r7, [sp, #84]	; 0x54
 810e256:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 810e25a:	f857 cb04 	ldr.w	ip, [r7], #4
 810e25e:	f85b 5b04 	ldr.w	r5, [fp], #4
 810e262:	f1c4 0915 	rsb	r9, r4, #21
 810e266:	ea99 0904 	eors.w	r9, r9, r4
 810e26a:	f340 80c8 	ble.w	810e3fe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 810e26e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 810e272:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e276:	fb56 c605 	smmla	r6, r6, r5, ip
 810e27a:	fb51 c105 	smmla	r1, r1, r5, ip
 810e27e:	fa46 f604 	asr.w	r6, r6, r4
 810e282:	fa41 f104 	asr.w	r1, r1, r4
 810e286:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 810e28a:	f857 cb04 	ldr.w	ip, [r7], #4
 810e28e:	f85b 5b04 	ldr.w	r5, [fp], #4
 810e292:	f1c4 0915 	rsb	r9, r4, #21
 810e296:	ea99 0904 	eors.w	r9, r9, r4
 810e29a:	f340 8099 	ble.w	810e3d0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 810e29e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e2a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e2a6:	fb53 c305 	smmla	r3, r3, r5, ip
 810e2aa:	fb52 c205 	smmla	r2, r2, r5, ip
 810e2ae:	fa43 f304 	asr.w	r3, r3, r4
 810e2b2:	fa42 f204 	asr.w	r2, r2, r4
 810e2b6:	f306 0607 	ssat	r6, #8, r6
 810e2ba:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810e2be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 810e2c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 810e2c4:	7026      	strb	r6, [r4, #0]
 810e2c6:	44a0      	add	r8, r4
 810e2c8:	f301 0107 	ssat	r1, #8, r1
 810e2cc:	f888 1000 	strb.w	r1, [r8]
 810e2d0:	f303 0307 	ssat	r3, #8, r3
 810e2d4:	f804 3009 	strb.w	r3, [r4, r9]
 810e2d8:	f302 0207 	ssat	r2, #8, r2
 810e2dc:	f808 2009 	strb.w	r2, [r8, r9]
 810e2e0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 810e2e4:	9217      	str	r2, [sp, #92]	; 0x5c
 810e2e6:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 810e2ea:	9c02      	ldr	r4, [sp, #8]
 810e2ec:	9715      	str	r7, [sp, #84]	; 0x54
 810e2ee:	45a2      	cmp	sl, r4
 810e2f0:	f47f af67 	bne.w	810e1c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 810e2f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810e2f6:	f013 0301 	ands.w	r3, r3, #1
 810e2fa:	d054      	beq.n	810e3a6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 810e2fc:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 810e300:	9b03      	ldr	r3, [sp, #12]
 810e302:	f8dd c000 	ldr.w	ip, [sp]
 810e306:	6819      	ldr	r1, [r3, #0]
 810e308:	ea5f 079e 	movs.w	r7, lr, lsr #2
 810e30c:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 810e310:	460e      	mov	r6, r1
 810e312:	d015      	beq.n	810e340 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 810e314:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 810e318:	f85c 8b04 	ldr.w	r8, [ip], #4
 810e31c:	f850 ab04 	ldr.w	sl, [r0], #4
 810e320:	f850 3b04 	ldr.w	r3, [r0], #4
 810e324:	fb2a 6608 	smlad	r6, sl, r8, r6
 810e328:	fb2a 1105 	smlad	r1, sl, r5, r1
 810e32c:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 810e330:	f85c 8b04 	ldr.w	r8, [ip], #4
 810e334:	fb23 6608 	smlad	r6, r3, r8, r6
 810e338:	fb23 110a 	smlad	r1, r3, sl, r1
 810e33c:	3f01      	subs	r7, #1
 810e33e:	d1e9      	bne.n	810e314 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 810e340:	f01e 0703 	ands.w	r7, lr, #3
 810e344:	d00b      	beq.n	810e35e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 810e346:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 810e34a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 810e34e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 810e352:	fb19 660a 	smlabb	r6, r9, sl, r6
 810e356:	3f01      	subs	r7, #1
 810e358:	fb13 110a 	smlabb	r1, r3, sl, r1
 810e35c:	dcf3      	bgt.n	810e346 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 810e35e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 810e362:	9f15      	ldr	r7, [sp, #84]	; 0x54
 810e364:	f9ba 4000 	ldrsh.w	r4, [sl]
 810e368:	f8d7 c000 	ldr.w	ip, [r7]
 810e36c:	f8db 5000 	ldr.w	r5, [fp]
 810e370:	f1c4 0915 	rsb	r9, r4, #21
 810e374:	ea99 0904 	eors.w	r9, r9, r4
 810e378:	dd58      	ble.n	810e42c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 810e37a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 810e37e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e382:	fb56 c605 	smmla	r6, r6, r5, ip
 810e386:	fb51 c105 	smmla	r1, r1, r5, ip
 810e38a:	fa46 f604 	asr.w	r6, r6, r4
 810e38e:	fa41 f104 	asr.w	r1, r1, r4
 810e392:	f306 0607 	ssat	r6, #8, r6
 810e396:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810e398:	9c04      	ldr	r4, [sp, #16]
 810e39a:	7016      	strb	r6, [r2, #0]
 810e39c:	f301 0107 	ssat	r1, #8, r1
 810e3a0:	5511      	strb	r1, [r2, r4]
 810e3a2:	9b01      	ldr	r3, [sp, #4]
 810e3a4:	441a      	add	r2, r3
 810e3a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 810e3a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 810e3aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 810e3ac:	b133      	cbz	r3, 810e3bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 810e3ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e3b0:	f104 0002 	add.w	r0, r4, #2
 810e3b4:	fb03 0011 	mls	r0, r3, r1, r0
 810e3b8:	4410      	add	r0, r2
 810e3ba:	e006      	b.n	810e3ca <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 810e3bc:	eba2 0001 	sub.w	r0, r2, r1
 810e3c0:	9a05      	ldr	r2, [sp, #20]
 810e3c2:	f104 0402 	add.w	r4, r4, #2
 810e3c6:	fb02 0004 	mla	r0, r2, r4, r0
 810e3ca:	b006      	add	sp, #24
 810e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e3d0:	2c00      	cmp	r4, #0
 810e3d2:	dd42      	ble.n	810e45a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 810e3d4:	f04f 0901 	mov.w	r9, #1
 810e3d8:	fa09 f904 	lsl.w	r9, r9, r4
 810e3dc:	ea4f 09a9 	mov.w	r9, r9, asr #2
 810e3e0:	fb53 9305 	smmla	r3, r3, r5, r9
 810e3e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e3e8:	fa43 f304 	asr.w	r3, r3, r4
 810e3ec:	4463      	add	r3, ip
 810e3ee:	fb52 9205 	smmla	r2, r2, r5, r9
 810e3f2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e3f6:	fa42 f204 	asr.w	r2, r2, r4
 810e3fa:	4462      	add	r2, ip
 810e3fc:	e75b      	b.n	810e2b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 810e3fe:	2c00      	cmp	r4, #0
 810e400:	dd3c      	ble.n	810e47c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 810e402:	f04f 0901 	mov.w	r9, #1
 810e406:	fa09 f904 	lsl.w	r9, r9, r4
 810e40a:	ea4f 09a9 	mov.w	r9, r9, asr #2
 810e40e:	fb56 9605 	smmla	r6, r6, r5, r9
 810e412:	ea4f 0646 	mov.w	r6, r6, lsl #1
 810e416:	fa46 f604 	asr.w	r6, r6, r4
 810e41a:	4466      	add	r6, ip
 810e41c:	fb51 9105 	smmla	r1, r1, r5, r9
 810e420:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e424:	fa41 f104 	asr.w	r1, r1, r4
 810e428:	4461      	add	r1, ip
 810e42a:	e72c      	b.n	810e286 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 810e42c:	2c00      	cmp	r4, #0
 810e42e:	dd36      	ble.n	810e49e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 810e430:	f04f 0901 	mov.w	r9, #1
 810e434:	fa09 f904 	lsl.w	r9, r9, r4
 810e438:	ea4f 09a9 	mov.w	r9, r9, asr #2
 810e43c:	fb56 9605 	smmla	r6, r6, r5, r9
 810e440:	ea4f 0646 	mov.w	r6, r6, lsl #1
 810e444:	fa46 f604 	asr.w	r6, r6, r4
 810e448:	4466      	add	r6, ip
 810e44a:	fb51 9105 	smmla	r1, r1, r5, r9
 810e44e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e452:	fa41 f104 	asr.w	r1, r1, r4
 810e456:	4461      	add	r1, ip
 810e458:	e79b      	b.n	810e392 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 810e45a:	f1c4 0901 	rsb	r9, r4, #1
 810e45e:	fa03 f309 	lsl.w	r3, r3, r9
 810e462:	f303 031f 	ssat	r3, #32, r3
 810e466:	fb53 f315 	smmulr	r3, r3, r5
 810e46a:	fa02 f209 	lsl.w	r2, r2, r9
 810e46e:	f302 021f 	ssat	r2, #32, r2
 810e472:	fb52 f215 	smmulr	r2, r2, r5
 810e476:	4463      	add	r3, ip
 810e478:	4462      	add	r2, ip
 810e47a:	e71c      	b.n	810e2b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 810e47c:	f1c4 0901 	rsb	r9, r4, #1
 810e480:	fa06 f609 	lsl.w	r6, r6, r9
 810e484:	f306 061f 	ssat	r6, #32, r6
 810e488:	fb56 f615 	smmulr	r6, r6, r5
 810e48c:	fa01 f109 	lsl.w	r1, r1, r9
 810e490:	f301 011f 	ssat	r1, #32, r1
 810e494:	fb51 f115 	smmulr	r1, r1, r5
 810e498:	4466      	add	r6, ip
 810e49a:	4461      	add	r1, ip
 810e49c:	e6f3      	b.n	810e286 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 810e49e:	f1c4 0901 	rsb	r9, r4, #1
 810e4a2:	fa06 f609 	lsl.w	r6, r6, r9
 810e4a6:	f306 061f 	ssat	r6, #32, r6
 810e4aa:	fb56 f615 	smmulr	r6, r6, r5
 810e4ae:	fa01 f109 	lsl.w	r1, r1, r9
 810e4b2:	f301 011f 	ssat	r1, #32, r1
 810e4b6:	fb51 f115 	smmulr	r1, r1, r5
 810e4ba:	4466      	add	r6, ip
 810e4bc:	4461      	add	r1, ip
 810e4be:	e768      	b.n	810e392 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

0810e4c0 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 810e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e4c4:	b099      	sub	sp, #100	; 0x64
 810e4c6:	9014      	str	r0, [sp, #80]	; 0x50
 810e4c8:	9113      	str	r1, [sp, #76]	; 0x4c
 810e4ca:	9216      	str	r2, [sp, #88]	; 0x58
 810e4cc:	9312      	str	r3, [sp, #72]	; 0x48
 810e4ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
 810e4d0:	f000 0303 	and.w	r3, r0, #3
 810e4d4:	2b03      	cmp	r3, #3
 810e4d6:	bf0c      	ite	eq
 810e4d8:	2601      	moveq	r6, #1
 810e4da:	2600      	movne	r6, #0
 810e4dc:	9617      	str	r6, [sp, #92]	; 0x5c
 810e4de:	2803      	cmp	r0, #3
 810e4e0:	bf0c      	ite	eq
 810e4e2:	2601      	moveq	r6, #1
 810e4e4:	2600      	movne	r6, #0
 810e4e6:	9618      	str	r6, [sp, #96]	; 0x60
 810e4e8:	f010 0002 	ands.w	r0, r0, #2
 810e4ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 810e4ee:	2800      	cmp	r0, #0
 810e4f0:	bf14      	ite	ne
 810e4f2:	4618      	movne	r0, r3
 810e4f4:	2001      	moveq	r0, #1
 810e4f6:	9010      	str	r0, [sp, #64]	; 0x40
 810e4f8:	9826      	ldr	r0, [sp, #152]	; 0x98
 810e4fa:	bf0c      	ite	eq
 810e4fc:	4606      	moveq	r6, r0
 810e4fe:	2601      	movne	r6, #1
 810e500:	9611      	str	r6, [sp, #68]	; 0x44
 810e502:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	; 0xb0
 810e506:	2c00      	cmp	r4, #0
 810e508:	bf18      	it	ne
 810e50a:	4620      	movne	r0, r4
 810e50c:	902c      	str	r0, [sp, #176]	; 0xb0
 810e50e:	9826      	ldr	r0, [sp, #152]	; 0x98
 810e510:	2801      	cmp	r0, #1
 810e512:	f340 81be 	ble.w	810e892 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 810e516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e51a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 810e51c:	f014 0f02 	tst.w	r4, #2
 810e520:	d101      	bne.n	810e526 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 810e522:	f04f 0302 	mov.w	r3, #2
 810e526:	9315      	str	r3, [sp, #84]	; 0x54
 810e528:	f04f 0800 	mov.w	r8, #0
 810e52c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 810e530:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 810e534:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810e536:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 810e53a:	f9b2 3000 	ldrsh.w	r3, [r2]
 810e53e:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 810e542:	e9cd 3404 	strd	r3, r4, [sp, #16]
 810e546:	9a22      	ldr	r2, [sp, #136]	; 0x88
 810e548:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 810e54c:	e9d2 1200 	ldrd	r1, r2, [r2]
 810e550:	e9cd 1202 	strd	r1, r2, [sp, #8]
 810e554:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 810e556:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 810e55a:	e9d2 1200 	ldrd	r1, r2, [r2]
 810e55e:	e9cd 1200 	strd	r1, r2, [sp]
 810e562:	2b00      	cmp	r3, #0
 810e564:	bfcc      	ite	gt
 810e566:	2000      	movgt	r0, #0
 810e568:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 810e56c:	2b15      	cmp	r3, #21
 810e56e:	bfc8      	it	gt
 810e570:	2001      	movgt	r0, #1
 810e572:	2c00      	cmp	r4, #0
 810e574:	bfcc      	ite	gt
 810e576:	2100      	movgt	r1, #0
 810e578:	f04f 31ff 	movle.w	r1, #4294967295	; 0xffffffff
 810e57c:	2c15      	cmp	r4, #21
 810e57e:	bfc8      	it	gt
 810e580:	2101      	movgt	r1, #1
 810e582:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810e586:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 810e588:	2b00      	cmp	r3, #0
 810e58a:	f000 8297 	beq.w	810eabc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 810e58e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 810e590:	2b00      	cmp	r3, #0
 810e592:	f040 82bb 	bne.w	810eb0c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 810e596:	461a      	mov	r2, r3
 810e598:	4618      	mov	r0, r3
 810e59a:	9916      	ldr	r1, [sp, #88]	; 0x58
 810e59c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 810e5a0:	e9d1 3400 	ldrd	r3, r4, [r1]
 810e5a4:	4403      	add	r3, r0
 810e5a6:	4414      	add	r4, r2
 810e5a8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 810e5ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810e5ae:	9824      	ldr	r0, [sp, #144]	; 0x90
 810e5b0:	9918      	ldr	r1, [sp, #96]	; 0x60
 810e5b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 810e5b4:	2900      	cmp	r1, #0
 810e5b6:	bf1c      	itt	ne
 810e5b8:	3203      	addne	r2, #3
 810e5ba:	18d2      	addne	r2, r2, r3
 810e5bc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 810e5c0:	920b      	str	r2, [sp, #44]	; 0x2c
 810e5c2:	1040      	asrs	r0, r0, #1
 810e5c4:	f000 8144 	beq.w	810e850 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 810e5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 810e5ca:	900e      	str	r0, [sp, #56]	; 0x38
 810e5cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810e5ce:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 810e5d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810e5d2:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 810e5d4:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 810e5d8:	46e2      	mov	sl, ip
 810e5da:	46f3      	mov	fp, lr
 810e5dc:	4413      	add	r3, r2
 810e5de:	930c      	str	r3, [sp, #48]	; 0x30
 810e5e0:	ea5f 1827 	movs.w	r8, r7, asr #4
 810e5e4:	f000 8094 	beq.w	810e710 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 810e5e8:	f859 5007 	ldr.w	r5, [r9, r7]
 810e5ec:	f856 0b04 	ldr.w	r0, [r6], #4
 810e5f0:	f856 1b04 	ldr.w	r1, [r6], #4
 810e5f4:	f856 2b04 	ldr.w	r2, [r6], #4
 810e5f8:	f856 3b04 	ldr.w	r3, [r6], #4
 810e5fc:	fa2f f485 	sxtb16	r4, r5
 810e600:	fa2f f595 	sxtb16	r5, r5, ror #8
 810e604:	fb24 aa00 	smlad	sl, r4, r0, sl
 810e608:	fb24 bb02 	smlad	fp, r4, r2, fp
 810e60c:	fb25 aa01 	smlad	sl, r5, r1, sl
 810e610:	fb25 bb03 	smlad	fp, r5, r3, fp
 810e614:	f859 4b04 	ldr.w	r4, [r9], #4
 810e618:	fa2f f584 	sxtb16	r5, r4
 810e61c:	fa2f f494 	sxtb16	r4, r4, ror #8
 810e620:	fb25 cc00 	smlad	ip, r5, r0, ip
 810e624:	fb25 ee02 	smlad	lr, r5, r2, lr
 810e628:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e62c:	fb24 ee03 	smlad	lr, r4, r3, lr
 810e630:	f859 5007 	ldr.w	r5, [r9, r7]
 810e634:	f856 0b04 	ldr.w	r0, [r6], #4
 810e638:	f856 1b04 	ldr.w	r1, [r6], #4
 810e63c:	f856 2b04 	ldr.w	r2, [r6], #4
 810e640:	f856 3b04 	ldr.w	r3, [r6], #4
 810e644:	fa2f f485 	sxtb16	r4, r5
 810e648:	fa2f f595 	sxtb16	r5, r5, ror #8
 810e64c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810e650:	fb24 bb02 	smlad	fp, r4, r2, fp
 810e654:	fb25 aa01 	smlad	sl, r5, r1, sl
 810e658:	fb25 bb03 	smlad	fp, r5, r3, fp
 810e65c:	f859 4b04 	ldr.w	r4, [r9], #4
 810e660:	fa2f f584 	sxtb16	r5, r4
 810e664:	fa2f f494 	sxtb16	r4, r4, ror #8
 810e668:	fb25 cc00 	smlad	ip, r5, r0, ip
 810e66c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810e670:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e674:	fb24 ee03 	smlad	lr, r4, r3, lr
 810e678:	f859 5007 	ldr.w	r5, [r9, r7]
 810e67c:	f856 0b04 	ldr.w	r0, [r6], #4
 810e680:	f856 1b04 	ldr.w	r1, [r6], #4
 810e684:	f856 2b04 	ldr.w	r2, [r6], #4
 810e688:	f856 3b04 	ldr.w	r3, [r6], #4
 810e68c:	fa2f f485 	sxtb16	r4, r5
 810e690:	fa2f f595 	sxtb16	r5, r5, ror #8
 810e694:	fb24 aa00 	smlad	sl, r4, r0, sl
 810e698:	fb24 bb02 	smlad	fp, r4, r2, fp
 810e69c:	fb25 aa01 	smlad	sl, r5, r1, sl
 810e6a0:	fb25 bb03 	smlad	fp, r5, r3, fp
 810e6a4:	f859 4b04 	ldr.w	r4, [r9], #4
 810e6a8:	fa2f f584 	sxtb16	r5, r4
 810e6ac:	fa2f f494 	sxtb16	r4, r4, ror #8
 810e6b0:	fb25 cc00 	smlad	ip, r5, r0, ip
 810e6b4:	fb25 ee02 	smlad	lr, r5, r2, lr
 810e6b8:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e6bc:	fb24 ee03 	smlad	lr, r4, r3, lr
 810e6c0:	f859 5007 	ldr.w	r5, [r9, r7]
 810e6c4:	f856 0b04 	ldr.w	r0, [r6], #4
 810e6c8:	f856 1b04 	ldr.w	r1, [r6], #4
 810e6cc:	f856 2b04 	ldr.w	r2, [r6], #4
 810e6d0:	f856 3b04 	ldr.w	r3, [r6], #4
 810e6d4:	fa2f f485 	sxtb16	r4, r5
 810e6d8:	fa2f f595 	sxtb16	r5, r5, ror #8
 810e6dc:	fb24 aa00 	smlad	sl, r4, r0, sl
 810e6e0:	fb24 bb02 	smlad	fp, r4, r2, fp
 810e6e4:	fb25 aa01 	smlad	sl, r5, r1, sl
 810e6e8:	fb25 bb03 	smlad	fp, r5, r3, fp
 810e6ec:	f859 4b04 	ldr.w	r4, [r9], #4
 810e6f0:	fa2f f584 	sxtb16	r5, r4
 810e6f4:	fa2f f494 	sxtb16	r4, r4, ror #8
 810e6f8:	fb25 cc00 	smlad	ip, r5, r0, ip
 810e6fc:	fb25 ee02 	smlad	lr, r5, r2, lr
 810e700:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e704:	fb24 ee03 	smlad	lr, r4, r3, lr
 810e708:	f1b8 0801 	subs.w	r8, r8, #1
 810e70c:	f73f af6c 	bgt.w	810e5e8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 810e710:	f017 000f 	ands.w	r0, r7, #15
 810e714:	d046      	beq.n	810e7a4 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 810e716:	f3c7 0881 	ubfx	r8, r7, #2, #2
 810e71a:	f1b8 0f00 	cmp.w	r8, #0
 810e71e:	d026      	beq.n	810e76e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 810e720:	f859 5007 	ldr.w	r5, [r9, r7]
 810e724:	f856 0b04 	ldr.w	r0, [r6], #4
 810e728:	f856 1b04 	ldr.w	r1, [r6], #4
 810e72c:	f856 2b04 	ldr.w	r2, [r6], #4
 810e730:	f856 3b04 	ldr.w	r3, [r6], #4
 810e734:	fa2f f485 	sxtb16	r4, r5
 810e738:	fa2f f595 	sxtb16	r5, r5, ror #8
 810e73c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810e740:	fb24 bb02 	smlad	fp, r4, r2, fp
 810e744:	fb25 aa01 	smlad	sl, r5, r1, sl
 810e748:	fb25 bb03 	smlad	fp, r5, r3, fp
 810e74c:	f859 4b04 	ldr.w	r4, [r9], #4
 810e750:	fa2f f584 	sxtb16	r5, r4
 810e754:	fa2f f494 	sxtb16	r4, r4, ror #8
 810e758:	fb25 cc00 	smlad	ip, r5, r0, ip
 810e75c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810e760:	fb24 cc01 	smlad	ip, r4, r1, ip
 810e764:	fb24 ee03 	smlad	lr, r4, r3, lr
 810e768:	f1b8 0801 	subs.w	r8, r8, #1
 810e76c:	dcd8      	bgt.n	810e720 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 810e76e:	f017 0803 	ands.w	r8, r7, #3
 810e772:	f1b8 0f00 	cmp.w	r8, #0
 810e776:	d015      	beq.n	810e7a4 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 810e778:	9827      	ldr	r0, [sp, #156]	; 0x9c
 810e77a:	f936 3b02 	ldrsh.w	r3, [r6], #2
 810e77e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 810e782:	f999 1000 	ldrsb.w	r1, [r9]
 810e786:	fb13 cc01 	smlabb	ip, r3, r1, ip
 810e78a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 810e78e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 810e792:	fb13 aa01 	smlabb	sl, r3, r1, sl
 810e796:	fb15 bb01 	smlabb	fp, r5, r1, fp
 810e79a:	f109 0901 	add.w	r9, r9, #1
 810e79e:	f1b8 0801 	subs.w	r8, r8, #1
 810e7a2:	dcea      	bgt.n	810e77a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 810e7a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 810e7a6:	462e      	mov	r6, r5
 810e7a8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810e7aa:	b168      	cbz	r0, 810e7c8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 810e7ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810e7ae:	1e90      	subs	r0, r2, #2
 810e7b0:	dc09      	bgt.n	810e7c6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 810e7b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 810e7b4:	f1c2 0202 	rsb	r2, r2, #2
 810e7b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 810e7bc:	920c      	str	r2, [sp, #48]	; 0x30
 810e7be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 810e7c0:	4410      	add	r0, r2
 810e7c2:	f105 0502 	add.w	r5, r5, #2
 810e7c6:	900f      	str	r0, [sp, #60]	; 0x3c
 810e7c8:	9800      	ldr	r0, [sp, #0]
 810e7ca:	9902      	ldr	r1, [sp, #8]
 810e7cc:	9a04      	ldr	r2, [sp, #16]
 810e7ce:	9b06      	ldr	r3, [sp, #24]
 810e7d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 810e7d2:	2b00      	cmp	r3, #0
 810e7d4:	f040 80c9 	bne.w	810e96a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 810e7d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810e7dc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 810e7e0:	fb5c 0c01 	smmla	ip, ip, r1, r0
 810e7e4:	fb5a 0a01 	smmla	sl, sl, r1, r0
 810e7e8:	fa4c fc02 	asr.w	ip, ip, r2
 810e7ec:	fa4a fa02 	asr.w	sl, sl, r2
 810e7f0:	f30c 0c07 	ssat	ip, #8, ip
 810e7f4:	f30a 0a07 	ssat	sl, #8, sl
 810e7f8:	f886 c000 	strb.w	ip, [r6]
 810e7fc:	f887 a000 	strb.w	sl, [r7]
 810e800:	9801      	ldr	r0, [sp, #4]
 810e802:	9903      	ldr	r1, [sp, #12]
 810e804:	9a05      	ldr	r2, [sp, #20]
 810e806:	9b07      	ldr	r3, [sp, #28]
 810e808:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 810e80c:	2b00      	cmp	r3, #0
 810e80e:	f040 80d4 	bne.w	810e9ba <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 810e812:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810e816:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 810e81a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 810e81e:	fb5b 0b01 	smmla	fp, fp, r1, r0
 810e822:	fa4e fe02 	asr.w	lr, lr, r2
 810e826:	fa4b fb02 	asr.w	fp, fp, r2
 810e82a:	f30e 0e07 	ssat	lr, #8, lr
 810e82e:	f30b 0b07 	ssat	fp, #8, fp
 810e832:	f806 e008 	strb.w	lr, [r6, r8]
 810e836:	f807 b008 	strb.w	fp, [r7, r8]
 810e83a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810e83c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 810e83e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 810e842:	930b      	str	r3, [sp, #44]	; 0x2c
 810e844:	4491      	add	r9, r2
 810e846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810e848:	3b01      	subs	r3, #1
 810e84a:	930e      	str	r3, [sp, #56]	; 0x38
 810e84c:	f47f aebe 	bne.w	810e5cc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 810e850:	f8cd 9020 	str.w	r9, [sp, #32]
 810e854:	9b24      	ldr	r3, [sp, #144]	; 0x90
 810e856:	f013 0f01 	tst.w	r3, #1
 810e85a:	f040 80d6 	bne.w	810ea0a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 810e85e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810e860:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 810e862:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 810e866:	9313      	str	r3, [sp, #76]	; 0x4c
 810e868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810e86a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810e86c:	4413      	add	r3, r2
 810e86e:	9312      	str	r3, [sp, #72]	; 0x48
 810e870:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 810e872:	b123      	cbz	r3, 810e87e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 810e874:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 810e876:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 810e878:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 810e87c:	932c      	str	r3, [sp, #176]	; 0xb0
 810e87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810e880:	9b26      	ldr	r3, [sp, #152]	; 0x98
 810e882:	ea4f 0363 	mov.w	r3, r3, asr #1
 810e886:	f102 0201 	add.w	r2, r2, #1
 810e88a:	920d      	str	r2, [sp, #52]	; 0x34
 810e88c:	4293      	cmp	r3, r2
 810e88e:	f73f ae4f 	bgt.w	810e530 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 810e892:	9d26      	ldr	r5, [sp, #152]	; 0x98
 810e894:	f015 0501 	ands.w	r5, r5, #1
 810e898:	d060      	beq.n	810e95c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 810e89a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 810e89e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 810e8a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 810e8a2:	2d00      	cmp	r5, #0
 810e8a4:	bf1c      	itt	ne
 810e8a6:	3603      	addne	r6, #3
 810e8a8:	4446      	addne	r6, r8
 810e8aa:	9924      	ldr	r1, [sp, #144]	; 0x90
 810e8ac:	2900      	cmp	r1, #0
 810e8ae:	dd55      	ble.n	810e95c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 810e8b0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 810e8b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 810e8b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
 810e8b8:	f1a7 0701 	sub.w	r7, r7, #1
 810e8bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810e8c0:	f8dc c000 	ldr.w	ip, [ip]
 810e8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 810e8c6:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 810e8ca:	6824      	ldr	r4, [r4, #0]
 810e8cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 810e8ce:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 810e8d2:	6800      	ldr	r0, [r0, #0]
 810e8d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 810e8d6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 810e8da:	f9b7 7000 	ldrsh.w	r7, [r7]
 810e8de:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810e8e0:	2f00      	cmp	r7, #0
 810e8e2:	bfcc      	ite	gt
 810e8e4:	f04f 0900 	movgt.w	r9, #0
 810e8e8:	f04f 39ff 	movle.w	r9, #4294967295	; 0xffffffff
 810e8ec:	2f15      	cmp	r7, #21
 810e8ee:	bfc8      	it	gt
 810e8f0:	f04f 0901 	movgt.w	r9, #1
 810e8f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 810e8f6:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 810e8fa:	f1bb 0f00 	cmp.w	fp, #0
 810e8fe:	46e6      	mov	lr, ip
 810e900:	dd0c      	ble.n	810e91c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 810e902:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 810e906:	f915 3b01 	ldrsb.w	r3, [r5], #1
 810e90a:	f918 ab01 	ldrsb.w	sl, [r8], #1
 810e90e:	eba3 0302 	sub.w	r3, r3, r2
 810e912:	fb0a ee03 	mla	lr, sl, r3, lr
 810e916:	f1bb 0b01 	subs.w	fp, fp, #1
 810e91a:	dcf4      	bgt.n	810e906 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 810e91c:	f1b9 0f00 	cmp.w	r9, #0
 810e920:	f040 8164 	bne.w	810ebec <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 810e924:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810e928:	fb5e 0e04 	smmla	lr, lr, r4, r0
 810e92c:	fa4e fe07 	asr.w	lr, lr, r7
 810e930:	f30e 0e07 	ssat	lr, #8, lr
 810e934:	f886 e000 	strb.w	lr, [r6]
 810e938:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 810e93a:	f013 0f02 	tst.w	r3, #2
 810e93e:	d011      	beq.n	810e964 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 810e940:	f013 0f01 	tst.w	r3, #1
 810e944:	d005      	beq.n	810e952 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 810e946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e948:	3b01      	subs	r3, #1
 810e94a:	d102      	bne.n	810e952 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 810e94c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 810e94e:	f106 0602 	add.w	r6, r6, #2
 810e952:	f106 0601 	add.w	r6, r6, #1
 810e956:	930f      	str	r3, [sp, #60]	; 0x3c
 810e958:	3901      	subs	r1, #1
 810e95a:	dccc      	bgt.n	810e8f6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 810e95c:	2000      	movs	r0, #0
 810e95e:	b019      	add	sp, #100	; 0x64
 810e960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e964:	9b26      	ldr	r3, [sp, #152]	; 0x98
 810e966:	441e      	add	r6, r3
 810e968:	e7f6      	b.n	810e958 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 810e96a:	3301      	adds	r3, #1
 810e96c:	d014      	beq.n	810e998 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 810e96e:	f04f 0301 	mov.w	r3, #1
 810e972:	fa03 f302 	lsl.w	r3, r3, r2
 810e976:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810e97a:	fb5c 3c01 	smmla	ip, ip, r1, r3
 810e97e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810e982:	fa4c fc02 	asr.w	ip, ip, r2
 810e986:	4484      	add	ip, r0
 810e988:	fb5a 3a01 	smmla	sl, sl, r1, r3
 810e98c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 810e990:	fa4a fa02 	asr.w	sl, sl, r2
 810e994:	4482      	add	sl, r0
 810e996:	e72b      	b.n	810e7f0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 810e998:	f1c2 0301 	rsb	r3, r2, #1
 810e99c:	fa0c fc03 	lsl.w	ip, ip, r3
 810e9a0:	f30c 0c1f 	ssat	ip, #32, ip
 810e9a4:	fb5c fc11 	smmulr	ip, ip, r1
 810e9a8:	fa0a fa03 	lsl.w	sl, sl, r3
 810e9ac:	f30a 0a1f 	ssat	sl, #32, sl
 810e9b0:	fb5a fa11 	smmulr	sl, sl, r1
 810e9b4:	4484      	add	ip, r0
 810e9b6:	4482      	add	sl, r0
 810e9b8:	e71a      	b.n	810e7f0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 810e9ba:	3301      	adds	r3, #1
 810e9bc:	d014      	beq.n	810e9e8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 810e9be:	f04f 0301 	mov.w	r3, #1
 810e9c2:	fa03 f302 	lsl.w	r3, r3, r2
 810e9c6:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810e9ca:	fb5e 3e01 	smmla	lr, lr, r1, r3
 810e9ce:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810e9d2:	fa4e fe02 	asr.w	lr, lr, r2
 810e9d6:	4486      	add	lr, r0
 810e9d8:	fb5b 3b01 	smmla	fp, fp, r1, r3
 810e9dc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 810e9e0:	fa4b fb02 	asr.w	fp, fp, r2
 810e9e4:	4483      	add	fp, r0
 810e9e6:	e720      	b.n	810e82a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 810e9e8:	f1c2 0301 	rsb	r3, r2, #1
 810e9ec:	fa0e fe03 	lsl.w	lr, lr, r3
 810e9f0:	f30e 0e1f 	ssat	lr, #32, lr
 810e9f4:	fb5e fe11 	smmulr	lr, lr, r1
 810e9f8:	fa0b fb03 	lsl.w	fp, fp, r3
 810e9fc:	f30b 0b1f 	ssat	fp, #32, fp
 810ea00:	fb5b fb11 	smmulr	fp, fp, r1
 810ea04:	4486      	add	lr, r0
 810ea06:	4483      	add	fp, r0
 810ea08:	e70f      	b.n	810e82a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 810ea0a:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 810ea0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810ea10:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 810ea12:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 810ea16:	ea5f 08a7 	movs.w	r8, r7, asr #2
 810ea1a:	d018      	beq.n	810ea4e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 810ea1c:	f859 4b04 	ldr.w	r4, [r9], #4
 810ea20:	f856 0b04 	ldr.w	r0, [r6], #4
 810ea24:	f856 1b04 	ldr.w	r1, [r6], #4
 810ea28:	f856 2b04 	ldr.w	r2, [r6], #4
 810ea2c:	f856 3b04 	ldr.w	r3, [r6], #4
 810ea30:	fa2f f584 	sxtb16	r5, r4
 810ea34:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ea38:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ea3c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ea40:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ea44:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ea48:	f1b8 0801 	subs.w	r8, r8, #1
 810ea4c:	dce6      	bgt.n	810ea1c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 810ea4e:	f017 0803 	ands.w	r8, r7, #3
 810ea52:	f1b8 0f00 	cmp.w	r8, #0
 810ea56:	d00c      	beq.n	810ea72 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 810ea58:	f936 3b02 	ldrsh.w	r3, [r6], #2
 810ea5c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 810ea60:	f919 1b01 	ldrsb.w	r1, [r9], #1
 810ea64:	fb13 cc01 	smlabb	ip, r3, r1, ip
 810ea68:	fb15 ee01 	smlabb	lr, r5, r1, lr
 810ea6c:	f1b8 0801 	subs.w	r8, r8, #1
 810ea70:	dcf2      	bgt.n	810ea58 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 810ea72:	9800      	ldr	r0, [sp, #0]
 810ea74:	9902      	ldr	r1, [sp, #8]
 810ea76:	9a04      	ldr	r2, [sp, #16]
 810ea78:	9b06      	ldr	r3, [sp, #24]
 810ea7a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 810ea7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 810ea7e:	4437      	add	r7, r6
 810ea80:	2b00      	cmp	r3, #0
 810ea82:	f040 8099 	bne.w	810ebb8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 810ea86:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810ea8a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 810ea8e:	fa4c fc02 	asr.w	ip, ip, r2
 810ea92:	f30c 0c07 	ssat	ip, #8, ip
 810ea96:	f886 c000 	strb.w	ip, [r6]
 810ea9a:	9801      	ldr	r0, [sp, #4]
 810ea9c:	9903      	ldr	r1, [sp, #12]
 810ea9e:	9a05      	ldr	r2, [sp, #20]
 810eaa0:	9b07      	ldr	r3, [sp, #28]
 810eaa2:	2b00      	cmp	r3, #0
 810eaa4:	d166      	bne.n	810eb74 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 810eaa6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810eaaa:	fb5e 0e01 	smmla	lr, lr, r1, r0
 810eaae:	fa4e fe02 	asr.w	lr, lr, r2
 810eab2:	f30e 0e07 	ssat	lr, #8, lr
 810eab6:	f887 e000 	strb.w	lr, [r7]
 810eaba:	e6d0      	b.n	810e85e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 810eabc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 810eabe:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 810eac0:	eb00 0907 	add.w	r9, r0, r7
 810eac4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 810eac6:	2f03      	cmp	r7, #3
 810eac8:	dd11      	ble.n	810eaee <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 810eaca:	ea4f 06a7 	mov.w	r6, r7, asr #2
 810eace:	f850 1b04 	ldr.w	r1, [r0], #4
 810ead2:	f859 4b04 	ldr.w	r4, [r9], #4
 810ead6:	fa2f f291 	sxtb16	r2, r1, ror #8
 810eada:	fa2f f181 	sxtb16	r1, r1
 810eade:	fa2f f894 	sxtb16	r8, r4, ror #8
 810eae2:	fa2f f484 	sxtb16	r4, r4
 810eae6:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 810eaea:	3e01      	subs	r6, #1
 810eaec:	dcef      	bgt.n	810eace <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 810eaee:	f017 0603 	ands.w	r6, r7, #3
 810eaf2:	f77f ad4c 	ble.w	810e58e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 810eaf6:	f910 1b01 	ldrsb.w	r1, [r0], #1
 810eafa:	f823 1b02 	strh.w	r1, [r3], #2
 810eafe:	f919 1b01 	ldrsb.w	r1, [r9], #1
 810eb02:	f823 1b02 	strh.w	r1, [r3], #2
 810eb06:	3e01      	subs	r6, #1
 810eb08:	dcf5      	bgt.n	810eaf6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 810eb0a:	e540      	b.n	810e58e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 810eb0c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 810eb0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 810eb10:	f04f 0300 	mov.w	r3, #0
 810eb14:	4618      	mov	r0, r3
 810eb16:	10b1      	asrs	r1, r6, #2
 810eb18:	d017      	beq.n	810eb4a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 810eb1a:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 810eb1e:	fa00 f087 	sxtah	r0, r0, r7
 810eb22:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 810eb26:	fa00 f089 	sxtah	r0, r0, r9
 810eb2a:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 810eb2e:	fa03 f38a 	sxtah	r3, r3, sl
 810eb32:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 810eb36:	fa03 f38c 	sxtah	r3, r3, ip
 810eb3a:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 810eb3e:	3901      	subs	r1, #1
 810eb40:	dceb      	bgt.n	810eb1a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 810eb42:	f1c0 0000 	rsb	r0, r0, #0
 810eb46:	f1c3 0300 	rsb	r3, r3, #0
 810eb4a:	f016 0103 	ands.w	r1, r6, #3
 810eb4e:	d00b      	beq.n	810eb68 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 810eb50:	f9b2 4000 	ldrsh.w	r4, [r2]
 810eb54:	eba0 0004 	sub.w	r0, r0, r4
 810eb58:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 810eb5c:	eba3 0304 	sub.w	r3, r3, r4
 810eb60:	3901      	subs	r1, #1
 810eb62:	f102 0204 	add.w	r2, r2, #4
 810eb66:	dcf3      	bgt.n	810eb50 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 810eb68:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810eb6a:	fb02 f000 	mul.w	r0, r2, r0
 810eb6e:	fb03 f202 	mul.w	r2, r3, r2
 810eb72:	e512      	b.n	810e59a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 810eb74:	3301      	adds	r3, #1
 810eb76:	d011      	beq.n	810eb9c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 810eb78:	f04f 0301 	mov.w	r3, #1
 810eb7c:	fa03 f302 	lsl.w	r3, r3, r2
 810eb80:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810eb84:	fb5e 3e01 	smmla	lr, lr, r1, r3
 810eb88:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810eb8c:	fa4e fe02 	asr.w	lr, lr, r2
 810eb90:	4486      	add	lr, r0
 810eb92:	f30e 0e07 	ssat	lr, #8, lr
 810eb96:	f887 e000 	strb.w	lr, [r7]
 810eb9a:	e660      	b.n	810e85e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 810eb9c:	f1c2 0301 	rsb	r3, r2, #1
 810eba0:	fa0e fe03 	lsl.w	lr, lr, r3
 810eba4:	f30e 0e1f 	ssat	lr, #32, lr
 810eba8:	fb5e fe11 	smmulr	lr, lr, r1
 810ebac:	4486      	add	lr, r0
 810ebae:	f30e 0e07 	ssat	lr, #8, lr
 810ebb2:	f887 e000 	strb.w	lr, [r7]
 810ebb6:	e652      	b.n	810e85e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 810ebb8:	3301      	adds	r3, #1
 810ebba:	d00d      	beq.n	810ebd8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 810ebbc:	f04f 0301 	mov.w	r3, #1
 810ebc0:	fa03 f302 	lsl.w	r3, r3, r2
 810ebc4:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810ebc8:	fb5c 3c01 	smmla	ip, ip, r1, r3
 810ebcc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810ebd0:	fa4c fc02 	asr.w	ip, ip, r2
 810ebd4:	4484      	add	ip, r0
 810ebd6:	e75c      	b.n	810ea92 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 810ebd8:	f1c2 0301 	rsb	r3, r2, #1
 810ebdc:	fa0c fc03 	lsl.w	ip, ip, r3
 810ebe0:	f30c 0c1f 	ssat	ip, #32, ip
 810ebe4:	fb5c fc11 	smmulr	ip, ip, r1
 810ebe8:	4484      	add	ip, r0
 810ebea:	e752      	b.n	810ea92 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 810ebec:	1c7b      	adds	r3, r7, #1
 810ebee:	d00d      	beq.n	810ec0c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 810ebf0:	f04f 0301 	mov.w	r3, #1
 810ebf4:	fa03 f307 	lsl.w	r3, r3, r7
 810ebf8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 810ebfc:	fb5e 3e04 	smmla	lr, lr, r4, r3
 810ec00:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810ec04:	fa4e fe07 	asr.w	lr, lr, r7
 810ec08:	4486      	add	lr, r0
 810ec0a:	e691      	b.n	810e930 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 810ec0c:	f1c7 0301 	rsb	r3, r7, #1
 810ec10:	fa0e fe03 	lsl.w	lr, lr, r3
 810ec14:	f30e 0e1f 	ssat	lr, #32, lr
 810ec18:	fb5e fe14 	smmulr	lr, lr, r4
 810ec1c:	4486      	add	lr, r0
 810ec1e:	e687      	b.n	810e930 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

0810ec20 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 810ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec24:	b099      	sub	sp, #100	; 0x64
 810ec26:	bf00      	nop
 810ec28:	9014      	str	r0, [sp, #80]	; 0x50
 810ec2a:	9113      	str	r1, [sp, #76]	; 0x4c
 810ec2c:	9216      	str	r2, [sp, #88]	; 0x58
 810ec2e:	9312      	str	r3, [sp, #72]	; 0x48
 810ec30:	f04f 0800 	mov.w	r8, #0
 810ec34:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 810ec38:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 810ec3c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 810ec3e:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 810ec42:	f9b2 3000 	ldrsh.w	r3, [r2]
 810ec46:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 810ec4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 810ec4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 810ec50:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 810ec54:	e9d2 1200 	ldrd	r1, r2, [r2]
 810ec58:	e9cd 1202 	strd	r1, r2, [sp, #8]
 810ec5c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 810ec5e:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 810ec62:	e9d2 1200 	ldrd	r1, r2, [r2]
 810ec66:	e9cd 1200 	strd	r1, r2, [sp]
 810ec6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 810ec6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 810ec6e:	f04f 0610 	mov.w	r6, #16
 810ec72:	6c04      	ldr	r4, [r0, #64]	; 0x40
 810ec74:	f850 1b04 	ldr.w	r1, [r0], #4
 810ec78:	fa2f f291 	sxtb16	r2, r1, ror #8
 810ec7c:	fa2f f181 	sxtb16	r1, r1
 810ec80:	fa2f f894 	sxtb16	r8, r4, ror #8
 810ec84:	fa2f f484 	sxtb16	r4, r4
 810ec88:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 810ec8c:	3e01      	subs	r6, #1
 810ec8e:	dcf0      	bgt.n	810ec72 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 810ec90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 810ec92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 810ec94:	f04f 0300 	mov.w	r3, #0
 810ec98:	4618      	mov	r0, r3
 810ec9a:	f04f 0110 	mov.w	r1, #16
 810ec9e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 810eca2:	fa00 f088 	sxtah	r0, r0, r8
 810eca6:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 810ecaa:	fa00 f089 	sxtah	r0, r0, r9
 810ecae:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 810ecb2:	fa03 f38a 	sxtah	r3, r3, sl
 810ecb6:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 810ecba:	fa03 f38c 	sxtah	r3, r3, ip
 810ecbe:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 810ecc2:	3901      	subs	r1, #1
 810ecc4:	dceb      	bgt.n	810ec9e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 810ecc6:	f1c0 0000 	rsb	r0, r0, #0
 810ecca:	f1c3 0300 	rsb	r3, r3, #0
 810ecce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 810ecd0:	fb02 f000 	mul.w	r0, r2, r0
 810ecd4:	fb03 f202 	mul.w	r2, r3, r2
 810ecd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 810ecda:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 810ecde:	e9d1 3400 	ldrd	r3, r4, [r1]
 810ece2:	4403      	add	r3, r0
 810ece4:	4414      	add	r4, r2
 810ece6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 810ecea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ecec:	f04f 0305 	mov.w	r3, #5
 810ecf0:	f102 0203 	add.w	r2, r2, #3
 810ecf4:	441a      	add	r2, r3
 810ecf6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 810ecfa:	920b      	str	r2, [sp, #44]	; 0x2c
 810ecfc:	f04f 073e 	mov.w	r7, #62	; 0x3e
 810ed00:	930f      	str	r3, [sp, #60]	; 0x3c
 810ed02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ed04:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 810ed06:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 810ed0a:	46e2      	mov	sl, ip
 810ed0c:	46f3      	mov	fp, lr
 810ed0e:	f103 0301 	add.w	r3, r3, #1
 810ed12:	930c      	str	r3, [sp, #48]	; 0x30
 810ed14:	f04f 0802 	mov.w	r8, #2
 810ed18:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810ed1c:	f856 0b04 	ldr.w	r0, [r6], #4
 810ed20:	f856 1b04 	ldr.w	r1, [r6], #4
 810ed24:	f856 2b04 	ldr.w	r2, [r6], #4
 810ed28:	f856 3b04 	ldr.w	r3, [r6], #4
 810ed2c:	fa2f f485 	sxtb16	r4, r5
 810ed30:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ed34:	fb24 aa00 	smlad	sl, r4, r0, sl
 810ed38:	fb24 bb02 	smlad	fp, r4, r2, fp
 810ed3c:	fb25 aa01 	smlad	sl, r5, r1, sl
 810ed40:	fb25 bb03 	smlad	fp, r5, r3, fp
 810ed44:	f859 4b04 	ldr.w	r4, [r9], #4
 810ed48:	fa2f f584 	sxtb16	r5, r4
 810ed4c:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ed50:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ed54:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ed58:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ed5c:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ed60:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810ed64:	f856 0b04 	ldr.w	r0, [r6], #4
 810ed68:	f856 1b04 	ldr.w	r1, [r6], #4
 810ed6c:	f856 2b04 	ldr.w	r2, [r6], #4
 810ed70:	f856 3b04 	ldr.w	r3, [r6], #4
 810ed74:	fa2f f485 	sxtb16	r4, r5
 810ed78:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ed7c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810ed80:	fb24 bb02 	smlad	fp, r4, r2, fp
 810ed84:	fb25 aa01 	smlad	sl, r5, r1, sl
 810ed88:	fb25 bb03 	smlad	fp, r5, r3, fp
 810ed8c:	f859 4b04 	ldr.w	r4, [r9], #4
 810ed90:	fa2f f584 	sxtb16	r5, r4
 810ed94:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ed98:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ed9c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810eda0:	fb24 cc01 	smlad	ip, r4, r1, ip
 810eda4:	fb24 ee03 	smlad	lr, r4, r3, lr
 810eda8:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810edac:	f856 0b04 	ldr.w	r0, [r6], #4
 810edb0:	f856 1b04 	ldr.w	r1, [r6], #4
 810edb4:	f856 2b04 	ldr.w	r2, [r6], #4
 810edb8:	f856 3b04 	ldr.w	r3, [r6], #4
 810edbc:	fa2f f485 	sxtb16	r4, r5
 810edc0:	fa2f f595 	sxtb16	r5, r5, ror #8
 810edc4:	fb24 aa00 	smlad	sl, r4, r0, sl
 810edc8:	fb24 bb02 	smlad	fp, r4, r2, fp
 810edcc:	fb25 aa01 	smlad	sl, r5, r1, sl
 810edd0:	fb25 bb03 	smlad	fp, r5, r3, fp
 810edd4:	f859 4b04 	ldr.w	r4, [r9], #4
 810edd8:	fa2f f584 	sxtb16	r5, r4
 810eddc:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ede0:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ede4:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ede8:	fb24 cc01 	smlad	ip, r4, r1, ip
 810edec:	fb24 ee03 	smlad	lr, r4, r3, lr
 810edf0:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810edf4:	f856 0b04 	ldr.w	r0, [r6], #4
 810edf8:	f856 1b04 	ldr.w	r1, [r6], #4
 810edfc:	f856 2b04 	ldr.w	r2, [r6], #4
 810ee00:	f856 3b04 	ldr.w	r3, [r6], #4
 810ee04:	fa2f f485 	sxtb16	r4, r5
 810ee08:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ee0c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810ee10:	fb24 bb02 	smlad	fp, r4, r2, fp
 810ee14:	fb25 aa01 	smlad	sl, r5, r1, sl
 810ee18:	fb25 bb03 	smlad	fp, r5, r3, fp
 810ee1c:	f859 4b04 	ldr.w	r4, [r9], #4
 810ee20:	fa2f f584 	sxtb16	r5, r4
 810ee24:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ee28:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ee2c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ee30:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ee34:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ee38:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810ee3c:	f856 0b04 	ldr.w	r0, [r6], #4
 810ee40:	f856 1b04 	ldr.w	r1, [r6], #4
 810ee44:	f856 2b04 	ldr.w	r2, [r6], #4
 810ee48:	f856 3b04 	ldr.w	r3, [r6], #4
 810ee4c:	fa2f f485 	sxtb16	r4, r5
 810ee50:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ee54:	fb24 aa00 	smlad	sl, r4, r0, sl
 810ee58:	fb24 bb02 	smlad	fp, r4, r2, fp
 810ee5c:	fb25 aa01 	smlad	sl, r5, r1, sl
 810ee60:	fb25 bb03 	smlad	fp, r5, r3, fp
 810ee64:	f859 4b04 	ldr.w	r4, [r9], #4
 810ee68:	fa2f f584 	sxtb16	r5, r4
 810ee6c:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ee70:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ee74:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ee78:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ee7c:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ee80:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810ee84:	f856 0b04 	ldr.w	r0, [r6], #4
 810ee88:	f856 1b04 	ldr.w	r1, [r6], #4
 810ee8c:	f856 2b04 	ldr.w	r2, [r6], #4
 810ee90:	f856 3b04 	ldr.w	r3, [r6], #4
 810ee94:	fa2f f485 	sxtb16	r4, r5
 810ee98:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ee9c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810eea0:	fb24 bb02 	smlad	fp, r4, r2, fp
 810eea4:	fb25 aa01 	smlad	sl, r5, r1, sl
 810eea8:	fb25 bb03 	smlad	fp, r5, r3, fp
 810eeac:	f859 4b04 	ldr.w	r4, [r9], #4
 810eeb0:	fa2f f584 	sxtb16	r5, r4
 810eeb4:	fa2f f494 	sxtb16	r4, r4, ror #8
 810eeb8:	fb25 cc00 	smlad	ip, r5, r0, ip
 810eebc:	fb25 ee02 	smlad	lr, r5, r2, lr
 810eec0:	fb24 cc01 	smlad	ip, r4, r1, ip
 810eec4:	fb24 ee03 	smlad	lr, r4, r3, lr
 810eec8:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810eecc:	f856 0b04 	ldr.w	r0, [r6], #4
 810eed0:	f856 1b04 	ldr.w	r1, [r6], #4
 810eed4:	f856 2b04 	ldr.w	r2, [r6], #4
 810eed8:	f856 3b04 	ldr.w	r3, [r6], #4
 810eedc:	fa2f f485 	sxtb16	r4, r5
 810eee0:	fa2f f595 	sxtb16	r5, r5, ror #8
 810eee4:	fb24 aa00 	smlad	sl, r4, r0, sl
 810eee8:	fb24 bb02 	smlad	fp, r4, r2, fp
 810eeec:	fb25 aa01 	smlad	sl, r5, r1, sl
 810eef0:	fb25 bb03 	smlad	fp, r5, r3, fp
 810eef4:	f859 4b04 	ldr.w	r4, [r9], #4
 810eef8:	fa2f f584 	sxtb16	r5, r4
 810eefc:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ef00:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ef04:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ef08:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ef0c:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ef10:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 810ef14:	f856 0b04 	ldr.w	r0, [r6], #4
 810ef18:	f856 1b04 	ldr.w	r1, [r6], #4
 810ef1c:	f856 2b04 	ldr.w	r2, [r6], #4
 810ef20:	f856 3b04 	ldr.w	r3, [r6], #4
 810ef24:	fa2f f485 	sxtb16	r4, r5
 810ef28:	fa2f f595 	sxtb16	r5, r5, ror #8
 810ef2c:	fb24 aa00 	smlad	sl, r4, r0, sl
 810ef30:	fb24 bb02 	smlad	fp, r4, r2, fp
 810ef34:	fb25 aa01 	smlad	sl, r5, r1, sl
 810ef38:	fb25 bb03 	smlad	fp, r5, r3, fp
 810ef3c:	f859 4b04 	ldr.w	r4, [r9], #4
 810ef40:	fa2f f584 	sxtb16	r5, r4
 810ef44:	fa2f f494 	sxtb16	r4, r4, ror #8
 810ef48:	fb25 cc00 	smlad	ip, r5, r0, ip
 810ef4c:	fb25 ee02 	smlad	lr, r5, r2, lr
 810ef50:	fb24 cc01 	smlad	ip, r4, r1, ip
 810ef54:	fb24 ee03 	smlad	lr, r4, r3, lr
 810ef58:	f1b8 0801 	subs.w	r8, r8, #1
 810ef5c:	f73f aedc 	bgt.w	810ed18 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 810ef60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 810ef62:	462e      	mov	r6, r5
 810ef64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 810ef66:	1e90      	subs	r0, r2, #2
 810ef68:	dc09      	bgt.n	810ef7e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x35e>
 810ef6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 810ef6c:	f1c2 0202 	rsb	r2, r2, #2
 810ef70:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 810ef74:	920c      	str	r2, [sp, #48]	; 0x30
 810ef76:	f100 0005 	add.w	r0, r0, #5
 810ef7a:	f105 0502 	add.w	r5, r5, #2
 810ef7e:	900f      	str	r0, [sp, #60]	; 0x3c
 810ef80:	9800      	ldr	r0, [sp, #0]
 810ef82:	9902      	ldr	r1, [sp, #8]
 810ef84:	9a04      	ldr	r2, [sp, #16]
 810ef86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 810ef88:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810ef8c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 810ef90:	fb5c 0c01 	smmla	ip, ip, r1, r0
 810ef94:	fb5a 0a01 	smmla	sl, sl, r1, r0
 810ef98:	fa4c fc02 	asr.w	ip, ip, r2
 810ef9c:	fa4a fa02 	asr.w	sl, sl, r2
 810efa0:	f30c 0c07 	ssat	ip, #8, ip
 810efa4:	f30a 0a07 	ssat	sl, #8, sl
 810efa8:	f886 c000 	strb.w	ip, [r6]
 810efac:	f884 a000 	strb.w	sl, [r4]
 810efb0:	9801      	ldr	r0, [sp, #4]
 810efb2:	9903      	ldr	r1, [sp, #12]
 810efb4:	9a05      	ldr	r2, [sp, #20]
 810efb6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810efba:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 810efbe:	fb5e 0e01 	smmla	lr, lr, r1, r0
 810efc2:	fb5b 0b01 	smmla	fp, fp, r1, r0
 810efc6:	fa4e fe02 	asr.w	lr, lr, r2
 810efca:	fa4b fb02 	asr.w	fp, fp, r2
 810efce:	f30e 0e07 	ssat	lr, #8, lr
 810efd2:	f30b 0b07 	ssat	fp, #8, fp
 810efd6:	f886 e0bd 	strb.w	lr, [r6, #189]	; 0xbd
 810efda:	f884 b0bd 	strb.w	fp, [r4, #189]	; 0xbd
 810efde:	f105 0302 	add.w	r3, r5, #2
 810efe2:	930b      	str	r3, [sp, #44]	; 0x2c
 810efe4:	f109 0940 	add.w	r9, r9, #64	; 0x40
 810efe8:	3f01      	subs	r7, #1
 810efea:	f47f ae8a 	bne.w	810ed02 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 810efee:	f8cd 9020 	str.w	r9, [sp, #32]
 810eff2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810eff6:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 810eff8:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 810effc:	f04f 0810 	mov.w	r8, #16
 810f000:	f859 4b04 	ldr.w	r4, [r9], #4
 810f004:	f856 0b04 	ldr.w	r0, [r6], #4
 810f008:	f856 1b04 	ldr.w	r1, [r6], #4
 810f00c:	f856 2b04 	ldr.w	r2, [r6], #4
 810f010:	f856 3b04 	ldr.w	r3, [r6], #4
 810f014:	fa2f f584 	sxtb16	r5, r4
 810f018:	fa2f f494 	sxtb16	r4, r4, ror #8
 810f01c:	fb25 cc00 	smlad	ip, r5, r0, ip
 810f020:	fb25 ee02 	smlad	lr, r5, r2, lr
 810f024:	fb24 cc01 	smlad	ip, r4, r1, ip
 810f028:	fb24 ee03 	smlad	lr, r4, r3, lr
 810f02c:	f1b8 0801 	subs.w	r8, r8, #1
 810f030:	dce6      	bgt.n	810f000 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x3e0>
 810f032:	9800      	ldr	r0, [sp, #0]
 810f034:	9902      	ldr	r1, [sp, #8]
 810f036:	9a04      	ldr	r2, [sp, #16]
 810f038:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 810f03a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 810f03e:	fb5c 0c01 	smmla	ip, ip, r1, r0
 810f042:	fa4c fc02 	asr.w	ip, ip, r2
 810f046:	f30c 0c07 	ssat	ip, #8, ip
 810f04a:	f886 c000 	strb.w	ip, [r6]
 810f04e:	9801      	ldr	r0, [sp, #4]
 810f050:	9903      	ldr	r1, [sp, #12]
 810f052:	9a05      	ldr	r2, [sp, #20]
 810f054:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 810f058:	fb5e 0e01 	smmla	lr, lr, r1, r0
 810f05c:	fa4e fe02 	asr.w	lr, lr, r2
 810f060:	f30e 0e07 	ssat	lr, #8, lr
 810f064:	f886 e0bd 	strb.w	lr, [r6, #189]	; 0xbd
 810f068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810f06a:	f103 0380 	add.w	r3, r3, #128	; 0x80
 810f06e:	9313      	str	r3, [sp, #76]	; 0x4c
 810f070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810f072:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810f074:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 810f078:	9312      	str	r3, [sp, #72]	; 0x48
 810f07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810f07c:	f102 0201 	add.w	r2, r2, #1
 810f080:	920d      	str	r2, [sp, #52]	; 0x34
 810f082:	2a20      	cmp	r2, #32
 810f084:	f6ff add8 	blt.w	810ec38 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 810f088:	2000      	movs	r0, #0
 810f08a:	b019      	add	sp, #100	; 0x64
 810f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810f090 <ai_sum_f32>:
 810f090:	edd1 7a00 	vldr	s15, [r1]
 810f094:	ed92 7a00 	vldr	s14, [r2]
 810f098:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f09c:	edc0 7a00 	vstr	s15, [r0]
 810f0a0:	4770      	bx	lr
 810f0a2:	bf00      	nop

0810f0a4 <ai_sum_buffer_INT8>:
 810f0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810f0a8:	9c07      	ldr	r4, [sp, #28]
 810f0aa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 810f0ae:	ed94 0a00 	vldr	s0, [r4]
 810f0b2:	9c08      	ldr	r4, [sp, #32]
 810f0b4:	f994 6000 	ldrsb.w	r6, [r4]
 810f0b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 810f0ba:	edd4 0a00 	vldr	s1, [r4]
 810f0be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 810f0c0:	f994 9000 	ldrsb.w	r9, [r4]
 810f0c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 810f0c6:	ed94 1a00 	vldr	s2, [r4]
 810f0ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 810f0cc:	f994 5000 	ldrsb.w	r5, [r4]
 810f0d0:	f1b8 0f00 	cmp.w	r8, #0
 810f0d4:	d10e      	bne.n	810f0f4 <ai_sum_buffer_INT8+0x50>
 810f0d6:	eeb4 0a41 	vcmp.f32	s0, s2
 810f0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f0de:	d102      	bne.n	810f0e6 <ai_sum_buffer_INT8+0x42>
 810f0e0:	42ae      	cmp	r6, r5
 810f0e2:	f000 8138 	beq.w	810f356 <ai_sum_buffer_INT8+0x2b2>
 810f0e6:	e9cd 9508 	strd	r9, r5, [sp, #32]
 810f0ea:	9607      	str	r6, [sp, #28]
 810f0ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810f0f0:	f000 ba3c 	b.w	810f56c <ai_math_elementwise_sum_int8>
 810f0f4:	eec0 5a81 	vdiv.f32	s11, s1, s2
 810f0f8:	f04f 0c01 	mov.w	ip, #1
 810f0fc:	089f      	lsrs	r7, r3, #2
 810f0fe:	eec0 7a01 	vdiv.f32	s15, s0, s2
 810f102:	ee15 4a90 	vmov	r4, s11
 810f106:	ee17 ea90 	vmov	lr, s15
 810f10a:	f3c4 54c7 	ubfx	r4, r4, #23, #8
 810f10e:	f1c4 047e 	rsb	r4, r4, #126	; 0x7e
 810f112:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
 810f116:	ea04 74e4 	and.w	r4, r4, r4, asr #31
 810f11a:	f1ce 0e7e 	rsb	lr, lr, #126	; 0x7e
 810f11e:	4574      	cmp	r4, lr
 810f120:	bfa8      	it	ge
 810f122:	4674      	movge	r4, lr
 810f124:	f104 0e1d 	add.w	lr, r4, #29
 810f128:	fa0c fe0e 	lsl.w	lr, ip, lr
 810f12c:	ee07 ea10 	vmov	s14, lr
 810f130:	45e0      	cmp	r8, ip
 810f132:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 810f136:	f000 8087 	beq.w	810f248 <ai_sum_buffer_INT8+0x1a4>
 810f13a:	ee07 6a10 	vmov	s14, r6
 810f13e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 810f142:	ee07 5a10 	vmov	s14, r5
 810f146:	f992 2000 	ldrsb.w	r2, [r2]
 810f14a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810f14e:	eba2 0209 	sub.w	r2, r2, r9
 810f152:	eea6 7ae7 	vfms.f32	s14, s13, s15
 810f156:	f104 0616 	add.w	r6, r4, #22
 810f15a:	3415      	adds	r4, #21
 810f15c:	ee05 2a10 	vmov	s10, r2
 810f160:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810f164:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 810f168:	fa0c f204 	lsl.w	r2, ip, r4
 810f16c:	fa0c f406 	lsl.w	r4, ip, r6
 810f170:	eea5 7a25 	vfma.f32	s14, s10, s11
 810f174:	ee67 6a86 	vmul.f32	s13, s15, s12
 810f178:	ee07 4a90 	vmov	s15, r4
 810f17c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f180:	ee67 7a87 	vmul.f32	s15, s15, s14
 810f184:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 810f188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810f18c:	ee17 4a10 	vmov	r4, s14
 810f190:	ee17 5a90 	vmov	r5, s15
 810f194:	4415      	add	r5, r2
 810f196:	2f00      	cmp	r7, #0
 810f198:	f000 80f7 	beq.w	810f38a <ai_sum_buffer_INT8+0x2e6>
 810f19c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 810f1a0:	f100 0e04 	add.w	lr, r0, #4
 810f1a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810f1a8:	f851 2b04 	ldr.w	r2, [r1], #4
 810f1ac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 810f1b0:	f00c 2cff 	and.w	ip, ip, #4278255360	; 0xff00ff00
 810f1b4:	fb34 590c 	smlawb	r9, r4, ip, r5
 810f1b8:	fa49 f906 	asr.w	r9, r9, r6
 810f1bc:	f309 0907 	ssat	r9, #8, r9
 810f1c0:	f80e 9c04 	strb.w	r9, [lr, #-4]
 810f1c4:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 810f1c8:	fb34 5902 	smlawb	r9, r4, r2, r5
 810f1cc:	fa49 f906 	asr.w	r9, r9, r6
 810f1d0:	f309 0907 	ssat	r9, #8, r9
 810f1d4:	f80e 9c03 	strb.w	r9, [lr, #-3]
 810f1d8:	fb34 5c1c 	smlawt	ip, r4, ip, r5
 810f1dc:	fa4c fc06 	asr.w	ip, ip, r6
 810f1e0:	f30c 0c07 	ssat	ip, #8, ip
 810f1e4:	f80e cc02 	strb.w	ip, [lr, #-2]
 810f1e8:	fb34 5212 	smlawt	r2, r4, r2, r5
 810f1ec:	4132      	asrs	r2, r6
 810f1ee:	f302 0207 	ssat	r2, #8, r2
 810f1f2:	42b9      	cmp	r1, r7
 810f1f4:	f80e 2c01 	strb.w	r2, [lr, #-1]
 810f1f8:	f10e 0e04 	add.w	lr, lr, #4
 810f1fc:	d1d4      	bne.n	810f1a8 <ai_sum_buffer_INT8+0x104>
 810f1fe:	4440      	add	r0, r8
 810f200:	f013 0303 	ands.w	r3, r3, #3
 810f204:	d01e      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f206:	f997 2000 	ldrsb.w	r2, [r7]
 810f20a:	0212      	lsls	r2, r2, #8
 810f20c:	fb34 5202 	smlawb	r2, r4, r2, r5
 810f210:	4132      	asrs	r2, r6
 810f212:	f302 0207 	ssat	r2, #8, r2
 810f216:	3b01      	subs	r3, #1
 810f218:	7002      	strb	r2, [r0, #0]
 810f21a:	d013      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f21c:	f997 2001 	ldrsb.w	r2, [r7, #1]
 810f220:	0212      	lsls	r2, r2, #8
 810f222:	fb34 5202 	smlawb	r2, r4, r2, r5
 810f226:	4132      	asrs	r2, r6
 810f228:	f302 0207 	ssat	r2, #8, r2
 810f22c:	2b01      	cmp	r3, #1
 810f22e:	7042      	strb	r2, [r0, #1]
 810f230:	d008      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f232:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810f236:	021b      	lsls	r3, r3, #8
 810f238:	fb34 5303 	smlawb	r3, r4, r3, r5
 810f23c:	4133      	asrs	r3, r6
 810f23e:	f303 0307 	ssat	r3, #8, r3
 810f242:	7083      	strb	r3, [r0, #2]
 810f244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810f248:	ee07 9a10 	vmov	s14, r9
 810f24c:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
 810f250:	ee07 5a10 	vmov	s14, r5
 810f254:	f991 1000 	ldrsb.w	r1, [r1]
 810f258:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810f25c:	1b89      	subs	r1, r1, r6
 810f25e:	eea5 7a65 	vfms.f32	s14, s10, s11
 810f262:	f104 0e16 	add.w	lr, r4, #22
 810f266:	3415      	adds	r4, #21
 810f268:	ee06 1a90 	vmov	s13, r1
 810f26c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 810f270:	fa08 f10e 	lsl.w	r1, r8, lr
 810f274:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810f278:	fa08 f404 	lsl.w	r4, r8, r4
 810f27c:	ee07 1a90 	vmov	s15, r1
 810f280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f284:	ee75 5aa5 	vadd.f32	s11, s11, s11
 810f288:	ee67 7a87 	vmul.f32	s15, s15, s14
 810f28c:	ee65 5a86 	vmul.f32	s11, s11, s12
 810f290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810f294:	eebd 7ae5 	vcvt.s32.f32	s14, s11
 810f298:	ee17 5a90 	vmov	r5, s15
 810f29c:	ee17 6a10 	vmov	r6, s14
 810f2a0:	4425      	add	r5, r4
 810f2a2:	2f00      	cmp	r7, #0
 810f2a4:	d073      	beq.n	810f38e <ai_sum_buffer_INT8+0x2ea>
 810f2a6:	ea4f 0887 	mov.w	r8, r7, lsl #2
 810f2aa:	f100 0c04 	add.w	ip, r0, #4
 810f2ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 810f2b2:	f852 1b04 	ldr.w	r1, [r2], #4
 810f2b6:	020c      	lsls	r4, r1, #8
 810f2b8:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 810f2bc:	fb36 5904 	smlawb	r9, r6, r4, r5
 810f2c0:	fa49 f90e 	asr.w	r9, r9, lr
 810f2c4:	f309 0907 	ssat	r9, #8, r9
 810f2c8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 810f2cc:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 810f2d0:	fb36 5901 	smlawb	r9, r6, r1, r5
 810f2d4:	fa49 f90e 	asr.w	r9, r9, lr
 810f2d8:	f309 0907 	ssat	r9, #8, r9
 810f2dc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 810f2e0:	fb36 5414 	smlawt	r4, r6, r4, r5
 810f2e4:	fa44 f40e 	asr.w	r4, r4, lr
 810f2e8:	f304 0407 	ssat	r4, #8, r4
 810f2ec:	f80c 4c02 	strb.w	r4, [ip, #-2]
 810f2f0:	fb36 5111 	smlawt	r1, r6, r1, r5
 810f2f4:	fa41 f10e 	asr.w	r1, r1, lr
 810f2f8:	f301 0107 	ssat	r1, #8, r1
 810f2fc:	42ba      	cmp	r2, r7
 810f2fe:	f80c 1c01 	strb.w	r1, [ip, #-1]
 810f302:	f10c 0c04 	add.w	ip, ip, #4
 810f306:	d1d4      	bne.n	810f2b2 <ai_sum_buffer_INT8+0x20e>
 810f308:	4440      	add	r0, r8
 810f30a:	f013 0303 	ands.w	r3, r3, #3
 810f30e:	d099      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f310:	f997 2000 	ldrsb.w	r2, [r7]
 810f314:	0212      	lsls	r2, r2, #8
 810f316:	fb36 5202 	smlawb	r2, r6, r2, r5
 810f31a:	fa42 f20e 	asr.w	r2, r2, lr
 810f31e:	f302 0207 	ssat	r2, #8, r2
 810f322:	3b01      	subs	r3, #1
 810f324:	7002      	strb	r2, [r0, #0]
 810f326:	d08d      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f328:	f997 2001 	ldrsb.w	r2, [r7, #1]
 810f32c:	0212      	lsls	r2, r2, #8
 810f32e:	fb36 5202 	smlawb	r2, r6, r2, r5
 810f332:	fa42 f20e 	asr.w	r2, r2, lr
 810f336:	f302 0207 	ssat	r2, #8, r2
 810f33a:	2b01      	cmp	r3, #1
 810f33c:	7042      	strb	r2, [r0, #1]
 810f33e:	d081      	beq.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f340:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810f344:	021b      	lsls	r3, r3, #8
 810f346:	fb36 5303 	smlawb	r3, r6, r3, r5
 810f34a:	fa43 f30e 	asr.w	r3, r3, lr
 810f34e:	f303 0307 	ssat	r3, #8, r3
 810f352:	7083      	strb	r3, [r0, #2]
 810f354:	e776      	b.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f356:	eef4 0a41 	vcmp.f32	s1, s2
 810f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f35e:	f47f aec2 	bne.w	810f0e6 <ai_sum_buffer_INT8+0x42>
 810f362:	45b1      	cmp	r9, r6
 810f364:	f47f aebf 	bne.w	810f0e6 <ai_sum_buffer_INT8+0x42>
 810f368:	2b00      	cmp	r3, #0
 810f36a:	f43f af6b 	beq.w	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f36e:	4403      	add	r3, r0
 810f370:	f911 4b01 	ldrsb.w	r4, [r1], #1
 810f374:	f912 5b01 	ldrsb.w	r5, [r2], #1
 810f378:	442c      	add	r4, r5
 810f37a:	444c      	add	r4, r9
 810f37c:	f304 0407 	ssat	r4, #8, r4
 810f380:	f800 4b01 	strb.w	r4, [r0], #1
 810f384:	4298      	cmp	r0, r3
 810f386:	d1f3      	bne.n	810f370 <ai_sum_buffer_INT8+0x2cc>
 810f388:	e75c      	b.n	810f244 <ai_sum_buffer_INT8+0x1a0>
 810f38a:	460f      	mov	r7, r1
 810f38c:	e738      	b.n	810f200 <ai_sum_buffer_INT8+0x15c>
 810f38e:	4617      	mov	r7, r2
 810f390:	e7bb      	b.n	810f30a <ai_sum_buffer_INT8+0x266>
 810f392:	bf00      	nop

0810f394 <ai_array_get_byte_size>:
 810f394:	b319      	cbz	r1, 810f3de <ai_array_get_byte_size+0x4a>
 810f396:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 810f39a:	fb01 f303 	mul.w	r3, r1, r3
 810f39e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 810f3a2:	3307      	adds	r3, #7
 810f3a4:	f3c0 5141 	ubfx	r1, r0, #21, #2
 810f3a8:	f023 0307 	bic.w	r3, r3, #7
 810f3ac:	2a04      	cmp	r2, #4
 810f3ae:	ea4f 10e0 	mov.w	r0, r0, asr #7
 810f3b2:	fa23 f101 	lsr.w	r1, r3, r1
 810f3b6:	d00b      	beq.n	810f3d0 <ai_array_get_byte_size+0x3c>
 810f3b8:	2a08      	cmp	r2, #8
 810f3ba:	d002      	beq.n	810f3c2 <ai_array_get_byte_size+0x2e>
 810f3bc:	3107      	adds	r1, #7
 810f3be:	08c8      	lsrs	r0, r1, #3
 810f3c0:	4770      	bx	lr
 810f3c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810f3c6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 810f3ca:	3107      	adds	r1, #7
 810f3cc:	08c8      	lsrs	r0, r1, #3
 810f3ce:	4770      	bx	lr
 810f3d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810f3d4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 810f3d8:	3107      	adds	r1, #7
 810f3da:	08c8      	lsrs	r0, r1, #3
 810f3dc:	4770      	bx	lr
 810f3de:	4608      	mov	r0, r1
 810f3e0:	4770      	bx	lr
 810f3e2:	bf00      	nop

0810f3e4 <ai_version_get>:
 810f3e4:	0212      	lsls	r2, r2, #8
 810f3e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810f3ea:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 810f3ee:	4770      	bx	lr

0810f3f0 <core_get_broadcasted_shape>:
 810f3f0:	b470      	push	{r4, r5, r6}
 810f3f2:	6804      	ldr	r4, [r0, #0]
 810f3f4:	f3c4 2417 	ubfx	r4, r4, #8, #24
 810f3f8:	b324      	cbz	r4, 810f444 <core_get_broadcasted_shape+0x54>
 810f3fa:	4623      	mov	r3, r4
 810f3fc:	3b01      	subs	r3, #1
 810f3fe:	429c      	cmp	r4, r3
 810f400:	d91b      	bls.n	810f43a <core_get_broadcasted_shape+0x4a>
 810f402:	6814      	ldr	r4, [r2, #0]
 810f404:	680e      	ldr	r6, [r1, #0]
 810f406:	ebb3 2f14 	cmp.w	r3, r4, lsr #8
 810f40a:	bf36      	itet	cc
 810f40c:	6854      	ldrcc	r4, [r2, #4]
 810f40e:	2401      	movcs	r4, #1
 810f410:	f854 4023 	ldrcc.w	r4, [r4, r3, lsl #2]
 810f414:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 810f418:	bf38      	it	cc
 810f41a:	ea4f 0c83 	movcc.w	ip, r3, lsl #2
 810f41e:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 810f422:	f04f 0501 	mov.w	r5, #1
 810f426:	bf3c      	itt	cc
 810f428:	684d      	ldrcc	r5, [r1, #4]
 810f42a:	f855 500c 	ldrcc.w	r5, [r5, ip]
 810f42e:	42ac      	cmp	r4, r5
 810f430:	bf38      	it	cc
 810f432:	462c      	movcc	r4, r5
 810f434:	6845      	ldr	r5, [r0, #4]
 810f436:	f845 400c 	str.w	r4, [r5, ip]
 810f43a:	b11b      	cbz	r3, 810f444 <core_get_broadcasted_shape+0x54>
 810f43c:	6804      	ldr	r4, [r0, #0]
 810f43e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 810f442:	e7db      	b.n	810f3fc <core_get_broadcasted_shape+0xc>
 810f444:	bc70      	pop	{r4, r5, r6}
 810f446:	4770      	bx	lr

0810f448 <core_compute_offsets>:
 810f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f44c:	e9d1 4600 	ldrd	r4, r6, [r1]
 810f450:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 810f454:	f8d2 9004 	ldr.w	r9, [r2, #4]
 810f458:	6871      	ldr	r1, [r6, #4]
 810f45a:	6812      	ldr	r2, [r2, #0]
 810f45c:	bf28      	it	cs
 810f45e:	6935      	ldrcs	r5, [r6, #16]
 810f460:	f8d9 c004 	ldr.w	ip, [r9, #4]
 810f464:	f8d0 b000 	ldr.w	fp, [r0]
 810f468:	bf2e      	itee	cs
 810f46a:	fb05 fe01 	mulcs.w	lr, r5, r1
 810f46e:	468e      	movcc	lr, r1
 810f470:	2501      	movcc	r5, #1
 810f472:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 810f476:	bf28      	it	cs
 810f478:	f8d9 2010 	ldrcs.w	r2, [r9, #16]
 810f47c:	e9d6 4802 	ldrd	r4, r8, [r6, #8]
 810f480:	e9d9 6902 	ldrd	r6, r9, [r9, #8]
 810f484:	bf38      	it	cc
 810f486:	2201      	movcc	r2, #1
 810f488:	b083      	sub	sp, #12
 810f48a:	ebb4 0a06 	subs.w	sl, r4, r6
 810f48e:	bf18      	it	ne
 810f490:	f04f 0a01 	movne.w	sl, #1
 810f494:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 810f498:	9201      	str	r2, [sp, #4]
 810f49a:	f3cb 2217 	ubfx	r2, fp, #8, #24
 810f49e:	d308      	bcc.n	810f4b2 <core_compute_offsets+0x6a>
 810f4a0:	6847      	ldr	r7, [r0, #4]
 810f4a2:	4561      	cmp	r1, ip
 810f4a4:	bf0c      	ite	eq
 810f4a6:	461a      	moveq	r2, r3
 810f4a8:	2200      	movne	r2, #0
 810f4aa:	607a      	str	r2, [r7, #4]
 810f4ac:	6802      	ldr	r2, [r0, #0]
 810f4ae:	f3c2 2217 	ubfx	r2, r2, #8, #24
 810f4b2:	9f01      	ldr	r7, [sp, #4]
 810f4b4:	42bd      	cmp	r5, r7
 810f4b6:	d03f      	beq.n	810f538 <core_compute_offsets+0xf0>
 810f4b8:	eba1 0b0c 	sub.w	fp, r1, ip
 810f4bc:	fabb fb8b 	clz	fp, fp
 810f4c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 810f4c4:	fb01 fb0b 	mul.w	fp, r1, fp
 810f4c8:	f1cb 0b00 	rsb	fp, fp, #0
 810f4cc:	2a04      	cmp	r2, #4
 810f4ce:	d906      	bls.n	810f4de <core_compute_offsets+0x96>
 810f4d0:	6847      	ldr	r7, [r0, #4]
 810f4d2:	fb0b f203 	mul.w	r2, fp, r3
 810f4d6:	613a      	str	r2, [r7, #16]
 810f4d8:	6802      	ldr	r2, [r0, #0]
 810f4da:	f3c2 2217 	ubfx	r2, r2, #8, #24
 810f4de:	42b4      	cmp	r4, r6
 810f4e0:	d03a      	beq.n	810f558 <core_compute_offsets+0x110>
 810f4e2:	f04f 0b00 	mov.w	fp, #0
 810f4e6:	2a02      	cmp	r2, #2
 810f4e8:	fb0e fa0a 	mul.w	sl, lr, sl
 810f4ec:	d90e      	bls.n	810f50c <core_compute_offsets+0xc4>
 810f4ee:	9a01      	ldr	r2, [sp, #4]
 810f4f0:	6847      	ldr	r7, [r0, #4]
 810f4f2:	1aaa      	subs	r2, r5, r2
 810f4f4:	bf18      	it	ne
 810f4f6:	2201      	movne	r2, #1
 810f4f8:	ebab 0b0a 	sub.w	fp, fp, sl
 810f4fc:	fb01 bb02 	mla	fp, r1, r2, fp
 810f500:	fb03 f20b 	mul.w	r2, r3, fp
 810f504:	60ba      	str	r2, [r7, #8]
 810f506:	6802      	ldr	r2, [r0, #0]
 810f508:	f3c2 2217 	ubfx	r2, r2, #8, #24
 810f50c:	45c8      	cmp	r8, r9
 810f50e:	d019      	beq.n	810f544 <core_compute_offsets+0xfc>
 810f510:	2100      	movs	r1, #0
 810f512:	2a03      	cmp	r2, #3
 810f514:	d90d      	bls.n	810f532 <core_compute_offsets+0xea>
 810f516:	ebb8 0809 	subs.w	r8, r8, r9
 810f51a:	fb0e f404 	mul.w	r4, lr, r4
 810f51e:	bf18      	it	ne
 810f520:	f04f 0801 	movne.w	r8, #1
 810f524:	fb08 1114 	mls	r1, r8, r4, r1
 810f528:	6842      	ldr	r2, [r0, #4]
 810f52a:	4451      	add	r1, sl
 810f52c:	fb03 f101 	mul.w	r1, r3, r1
 810f530:	60d1      	str	r1, [r2, #12]
 810f532:	b003      	add	sp, #12
 810f534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f538:	ebb1 0b0c 	subs.w	fp, r1, ip
 810f53c:	bf18      	it	ne
 810f53e:	f04f 0b01 	movne.w	fp, #1
 810f542:	e7c3      	b.n	810f4cc <core_compute_offsets+0x84>
 810f544:	42b4      	cmp	r4, r6
 810f546:	d0e3      	beq.n	810f510 <core_compute_offsets+0xc8>
 810f548:	9e01      	ldr	r6, [sp, #4]
 810f54a:	42b5      	cmp	r5, r6
 810f54c:	d0e0      	beq.n	810f510 <core_compute_offsets+0xc8>
 810f54e:	ebb1 010c 	subs.w	r1, r1, ip
 810f552:	bf18      	it	ne
 810f554:	2101      	movne	r1, #1
 810f556:	e7dc      	b.n	810f512 <core_compute_offsets+0xca>
 810f558:	9f01      	ldr	r7, [sp, #4]
 810f55a:	42bd      	cmp	r5, r7
 810f55c:	d0c1      	beq.n	810f4e2 <core_compute_offsets+0x9a>
 810f55e:	ebb1 0b0c 	subs.w	fp, r1, ip
 810f562:	bf18      	it	ne
 810f564:	f04f 0b01 	movne.w	fp, #1
 810f568:	e7bd      	b.n	810f4e6 <core_compute_offsets+0x9e>
 810f56a:	bf00      	nop

0810f56c <ai_math_elementwise_sum_int8>:
 810f56c:	eec0 7a81 	vdiv.f32	s15, s1, s2
 810f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f574:	b085      	sub	sp, #20
 810f576:	4684      	mov	ip, r0
 810f578:	9001      	str	r0, [sp, #4]
 810f57a:	f99d 003c 	ldrsb.w	r0, [sp, #60]	; 0x3c
 810f57e:	9302      	str	r3, [sp, #8]
 810f580:	461d      	mov	r5, r3
 810f582:	2401      	movs	r4, #1
 810f584:	eec0 6a01 	vdiv.f32	s13, s0, s2
 810f588:	ee07 0a10 	vmov	s14, r0
 810f58c:	f99d 0038 	ldrsb.w	r0, [sp, #56]	; 0x38
 810f590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810f594:	ee17 3a90 	vmov	r3, s15
 810f598:	4240      	negs	r0, r0
 810f59a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 810f59e:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 810f5a2:	ee07 0a90 	vmov	s15, r0
 810f5a6:	ee16 0a90 	vmov	r0, s13
 810f5aa:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 810f5ae:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 810f5b2:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 810f5b6:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 810f5ba:	f1c0 007e 	rsb	r0, r0, #126	; 0x7e
 810f5be:	4283      	cmp	r3, r0
 810f5c0:	bfa8      	it	ge
 810f5c2:	4603      	movge	r3, r0
 810f5c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f5c8:	f99d 0040 	ldrsb.w	r0, [sp, #64]	; 0x40
 810f5cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 810f5d0:	f103 0916 	add.w	r9, r3, #22
 810f5d4:	ea5f 0b95 	movs.w	fp, r5, lsr #2
 810f5d8:	ee07 0a90 	vmov	s15, r0
 810f5dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f5e0:	fa04 f009 	lsl.w	r0, r4, r9
 810f5e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f5e8:	ee07 0a10 	vmov	s14, r0
 810f5ec:	f103 001d 	add.w	r0, r3, #29
 810f5f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810f5f4:	fa04 f000 	lsl.w	r0, r4, r0
 810f5f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 810f5fc:	ee07 0a10 	vmov	s14, r0
 810f600:	ee76 5aa6 	vadd.f32	s11, s13, s13
 810f604:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810f608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810f60c:	ee65 5a87 	vmul.f32	s11, s11, s14
 810f610:	ee17 6a90 	vmov	r6, s15
 810f614:	ee26 7a07 	vmul.f32	s14, s12, s14
 810f618:	eefd 7ae5 	vcvt.s32.f32	s15, s11
 810f61c:	f103 0315 	add.w	r3, r3, #21
 810f620:	ee17 8a90 	vmov	r8, s15
 810f624:	fa04 f403 	lsl.w	r4, r4, r3
 810f628:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 810f62c:	4426      	add	r6, r4
 810f62e:	ee17 7a90 	vmov	r7, s15
 810f632:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 810f636:	f000 8081 	beq.w	810f73c <ai_math_elementwise_sum_int8+0x1d0>
 810f63a:	4663      	mov	r3, ip
 810f63c:	1d1d      	adds	r5, r3, #4
 810f63e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810f642:	9303      	str	r3, [sp, #12]
 810f644:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 810f648:	4692      	mov	sl, r2
 810f64a:	f851 4b04 	ldr.w	r4, [r1], #4
 810f64e:	f85a 3b04 	ldr.w	r3, [sl], #4
 810f652:	ea4f 2e04 	mov.w	lr, r4, lsl #8
 810f656:	f00e 2eff 	and.w	lr, lr, #4278255360	; 0xff00ff00
 810f65a:	fb38 6c0e 	smlawb	ip, r8, lr, r6
 810f65e:	0218      	lsls	r0, r3, #8
 810f660:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 810f664:	fb37 cc00 	smlawb	ip, r7, r0, ip
 810f668:	fa4c fc09 	asr.w	ip, ip, r9
 810f66c:	f30c 0c07 	ssat	ip, #8, ip
 810f670:	f805 cc04 	strb.w	ip, [r5, #-4]
 810f674:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 810f678:	fb38 6c04 	smlawb	ip, r8, r4, r6
 810f67c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 810f680:	fb37 cc03 	smlawb	ip, r7, r3, ip
 810f684:	fa4c fc09 	asr.w	ip, ip, r9
 810f688:	f30c 0c07 	ssat	ip, #8, ip
 810f68c:	f805 cc03 	strb.w	ip, [r5, #-3]
 810f690:	fb38 6e1e 	smlawt	lr, r8, lr, r6
 810f694:	fb37 e010 	smlawt	r0, r7, r0, lr
 810f698:	fa40 f009 	asr.w	r0, r0, r9
 810f69c:	f300 0007 	ssat	r0, #8, r0
 810f6a0:	f805 0c02 	strb.w	r0, [r5, #-2]
 810f6a4:	fb38 6414 	smlawt	r4, r8, r4, r6
 810f6a8:	fb37 4313 	smlawt	r3, r7, r3, r4
 810f6ac:	fa43 f309 	asr.w	r3, r3, r9
 810f6b0:	f303 0307 	ssat	r3, #8, r3
 810f6b4:	4559      	cmp	r1, fp
 810f6b6:	f805 3c01 	strb.w	r3, [r5, #-1]
 810f6ba:	f105 0504 	add.w	r5, r5, #4
 810f6be:	d1c4      	bne.n	810f64a <ai_math_elementwise_sum_int8+0xde>
 810f6c0:	9b01      	ldr	r3, [sp, #4]
 810f6c2:	9903      	ldr	r1, [sp, #12]
 810f6c4:	440b      	add	r3, r1
 810f6c6:	9301      	str	r3, [sp, #4]
 810f6c8:	440a      	add	r2, r1
 810f6ca:	9b02      	ldr	r3, [sp, #8]
 810f6cc:	f013 0003 	ands.w	r0, r3, #3
 810f6d0:	d031      	beq.n	810f736 <ai_math_elementwise_sum_int8+0x1ca>
 810f6d2:	f99b 1000 	ldrsb.w	r1, [fp]
 810f6d6:	0209      	lsls	r1, r1, #8
 810f6d8:	fb38 6101 	smlawb	r1, r8, r1, r6
 810f6dc:	f992 3000 	ldrsb.w	r3, [r2]
 810f6e0:	021b      	lsls	r3, r3, #8
 810f6e2:	fb37 1303 	smlawb	r3, r7, r3, r1
 810f6e6:	fa43 f309 	asr.w	r3, r3, r9
 810f6ea:	f303 0307 	ssat	r3, #8, r3
 810f6ee:	9c01      	ldr	r4, [sp, #4]
 810f6f0:	3801      	subs	r0, #1
 810f6f2:	7023      	strb	r3, [r4, #0]
 810f6f4:	d01f      	beq.n	810f736 <ai_math_elementwise_sum_int8+0x1ca>
 810f6f6:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 810f6fa:	0209      	lsls	r1, r1, #8
 810f6fc:	fb38 6101 	smlawb	r1, r8, r1, r6
 810f700:	f992 3001 	ldrsb.w	r3, [r2, #1]
 810f704:	021b      	lsls	r3, r3, #8
 810f706:	fb37 1303 	smlawb	r3, r7, r3, r1
 810f70a:	fa43 f309 	asr.w	r3, r3, r9
 810f70e:	f303 0307 	ssat	r3, #8, r3
 810f712:	2801      	cmp	r0, #1
 810f714:	7063      	strb	r3, [r4, #1]
 810f716:	d00e      	beq.n	810f736 <ai_math_elementwise_sum_int8+0x1ca>
 810f718:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 810f71c:	021b      	lsls	r3, r3, #8
 810f71e:	fb38 6803 	smlawb	r8, r8, r3, r6
 810f722:	f992 3002 	ldrsb.w	r3, [r2, #2]
 810f726:	021b      	lsls	r3, r3, #8
 810f728:	fb37 8303 	smlawb	r3, r7, r3, r8
 810f72c:	fa43 f309 	asr.w	r3, r3, r9
 810f730:	f303 0307 	ssat	r3, #8, r3
 810f734:	70a3      	strb	r3, [r4, #2]
 810f736:	b005      	add	sp, #20
 810f738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f73c:	468b      	mov	fp, r1
 810f73e:	e7c4      	b.n	810f6ca <ai_math_elementwise_sum_int8+0x15e>

0810f740 <powf>:
 810f740:	b508      	push	{r3, lr}
 810f742:	ed2d 8b04 	vpush	{d8-d9}
 810f746:	eeb0 8a60 	vmov.f32	s16, s1
 810f74a:	eeb0 9a40 	vmov.f32	s18, s0
 810f74e:	f000 f863 	bl	810f818 <__ieee754_powf>
 810f752:	eeb4 8a48 	vcmp.f32	s16, s16
 810f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f75a:	eef0 8a40 	vmov.f32	s17, s0
 810f75e:	d63e      	bvs.n	810f7de <powf+0x9e>
 810f760:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f768:	d112      	bne.n	810f790 <powf+0x50>
 810f76a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810f76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f772:	d039      	beq.n	810f7e8 <powf+0xa8>
 810f774:	eeb0 0a48 	vmov.f32	s0, s16
 810f778:	f000 f839 	bl	810f7ee <finitef>
 810f77c:	b378      	cbz	r0, 810f7de <powf+0x9e>
 810f77e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810f782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f786:	d52a      	bpl.n	810f7de <powf+0x9e>
 810f788:	f000 fd7e 	bl	8110288 <__errno>
 810f78c:	2322      	movs	r3, #34	; 0x22
 810f78e:	e014      	b.n	810f7ba <powf+0x7a>
 810f790:	f000 f82d 	bl	810f7ee <finitef>
 810f794:	b998      	cbnz	r0, 810f7be <powf+0x7e>
 810f796:	eeb0 0a49 	vmov.f32	s0, s18
 810f79a:	f000 f828 	bl	810f7ee <finitef>
 810f79e:	b170      	cbz	r0, 810f7be <powf+0x7e>
 810f7a0:	eeb0 0a48 	vmov.f32	s0, s16
 810f7a4:	f000 f823 	bl	810f7ee <finitef>
 810f7a8:	b148      	cbz	r0, 810f7be <powf+0x7e>
 810f7aa:	eef4 8a68 	vcmp.f32	s17, s17
 810f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f7b2:	d7e9      	bvc.n	810f788 <powf+0x48>
 810f7b4:	f000 fd68 	bl	8110288 <__errno>
 810f7b8:	2321      	movs	r3, #33	; 0x21
 810f7ba:	6003      	str	r3, [r0, #0]
 810f7bc:	e00f      	b.n	810f7de <powf+0x9e>
 810f7be:	eef5 8a40 	vcmp.f32	s17, #0.0
 810f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f7c6:	d10a      	bne.n	810f7de <powf+0x9e>
 810f7c8:	eeb0 0a49 	vmov.f32	s0, s18
 810f7cc:	f000 f80f 	bl	810f7ee <finitef>
 810f7d0:	b128      	cbz	r0, 810f7de <powf+0x9e>
 810f7d2:	eeb0 0a48 	vmov.f32	s0, s16
 810f7d6:	f000 f80a 	bl	810f7ee <finitef>
 810f7da:	2800      	cmp	r0, #0
 810f7dc:	d1d4      	bne.n	810f788 <powf+0x48>
 810f7de:	eeb0 0a68 	vmov.f32	s0, s17
 810f7e2:	ecbd 8b04 	vpop	{d8-d9}
 810f7e6:	bd08      	pop	{r3, pc}
 810f7e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 810f7ec:	e7f7      	b.n	810f7de <powf+0x9e>

0810f7ee <finitef>:
 810f7ee:	b082      	sub	sp, #8
 810f7f0:	ed8d 0a01 	vstr	s0, [sp, #4]
 810f7f4:	9801      	ldr	r0, [sp, #4]
 810f7f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 810f7fa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 810f7fe:	bfac      	ite	ge
 810f800:	2000      	movge	r0, #0
 810f802:	2001      	movlt	r0, #1
 810f804:	b002      	add	sp, #8
 810f806:	4770      	bx	lr

0810f808 <fabsf>:
 810f808:	ee10 3a10 	vmov	r3, s0
 810f80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f810:	ee00 3a10 	vmov	s0, r3
 810f814:	4770      	bx	lr
	...

0810f818 <__ieee754_powf>:
 810f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f81c:	ee10 4a90 	vmov	r4, s1
 810f820:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 810f824:	ed2d 8b02 	vpush	{d8}
 810f828:	ee10 7a10 	vmov	r7, s0
 810f82c:	eeb0 8a40 	vmov.f32	s16, s0
 810f830:	eef0 8a60 	vmov.f32	s17, s1
 810f834:	d10c      	bne.n	810f850 <__ieee754_powf+0x38>
 810f836:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 810f83a:	007f      	lsls	r7, r7, #1
 810f83c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 810f840:	f240 8292 	bls.w	810fd68 <__ieee754_powf+0x550>
 810f844:	ee38 0a28 	vadd.f32	s0, s16, s17
 810f848:	ecbd 8b02 	vpop	{d8}
 810f84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f850:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 810f854:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810f858:	dcf4      	bgt.n	810f844 <__ieee754_powf+0x2c>
 810f85a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f85e:	dd08      	ble.n	810f872 <__ieee754_powf+0x5a>
 810f860:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 810f864:	d1ee      	bne.n	810f844 <__ieee754_powf+0x2c>
 810f866:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 810f86a:	0064      	lsls	r4, r4, #1
 810f86c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 810f870:	e7e6      	b.n	810f840 <__ieee754_powf+0x28>
 810f872:	2f00      	cmp	r7, #0
 810f874:	da20      	bge.n	810f8b8 <__ieee754_powf+0xa0>
 810f876:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 810f87a:	da2d      	bge.n	810f8d8 <__ieee754_powf+0xc0>
 810f87c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f880:	f2c0 827b 	blt.w	810fd7a <__ieee754_powf+0x562>
 810f884:	ea4f 53e8 	mov.w	r3, r8, asr #23
 810f888:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 810f88c:	fa48 f603 	asr.w	r6, r8, r3
 810f890:	fa06 f303 	lsl.w	r3, r6, r3
 810f894:	4543      	cmp	r3, r8
 810f896:	f040 8270 	bne.w	810fd7a <__ieee754_powf+0x562>
 810f89a:	f006 0601 	and.w	r6, r6, #1
 810f89e:	f1c6 0602 	rsb	r6, r6, #2
 810f8a2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f8a6:	d11f      	bne.n	810f8e8 <__ieee754_powf+0xd0>
 810f8a8:	2c00      	cmp	r4, #0
 810f8aa:	f280 8263 	bge.w	810fd74 <__ieee754_powf+0x55c>
 810f8ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f8b2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 810f8b6:	e7c7      	b.n	810f848 <__ieee754_powf+0x30>
 810f8b8:	2600      	movs	r6, #0
 810f8ba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f8be:	d1f0      	bne.n	810f8a2 <__ieee754_powf+0x8a>
 810f8c0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 810f8c4:	f000 8250 	beq.w	810fd68 <__ieee754_powf+0x550>
 810f8c8:	dd08      	ble.n	810f8dc <__ieee754_powf+0xc4>
 810f8ca:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 810fbd0 <__ieee754_powf+0x3b8>
 810f8ce:	2c00      	cmp	r4, #0
 810f8d0:	bfa8      	it	ge
 810f8d2:	eeb0 0a68 	vmovge.f32	s0, s17
 810f8d6:	e7b7      	b.n	810f848 <__ieee754_powf+0x30>
 810f8d8:	2602      	movs	r6, #2
 810f8da:	e7ee      	b.n	810f8ba <__ieee754_powf+0xa2>
 810f8dc:	2c00      	cmp	r4, #0
 810f8de:	f280 8246 	bge.w	810fd6e <__ieee754_powf+0x556>
 810f8e2:	eeb1 0a68 	vneg.f32	s0, s17
 810f8e6:	e7af      	b.n	810f848 <__ieee754_powf+0x30>
 810f8e8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 810f8ec:	d102      	bne.n	810f8f4 <__ieee754_powf+0xdc>
 810f8ee:	ee28 0a08 	vmul.f32	s0, s16, s16
 810f8f2:	e7a9      	b.n	810f848 <__ieee754_powf+0x30>
 810f8f4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 810f8f8:	eeb0 0a48 	vmov.f32	s0, s16
 810f8fc:	d107      	bne.n	810f90e <__ieee754_powf+0xf6>
 810f8fe:	2f00      	cmp	r7, #0
 810f900:	db05      	blt.n	810f90e <__ieee754_powf+0xf6>
 810f902:	ecbd 8b02 	vpop	{d8}
 810f906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f90a:	f000 bad7 	b.w	810febc <__ieee754_sqrtf>
 810f90e:	f7ff ff7b 	bl	810f808 <fabsf>
 810f912:	b125      	cbz	r5, 810f91e <__ieee754_powf+0x106>
 810f914:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 810f918:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 810f91c:	d115      	bne.n	810f94a <__ieee754_powf+0x132>
 810f91e:	2c00      	cmp	r4, #0
 810f920:	bfbc      	itt	lt
 810f922:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 810f926:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 810f92a:	2f00      	cmp	r7, #0
 810f92c:	da8c      	bge.n	810f848 <__ieee754_powf+0x30>
 810f92e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 810f932:	4335      	orrs	r5, r6
 810f934:	d104      	bne.n	810f940 <__ieee754_powf+0x128>
 810f936:	ee70 7a40 	vsub.f32	s15, s0, s0
 810f93a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 810f93e:	e783      	b.n	810f848 <__ieee754_powf+0x30>
 810f940:	2e01      	cmp	r6, #1
 810f942:	d181      	bne.n	810f848 <__ieee754_powf+0x30>
 810f944:	eeb1 0a40 	vneg.f32	s0, s0
 810f948:	e77e      	b.n	810f848 <__ieee754_powf+0x30>
 810f94a:	0ff8      	lsrs	r0, r7, #31
 810f94c:	3801      	subs	r0, #1
 810f94e:	ea56 0300 	orrs.w	r3, r6, r0
 810f952:	d104      	bne.n	810f95e <__ieee754_powf+0x146>
 810f954:	ee38 8a48 	vsub.f32	s16, s16, s16
 810f958:	ee88 0a08 	vdiv.f32	s0, s16, s16
 810f95c:	e774      	b.n	810f848 <__ieee754_powf+0x30>
 810f95e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 810f962:	dd73      	ble.n	810fa4c <__ieee754_powf+0x234>
 810f964:	4b9b      	ldr	r3, [pc, #620]	; (810fbd4 <__ieee754_powf+0x3bc>)
 810f966:	429d      	cmp	r5, r3
 810f968:	dc08      	bgt.n	810f97c <__ieee754_powf+0x164>
 810f96a:	2c00      	cmp	r4, #0
 810f96c:	da0b      	bge.n	810f986 <__ieee754_powf+0x16e>
 810f96e:	2000      	movs	r0, #0
 810f970:	ecbd 8b02 	vpop	{d8}
 810f974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f978:	f000 ba34 	b.w	810fde4 <__math_oflowf>
 810f97c:	4b96      	ldr	r3, [pc, #600]	; (810fbd8 <__ieee754_powf+0x3c0>)
 810f97e:	429d      	cmp	r5, r3
 810f980:	dd08      	ble.n	810f994 <__ieee754_powf+0x17c>
 810f982:	2c00      	cmp	r4, #0
 810f984:	dcf3      	bgt.n	810f96e <__ieee754_powf+0x156>
 810f986:	2000      	movs	r0, #0
 810f988:	ecbd 8b02 	vpop	{d8}
 810f98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f990:	f000 ba22 	b.w	810fdd8 <__math_uflowf>
 810f994:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f998:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f99c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 810fbdc <__ieee754_powf+0x3c4>
 810f9a0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 810f9a4:	eee0 6a67 	vfms.f32	s13, s0, s15
 810f9a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f9ac:	eee6 7ac0 	vfms.f32	s15, s13, s0
 810f9b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 810f9b8:	eddf 7a89 	vldr	s15, [pc, #548]	; 810fbe0 <__ieee754_powf+0x3c8>
 810f9bc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 810f9c0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 810fbe4 <__ieee754_powf+0x3cc>
 810f9c4:	eee0 7a07 	vfma.f32	s15, s0, s14
 810f9c8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 810fbe8 <__ieee754_powf+0x3d0>
 810f9cc:	eef0 6a67 	vmov.f32	s13, s15
 810f9d0:	eee0 6a07 	vfma.f32	s13, s0, s14
 810f9d4:	ee16 3a90 	vmov	r3, s13
 810f9d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810f9dc:	f023 030f 	bic.w	r3, r3, #15
 810f9e0:	ee06 3a90 	vmov	s13, r3
 810f9e4:	eee0 6a47 	vfms.f32	s13, s0, s14
 810f9e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810f9ec:	3e01      	subs	r6, #1
 810f9ee:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 810f9f2:	4306      	orrs	r6, r0
 810f9f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 810f9f8:	f024 040f 	bic.w	r4, r4, #15
 810f9fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 810fa00:	bf08      	it	eq
 810fa02:	eeb0 8a47 	vmoveq.f32	s16, s14
 810fa06:	ee07 4a10 	vmov	s14, r4
 810fa0a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810fa0e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 810fa12:	ee07 3a90 	vmov	s15, r3
 810fa16:	eee7 0a27 	vfma.f32	s1, s14, s15
 810fa1a:	ee07 4a10 	vmov	s14, r4
 810fa1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 810fa22:	ee30 7aa7 	vadd.f32	s14, s1, s15
 810fa26:	ee17 1a10 	vmov	r1, s14
 810fa2a:	2900      	cmp	r1, #0
 810fa2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810fa30:	f340 817c 	ble.w	810fd2c <__ieee754_powf+0x514>
 810fa34:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 810fa38:	f340 80f8 	ble.w	810fc2c <__ieee754_powf+0x414>
 810fa3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fa44:	bf4c      	ite	mi
 810fa46:	2001      	movmi	r0, #1
 810fa48:	2000      	movpl	r0, #0
 810fa4a:	e791      	b.n	810f970 <__ieee754_powf+0x158>
 810fa4c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 810fa50:	bf01      	itttt	eq
 810fa52:	eddf 7a66 	vldreq	s15, [pc, #408]	; 810fbec <__ieee754_powf+0x3d4>
 810fa56:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 810fa5a:	f06f 0317 	mvneq.w	r3, #23
 810fa5e:	ee17 5a90 	vmoveq	r5, s15
 810fa62:	ea4f 52e5 	mov.w	r2, r5, asr #23
 810fa66:	bf18      	it	ne
 810fa68:	2300      	movne	r3, #0
 810fa6a:	3a7f      	subs	r2, #127	; 0x7f
 810fa6c:	441a      	add	r2, r3
 810fa6e:	4b60      	ldr	r3, [pc, #384]	; (810fbf0 <__ieee754_powf+0x3d8>)
 810fa70:	f3c5 0516 	ubfx	r5, r5, #0, #23
 810fa74:	429d      	cmp	r5, r3
 810fa76:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 810fa7a:	dd06      	ble.n	810fa8a <__ieee754_powf+0x272>
 810fa7c:	4b5d      	ldr	r3, [pc, #372]	; (810fbf4 <__ieee754_powf+0x3dc>)
 810fa7e:	429d      	cmp	r5, r3
 810fa80:	f340 80a4 	ble.w	810fbcc <__ieee754_powf+0x3b4>
 810fa84:	3201      	adds	r2, #1
 810fa86:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 810fa8a:	2500      	movs	r5, #0
 810fa8c:	4b5a      	ldr	r3, [pc, #360]	; (810fbf8 <__ieee754_powf+0x3e0>)
 810fa8e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 810fa92:	ee07 1a10 	vmov	s14, r1
 810fa96:	edd3 5a00 	vldr	s11, [r3]
 810fa9a:	4b58      	ldr	r3, [pc, #352]	; (810fbfc <__ieee754_powf+0x3e4>)
 810fa9c:	ee75 7a87 	vadd.f32	s15, s11, s14
 810faa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810faa4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 810faa8:	1049      	asrs	r1, r1, #1
 810faaa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 810faae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 810fab2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 810fab6:	ee37 6a65 	vsub.f32	s12, s14, s11
 810faba:	ee07 1a90 	vmov	s15, r1
 810fabe:	ee26 5a24 	vmul.f32	s10, s12, s9
 810fac2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 810fac6:	ee15 7a10 	vmov	r7, s10
 810faca:	401f      	ands	r7, r3
 810facc:	ee06 7a90 	vmov	s13, r7
 810fad0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810fad4:	ee37 7a65 	vsub.f32	s14, s14, s11
 810fad8:	ee65 7a05 	vmul.f32	s15, s10, s10
 810fadc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 810fae0:	eddf 5a47 	vldr	s11, [pc, #284]	; 810fc00 <__ieee754_powf+0x3e8>
 810fae4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 810fc04 <__ieee754_powf+0x3ec>
 810fae8:	eee7 5a87 	vfma.f32	s11, s15, s14
 810faec:	ed9f 7a46 	vldr	s14, [pc, #280]	; 810fc08 <__ieee754_powf+0x3f0>
 810faf0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810faf4:	eddf 5a39 	vldr	s11, [pc, #228]	; 810fbdc <__ieee754_powf+0x3c4>
 810faf8:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fafc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 810fc0c <__ieee754_powf+0x3f4>
 810fb00:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810fb04:	eddf 5a42 	vldr	s11, [pc, #264]	; 810fc10 <__ieee754_powf+0x3f8>
 810fb08:	ee26 6a24 	vmul.f32	s12, s12, s9
 810fb0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fb10:	ee35 7a26 	vadd.f32	s14, s10, s13
 810fb14:	ee67 4aa7 	vmul.f32	s9, s15, s15
 810fb18:	ee27 7a06 	vmul.f32	s14, s14, s12
 810fb1c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 810fb20:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810fb24:	eef0 5a67 	vmov.f32	s11, s15
 810fb28:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810fb2c:	ee75 5a87 	vadd.f32	s11, s11, s14
 810fb30:	ee15 1a90 	vmov	r1, s11
 810fb34:	4019      	ands	r1, r3
 810fb36:	ee05 1a90 	vmov	s11, r1
 810fb3a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810fb3e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810fb42:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fb46:	ee67 7a85 	vmul.f32	s15, s15, s10
 810fb4a:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fb4e:	eeb0 6a67 	vmov.f32	s12, s15
 810fb52:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810fb56:	ee16 1a10 	vmov	r1, s12
 810fb5a:	4019      	ands	r1, r3
 810fb5c:	ee07 1a10 	vmov	s14, r1
 810fb60:	eea6 7ae5 	vfms.f32	s14, s13, s11
 810fb64:	ee06 1a10 	vmov	s12, r1
 810fb68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fb6c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fc14 <__ieee754_powf+0x3fc>
 810fb70:	4929      	ldr	r1, [pc, #164]	; (810fc18 <__ieee754_powf+0x400>)
 810fb72:	eddf 5a2a 	vldr	s11, [pc, #168]	; 810fc1c <__ieee754_powf+0x404>
 810fb76:	ee67 7a87 	vmul.f32	s15, s15, s14
 810fb7a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fc20 <__ieee754_powf+0x408>
 810fb7e:	eee6 7a07 	vfma.f32	s15, s12, s14
 810fb82:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 810fb86:	ed91 7a00 	vldr	s14, [r1]
 810fb8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810fb8e:	ee07 2a10 	vmov	s14, r2
 810fb92:	eef0 6a67 	vmov.f32	s13, s15
 810fb96:	4a23      	ldr	r2, [pc, #140]	; (810fc24 <__ieee754_powf+0x40c>)
 810fb98:	eee6 6a25 	vfma.f32	s13, s12, s11
 810fb9c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 810fba0:	ed92 5a00 	vldr	s10, [r2]
 810fba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fba8:	ee76 6a85 	vadd.f32	s13, s13, s10
 810fbac:	ee76 6a87 	vadd.f32	s13, s13, s14
 810fbb0:	ee16 2a90 	vmov	r2, s13
 810fbb4:	4013      	ands	r3, r2
 810fbb6:	ee06 3a90 	vmov	s13, r3
 810fbba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810fbbe:	ee37 7a45 	vsub.f32	s14, s14, s10
 810fbc2:	eea6 7a65 	vfms.f32	s14, s12, s11
 810fbc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fbca:	e70f      	b.n	810f9ec <__ieee754_powf+0x1d4>
 810fbcc:	2501      	movs	r5, #1
 810fbce:	e75d      	b.n	810fa8c <__ieee754_powf+0x274>
 810fbd0:	00000000 	.word	0x00000000
 810fbd4:	3f7ffff3 	.word	0x3f7ffff3
 810fbd8:	3f800007 	.word	0x3f800007
 810fbdc:	3eaaaaab 	.word	0x3eaaaaab
 810fbe0:	3fb8aa3b 	.word	0x3fb8aa3b
 810fbe4:	36eca570 	.word	0x36eca570
 810fbe8:	3fb8aa00 	.word	0x3fb8aa00
 810fbec:	4b800000 	.word	0x4b800000
 810fbf0:	001cc471 	.word	0x001cc471
 810fbf4:	005db3d6 	.word	0x005db3d6
 810fbf8:	0817e9e8 	.word	0x0817e9e8
 810fbfc:	fffff000 	.word	0xfffff000
 810fc00:	3e6c3255 	.word	0x3e6c3255
 810fc04:	3e53f142 	.word	0x3e53f142
 810fc08:	3e8ba305 	.word	0x3e8ba305
 810fc0c:	3edb6db7 	.word	0x3edb6db7
 810fc10:	3f19999a 	.word	0x3f19999a
 810fc14:	3f76384f 	.word	0x3f76384f
 810fc18:	0817e9f8 	.word	0x0817e9f8
 810fc1c:	3f763800 	.word	0x3f763800
 810fc20:	369dc3a0 	.word	0x369dc3a0
 810fc24:	0817e9f0 	.word	0x0817e9f0
 810fc28:	3338aa3c 	.word	0x3338aa3c
 810fc2c:	f040 8093 	bne.w	810fd56 <__ieee754_powf+0x53e>
 810fc30:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 810fc28 <__ieee754_powf+0x410>
 810fc34:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fc38:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810fc3c:	eef4 6ac7 	vcmpe.f32	s13, s14
 810fc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fc44:	f73f aefa 	bgt.w	810fa3c <__ieee754_powf+0x224>
 810fc48:	15db      	asrs	r3, r3, #23
 810fc4a:	3b7e      	subs	r3, #126	; 0x7e
 810fc4c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 810fc50:	4118      	asrs	r0, r3
 810fc52:	4408      	add	r0, r1
 810fc54:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 810fc58:	4a49      	ldr	r2, [pc, #292]	; (810fd80 <__ieee754_powf+0x568>)
 810fc5a:	3b7f      	subs	r3, #127	; 0x7f
 810fc5c:	411a      	asrs	r2, r3
 810fc5e:	4002      	ands	r2, r0
 810fc60:	ee07 2a10 	vmov	s14, r2
 810fc64:	f3c0 0016 	ubfx	r0, r0, #0, #23
 810fc68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 810fc6c:	f1c3 0317 	rsb	r3, r3, #23
 810fc70:	4118      	asrs	r0, r3
 810fc72:	2900      	cmp	r1, #0
 810fc74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fc78:	bfb8      	it	lt
 810fc7a:	4240      	neglt	r0, r0
 810fc7c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 810fc80:	eddf 6a40 	vldr	s13, [pc, #256]	; 810fd84 <__ieee754_powf+0x56c>
 810fc84:	ed9f 6a40 	vldr	s12, [pc, #256]	; 810fd88 <__ieee754_powf+0x570>
 810fc88:	ee17 3a10 	vmov	r3, s14
 810fc8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810fc90:	f023 030f 	bic.w	r3, r3, #15
 810fc94:	ee07 3a10 	vmov	s14, r3
 810fc98:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fc9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fca0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810fca4:	eddf 7a39 	vldr	s15, [pc, #228]	; 810fd8c <__ieee754_powf+0x574>
 810fca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fcac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810fcb0:	eef0 6a67 	vmov.f32	s13, s15
 810fcb4:	eee7 6a06 	vfma.f32	s13, s14, s12
 810fcb8:	eef0 5a66 	vmov.f32	s11, s13
 810fcbc:	eee7 5a46 	vfms.f32	s11, s14, s12
 810fcc0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810fcc4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810fcc8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 810fd90 <__ieee754_powf+0x578>
 810fccc:	eddf 5a31 	vldr	s11, [pc, #196]	; 810fd94 <__ieee754_powf+0x57c>
 810fcd0:	eea7 6a25 	vfma.f32	s12, s14, s11
 810fcd4:	eddf 5a30 	vldr	s11, [pc, #192]	; 810fd98 <__ieee754_powf+0x580>
 810fcd8:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fcdc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 810fd9c <__ieee754_powf+0x584>
 810fce0:	eea5 6a87 	vfma.f32	s12, s11, s14
 810fce4:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810fda0 <__ieee754_powf+0x588>
 810fce8:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fcec:	eeb0 6a66 	vmov.f32	s12, s13
 810fcf0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810fcf4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 810fcf8:	ee66 5a86 	vmul.f32	s11, s13, s12
 810fcfc:	ee36 6a47 	vsub.f32	s12, s12, s14
 810fd00:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810fd04:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810fd08:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fd0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fd10:	ee30 0a67 	vsub.f32	s0, s0, s15
 810fd14:	ee10 3a10 	vmov	r3, s0
 810fd18:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810fd1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810fd20:	da1f      	bge.n	810fd62 <__ieee754_powf+0x54a>
 810fd22:	f000 f865 	bl	810fdf0 <scalbnf>
 810fd26:	ee20 0a08 	vmul.f32	s0, s0, s16
 810fd2a:	e58d      	b.n	810f848 <__ieee754_powf+0x30>
 810fd2c:	4a1d      	ldr	r2, [pc, #116]	; (810fda4 <__ieee754_powf+0x58c>)
 810fd2e:	4293      	cmp	r3, r2
 810fd30:	dd07      	ble.n	810fd42 <__ieee754_powf+0x52a>
 810fd32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810fd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fd3a:	bf4c      	ite	mi
 810fd3c:	2001      	movmi	r0, #1
 810fd3e:	2000      	movpl	r0, #0
 810fd40:	e622      	b.n	810f988 <__ieee754_powf+0x170>
 810fd42:	d108      	bne.n	810fd56 <__ieee754_powf+0x53e>
 810fd44:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fd48:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810fd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fd50:	f6ff af7a 	blt.w	810fc48 <__ieee754_powf+0x430>
 810fd54:	e7ed      	b.n	810fd32 <__ieee754_powf+0x51a>
 810fd56:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 810fd5a:	f73f af75 	bgt.w	810fc48 <__ieee754_powf+0x430>
 810fd5e:	2000      	movs	r0, #0
 810fd60:	e78c      	b.n	810fc7c <__ieee754_powf+0x464>
 810fd62:	ee00 3a10 	vmov	s0, r3
 810fd66:	e7de      	b.n	810fd26 <__ieee754_powf+0x50e>
 810fd68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fd6c:	e56c      	b.n	810f848 <__ieee754_powf+0x30>
 810fd6e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 810fda8 <__ieee754_powf+0x590>
 810fd72:	e569      	b.n	810f848 <__ieee754_powf+0x30>
 810fd74:	eeb0 0a48 	vmov.f32	s0, s16
 810fd78:	e566      	b.n	810f848 <__ieee754_powf+0x30>
 810fd7a:	2600      	movs	r6, #0
 810fd7c:	e591      	b.n	810f8a2 <__ieee754_powf+0x8a>
 810fd7e:	bf00      	nop
 810fd80:	ff800000 	.word	0xff800000
 810fd84:	3f317218 	.word	0x3f317218
 810fd88:	3f317200 	.word	0x3f317200
 810fd8c:	35bfbe8c 	.word	0x35bfbe8c
 810fd90:	b5ddea0e 	.word	0xb5ddea0e
 810fd94:	3331bb4c 	.word	0x3331bb4c
 810fd98:	388ab355 	.word	0x388ab355
 810fd9c:	bb360b61 	.word	0xbb360b61
 810fda0:	3e2aaaab 	.word	0x3e2aaaab
 810fda4:	43160000 	.word	0x43160000
 810fda8:	00000000 	.word	0x00000000

0810fdac <with_errnof>:
 810fdac:	b513      	push	{r0, r1, r4, lr}
 810fdae:	4604      	mov	r4, r0
 810fdb0:	ed8d 0a01 	vstr	s0, [sp, #4]
 810fdb4:	f000 fa68 	bl	8110288 <__errno>
 810fdb8:	ed9d 0a01 	vldr	s0, [sp, #4]
 810fdbc:	6004      	str	r4, [r0, #0]
 810fdbe:	b002      	add	sp, #8
 810fdc0:	bd10      	pop	{r4, pc}

0810fdc2 <xflowf>:
 810fdc2:	b130      	cbz	r0, 810fdd2 <xflowf+0x10>
 810fdc4:	eef1 7a40 	vneg.f32	s15, s0
 810fdc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 810fdcc:	2022      	movs	r0, #34	; 0x22
 810fdce:	f7ff bfed 	b.w	810fdac <with_errnof>
 810fdd2:	eef0 7a40 	vmov.f32	s15, s0
 810fdd6:	e7f7      	b.n	810fdc8 <xflowf+0x6>

0810fdd8 <__math_uflowf>:
 810fdd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810fde0 <__math_uflowf+0x8>
 810fddc:	f7ff bff1 	b.w	810fdc2 <xflowf>
 810fde0:	10000000 	.word	0x10000000

0810fde4 <__math_oflowf>:
 810fde4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810fdec <__math_oflowf+0x8>
 810fde8:	f7ff bfeb 	b.w	810fdc2 <xflowf>
 810fdec:	70000000 	.word	0x70000000

0810fdf0 <scalbnf>:
 810fdf0:	ee10 3a10 	vmov	r3, s0
 810fdf4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810fdf8:	d02b      	beq.n	810fe52 <scalbnf+0x62>
 810fdfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810fdfe:	d302      	bcc.n	810fe06 <scalbnf+0x16>
 810fe00:	ee30 0a00 	vadd.f32	s0, s0, s0
 810fe04:	4770      	bx	lr
 810fe06:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 810fe0a:	d123      	bne.n	810fe54 <scalbnf+0x64>
 810fe0c:	4b24      	ldr	r3, [pc, #144]	; (810fea0 <scalbnf+0xb0>)
 810fe0e:	eddf 7a25 	vldr	s15, [pc, #148]	; 810fea4 <scalbnf+0xb4>
 810fe12:	4298      	cmp	r0, r3
 810fe14:	ee20 0a27 	vmul.f32	s0, s0, s15
 810fe18:	db17      	blt.n	810fe4a <scalbnf+0x5a>
 810fe1a:	ee10 3a10 	vmov	r3, s0
 810fe1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810fe22:	3a19      	subs	r2, #25
 810fe24:	f24c 3150 	movw	r1, #50000	; 0xc350
 810fe28:	4288      	cmp	r0, r1
 810fe2a:	dd15      	ble.n	810fe58 <scalbnf+0x68>
 810fe2c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 810fea8 <scalbnf+0xb8>
 810fe30:	eddf 6a1e 	vldr	s13, [pc, #120]	; 810feac <scalbnf+0xbc>
 810fe34:	ee10 3a10 	vmov	r3, s0
 810fe38:	eeb0 7a67 	vmov.f32	s14, s15
 810fe3c:	2b00      	cmp	r3, #0
 810fe3e:	bfb8      	it	lt
 810fe40:	eef0 7a66 	vmovlt.f32	s15, s13
 810fe44:	ee27 0a87 	vmul.f32	s0, s15, s14
 810fe48:	4770      	bx	lr
 810fe4a:	eddf 7a19 	vldr	s15, [pc, #100]	; 810feb0 <scalbnf+0xc0>
 810fe4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 810fe52:	4770      	bx	lr
 810fe54:	0dd2      	lsrs	r2, r2, #23
 810fe56:	e7e5      	b.n	810fe24 <scalbnf+0x34>
 810fe58:	4410      	add	r0, r2
 810fe5a:	28fe      	cmp	r0, #254	; 0xfe
 810fe5c:	dce6      	bgt.n	810fe2c <scalbnf+0x3c>
 810fe5e:	2800      	cmp	r0, #0
 810fe60:	dd06      	ble.n	810fe70 <scalbnf+0x80>
 810fe62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810fe66:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810fe6a:	ee00 3a10 	vmov	s0, r3
 810fe6e:	4770      	bx	lr
 810fe70:	f110 0f16 	cmn.w	r0, #22
 810fe74:	da09      	bge.n	810fe8a <scalbnf+0x9a>
 810fe76:	eddf 7a0e 	vldr	s15, [pc, #56]	; 810feb0 <scalbnf+0xc0>
 810fe7a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 810feb4 <scalbnf+0xc4>
 810fe7e:	ee10 3a10 	vmov	r3, s0
 810fe82:	eeb0 7a67 	vmov.f32	s14, s15
 810fe86:	2b00      	cmp	r3, #0
 810fe88:	e7d9      	b.n	810fe3e <scalbnf+0x4e>
 810fe8a:	3019      	adds	r0, #25
 810fe8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810fe90:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810fe94:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810feb8 <scalbnf+0xc8>
 810fe98:	ee07 3a90 	vmov	s15, r3
 810fe9c:	e7d7      	b.n	810fe4e <scalbnf+0x5e>
 810fe9e:	bf00      	nop
 810fea0:	ffff3cb0 	.word	0xffff3cb0
 810fea4:	4c000000 	.word	0x4c000000
 810fea8:	7149f2ca 	.word	0x7149f2ca
 810feac:	f149f2ca 	.word	0xf149f2ca
 810feb0:	0da24260 	.word	0x0da24260
 810feb4:	8da24260 	.word	0x8da24260
 810feb8:	33000000 	.word	0x33000000

0810febc <__ieee754_sqrtf>:
 810febc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810fec0:	4770      	bx	lr
	...

0810fec4 <sbrk_aligned>:
 810fec4:	b570      	push	{r4, r5, r6, lr}
 810fec6:	4e0e      	ldr	r6, [pc, #56]	; (810ff00 <sbrk_aligned+0x3c>)
 810fec8:	460c      	mov	r4, r1
 810feca:	6831      	ldr	r1, [r6, #0]
 810fecc:	4605      	mov	r5, r0
 810fece:	b911      	cbnz	r1, 810fed6 <sbrk_aligned+0x12>
 810fed0:	f000 f9ca 	bl	8110268 <_sbrk_r>
 810fed4:	6030      	str	r0, [r6, #0]
 810fed6:	4621      	mov	r1, r4
 810fed8:	4628      	mov	r0, r5
 810feda:	f000 f9c5 	bl	8110268 <_sbrk_r>
 810fede:	1c43      	adds	r3, r0, #1
 810fee0:	d00a      	beq.n	810fef8 <sbrk_aligned+0x34>
 810fee2:	1cc4      	adds	r4, r0, #3
 810fee4:	f024 0403 	bic.w	r4, r4, #3
 810fee8:	42a0      	cmp	r0, r4
 810feea:	d007      	beq.n	810fefc <sbrk_aligned+0x38>
 810feec:	1a21      	subs	r1, r4, r0
 810feee:	4628      	mov	r0, r5
 810fef0:	f000 f9ba 	bl	8110268 <_sbrk_r>
 810fef4:	3001      	adds	r0, #1
 810fef6:	d101      	bne.n	810fefc <sbrk_aligned+0x38>
 810fef8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810fefc:	4620      	mov	r0, r4
 810fefe:	bd70      	pop	{r4, r5, r6, pc}
 810ff00:	1003fedc 	.word	0x1003fedc

0810ff04 <_malloc_r>:
 810ff04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ff08:	1ccd      	adds	r5, r1, #3
 810ff0a:	f025 0503 	bic.w	r5, r5, #3
 810ff0e:	3508      	adds	r5, #8
 810ff10:	2d0c      	cmp	r5, #12
 810ff12:	bf38      	it	cc
 810ff14:	250c      	movcc	r5, #12
 810ff16:	2d00      	cmp	r5, #0
 810ff18:	4607      	mov	r7, r0
 810ff1a:	db01      	blt.n	810ff20 <_malloc_r+0x1c>
 810ff1c:	42a9      	cmp	r1, r5
 810ff1e:	d905      	bls.n	810ff2c <_malloc_r+0x28>
 810ff20:	230c      	movs	r3, #12
 810ff22:	603b      	str	r3, [r7, #0]
 810ff24:	2600      	movs	r6, #0
 810ff26:	4630      	mov	r0, r6
 810ff28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ff2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8110000 <_malloc_r+0xfc>
 810ff30:	f000 f868 	bl	8110004 <__malloc_lock>
 810ff34:	f8d8 3000 	ldr.w	r3, [r8]
 810ff38:	461c      	mov	r4, r3
 810ff3a:	bb5c      	cbnz	r4, 810ff94 <_malloc_r+0x90>
 810ff3c:	4629      	mov	r1, r5
 810ff3e:	4638      	mov	r0, r7
 810ff40:	f7ff ffc0 	bl	810fec4 <sbrk_aligned>
 810ff44:	1c43      	adds	r3, r0, #1
 810ff46:	4604      	mov	r4, r0
 810ff48:	d155      	bne.n	810fff6 <_malloc_r+0xf2>
 810ff4a:	f8d8 4000 	ldr.w	r4, [r8]
 810ff4e:	4626      	mov	r6, r4
 810ff50:	2e00      	cmp	r6, #0
 810ff52:	d145      	bne.n	810ffe0 <_malloc_r+0xdc>
 810ff54:	2c00      	cmp	r4, #0
 810ff56:	d048      	beq.n	810ffea <_malloc_r+0xe6>
 810ff58:	6823      	ldr	r3, [r4, #0]
 810ff5a:	4631      	mov	r1, r6
 810ff5c:	4638      	mov	r0, r7
 810ff5e:	eb04 0903 	add.w	r9, r4, r3
 810ff62:	f000 f981 	bl	8110268 <_sbrk_r>
 810ff66:	4581      	cmp	r9, r0
 810ff68:	d13f      	bne.n	810ffea <_malloc_r+0xe6>
 810ff6a:	6821      	ldr	r1, [r4, #0]
 810ff6c:	1a6d      	subs	r5, r5, r1
 810ff6e:	4629      	mov	r1, r5
 810ff70:	4638      	mov	r0, r7
 810ff72:	f7ff ffa7 	bl	810fec4 <sbrk_aligned>
 810ff76:	3001      	adds	r0, #1
 810ff78:	d037      	beq.n	810ffea <_malloc_r+0xe6>
 810ff7a:	6823      	ldr	r3, [r4, #0]
 810ff7c:	442b      	add	r3, r5
 810ff7e:	6023      	str	r3, [r4, #0]
 810ff80:	f8d8 3000 	ldr.w	r3, [r8]
 810ff84:	2b00      	cmp	r3, #0
 810ff86:	d038      	beq.n	810fffa <_malloc_r+0xf6>
 810ff88:	685a      	ldr	r2, [r3, #4]
 810ff8a:	42a2      	cmp	r2, r4
 810ff8c:	d12b      	bne.n	810ffe6 <_malloc_r+0xe2>
 810ff8e:	2200      	movs	r2, #0
 810ff90:	605a      	str	r2, [r3, #4]
 810ff92:	e00f      	b.n	810ffb4 <_malloc_r+0xb0>
 810ff94:	6822      	ldr	r2, [r4, #0]
 810ff96:	1b52      	subs	r2, r2, r5
 810ff98:	d41f      	bmi.n	810ffda <_malloc_r+0xd6>
 810ff9a:	2a0b      	cmp	r2, #11
 810ff9c:	d917      	bls.n	810ffce <_malloc_r+0xca>
 810ff9e:	1961      	adds	r1, r4, r5
 810ffa0:	42a3      	cmp	r3, r4
 810ffa2:	6025      	str	r5, [r4, #0]
 810ffa4:	bf18      	it	ne
 810ffa6:	6059      	strne	r1, [r3, #4]
 810ffa8:	6863      	ldr	r3, [r4, #4]
 810ffaa:	bf08      	it	eq
 810ffac:	f8c8 1000 	streq.w	r1, [r8]
 810ffb0:	5162      	str	r2, [r4, r5]
 810ffb2:	604b      	str	r3, [r1, #4]
 810ffb4:	4638      	mov	r0, r7
 810ffb6:	f104 060b 	add.w	r6, r4, #11
 810ffba:	f000 f829 	bl	8110010 <__malloc_unlock>
 810ffbe:	f026 0607 	bic.w	r6, r6, #7
 810ffc2:	1d23      	adds	r3, r4, #4
 810ffc4:	1af2      	subs	r2, r6, r3
 810ffc6:	d0ae      	beq.n	810ff26 <_malloc_r+0x22>
 810ffc8:	1b9b      	subs	r3, r3, r6
 810ffca:	50a3      	str	r3, [r4, r2]
 810ffcc:	e7ab      	b.n	810ff26 <_malloc_r+0x22>
 810ffce:	42a3      	cmp	r3, r4
 810ffd0:	6862      	ldr	r2, [r4, #4]
 810ffd2:	d1dd      	bne.n	810ff90 <_malloc_r+0x8c>
 810ffd4:	f8c8 2000 	str.w	r2, [r8]
 810ffd8:	e7ec      	b.n	810ffb4 <_malloc_r+0xb0>
 810ffda:	4623      	mov	r3, r4
 810ffdc:	6864      	ldr	r4, [r4, #4]
 810ffde:	e7ac      	b.n	810ff3a <_malloc_r+0x36>
 810ffe0:	4634      	mov	r4, r6
 810ffe2:	6876      	ldr	r6, [r6, #4]
 810ffe4:	e7b4      	b.n	810ff50 <_malloc_r+0x4c>
 810ffe6:	4613      	mov	r3, r2
 810ffe8:	e7cc      	b.n	810ff84 <_malloc_r+0x80>
 810ffea:	230c      	movs	r3, #12
 810ffec:	603b      	str	r3, [r7, #0]
 810ffee:	4638      	mov	r0, r7
 810fff0:	f000 f80e 	bl	8110010 <__malloc_unlock>
 810fff4:	e797      	b.n	810ff26 <_malloc_r+0x22>
 810fff6:	6025      	str	r5, [r4, #0]
 810fff8:	e7dc      	b.n	810ffb4 <_malloc_r+0xb0>
 810fffa:	605b      	str	r3, [r3, #4]
 810fffc:	deff      	udf	#255	; 0xff
 810fffe:	bf00      	nop
 8110000:	1003fed8 	.word	0x1003fed8

08110004 <__malloc_lock>:
 8110004:	4801      	ldr	r0, [pc, #4]	; (811000c <__malloc_lock+0x8>)
 8110006:	f000 b96a 	b.w	81102de <__retarget_lock_acquire_recursive>
 811000a:	bf00      	nop
 811000c:	1004001c 	.word	0x1004001c

08110010 <__malloc_unlock>:
 8110010:	4801      	ldr	r0, [pc, #4]	; (8110018 <__malloc_unlock+0x8>)
 8110012:	f000 b965 	b.w	81102e0 <__retarget_lock_release_recursive>
 8110016:	bf00      	nop
 8110018:	1004001c 	.word	0x1004001c

0811001c <std>:
 811001c:	2300      	movs	r3, #0
 811001e:	b510      	push	{r4, lr}
 8110020:	4604      	mov	r4, r0
 8110022:	e9c0 3300 	strd	r3, r3, [r0]
 8110026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811002a:	6083      	str	r3, [r0, #8]
 811002c:	8181      	strh	r1, [r0, #12]
 811002e:	6643      	str	r3, [r0, #100]	; 0x64
 8110030:	81c2      	strh	r2, [r0, #14]
 8110032:	6183      	str	r3, [r0, #24]
 8110034:	4619      	mov	r1, r3
 8110036:	2208      	movs	r2, #8
 8110038:	305c      	adds	r0, #92	; 0x5c
 811003a:	f000 f90d 	bl	8110258 <memset>
 811003e:	4b0d      	ldr	r3, [pc, #52]	; (8110074 <std+0x58>)
 8110040:	6263      	str	r3, [r4, #36]	; 0x24
 8110042:	4b0d      	ldr	r3, [pc, #52]	; (8110078 <std+0x5c>)
 8110044:	62a3      	str	r3, [r4, #40]	; 0x28
 8110046:	4b0d      	ldr	r3, [pc, #52]	; (811007c <std+0x60>)
 8110048:	62e3      	str	r3, [r4, #44]	; 0x2c
 811004a:	4b0d      	ldr	r3, [pc, #52]	; (8110080 <std+0x64>)
 811004c:	6323      	str	r3, [r4, #48]	; 0x30
 811004e:	4b0d      	ldr	r3, [pc, #52]	; (8110084 <std+0x68>)
 8110050:	6224      	str	r4, [r4, #32]
 8110052:	429c      	cmp	r4, r3
 8110054:	d006      	beq.n	8110064 <std+0x48>
 8110056:	f103 0268 	add.w	r2, r3, #104	; 0x68
 811005a:	4294      	cmp	r4, r2
 811005c:	d002      	beq.n	8110064 <std+0x48>
 811005e:	33d0      	adds	r3, #208	; 0xd0
 8110060:	429c      	cmp	r4, r3
 8110062:	d105      	bne.n	8110070 <std+0x54>
 8110064:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8110068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811006c:	f000 b936 	b.w	81102dc <__retarget_lock_init_recursive>
 8110070:	bd10      	pop	{r4, pc}
 8110072:	bf00      	nop
 8110074:	081104d9 	.word	0x081104d9
 8110078:	081104fb 	.word	0x081104fb
 811007c:	08110533 	.word	0x08110533
 8110080:	08110557 	.word	0x08110557
 8110084:	1003fee0 	.word	0x1003fee0

08110088 <stdio_exit_handler>:
 8110088:	4a02      	ldr	r2, [pc, #8]	; (8110094 <stdio_exit_handler+0xc>)
 811008a:	4903      	ldr	r1, [pc, #12]	; (8110098 <stdio_exit_handler+0x10>)
 811008c:	4803      	ldr	r0, [pc, #12]	; (811009c <stdio_exit_handler+0x14>)
 811008e:	f000 b869 	b.w	8110164 <_fwalk_sglue>
 8110092:	bf00      	nop
 8110094:	10007380 	.word	0x10007380
 8110098:	08110489 	.word	0x08110489
 811009c:	1000738c 	.word	0x1000738c

081100a0 <cleanup_stdio>:
 81100a0:	6841      	ldr	r1, [r0, #4]
 81100a2:	4b0c      	ldr	r3, [pc, #48]	; (81100d4 <cleanup_stdio+0x34>)
 81100a4:	4299      	cmp	r1, r3
 81100a6:	b510      	push	{r4, lr}
 81100a8:	4604      	mov	r4, r0
 81100aa:	d001      	beq.n	81100b0 <cleanup_stdio+0x10>
 81100ac:	f000 f9ec 	bl	8110488 <_fflush_r>
 81100b0:	68a1      	ldr	r1, [r4, #8]
 81100b2:	4b09      	ldr	r3, [pc, #36]	; (81100d8 <cleanup_stdio+0x38>)
 81100b4:	4299      	cmp	r1, r3
 81100b6:	d002      	beq.n	81100be <cleanup_stdio+0x1e>
 81100b8:	4620      	mov	r0, r4
 81100ba:	f000 f9e5 	bl	8110488 <_fflush_r>
 81100be:	68e1      	ldr	r1, [r4, #12]
 81100c0:	4b06      	ldr	r3, [pc, #24]	; (81100dc <cleanup_stdio+0x3c>)
 81100c2:	4299      	cmp	r1, r3
 81100c4:	d004      	beq.n	81100d0 <cleanup_stdio+0x30>
 81100c6:	4620      	mov	r0, r4
 81100c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81100cc:	f000 b9dc 	b.w	8110488 <_fflush_r>
 81100d0:	bd10      	pop	{r4, pc}
 81100d2:	bf00      	nop
 81100d4:	1003fee0 	.word	0x1003fee0
 81100d8:	1003ff48 	.word	0x1003ff48
 81100dc:	1003ffb0 	.word	0x1003ffb0

081100e0 <global_stdio_init.part.0>:
 81100e0:	b510      	push	{r4, lr}
 81100e2:	4b0b      	ldr	r3, [pc, #44]	; (8110110 <global_stdio_init.part.0+0x30>)
 81100e4:	4c0b      	ldr	r4, [pc, #44]	; (8110114 <global_stdio_init.part.0+0x34>)
 81100e6:	4a0c      	ldr	r2, [pc, #48]	; (8110118 <global_stdio_init.part.0+0x38>)
 81100e8:	601a      	str	r2, [r3, #0]
 81100ea:	4620      	mov	r0, r4
 81100ec:	2200      	movs	r2, #0
 81100ee:	2104      	movs	r1, #4
 81100f0:	f7ff ff94 	bl	811001c <std>
 81100f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 81100f8:	2201      	movs	r2, #1
 81100fa:	2109      	movs	r1, #9
 81100fc:	f7ff ff8e 	bl	811001c <std>
 8110100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8110104:	2202      	movs	r2, #2
 8110106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811010a:	2112      	movs	r1, #18
 811010c:	f7ff bf86 	b.w	811001c <std>
 8110110:	10040018 	.word	0x10040018
 8110114:	1003fee0 	.word	0x1003fee0
 8110118:	08110089 	.word	0x08110089

0811011c <__sfp_lock_acquire>:
 811011c:	4801      	ldr	r0, [pc, #4]	; (8110124 <__sfp_lock_acquire+0x8>)
 811011e:	f000 b8de 	b.w	81102de <__retarget_lock_acquire_recursive>
 8110122:	bf00      	nop
 8110124:	1004001d 	.word	0x1004001d

08110128 <__sfp_lock_release>:
 8110128:	4801      	ldr	r0, [pc, #4]	; (8110130 <__sfp_lock_release+0x8>)
 811012a:	f000 b8d9 	b.w	81102e0 <__retarget_lock_release_recursive>
 811012e:	bf00      	nop
 8110130:	1004001d 	.word	0x1004001d

08110134 <__sinit>:
 8110134:	b510      	push	{r4, lr}
 8110136:	4604      	mov	r4, r0
 8110138:	f7ff fff0 	bl	811011c <__sfp_lock_acquire>
 811013c:	6a23      	ldr	r3, [r4, #32]
 811013e:	b11b      	cbz	r3, 8110148 <__sinit+0x14>
 8110140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110144:	f7ff bff0 	b.w	8110128 <__sfp_lock_release>
 8110148:	4b04      	ldr	r3, [pc, #16]	; (811015c <__sinit+0x28>)
 811014a:	6223      	str	r3, [r4, #32]
 811014c:	4b04      	ldr	r3, [pc, #16]	; (8110160 <__sinit+0x2c>)
 811014e:	681b      	ldr	r3, [r3, #0]
 8110150:	2b00      	cmp	r3, #0
 8110152:	d1f5      	bne.n	8110140 <__sinit+0xc>
 8110154:	f7ff ffc4 	bl	81100e0 <global_stdio_init.part.0>
 8110158:	e7f2      	b.n	8110140 <__sinit+0xc>
 811015a:	bf00      	nop
 811015c:	081100a1 	.word	0x081100a1
 8110160:	10040018 	.word	0x10040018

08110164 <_fwalk_sglue>:
 8110164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110168:	4607      	mov	r7, r0
 811016a:	4688      	mov	r8, r1
 811016c:	4614      	mov	r4, r2
 811016e:	2600      	movs	r6, #0
 8110170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8110174:	f1b9 0901 	subs.w	r9, r9, #1
 8110178:	d505      	bpl.n	8110186 <_fwalk_sglue+0x22>
 811017a:	6824      	ldr	r4, [r4, #0]
 811017c:	2c00      	cmp	r4, #0
 811017e:	d1f7      	bne.n	8110170 <_fwalk_sglue+0xc>
 8110180:	4630      	mov	r0, r6
 8110182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8110186:	89ab      	ldrh	r3, [r5, #12]
 8110188:	2b01      	cmp	r3, #1
 811018a:	d907      	bls.n	811019c <_fwalk_sglue+0x38>
 811018c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8110190:	3301      	adds	r3, #1
 8110192:	d003      	beq.n	811019c <_fwalk_sglue+0x38>
 8110194:	4629      	mov	r1, r5
 8110196:	4638      	mov	r0, r7
 8110198:	47c0      	blx	r8
 811019a:	4306      	orrs	r6, r0
 811019c:	3568      	adds	r5, #104	; 0x68
 811019e:	e7e9      	b.n	8110174 <_fwalk_sglue+0x10>

081101a0 <_puts_r>:
 81101a0:	6a03      	ldr	r3, [r0, #32]
 81101a2:	b570      	push	{r4, r5, r6, lr}
 81101a4:	6884      	ldr	r4, [r0, #8]
 81101a6:	4605      	mov	r5, r0
 81101a8:	460e      	mov	r6, r1
 81101aa:	b90b      	cbnz	r3, 81101b0 <_puts_r+0x10>
 81101ac:	f7ff ffc2 	bl	8110134 <__sinit>
 81101b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81101b2:	07db      	lsls	r3, r3, #31
 81101b4:	d405      	bmi.n	81101c2 <_puts_r+0x22>
 81101b6:	89a3      	ldrh	r3, [r4, #12]
 81101b8:	0598      	lsls	r0, r3, #22
 81101ba:	d402      	bmi.n	81101c2 <_puts_r+0x22>
 81101bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81101be:	f000 f88e 	bl	81102de <__retarget_lock_acquire_recursive>
 81101c2:	89a3      	ldrh	r3, [r4, #12]
 81101c4:	0719      	lsls	r1, r3, #28
 81101c6:	d513      	bpl.n	81101f0 <_puts_r+0x50>
 81101c8:	6923      	ldr	r3, [r4, #16]
 81101ca:	b18b      	cbz	r3, 81101f0 <_puts_r+0x50>
 81101cc:	3e01      	subs	r6, #1
 81101ce:	68a3      	ldr	r3, [r4, #8]
 81101d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 81101d4:	3b01      	subs	r3, #1
 81101d6:	60a3      	str	r3, [r4, #8]
 81101d8:	b9e9      	cbnz	r1, 8110216 <_puts_r+0x76>
 81101da:	2b00      	cmp	r3, #0
 81101dc:	da2e      	bge.n	811023c <_puts_r+0x9c>
 81101de:	4622      	mov	r2, r4
 81101e0:	210a      	movs	r1, #10
 81101e2:	4628      	mov	r0, r5
 81101e4:	f000 f9bb 	bl	811055e <__swbuf_r>
 81101e8:	3001      	adds	r0, #1
 81101ea:	d007      	beq.n	81101fc <_puts_r+0x5c>
 81101ec:	250a      	movs	r5, #10
 81101ee:	e007      	b.n	8110200 <_puts_r+0x60>
 81101f0:	4621      	mov	r1, r4
 81101f2:	4628      	mov	r0, r5
 81101f4:	f000 f9f0 	bl	81105d8 <__swsetup_r>
 81101f8:	2800      	cmp	r0, #0
 81101fa:	d0e7      	beq.n	81101cc <_puts_r+0x2c>
 81101fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8110200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8110202:	07da      	lsls	r2, r3, #31
 8110204:	d405      	bmi.n	8110212 <_puts_r+0x72>
 8110206:	89a3      	ldrh	r3, [r4, #12]
 8110208:	059b      	lsls	r3, r3, #22
 811020a:	d402      	bmi.n	8110212 <_puts_r+0x72>
 811020c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811020e:	f000 f867 	bl	81102e0 <__retarget_lock_release_recursive>
 8110212:	4628      	mov	r0, r5
 8110214:	bd70      	pop	{r4, r5, r6, pc}
 8110216:	2b00      	cmp	r3, #0
 8110218:	da04      	bge.n	8110224 <_puts_r+0x84>
 811021a:	69a2      	ldr	r2, [r4, #24]
 811021c:	429a      	cmp	r2, r3
 811021e:	dc06      	bgt.n	811022e <_puts_r+0x8e>
 8110220:	290a      	cmp	r1, #10
 8110222:	d004      	beq.n	811022e <_puts_r+0x8e>
 8110224:	6823      	ldr	r3, [r4, #0]
 8110226:	1c5a      	adds	r2, r3, #1
 8110228:	6022      	str	r2, [r4, #0]
 811022a:	7019      	strb	r1, [r3, #0]
 811022c:	e7cf      	b.n	81101ce <_puts_r+0x2e>
 811022e:	4622      	mov	r2, r4
 8110230:	4628      	mov	r0, r5
 8110232:	f000 f994 	bl	811055e <__swbuf_r>
 8110236:	3001      	adds	r0, #1
 8110238:	d1c9      	bne.n	81101ce <_puts_r+0x2e>
 811023a:	e7df      	b.n	81101fc <_puts_r+0x5c>
 811023c:	6823      	ldr	r3, [r4, #0]
 811023e:	250a      	movs	r5, #10
 8110240:	1c5a      	adds	r2, r3, #1
 8110242:	6022      	str	r2, [r4, #0]
 8110244:	701d      	strb	r5, [r3, #0]
 8110246:	e7db      	b.n	8110200 <_puts_r+0x60>

08110248 <puts>:
 8110248:	4b02      	ldr	r3, [pc, #8]	; (8110254 <puts+0xc>)
 811024a:	4601      	mov	r1, r0
 811024c:	6818      	ldr	r0, [r3, #0]
 811024e:	f7ff bfa7 	b.w	81101a0 <_puts_r>
 8110252:	bf00      	nop
 8110254:	100073d8 	.word	0x100073d8

08110258 <memset>:
 8110258:	4402      	add	r2, r0
 811025a:	4603      	mov	r3, r0
 811025c:	4293      	cmp	r3, r2
 811025e:	d100      	bne.n	8110262 <memset+0xa>
 8110260:	4770      	bx	lr
 8110262:	f803 1b01 	strb.w	r1, [r3], #1
 8110266:	e7f9      	b.n	811025c <memset+0x4>

08110268 <_sbrk_r>:
 8110268:	b538      	push	{r3, r4, r5, lr}
 811026a:	4d06      	ldr	r5, [pc, #24]	; (8110284 <_sbrk_r+0x1c>)
 811026c:	2300      	movs	r3, #0
 811026e:	4604      	mov	r4, r0
 8110270:	4608      	mov	r0, r1
 8110272:	602b      	str	r3, [r5, #0]
 8110274:	f7f1 f8e4 	bl	8101440 <_sbrk>
 8110278:	1c43      	adds	r3, r0, #1
 811027a:	d102      	bne.n	8110282 <_sbrk_r+0x1a>
 811027c:	682b      	ldr	r3, [r5, #0]
 811027e:	b103      	cbz	r3, 8110282 <_sbrk_r+0x1a>
 8110280:	6023      	str	r3, [r4, #0]
 8110282:	bd38      	pop	{r3, r4, r5, pc}
 8110284:	10040020 	.word	0x10040020

08110288 <__errno>:
 8110288:	4b01      	ldr	r3, [pc, #4]	; (8110290 <__errno+0x8>)
 811028a:	6818      	ldr	r0, [r3, #0]
 811028c:	4770      	bx	lr
 811028e:	bf00      	nop
 8110290:	100073d8 	.word	0x100073d8

08110294 <__libc_init_array>:
 8110294:	b570      	push	{r4, r5, r6, lr}
 8110296:	4d0d      	ldr	r5, [pc, #52]	; (81102cc <__libc_init_array+0x38>)
 8110298:	4c0d      	ldr	r4, [pc, #52]	; (81102d0 <__libc_init_array+0x3c>)
 811029a:	1b64      	subs	r4, r4, r5
 811029c:	10a4      	asrs	r4, r4, #2
 811029e:	2600      	movs	r6, #0
 81102a0:	42a6      	cmp	r6, r4
 81102a2:	d109      	bne.n	81102b8 <__libc_init_array+0x24>
 81102a4:	4d0b      	ldr	r5, [pc, #44]	; (81102d4 <__libc_init_array+0x40>)
 81102a6:	4c0c      	ldr	r4, [pc, #48]	; (81102d8 <__libc_init_array+0x44>)
 81102a8:	f000 fab8 	bl	811081c <_init>
 81102ac:	1b64      	subs	r4, r4, r5
 81102ae:	10a4      	asrs	r4, r4, #2
 81102b0:	2600      	movs	r6, #0
 81102b2:	42a6      	cmp	r6, r4
 81102b4:	d105      	bne.n	81102c2 <__libc_init_array+0x2e>
 81102b6:	bd70      	pop	{r4, r5, r6, pc}
 81102b8:	f855 3b04 	ldr.w	r3, [r5], #4
 81102bc:	4798      	blx	r3
 81102be:	3601      	adds	r6, #1
 81102c0:	e7ee      	b.n	81102a0 <__libc_init_array+0xc>
 81102c2:	f855 3b04 	ldr.w	r3, [r5], #4
 81102c6:	4798      	blx	r3
 81102c8:	3601      	adds	r6, #1
 81102ca:	e7f2      	b.n	81102b2 <__libc_init_array+0x1e>
 81102cc:	0817ea08 	.word	0x0817ea08
 81102d0:	0817ea08 	.word	0x0817ea08
 81102d4:	0817ea08 	.word	0x0817ea08
 81102d8:	0817ea0c 	.word	0x0817ea0c

081102dc <__retarget_lock_init_recursive>:
 81102dc:	4770      	bx	lr

081102de <__retarget_lock_acquire_recursive>:
 81102de:	4770      	bx	lr

081102e0 <__retarget_lock_release_recursive>:
 81102e0:	4770      	bx	lr
	...

081102e4 <_free_r>:
 81102e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81102e6:	2900      	cmp	r1, #0
 81102e8:	d044      	beq.n	8110374 <_free_r+0x90>
 81102ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81102ee:	9001      	str	r0, [sp, #4]
 81102f0:	2b00      	cmp	r3, #0
 81102f2:	f1a1 0404 	sub.w	r4, r1, #4
 81102f6:	bfb8      	it	lt
 81102f8:	18e4      	addlt	r4, r4, r3
 81102fa:	f7ff fe83 	bl	8110004 <__malloc_lock>
 81102fe:	4a1e      	ldr	r2, [pc, #120]	; (8110378 <_free_r+0x94>)
 8110300:	9801      	ldr	r0, [sp, #4]
 8110302:	6813      	ldr	r3, [r2, #0]
 8110304:	b933      	cbnz	r3, 8110314 <_free_r+0x30>
 8110306:	6063      	str	r3, [r4, #4]
 8110308:	6014      	str	r4, [r2, #0]
 811030a:	b003      	add	sp, #12
 811030c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8110310:	f7ff be7e 	b.w	8110010 <__malloc_unlock>
 8110314:	42a3      	cmp	r3, r4
 8110316:	d908      	bls.n	811032a <_free_r+0x46>
 8110318:	6825      	ldr	r5, [r4, #0]
 811031a:	1961      	adds	r1, r4, r5
 811031c:	428b      	cmp	r3, r1
 811031e:	bf01      	itttt	eq
 8110320:	6819      	ldreq	r1, [r3, #0]
 8110322:	685b      	ldreq	r3, [r3, #4]
 8110324:	1949      	addeq	r1, r1, r5
 8110326:	6021      	streq	r1, [r4, #0]
 8110328:	e7ed      	b.n	8110306 <_free_r+0x22>
 811032a:	461a      	mov	r2, r3
 811032c:	685b      	ldr	r3, [r3, #4]
 811032e:	b10b      	cbz	r3, 8110334 <_free_r+0x50>
 8110330:	42a3      	cmp	r3, r4
 8110332:	d9fa      	bls.n	811032a <_free_r+0x46>
 8110334:	6811      	ldr	r1, [r2, #0]
 8110336:	1855      	adds	r5, r2, r1
 8110338:	42a5      	cmp	r5, r4
 811033a:	d10b      	bne.n	8110354 <_free_r+0x70>
 811033c:	6824      	ldr	r4, [r4, #0]
 811033e:	4421      	add	r1, r4
 8110340:	1854      	adds	r4, r2, r1
 8110342:	42a3      	cmp	r3, r4
 8110344:	6011      	str	r1, [r2, #0]
 8110346:	d1e0      	bne.n	811030a <_free_r+0x26>
 8110348:	681c      	ldr	r4, [r3, #0]
 811034a:	685b      	ldr	r3, [r3, #4]
 811034c:	6053      	str	r3, [r2, #4]
 811034e:	440c      	add	r4, r1
 8110350:	6014      	str	r4, [r2, #0]
 8110352:	e7da      	b.n	811030a <_free_r+0x26>
 8110354:	d902      	bls.n	811035c <_free_r+0x78>
 8110356:	230c      	movs	r3, #12
 8110358:	6003      	str	r3, [r0, #0]
 811035a:	e7d6      	b.n	811030a <_free_r+0x26>
 811035c:	6825      	ldr	r5, [r4, #0]
 811035e:	1961      	adds	r1, r4, r5
 8110360:	428b      	cmp	r3, r1
 8110362:	bf04      	itt	eq
 8110364:	6819      	ldreq	r1, [r3, #0]
 8110366:	685b      	ldreq	r3, [r3, #4]
 8110368:	6063      	str	r3, [r4, #4]
 811036a:	bf04      	itt	eq
 811036c:	1949      	addeq	r1, r1, r5
 811036e:	6021      	streq	r1, [r4, #0]
 8110370:	6054      	str	r4, [r2, #4]
 8110372:	e7ca      	b.n	811030a <_free_r+0x26>
 8110374:	b003      	add	sp, #12
 8110376:	bd30      	pop	{r4, r5, pc}
 8110378:	1003fed8 	.word	0x1003fed8

0811037c <__sflush_r>:
 811037c:	898a      	ldrh	r2, [r1, #12]
 811037e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110382:	4605      	mov	r5, r0
 8110384:	0710      	lsls	r0, r2, #28
 8110386:	460c      	mov	r4, r1
 8110388:	d458      	bmi.n	811043c <__sflush_r+0xc0>
 811038a:	684b      	ldr	r3, [r1, #4]
 811038c:	2b00      	cmp	r3, #0
 811038e:	dc05      	bgt.n	811039c <__sflush_r+0x20>
 8110390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8110392:	2b00      	cmp	r3, #0
 8110394:	dc02      	bgt.n	811039c <__sflush_r+0x20>
 8110396:	2000      	movs	r0, #0
 8110398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811039c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811039e:	2e00      	cmp	r6, #0
 81103a0:	d0f9      	beq.n	8110396 <__sflush_r+0x1a>
 81103a2:	2300      	movs	r3, #0
 81103a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81103a8:	682f      	ldr	r7, [r5, #0]
 81103aa:	6a21      	ldr	r1, [r4, #32]
 81103ac:	602b      	str	r3, [r5, #0]
 81103ae:	d032      	beq.n	8110416 <__sflush_r+0x9a>
 81103b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81103b2:	89a3      	ldrh	r3, [r4, #12]
 81103b4:	075a      	lsls	r2, r3, #29
 81103b6:	d505      	bpl.n	81103c4 <__sflush_r+0x48>
 81103b8:	6863      	ldr	r3, [r4, #4]
 81103ba:	1ac0      	subs	r0, r0, r3
 81103bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81103be:	b10b      	cbz	r3, 81103c4 <__sflush_r+0x48>
 81103c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81103c2:	1ac0      	subs	r0, r0, r3
 81103c4:	2300      	movs	r3, #0
 81103c6:	4602      	mov	r2, r0
 81103c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81103ca:	6a21      	ldr	r1, [r4, #32]
 81103cc:	4628      	mov	r0, r5
 81103ce:	47b0      	blx	r6
 81103d0:	1c43      	adds	r3, r0, #1
 81103d2:	89a3      	ldrh	r3, [r4, #12]
 81103d4:	d106      	bne.n	81103e4 <__sflush_r+0x68>
 81103d6:	6829      	ldr	r1, [r5, #0]
 81103d8:	291d      	cmp	r1, #29
 81103da:	d82b      	bhi.n	8110434 <__sflush_r+0xb8>
 81103dc:	4a29      	ldr	r2, [pc, #164]	; (8110484 <__sflush_r+0x108>)
 81103de:	410a      	asrs	r2, r1
 81103e0:	07d6      	lsls	r6, r2, #31
 81103e2:	d427      	bmi.n	8110434 <__sflush_r+0xb8>
 81103e4:	2200      	movs	r2, #0
 81103e6:	6062      	str	r2, [r4, #4]
 81103e8:	04d9      	lsls	r1, r3, #19
 81103ea:	6922      	ldr	r2, [r4, #16]
 81103ec:	6022      	str	r2, [r4, #0]
 81103ee:	d504      	bpl.n	81103fa <__sflush_r+0x7e>
 81103f0:	1c42      	adds	r2, r0, #1
 81103f2:	d101      	bne.n	81103f8 <__sflush_r+0x7c>
 81103f4:	682b      	ldr	r3, [r5, #0]
 81103f6:	b903      	cbnz	r3, 81103fa <__sflush_r+0x7e>
 81103f8:	6560      	str	r0, [r4, #84]	; 0x54
 81103fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81103fc:	602f      	str	r7, [r5, #0]
 81103fe:	2900      	cmp	r1, #0
 8110400:	d0c9      	beq.n	8110396 <__sflush_r+0x1a>
 8110402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8110406:	4299      	cmp	r1, r3
 8110408:	d002      	beq.n	8110410 <__sflush_r+0x94>
 811040a:	4628      	mov	r0, r5
 811040c:	f7ff ff6a 	bl	81102e4 <_free_r>
 8110410:	2000      	movs	r0, #0
 8110412:	6360      	str	r0, [r4, #52]	; 0x34
 8110414:	e7c0      	b.n	8110398 <__sflush_r+0x1c>
 8110416:	2301      	movs	r3, #1
 8110418:	4628      	mov	r0, r5
 811041a:	47b0      	blx	r6
 811041c:	1c41      	adds	r1, r0, #1
 811041e:	d1c8      	bne.n	81103b2 <__sflush_r+0x36>
 8110420:	682b      	ldr	r3, [r5, #0]
 8110422:	2b00      	cmp	r3, #0
 8110424:	d0c5      	beq.n	81103b2 <__sflush_r+0x36>
 8110426:	2b1d      	cmp	r3, #29
 8110428:	d001      	beq.n	811042e <__sflush_r+0xb2>
 811042a:	2b16      	cmp	r3, #22
 811042c:	d101      	bne.n	8110432 <__sflush_r+0xb6>
 811042e:	602f      	str	r7, [r5, #0]
 8110430:	e7b1      	b.n	8110396 <__sflush_r+0x1a>
 8110432:	89a3      	ldrh	r3, [r4, #12]
 8110434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110438:	81a3      	strh	r3, [r4, #12]
 811043a:	e7ad      	b.n	8110398 <__sflush_r+0x1c>
 811043c:	690f      	ldr	r7, [r1, #16]
 811043e:	2f00      	cmp	r7, #0
 8110440:	d0a9      	beq.n	8110396 <__sflush_r+0x1a>
 8110442:	0793      	lsls	r3, r2, #30
 8110444:	680e      	ldr	r6, [r1, #0]
 8110446:	bf08      	it	eq
 8110448:	694b      	ldreq	r3, [r1, #20]
 811044a:	600f      	str	r7, [r1, #0]
 811044c:	bf18      	it	ne
 811044e:	2300      	movne	r3, #0
 8110450:	eba6 0807 	sub.w	r8, r6, r7
 8110454:	608b      	str	r3, [r1, #8]
 8110456:	f1b8 0f00 	cmp.w	r8, #0
 811045a:	dd9c      	ble.n	8110396 <__sflush_r+0x1a>
 811045c:	6a21      	ldr	r1, [r4, #32]
 811045e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8110460:	4643      	mov	r3, r8
 8110462:	463a      	mov	r2, r7
 8110464:	4628      	mov	r0, r5
 8110466:	47b0      	blx	r6
 8110468:	2800      	cmp	r0, #0
 811046a:	dc06      	bgt.n	811047a <__sflush_r+0xfe>
 811046c:	89a3      	ldrh	r3, [r4, #12]
 811046e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8110472:	81a3      	strh	r3, [r4, #12]
 8110474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110478:	e78e      	b.n	8110398 <__sflush_r+0x1c>
 811047a:	4407      	add	r7, r0
 811047c:	eba8 0800 	sub.w	r8, r8, r0
 8110480:	e7e9      	b.n	8110456 <__sflush_r+0xda>
 8110482:	bf00      	nop
 8110484:	dfbffffe 	.word	0xdfbffffe

08110488 <_fflush_r>:
 8110488:	b538      	push	{r3, r4, r5, lr}
 811048a:	690b      	ldr	r3, [r1, #16]
 811048c:	4605      	mov	r5, r0
 811048e:	460c      	mov	r4, r1
 8110490:	b913      	cbnz	r3, 8110498 <_fflush_r+0x10>
 8110492:	2500      	movs	r5, #0
 8110494:	4628      	mov	r0, r5
 8110496:	bd38      	pop	{r3, r4, r5, pc}
 8110498:	b118      	cbz	r0, 81104a2 <_fflush_r+0x1a>
 811049a:	6a03      	ldr	r3, [r0, #32]
 811049c:	b90b      	cbnz	r3, 81104a2 <_fflush_r+0x1a>
 811049e:	f7ff fe49 	bl	8110134 <__sinit>
 81104a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81104a6:	2b00      	cmp	r3, #0
 81104a8:	d0f3      	beq.n	8110492 <_fflush_r+0xa>
 81104aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81104ac:	07d0      	lsls	r0, r2, #31
 81104ae:	d404      	bmi.n	81104ba <_fflush_r+0x32>
 81104b0:	0599      	lsls	r1, r3, #22
 81104b2:	d402      	bmi.n	81104ba <_fflush_r+0x32>
 81104b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81104b6:	f7ff ff12 	bl	81102de <__retarget_lock_acquire_recursive>
 81104ba:	4628      	mov	r0, r5
 81104bc:	4621      	mov	r1, r4
 81104be:	f7ff ff5d 	bl	811037c <__sflush_r>
 81104c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81104c4:	07da      	lsls	r2, r3, #31
 81104c6:	4605      	mov	r5, r0
 81104c8:	d4e4      	bmi.n	8110494 <_fflush_r+0xc>
 81104ca:	89a3      	ldrh	r3, [r4, #12]
 81104cc:	059b      	lsls	r3, r3, #22
 81104ce:	d4e1      	bmi.n	8110494 <_fflush_r+0xc>
 81104d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81104d2:	f7ff ff05 	bl	81102e0 <__retarget_lock_release_recursive>
 81104d6:	e7dd      	b.n	8110494 <_fflush_r+0xc>

081104d8 <__sread>:
 81104d8:	b510      	push	{r4, lr}
 81104da:	460c      	mov	r4, r1
 81104dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81104e0:	f000 f978 	bl	81107d4 <_read_r>
 81104e4:	2800      	cmp	r0, #0
 81104e6:	bfab      	itete	ge
 81104e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81104ea:	89a3      	ldrhlt	r3, [r4, #12]
 81104ec:	181b      	addge	r3, r3, r0
 81104ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81104f2:	bfac      	ite	ge
 81104f4:	6563      	strge	r3, [r4, #84]	; 0x54
 81104f6:	81a3      	strhlt	r3, [r4, #12]
 81104f8:	bd10      	pop	{r4, pc}

081104fa <__swrite>:
 81104fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81104fe:	461f      	mov	r7, r3
 8110500:	898b      	ldrh	r3, [r1, #12]
 8110502:	05db      	lsls	r3, r3, #23
 8110504:	4605      	mov	r5, r0
 8110506:	460c      	mov	r4, r1
 8110508:	4616      	mov	r6, r2
 811050a:	d505      	bpl.n	8110518 <__swrite+0x1e>
 811050c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110510:	2302      	movs	r3, #2
 8110512:	2200      	movs	r2, #0
 8110514:	f000 f94c 	bl	81107b0 <_lseek_r>
 8110518:	89a3      	ldrh	r3, [r4, #12]
 811051a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811051e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8110522:	81a3      	strh	r3, [r4, #12]
 8110524:	4632      	mov	r2, r6
 8110526:	463b      	mov	r3, r7
 8110528:	4628      	mov	r0, r5
 811052a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811052e:	f000 b963 	b.w	81107f8 <_write_r>

08110532 <__sseek>:
 8110532:	b510      	push	{r4, lr}
 8110534:	460c      	mov	r4, r1
 8110536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811053a:	f000 f939 	bl	81107b0 <_lseek_r>
 811053e:	1c43      	adds	r3, r0, #1
 8110540:	89a3      	ldrh	r3, [r4, #12]
 8110542:	bf15      	itete	ne
 8110544:	6560      	strne	r0, [r4, #84]	; 0x54
 8110546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 811054a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 811054e:	81a3      	strheq	r3, [r4, #12]
 8110550:	bf18      	it	ne
 8110552:	81a3      	strhne	r3, [r4, #12]
 8110554:	bd10      	pop	{r4, pc}

08110556 <__sclose>:
 8110556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811055a:	f000 b8f7 	b.w	811074c <_close_r>

0811055e <__swbuf_r>:
 811055e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110560:	460e      	mov	r6, r1
 8110562:	4614      	mov	r4, r2
 8110564:	4605      	mov	r5, r0
 8110566:	b118      	cbz	r0, 8110570 <__swbuf_r+0x12>
 8110568:	6a03      	ldr	r3, [r0, #32]
 811056a:	b90b      	cbnz	r3, 8110570 <__swbuf_r+0x12>
 811056c:	f7ff fde2 	bl	8110134 <__sinit>
 8110570:	69a3      	ldr	r3, [r4, #24]
 8110572:	60a3      	str	r3, [r4, #8]
 8110574:	89a3      	ldrh	r3, [r4, #12]
 8110576:	071a      	lsls	r2, r3, #28
 8110578:	d525      	bpl.n	81105c6 <__swbuf_r+0x68>
 811057a:	6923      	ldr	r3, [r4, #16]
 811057c:	b31b      	cbz	r3, 81105c6 <__swbuf_r+0x68>
 811057e:	6823      	ldr	r3, [r4, #0]
 8110580:	6922      	ldr	r2, [r4, #16]
 8110582:	1a98      	subs	r0, r3, r2
 8110584:	6963      	ldr	r3, [r4, #20]
 8110586:	b2f6      	uxtb	r6, r6
 8110588:	4283      	cmp	r3, r0
 811058a:	4637      	mov	r7, r6
 811058c:	dc04      	bgt.n	8110598 <__swbuf_r+0x3a>
 811058e:	4621      	mov	r1, r4
 8110590:	4628      	mov	r0, r5
 8110592:	f7ff ff79 	bl	8110488 <_fflush_r>
 8110596:	b9e0      	cbnz	r0, 81105d2 <__swbuf_r+0x74>
 8110598:	68a3      	ldr	r3, [r4, #8]
 811059a:	3b01      	subs	r3, #1
 811059c:	60a3      	str	r3, [r4, #8]
 811059e:	6823      	ldr	r3, [r4, #0]
 81105a0:	1c5a      	adds	r2, r3, #1
 81105a2:	6022      	str	r2, [r4, #0]
 81105a4:	701e      	strb	r6, [r3, #0]
 81105a6:	6962      	ldr	r2, [r4, #20]
 81105a8:	1c43      	adds	r3, r0, #1
 81105aa:	429a      	cmp	r2, r3
 81105ac:	d004      	beq.n	81105b8 <__swbuf_r+0x5a>
 81105ae:	89a3      	ldrh	r3, [r4, #12]
 81105b0:	07db      	lsls	r3, r3, #31
 81105b2:	d506      	bpl.n	81105c2 <__swbuf_r+0x64>
 81105b4:	2e0a      	cmp	r6, #10
 81105b6:	d104      	bne.n	81105c2 <__swbuf_r+0x64>
 81105b8:	4621      	mov	r1, r4
 81105ba:	4628      	mov	r0, r5
 81105bc:	f7ff ff64 	bl	8110488 <_fflush_r>
 81105c0:	b938      	cbnz	r0, 81105d2 <__swbuf_r+0x74>
 81105c2:	4638      	mov	r0, r7
 81105c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81105c6:	4621      	mov	r1, r4
 81105c8:	4628      	mov	r0, r5
 81105ca:	f000 f805 	bl	81105d8 <__swsetup_r>
 81105ce:	2800      	cmp	r0, #0
 81105d0:	d0d5      	beq.n	811057e <__swbuf_r+0x20>
 81105d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 81105d6:	e7f4      	b.n	81105c2 <__swbuf_r+0x64>

081105d8 <__swsetup_r>:
 81105d8:	b538      	push	{r3, r4, r5, lr}
 81105da:	4b2a      	ldr	r3, [pc, #168]	; (8110684 <__swsetup_r+0xac>)
 81105dc:	4605      	mov	r5, r0
 81105de:	6818      	ldr	r0, [r3, #0]
 81105e0:	460c      	mov	r4, r1
 81105e2:	b118      	cbz	r0, 81105ec <__swsetup_r+0x14>
 81105e4:	6a03      	ldr	r3, [r0, #32]
 81105e6:	b90b      	cbnz	r3, 81105ec <__swsetup_r+0x14>
 81105e8:	f7ff fda4 	bl	8110134 <__sinit>
 81105ec:	89a3      	ldrh	r3, [r4, #12]
 81105ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81105f2:	0718      	lsls	r0, r3, #28
 81105f4:	d422      	bmi.n	811063c <__swsetup_r+0x64>
 81105f6:	06d9      	lsls	r1, r3, #27
 81105f8:	d407      	bmi.n	811060a <__swsetup_r+0x32>
 81105fa:	2309      	movs	r3, #9
 81105fc:	602b      	str	r3, [r5, #0]
 81105fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8110602:	81a3      	strh	r3, [r4, #12]
 8110604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8110608:	e034      	b.n	8110674 <__swsetup_r+0x9c>
 811060a:	0758      	lsls	r0, r3, #29
 811060c:	d512      	bpl.n	8110634 <__swsetup_r+0x5c>
 811060e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8110610:	b141      	cbz	r1, 8110624 <__swsetup_r+0x4c>
 8110612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8110616:	4299      	cmp	r1, r3
 8110618:	d002      	beq.n	8110620 <__swsetup_r+0x48>
 811061a:	4628      	mov	r0, r5
 811061c:	f7ff fe62 	bl	81102e4 <_free_r>
 8110620:	2300      	movs	r3, #0
 8110622:	6363      	str	r3, [r4, #52]	; 0x34
 8110624:	89a3      	ldrh	r3, [r4, #12]
 8110626:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 811062a:	81a3      	strh	r3, [r4, #12]
 811062c:	2300      	movs	r3, #0
 811062e:	6063      	str	r3, [r4, #4]
 8110630:	6923      	ldr	r3, [r4, #16]
 8110632:	6023      	str	r3, [r4, #0]
 8110634:	89a3      	ldrh	r3, [r4, #12]
 8110636:	f043 0308 	orr.w	r3, r3, #8
 811063a:	81a3      	strh	r3, [r4, #12]
 811063c:	6923      	ldr	r3, [r4, #16]
 811063e:	b94b      	cbnz	r3, 8110654 <__swsetup_r+0x7c>
 8110640:	89a3      	ldrh	r3, [r4, #12]
 8110642:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8110646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 811064a:	d003      	beq.n	8110654 <__swsetup_r+0x7c>
 811064c:	4621      	mov	r1, r4
 811064e:	4628      	mov	r0, r5
 8110650:	f000 f840 	bl	81106d4 <__smakebuf_r>
 8110654:	89a0      	ldrh	r0, [r4, #12]
 8110656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 811065a:	f010 0301 	ands.w	r3, r0, #1
 811065e:	d00a      	beq.n	8110676 <__swsetup_r+0x9e>
 8110660:	2300      	movs	r3, #0
 8110662:	60a3      	str	r3, [r4, #8]
 8110664:	6963      	ldr	r3, [r4, #20]
 8110666:	425b      	negs	r3, r3
 8110668:	61a3      	str	r3, [r4, #24]
 811066a:	6923      	ldr	r3, [r4, #16]
 811066c:	b943      	cbnz	r3, 8110680 <__swsetup_r+0xa8>
 811066e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8110672:	d1c4      	bne.n	81105fe <__swsetup_r+0x26>
 8110674:	bd38      	pop	{r3, r4, r5, pc}
 8110676:	0781      	lsls	r1, r0, #30
 8110678:	bf58      	it	pl
 811067a:	6963      	ldrpl	r3, [r4, #20]
 811067c:	60a3      	str	r3, [r4, #8]
 811067e:	e7f4      	b.n	811066a <__swsetup_r+0x92>
 8110680:	2000      	movs	r0, #0
 8110682:	e7f7      	b.n	8110674 <__swsetup_r+0x9c>
 8110684:	100073d8 	.word	0x100073d8

08110688 <__swhatbuf_r>:
 8110688:	b570      	push	{r4, r5, r6, lr}
 811068a:	460c      	mov	r4, r1
 811068c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110690:	2900      	cmp	r1, #0
 8110692:	b096      	sub	sp, #88	; 0x58
 8110694:	4615      	mov	r5, r2
 8110696:	461e      	mov	r6, r3
 8110698:	da0d      	bge.n	81106b6 <__swhatbuf_r+0x2e>
 811069a:	89a3      	ldrh	r3, [r4, #12]
 811069c:	f013 0f80 	tst.w	r3, #128	; 0x80
 81106a0:	f04f 0100 	mov.w	r1, #0
 81106a4:	bf0c      	ite	eq
 81106a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 81106aa:	2340      	movne	r3, #64	; 0x40
 81106ac:	2000      	movs	r0, #0
 81106ae:	6031      	str	r1, [r6, #0]
 81106b0:	602b      	str	r3, [r5, #0]
 81106b2:	b016      	add	sp, #88	; 0x58
 81106b4:	bd70      	pop	{r4, r5, r6, pc}
 81106b6:	466a      	mov	r2, sp
 81106b8:	f000 f858 	bl	811076c <_fstat_r>
 81106bc:	2800      	cmp	r0, #0
 81106be:	dbec      	blt.n	811069a <__swhatbuf_r+0x12>
 81106c0:	9901      	ldr	r1, [sp, #4]
 81106c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 81106c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 81106ca:	4259      	negs	r1, r3
 81106cc:	4159      	adcs	r1, r3
 81106ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81106d2:	e7eb      	b.n	81106ac <__swhatbuf_r+0x24>

081106d4 <__smakebuf_r>:
 81106d4:	898b      	ldrh	r3, [r1, #12]
 81106d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81106d8:	079d      	lsls	r5, r3, #30
 81106da:	4606      	mov	r6, r0
 81106dc:	460c      	mov	r4, r1
 81106de:	d507      	bpl.n	81106f0 <__smakebuf_r+0x1c>
 81106e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81106e4:	6023      	str	r3, [r4, #0]
 81106e6:	6123      	str	r3, [r4, #16]
 81106e8:	2301      	movs	r3, #1
 81106ea:	6163      	str	r3, [r4, #20]
 81106ec:	b002      	add	sp, #8
 81106ee:	bd70      	pop	{r4, r5, r6, pc}
 81106f0:	ab01      	add	r3, sp, #4
 81106f2:	466a      	mov	r2, sp
 81106f4:	f7ff ffc8 	bl	8110688 <__swhatbuf_r>
 81106f8:	9900      	ldr	r1, [sp, #0]
 81106fa:	4605      	mov	r5, r0
 81106fc:	4630      	mov	r0, r6
 81106fe:	f7ff fc01 	bl	810ff04 <_malloc_r>
 8110702:	b948      	cbnz	r0, 8110718 <__smakebuf_r+0x44>
 8110704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110708:	059a      	lsls	r2, r3, #22
 811070a:	d4ef      	bmi.n	81106ec <__smakebuf_r+0x18>
 811070c:	f023 0303 	bic.w	r3, r3, #3
 8110710:	f043 0302 	orr.w	r3, r3, #2
 8110714:	81a3      	strh	r3, [r4, #12]
 8110716:	e7e3      	b.n	81106e0 <__smakebuf_r+0xc>
 8110718:	89a3      	ldrh	r3, [r4, #12]
 811071a:	6020      	str	r0, [r4, #0]
 811071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8110720:	81a3      	strh	r3, [r4, #12]
 8110722:	9b00      	ldr	r3, [sp, #0]
 8110724:	6163      	str	r3, [r4, #20]
 8110726:	9b01      	ldr	r3, [sp, #4]
 8110728:	6120      	str	r0, [r4, #16]
 811072a:	b15b      	cbz	r3, 8110744 <__smakebuf_r+0x70>
 811072c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8110730:	4630      	mov	r0, r6
 8110732:	f000 f82d 	bl	8110790 <_isatty_r>
 8110736:	b128      	cbz	r0, 8110744 <__smakebuf_r+0x70>
 8110738:	89a3      	ldrh	r3, [r4, #12]
 811073a:	f023 0303 	bic.w	r3, r3, #3
 811073e:	f043 0301 	orr.w	r3, r3, #1
 8110742:	81a3      	strh	r3, [r4, #12]
 8110744:	89a3      	ldrh	r3, [r4, #12]
 8110746:	431d      	orrs	r5, r3
 8110748:	81a5      	strh	r5, [r4, #12]
 811074a:	e7cf      	b.n	81106ec <__smakebuf_r+0x18>

0811074c <_close_r>:
 811074c:	b538      	push	{r3, r4, r5, lr}
 811074e:	4d06      	ldr	r5, [pc, #24]	; (8110768 <_close_r+0x1c>)
 8110750:	2300      	movs	r3, #0
 8110752:	4604      	mov	r4, r0
 8110754:	4608      	mov	r0, r1
 8110756:	602b      	str	r3, [r5, #0]
 8110758:	f7f0 fe3d 	bl	81013d6 <_close>
 811075c:	1c43      	adds	r3, r0, #1
 811075e:	d102      	bne.n	8110766 <_close_r+0x1a>
 8110760:	682b      	ldr	r3, [r5, #0]
 8110762:	b103      	cbz	r3, 8110766 <_close_r+0x1a>
 8110764:	6023      	str	r3, [r4, #0]
 8110766:	bd38      	pop	{r3, r4, r5, pc}
 8110768:	10040020 	.word	0x10040020

0811076c <_fstat_r>:
 811076c:	b538      	push	{r3, r4, r5, lr}
 811076e:	4d07      	ldr	r5, [pc, #28]	; (811078c <_fstat_r+0x20>)
 8110770:	2300      	movs	r3, #0
 8110772:	4604      	mov	r4, r0
 8110774:	4608      	mov	r0, r1
 8110776:	4611      	mov	r1, r2
 8110778:	602b      	str	r3, [r5, #0]
 811077a:	f7f0 fe38 	bl	81013ee <_fstat>
 811077e:	1c43      	adds	r3, r0, #1
 8110780:	d102      	bne.n	8110788 <_fstat_r+0x1c>
 8110782:	682b      	ldr	r3, [r5, #0]
 8110784:	b103      	cbz	r3, 8110788 <_fstat_r+0x1c>
 8110786:	6023      	str	r3, [r4, #0]
 8110788:	bd38      	pop	{r3, r4, r5, pc}
 811078a:	bf00      	nop
 811078c:	10040020 	.word	0x10040020

08110790 <_isatty_r>:
 8110790:	b538      	push	{r3, r4, r5, lr}
 8110792:	4d06      	ldr	r5, [pc, #24]	; (81107ac <_isatty_r+0x1c>)
 8110794:	2300      	movs	r3, #0
 8110796:	4604      	mov	r4, r0
 8110798:	4608      	mov	r0, r1
 811079a:	602b      	str	r3, [r5, #0]
 811079c:	f7f0 fe37 	bl	810140e <_isatty>
 81107a0:	1c43      	adds	r3, r0, #1
 81107a2:	d102      	bne.n	81107aa <_isatty_r+0x1a>
 81107a4:	682b      	ldr	r3, [r5, #0]
 81107a6:	b103      	cbz	r3, 81107aa <_isatty_r+0x1a>
 81107a8:	6023      	str	r3, [r4, #0]
 81107aa:	bd38      	pop	{r3, r4, r5, pc}
 81107ac:	10040020 	.word	0x10040020

081107b0 <_lseek_r>:
 81107b0:	b538      	push	{r3, r4, r5, lr}
 81107b2:	4d07      	ldr	r5, [pc, #28]	; (81107d0 <_lseek_r+0x20>)
 81107b4:	4604      	mov	r4, r0
 81107b6:	4608      	mov	r0, r1
 81107b8:	4611      	mov	r1, r2
 81107ba:	2200      	movs	r2, #0
 81107bc:	602a      	str	r2, [r5, #0]
 81107be:	461a      	mov	r2, r3
 81107c0:	f7f0 fe30 	bl	8101424 <_lseek>
 81107c4:	1c43      	adds	r3, r0, #1
 81107c6:	d102      	bne.n	81107ce <_lseek_r+0x1e>
 81107c8:	682b      	ldr	r3, [r5, #0]
 81107ca:	b103      	cbz	r3, 81107ce <_lseek_r+0x1e>
 81107cc:	6023      	str	r3, [r4, #0]
 81107ce:	bd38      	pop	{r3, r4, r5, pc}
 81107d0:	10040020 	.word	0x10040020

081107d4 <_read_r>:
 81107d4:	b538      	push	{r3, r4, r5, lr}
 81107d6:	4d07      	ldr	r5, [pc, #28]	; (81107f4 <_read_r+0x20>)
 81107d8:	4604      	mov	r4, r0
 81107da:	4608      	mov	r0, r1
 81107dc:	4611      	mov	r1, r2
 81107de:	2200      	movs	r2, #0
 81107e0:	602a      	str	r2, [r5, #0]
 81107e2:	461a      	mov	r2, r3
 81107e4:	f7f0 fdbe 	bl	8101364 <_read>
 81107e8:	1c43      	adds	r3, r0, #1
 81107ea:	d102      	bne.n	81107f2 <_read_r+0x1e>
 81107ec:	682b      	ldr	r3, [r5, #0]
 81107ee:	b103      	cbz	r3, 81107f2 <_read_r+0x1e>
 81107f0:	6023      	str	r3, [r4, #0]
 81107f2:	bd38      	pop	{r3, r4, r5, pc}
 81107f4:	10040020 	.word	0x10040020

081107f8 <_write_r>:
 81107f8:	b538      	push	{r3, r4, r5, lr}
 81107fa:	4d07      	ldr	r5, [pc, #28]	; (8110818 <_write_r+0x20>)
 81107fc:	4604      	mov	r4, r0
 81107fe:	4608      	mov	r0, r1
 8110800:	4611      	mov	r1, r2
 8110802:	2200      	movs	r2, #0
 8110804:	602a      	str	r2, [r5, #0]
 8110806:	461a      	mov	r2, r3
 8110808:	f7f0 fdc9 	bl	810139e <_write>
 811080c:	1c43      	adds	r3, r0, #1
 811080e:	d102      	bne.n	8110816 <_write_r+0x1e>
 8110810:	682b      	ldr	r3, [r5, #0]
 8110812:	b103      	cbz	r3, 8110816 <_write_r+0x1e>
 8110814:	6023      	str	r3, [r4, #0]
 8110816:	bd38      	pop	{r3, r4, r5, pc}
 8110818:	10040020 	.word	0x10040020

0811081c <_init>:
 811081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811081e:	bf00      	nop
 8110820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8110822:	bc08      	pop	{r3}
 8110824:	469e      	mov	lr, r3
 8110826:	4770      	bx	lr

08110828 <_fini>:
 8110828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811082a:	bf00      	nop
 811082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811082e:	bc08      	pop	{r3}
 8110830:	469e      	mov	lr, r3
 8110832:	4770      	bx	lr
